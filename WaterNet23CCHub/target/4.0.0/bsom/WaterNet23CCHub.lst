
c:/Users/mligh/OneDrive/Particle/WaterNet23/WaterNet23CCHub/target/4.0.0/bsom/WaterNet23CCHub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000d610  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000c1630  000c1630  00011630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000c1654  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e0  2003da98  000c1658  0002da98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000b78  2003dc78  2003dc78  0003dc78  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000c1838  000c1838  00031838  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000c1860  000c1860  00031860  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001bd4e9  00000000  00000000  00031864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001dd5b  00000000  00000000  001eed4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000560e4  00000000  00000000  0020caa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003ab8  00000000  00000000  00262b8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000da78  00000000  00000000  00266644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004be31  00000000  00000000  002740bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00069eb9  00000000  00000000  002bfeed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014897c  00000000  00000000  00329da6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000bb30  00000000  00000000  00472724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
   b4026:	b508      	push	{r3, lr}
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f009 fc9a 	bl	bd96a <memcpy>
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f009 fcbc 	bl	bd9ba <memset>
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003da98 	.word	0x2003da98
   b404c:	000c1658 	.word	0x000c1658
   b4050:	2003dc78 	.word	0x2003dc78
   b4054:	2003dc78 	.word	0x2003dc78
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
   b405c:	b570      	push	{r4, r5, r6, lr}
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
   b4062:	f007 ff0b 	bl	bbe7c <module_user_init_hook>
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
   b4070:	bd70      	pop	{r4, r5, r6, pc}
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000c1604 	.word	0x000c1604
   b4080:	000c1628 	.word	0x000c1628

000b4084 <module_user_setup>:
   b4084:	f001 bbc4 	b.w	b5810 <setup>

000b4088 <module_user_loop>:
   b4088:	b508      	push	{r3, lr}
   b408a:	f001 fd5f 	bl	b5b4c <loop>
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   b4092:	f007 beab 	b.w	bbdec <_post_loop>

000b4096 <_Znwj>:
   b4096:	f004 bf3f 	b.w	b8f18 <malloc>

000b409a <_Znaj>:
   b409a:	f004 bf3d 	b.w	b8f18 <malloc>

000b409e <_ZdlPvj>:
   b409e:	f004 bf43 	b.w	b8f28 <free>
	...

000b40a4 <__cxa_pure_virtual>:
   b40a4:	b508      	push	{r3, lr}
   b40a6:	4a03      	ldr	r2, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x10>)
   b40a8:	4903      	ldr	r1, [pc, #12]	; (b40b8 <__cxa_pure_virtual+0x14>)
   b40aa:	200c      	movs	r0, #12
   b40ac:	f004 fe50 	bl	b8d50 <panic_>
   b40b0:	e7fe      	b.n	b40b0 <__cxa_pure_virtual+0xc>
   b40b2:	bf00      	nop
   b40b4:	000b8889 	.word	0x000b8889
   b40b8:	000bfa78 	.word	0x000bfa78

000b40bc <__cxa_guard_acquire>:
   b40bc:	7800      	ldrb	r0, [r0, #0]
   b40be:	fab0 f080 	clz	r0, r0
   b40c2:	0940      	lsrs	r0, r0, #5
   b40c4:	4770      	bx	lr

000b40c6 <__cxa_guard_release>:
   b40c6:	2301      	movs	r3, #1
   b40c8:	7003      	strb	r3, [r0, #0]
   b40ca:	4770      	bx	lr

000b40cc <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b40cc:	4770      	bx	lr

000b40ce <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   b40ce:	7c03      	ldrb	r3, [r0, #16]
   b40d0:	f013 0308 	ands.w	r3, r3, #8
   b40d4:	bf1e      	ittt	ne
   b40d6:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   b40d8:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   b40da:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   b40dc:	2b00      	cmp	r3, #0
  }
   b40de:	bfac      	ite	ge
   b40e0:	4618      	movge	r0, r3
   b40e2:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   b40e6:	4770      	bx	lr

000b40e8 <_Z12actionTimer5v>:
        Serial1.println(outStr);
    }
}

void actionTimer5(){
    postStatus = true;
   b40e8:	4b01      	ldr	r3, [pc, #4]	; (b40f0 <_Z12actionTimer5v+0x8>)
   b40ea:	2201      	movs	r2, #1
   b40ec:	701a      	strb	r2, [r3, #0]
    for(WaterBot w: WaterBots){
        w.timeoutCount++;
    }
    //if(!BLE.connected)
}
   b40ee:	4770      	bx	lr
   b40f0:	2003dedc 	.word	0x2003dedc

000b40f4 <_Z8uHandlerv>:
            redrawMenu = true;   
        }
    }
}
void uHandler(){
    if(menuItem) menuItem--;
   b40f4:	4a02      	ldr	r2, [pc, #8]	; (b4100 <_Z8uHandlerv+0xc>)
   b40f6:	7813      	ldrb	r3, [r2, #0]
   b40f8:	b10b      	cbz	r3, b40fe <_Z8uHandlerv+0xa>
   b40fa:	3b01      	subs	r3, #1
   b40fc:	7013      	strb	r3, [r2, #0]
}
   b40fe:	4770      	bx	lr
   b4100:	2003ddf5 	.word	0x2003ddf5

000b4104 <_Z8dHandlerv>:
void dHandler(){
    if(menuItem < MAX_MENU_ITEMS) menuItem++;
   b4104:	4a03      	ldr	r2, [pc, #12]	; (b4114 <_Z8dHandlerv+0x10>)
   b4106:	7813      	ldrb	r3, [r2, #0]
   b4108:	2b01      	cmp	r3, #1
   b410a:	bf9c      	itt	ls
   b410c:	3301      	addls	r3, #1
   b410e:	7013      	strbls	r3, [r2, #0]
}
   b4110:	4770      	bx	lr
   b4112:	bf00      	nop
   b4114:	2003ddf5 	.word	0x2003ddf5

000b4118 <_Z8jHandlerv>:
void jHandler(){
    
   b4118:	4770      	bx	lr

000b411a <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   b411a:	4770      	bx	lr

000b411c <_Z8lHandlerv>:
void lHandler(){
   b411c:	b538      	push	{r3, r4, r5, lr}
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b411e:	4d13      	ldr	r5, [pc, #76]	; (b416c <_Z8lHandlerv+0x50>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4120:	f004 fbc2 	bl	b88a8 <HAL_Timer_Get_Milli_Seconds>
   b4124:	682b      	ldr	r3, [r5, #0]
   b4126:	1ac0      	subs	r0, r0, r3
   b4128:	281d      	cmp	r0, #29
void lHandler(){
   b412a:	f04f 0400 	mov.w	r4, #0
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b412e:	d91b      	bls.n	b4168 <_Z8lHandlerv+0x4c>
   b4130:	f004 fbba 	bl	b88a8 <HAL_Timer_Get_Milli_Seconds>
    if(selectingBots){
   b4134:	4b0e      	ldr	r3, [pc, #56]	; (b4170 <_Z8lHandlerv+0x54>)
    debounceTime = millis();
   b4136:	6028      	str	r0, [r5, #0]
    if(selectingBots){
   b4138:	781b      	ldrb	r3, [r3, #0]
   b413a:	b1ab      	cbz	r3, b4168 <_Z8lHandlerv+0x4c>
      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
      : _M_current(__i) { }
   b413c:	4a0d      	ldr	r2, [pc, #52]	; (b4174 <_Z8lHandlerv+0x58>)
        if(botSelect != WaterBots.front().botNum){
   b413e:	490e      	ldr	r1, [pc, #56]	; (b4178 <_Z8lHandlerv+0x5c>)
   b4140:	6813      	ldr	r3, [r2, #0]
   b4142:	7808      	ldrb	r0, [r1, #0]
   b4144:	781d      	ldrb	r5, [r3, #0]
   b4146:	4285      	cmp	r5, r0
   b4148:	d00e      	beq.n	b4168 <_Z8lHandlerv+0x4c>
   b414a:	6850      	ldr	r0, [r2, #4]
            for(WaterBot ws: WaterBots){
   b414c:	4298      	cmp	r0, r3
   b414e:	d008      	beq.n	b4162 <_Z8lHandlerv+0x46>
   b4150:	781a      	ldrb	r2, [r3, #0]
                if(ws.botNum == botSelect) botSelect = newBotNum;
   b4152:	780d      	ldrb	r5, [r1, #0]
   b4154:	4295      	cmp	r5, r2
   b4156:	bf04      	itt	eq
   b4158:	4622      	moveq	r2, r4
   b415a:	700c      	strbeq	r4, [r1, #0]
   b415c:	3318      	adds	r3, #24
      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
      {
	++_M_current;
	return *this;
   b415e:	4614      	mov	r4, r2
   b4160:	e7f4      	b.n	b414c <_Z8lHandlerv+0x30>
            redrawMenu = true;   
   b4162:	4b06      	ldr	r3, [pc, #24]	; (b417c <_Z8lHandlerv+0x60>)
   b4164:	2201      	movs	r2, #1
   b4166:	701a      	strb	r2, [r3, #0]
}
   b4168:	bd38      	pop	{r3, r4, r5, pc}
   b416a:	bf00      	nop
   b416c:	2003dd50 	.word	0x2003dd50
   b4170:	2003da99 	.word	0x2003da99
   b4174:	2003dcb4 	.word	0x2003dcb4
   b4178:	2003dd4d 	.word	0x2003dd4d
   b417c:	2003da98 	.word	0x2003da98

000b4180 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b4180:	b510      	push	{r4, lr}
  }
   b4182:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b4184:	4604      	mov	r4, r0
  }
   b4186:	f7ff ff8a 	bl	b409e <_ZdlPvj>
   b418a:	4620      	mov	r0, r4
   b418c:	bd10      	pop	{r4, pc}

000b418e <_ZN4FileD0Ev>:
   b418e:	b510      	push	{r4, lr}
   b4190:	2134      	movs	r1, #52	; 0x34
   b4192:	4604      	mov	r4, r0
   b4194:	f7ff ff83 	bl	b409e <_ZdlPvj>
   b4198:	4620      	mov	r0, r4
   b419a:	bd10      	pop	{r4, pc}

000b419c <_ZN4File5flushEv>:
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   b419c:	3010      	adds	r0, #16
   b419e:	f003 b8c9 	b.w	b7334 <_ZN7FatFile4syncEv>

000b41a2 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   b41a2:	3010      	adds	r0, #16
   b41a4:	f002 bfe7 	b.w	b7176 <_ZN7FatFile4peekEv>

000b41a8 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   b41a8:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   b41aa:	2201      	movs	r2, #1
   b41ac:	f10d 0107 	add.w	r1, sp, #7
   b41b0:	3010      	adds	r0, #16
   b41b2:	f002 ff32 	bl	b701a <_ZN7FatFile4readEPvj>
   b41b6:	2801      	cmp	r0, #1
   b41b8:	bf0c      	ite	eq
   b41ba:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b41be:	f04f 30ff 	movne.w	r0, #4294967295
    return FatFile::read();
  }
   b41c2:	b003      	add	sp, #12
   b41c4:	f85d fb04 	ldr.w	pc, [sp], #4

000b41c8 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   b41c8:	3010      	adds	r0, #16
   b41ca:	f003 b94d 	b.w	b7468 <_ZN7FatFile5writeEPKvj>

000b41ce <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   b41ce:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   b41d0:	2201      	movs	r2, #1
   b41d2:	f88d 1007 	strb.w	r1, [sp, #7]
   b41d6:	3010      	adds	r0, #16
   b41d8:	f10d 0107 	add.w	r1, sp, #7
   b41dc:	f003 f944 	bl	b7468 <_ZN7FatFile5writeEPKvj>
  }
   b41e0:	b003      	add	sp, #12
   b41e2:	f85d fb04 	ldr.w	pc, [sp], #4

000b41e6 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b41e6:	6943      	ldr	r3, [r0, #20]
   b41e8:	b113      	cbz	r3, b41f0 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b41ea:	6983      	ldr	r3, [r0, #24]
   b41ec:	300c      	adds	r0, #12
   b41ee:	4718      	bx	r3
            callback();
        }
    }
   b41f0:	4770      	bx	lr

000b41f2 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b41f2:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b41f4:	2100      	movs	r1, #0
   b41f6:	4604      	mov	r4, r0
   b41f8:	4608      	mov	r0, r1
   b41fa:	f004 fc21 	bl	b8a40 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b41fe:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b4200:	4620      	mov	r0, r4
   b4202:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b4204:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b4206:	f004 fc33 	bl	b8a70 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b420a:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b420c:	b10c      	cbz	r4, b4212 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b420e:	2301      	movs	r3, #1
   b4210:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b4212:	2100      	movs	r1, #0
   b4214:	2001      	movs	r0, #1
   b4216:	f004 fc13 	bl	b8a40 <os_thread_scheduling>
            }
        }
        if (t) {
   b421a:	b12c      	cbz	r4, b4228 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b421c:	6823      	ldr	r3, [r4, #0]
   b421e:	4620      	mov	r0, r4
   b4220:	689b      	ldr	r3, [r3, #8]
   b4222:	4798      	blx	r3
            t->running = false;
   b4224:	2300      	movs	r3, #0
   b4226:	7123      	strb	r3, [r4, #4]
        }
    }
   b4228:	b002      	add	sp, #8
   b422a:	bd10      	pop	{r4, pc}

000b422c <_Z10entHandlerv>:
void entHandler(){
   b422c:	b510      	push	{r4, lr}
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b422e:	4c05      	ldr	r4, [pc, #20]	; (b4244 <_Z10entHandlerv+0x18>)
   b4230:	f004 fb3a 	bl	b88a8 <HAL_Timer_Get_Milli_Seconds>
   b4234:	6823      	ldr	r3, [r4, #0]
   b4236:	1ac0      	subs	r0, r0, r3
   b4238:	281d      	cmp	r0, #29
   b423a:	d902      	bls.n	b4242 <_Z10entHandlerv+0x16>
   b423c:	f004 fb34 	bl	b88a8 <HAL_Timer_Get_Milli_Seconds>
    debounceTime = millis();
   b4240:	6020      	str	r0, [r4, #0]
}
   b4242:	bd10      	pop	{r4, pc}
   b4244:	2003dd50 	.word	0x2003dd50

000b4248 <_Z13actionTimer60v>:
      : _M_current(__i) { }
   b4248:	4b0b      	ldr	r3, [pc, #44]	; (b4278 <_Z13actionTimer60v+0x30>)
   b424a:	e9d3 3000 	ldrd	r3, r0, [r3]
    bool reqLTEStatus = false;
   b424e:	2200      	movs	r2, #0
    for(WaterBot w: WaterBots){
   b4250:	4283      	cmp	r3, r0
   b4252:	d005      	beq.n	b4260 <_Z13actionTimer60v+0x18>
        if(w.timeoutCount > XBEE_BLE_MAX_TIMEOUT){
   b4254:	6959      	ldr	r1, [r3, #20]
            reqLTEStatus = true;
   b4256:	2925      	cmp	r1, #37	; 0x25
   b4258:	bf28      	it	cs
   b425a:	2201      	movcs	r2, #1
      operator++() _GLIBCXX_NOEXCEPT
   b425c:	3318      	adds	r3, #24
	return *this;
   b425e:	e7f7      	b.n	b4250 <_Z13actionTimer60v+0x8>
    if(reqLTEStatus && LTEStatuses < MAX_LTE_STATUSES){
   b4260:	b142      	cbz	r2, b4274 <_Z13actionTimer60v+0x2c>
   b4262:	4a06      	ldr	r2, [pc, #24]	; (b427c <_Z13actionTimer60v+0x34>)
   b4264:	7813      	ldrb	r3, [r2, #0]
   b4266:	2b18      	cmp	r3, #24
   b4268:	d804      	bhi.n	b4274 <_Z13actionTimer60v+0x2c>
        LTEStatuses++;
   b426a:	3301      	adds	r3, #1
   b426c:	7013      	strb	r3, [r2, #0]
        statusTimeout = true;
   b426e:	4b04      	ldr	r3, [pc, #16]	; (b4280 <_Z13actionTimer60v+0x38>)
   b4270:	2201      	movs	r2, #1
   b4272:	701a      	strb	r2, [r3, #0]
}
   b4274:	4770      	bx	lr
   b4276:	bf00      	nop
   b4278:	2003dcb4 	.word	0x2003dcb4
   b427c:	2003dc98 	.word	0x2003dc98
   b4280:	2003e635 	.word	0x2003e635

000b4284 <_Z8rHandlerv>:
void rHandler(){
   b4284:	b538      	push	{r3, r4, r5, lr}
    if(millis()-debounceTime < DEBOUNCE_MS) return;
   b4286:	4c15      	ldr	r4, [pc, #84]	; (b42dc <_Z8rHandlerv+0x58>)
   b4288:	f004 fb0e 	bl	b88a8 <HAL_Timer_Get_Milli_Seconds>
   b428c:	6823      	ldr	r3, [r4, #0]
   b428e:	1ac0      	subs	r0, r0, r3
   b4290:	281d      	cmp	r0, #29
   b4292:	d91d      	bls.n	b42d0 <_Z8rHandlerv+0x4c>
   b4294:	f004 fb08 	bl	b88a8 <HAL_Timer_Get_Milli_Seconds>
    debounceTime = millis();
   b4298:	6020      	str	r0, [r4, #0]
    Serial.println("Right trigger");
   b429a:	f008 f98f 	bl	bc5bc <_Z16_fetch_usbserialv>
   b429e:	4910      	ldr	r1, [pc, #64]	; (b42e0 <_Z8rHandlerv+0x5c>)
   b42a0:	f007 fc1f 	bl	bbae2 <_ZN5Print7printlnEPKc>
    if(selectingBots){
   b42a4:	4b0f      	ldr	r3, [pc, #60]	; (b42e4 <_Z8rHandlerv+0x60>)
   b42a6:	781b      	ldrb	r3, [r3, #0]
   b42a8:	b193      	cbz	r3, b42d0 <_Z8rHandlerv+0x4c>
      : _M_current(__i) { }
   b42aa:	4b0f      	ldr	r3, [pc, #60]	; (b42e8 <_Z8rHandlerv+0x64>)
        if(botSelect != WaterBots.back().botNum){
   b42ac:	4d0f      	ldr	r5, [pc, #60]	; (b42ec <_Z8rHandlerv+0x68>)
   b42ae:	685c      	ldr	r4, [r3, #4]
   b42b0:	7828      	ldrb	r0, [r5, #0]
   b42b2:	f814 2c18 	ldrb.w	r2, [r4, #-24]
   b42b6:	4282      	cmp	r2, r0
   b42b8:	d00a      	beq.n	b42d0 <_Z8rHandlerv+0x4c>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b42ba:	681b      	ldr	r3, [r3, #0]
            bool findCurrent = false;
   b42bc:	2200      	movs	r2, #0
            for(WaterBot ws: WaterBots){
   b42be:	429c      	cmp	r4, r3
   b42c0:	d003      	beq.n	b42ca <_Z8rHandlerv+0x46>
   b42c2:	f813 1b18 	ldrb.w	r1, [r3], #24
                if(findCurrent){
   b42c6:	b122      	cbz	r2, b42d2 <_Z8rHandlerv+0x4e>
                    botSelect = ws.botNum;
   b42c8:	7029      	strb	r1, [r5, #0]
            redrawMenu = true;   
   b42ca:	4b09      	ldr	r3, [pc, #36]	; (b42f0 <_Z8rHandlerv+0x6c>)
   b42cc:	2201      	movs	r2, #1
   b42ce:	701a      	strb	r2, [r3, #0]
}
   b42d0:	bd38      	pop	{r3, r4, r5, pc}
                if(ws.botNum == botSelect) findCurrent = true;
   b42d2:	1a41      	subs	r1, r0, r1
   b42d4:	424a      	negs	r2, r1
   b42d6:	414a      	adcs	r2, r1
	return *this;
   b42d8:	e7f1      	b.n	b42be <_Z8rHandlerv+0x3a>
   b42da:	bf00      	nop
   b42dc:	2003dd50 	.word	0x2003dd50
   b42e0:	000bfa8d 	.word	0x000bfa8d
   b42e4:	2003da99 	.word	0x2003da99
   b42e8:	2003dcb4 	.word	0x2003dcb4
   b42ec:	2003dd4d 	.word	0x2003dd4d
   b42f0:	2003da98 	.word	0x2003da98

000b42f4 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b42f4:	2a01      	cmp	r2, #1
   b42f6:	d102      	bne.n	b42fe <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b42f8:	6001      	str	r1, [r0, #0]
      }
   b42fa:	2000      	movs	r0, #0
   b42fc:	4770      	bx	lr
	  switch (__op)
   b42fe:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b4300:	bf04      	itt	eq
   b4302:	680b      	ldreq	r3, [r1, #0]
   b4304:	6003      	streq	r3, [r0, #0]
	      break;
   b4306:	e7f8      	b.n	b42fa <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b4308 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4308:	6803      	ldr	r3, [r0, #0]
   b430a:	4718      	bx	r3

000b430c <_ZN5Timer5startEj.isra.0>:
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b430c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b430e:	4604      	mov	r4, r0
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4310:	6880      	ldr	r0, [r0, #8]
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b4312:	460d      	mov	r5, r1
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b4314:	b130      	cbz	r0, b4324 <_ZN5Timer5startEj.isra.0+0x18>
   b4316:	2300      	movs	r3, #0
   b4318:	e9cd 3300 	strd	r3, r3, [sp]
   b431c:	461a      	mov	r2, r3
   b431e:	2102      	movs	r1, #2
   b4320:	f004 fbae 	bl	b8a80 <os_timer_change>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b4324:	68a0      	ldr	r0, [r4, #8]
   b4326:	b130      	cbz	r0, b4336 <_ZN5Timer5startEj.isra.0+0x2a>
   b4328:	2300      	movs	r3, #0
   b432a:	e9cd 5300 	strd	r5, r3, [sp]
   b432e:	461a      	mov	r2, r3
   b4330:	4619      	mov	r1, r3
   b4332:	f004 fba5 	bl	b8a80 <os_timer_change>
    bool start(unsigned block=default_wait) { return _start(block, false); }
   b4336:	b003      	add	sp, #12
   b4338:	bd30      	pop	{r4, r5, pc}

000b433a <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b433a:	b40e      	push	{r1, r2, r3}
   b433c:	b503      	push	{r0, r1, lr}
   b433e:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b4340:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4342:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4346:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4348:	f007 fbf3 	bl	bbb32 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b434c:	b002      	add	sp, #8
   b434e:	f85d eb04 	ldr.w	lr, [sp], #4
   b4352:	b003      	add	sp, #12
   b4354:	4770      	bx	lr
	...

000b4358 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4358:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b435a:	4604      	mov	r4, r0
   b435c:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b435e:	7922      	ldrb	r2, [r4, #4]
   b4360:	68a3      	ldr	r3, [r4, #8]
   b4362:	b132      	cbz	r2, b4372 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4364:	b9a3      	cbnz	r3, b4390 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b4366:	490b      	ldr	r1, [pc, #44]	; (b4394 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4368:	b002      	add	sp, #8
   b436a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b436e:	f007 bba5 	b.w	bbabc <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4372:	4a09      	ldr	r2, [pc, #36]	; (b4398 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4374:	7b26      	ldrb	r6, [r4, #12]
   b4376:	4d09      	ldr	r5, [pc, #36]	; (b439c <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4378:	4909      	ldr	r1, [pc, #36]	; (b43a0 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b437a:	7b64      	ldrb	r4, [r4, #13]
   b437c:	2e01      	cmp	r6, #1
   b437e:	bf18      	it	ne
   b4380:	4629      	movne	r1, r5
   b4382:	e9cd 1400 	strd	r1, r4, [sp]
   b4386:	4907      	ldr	r1, [pc, #28]	; (b43a4 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4388:	f7ff ffd7 	bl	b433a <_ZN5Print6printfEPKcz>
  }
   b438c:	b002      	add	sp, #8
   b438e:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4390:	4a05      	ldr	r2, [pc, #20]	; (b43a8 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b4392:	e7ef      	b.n	b4374 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4394:	000bfaac 	.word	0x000bfaac
   b4398:	000bff2b 	.word	0x000bff2b
   b439c:	000bfaa8 	.word	0x000bfaa8
   b43a0:	000bfaa4 	.word	0x000bfaa4
   b43a4:	000bfac2 	.word	0x000bfac2
   b43a8:	000bfa9b 	.word	0x000bfa9b

000b43ac <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b43ac:	b40e      	push	{r1, r2, r3}
   b43ae:	b503      	push	{r0, r1, lr}
   b43b0:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b43b2:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b43b4:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b43b8:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b43ba:	f007 fbba 	bl	bbb32 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b43be:	b002      	add	sp, #8
   b43c0:	f85d eb04 	ldr.w	lr, [sp], #4
   b43c4:	b003      	add	sp, #12
   b43c6:	4770      	bx	lr

000b43c8 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b43c8:	b510      	push	{r4, lr}
      if (_M_manager)
   b43ca:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b43cc:	4604      	mov	r4, r0
      if (_M_manager)
   b43ce:	b113      	cbz	r3, b43d6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b43d0:	2203      	movs	r2, #3
   b43d2:	4601      	mov	r1, r0
   b43d4:	4798      	blx	r3
    }
   b43d6:	4620      	mov	r0, r4
   b43d8:	bd10      	pop	{r4, pc}
	...

000b43dc <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b43dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b43de:	4b13      	ldr	r3, [pc, #76]	; (b442c <_ZN5TimerD1Ev+0x50>)
   b43e0:	6003      	str	r3, [r0, #0]
   b43e2:	4604      	mov	r4, r0
        if (handle) {
   b43e4:	6880      	ldr	r0, [r0, #8]
   b43e6:	b1c8      	cbz	r0, b441c <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b43e8:	2500      	movs	r5, #0
   b43ea:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   b43ee:	e9cd 3500 	strd	r3, r5, [sp]
   b43f2:	2102      	movs	r1, #2
   b43f4:	462b      	mov	r3, r5
   b43f6:	462a      	mov	r2, r5
   b43f8:	f004 fb42 	bl	b8a80 <os_timer_change>
            os_timer_set_id(handle, nullptr);
   b43fc:	68a0      	ldr	r0, [r4, #8]
   b43fe:	4629      	mov	r1, r5
   b4400:	f004 fb6e 	bl	b8ae0 <os_timer_set_id>
            while (running) {
   b4404:	7923      	ldrb	r3, [r4, #4]
   b4406:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b440a:	b113      	cbz	r3, b4412 <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   b440c:	f004 fb10 	bl	b8a30 <os_thread_yield>
            while (running) {
   b4410:	e7f8      	b.n	b4404 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   b4412:	68a0      	ldr	r0, [r4, #8]
   b4414:	4629      	mov	r1, r5
   b4416:	f004 fb23 	bl	b8a60 <os_timer_destroy>
            handle = nullptr;
   b441a:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b441c:	f104 000c 	add.w	r0, r4, #12
   b4420:	f7ff ffd2 	bl	b43c8 <_ZNSt14_Function_baseD1Ev>
    }
   b4424:	4620      	mov	r0, r4
   b4426:	b003      	add	sp, #12
   b4428:	bd30      	pop	{r4, r5, pc}
   b442a:	bf00      	nop
   b442c:	000c0148 	.word	0x000c0148

000b4430 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b4430:	b510      	push	{r4, lr}
   b4432:	4604      	mov	r4, r0
    }
   b4434:	f7ff ffd2 	bl	b43dc <_ZN5TimerD1Ev>
   b4438:	4620      	mov	r0, r4
   b443a:	211c      	movs	r1, #28
   b443c:	f7ff fe2f 	bl	b409e <_ZdlPvj>
   b4440:	4620      	mov	r0, r4
   b4442:	bd10      	pop	{r4, pc}

000b4444 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b4444:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b4446:	6843      	ldr	r3, [r0, #4]
   b4448:	3b01      	subs	r3, #1
    {
   b444a:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b444c:	6043      	str	r3, [r0, #4]
   b444e:	b963      	cbnz	r3, b446a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b4450:	6803      	ldr	r3, [r0, #0]
   b4452:	689b      	ldr	r3, [r3, #8]
   b4454:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4456:	68a3      	ldr	r3, [r4, #8]
   b4458:	3b01      	subs	r3, #1
   b445a:	60a3      	str	r3, [r4, #8]
   b445c:	b92b      	cbnz	r3, b446a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b445e:	6823      	ldr	r3, [r4, #0]
   b4460:	4620      	mov	r0, r4
   b4462:	68db      	ldr	r3, [r3, #12]
        }
    }
   b4464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b4468:	4718      	bx	r3
    }
   b446a:	bd10      	pop	{r4, pc}

000b446c <_ZN5TimerC1EjSt8functionIFvvEEb>:
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b446c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b446e:	468c      	mov	ip, r1
   b4470:	2500      	movs	r5, #0
   b4472:	4914      	ldr	r1, [pc, #80]	; (b44c4 <_ZN5TimerC1EjSt8functionIFvvEEb+0x58>)
   b4474:	7105      	strb	r5, [r0, #4]
   b4476:	4604      	mov	r4, r0
   b4478:	6085      	str	r5, [r0, #8]
   b447a:	6001      	str	r1, [r0, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b447c:	e892 0003 	ldmia.w	r2, {r0, r1}
   b4480:	b085      	sub	sp, #20
   b4482:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   b4484:	f104 060c 	add.w	r6, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4488:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b448c:	e896 0003 	ldmia.w	r6, {r0, r1}
   b4490:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4494:	e897 0003 	ldmia.w	r7, {r0, r1}
   b4498:	e886 0003 	stmia.w	r6, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b449c:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   b449e:	69a0      	ldr	r0, [r4, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   b44a0:	6161      	str	r1, [r4, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b44a2:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   b44a4:	6095      	str	r5, [r2, #8]
   b44a6:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b44a8:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b44aa:	e9cd 3500 	strd	r3, r5, [sp]
   b44ae:	4a06      	ldr	r2, [pc, #24]	; (b44c8 <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   b44b0:	4623      	mov	r3, r4
   b44b2:	4661      	mov	r1, ip
   b44b4:	f104 0008 	add.w	r0, r4, #8
   b44b8:	f004 faca 	bl	b8a50 <os_timer_create>
    }
   b44bc:	4620      	mov	r0, r4
   b44be:	b005      	add	sp, #20
   b44c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b44c2:	bf00      	nop
   b44c4:	000c0148 	.word	0x000c0148
   b44c8:	000b41f3 	.word	0x000b41f3

000b44cc <_ZN7FatFile4openEPKci>:
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
   b44cc:	4613      	mov	r3, r2
    return open(m_cwd, path, oflag);
   b44ce:	460a      	mov	r2, r1
   b44d0:	4901      	ldr	r1, [pc, #4]	; (b44d8 <_ZN7FatFile4openEPKci+0xc>)
   b44d2:	6809      	ldr	r1, [r1, #0]
   b44d4:	f002 bf6b 	b.w	b73ae <_ZN7FatFile4openEPS_PKci>
   b44d8:	2003e648 	.word	0x2003e648

000b44dc <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void offloadDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b44dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b44de:	b095      	sub	sp, #84	; 0x54
   b44e0:	4604      	mov	r4, r0
   b44e2:	af00      	add	r7, sp, #0
   b44e4:	460d      	mov	r5, r1
    memset(fileCommand,0,8 + MAX_FILENAME_LEN);
   b44e6:	221e      	movs	r2, #30
   b44e8:	2100      	movs	r1, #0
   b44ea:	f107 0030 	add.w	r0, r7, #48	; 0x30
   b44ee:	f009 fa64 	bl	bd9ba <memset>
    memcpy(fileCommand,data,8);
   b44f2:	6820      	ldr	r0, [r4, #0]
   b44f4:	6861      	ldr	r1, [r4, #4]
   b44f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
   b44fa:	c303      	stmia	r3!, {r0, r1}
    if(fileCommand[0] == 'f'){
   b44fc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   b4500:	2b66      	cmp	r3, #102	; 0x66
    Serial.println(dataStr);
   b4502:	466e      	mov	r6, sp
    if(fileCommand[0] == 'f'){
   b4504:	d168      	bne.n	b45d8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfc>
        if(!strcmp(fileCommand,"filename")){
   b4506:	493e      	ldr	r1, [pc, #248]	; (b4600 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x124>)
   b4508:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b450c:	f009 fa9b 	bl	bda46 <strcmp>
   b4510:	2800      	cmp	r0, #0
   b4512:	d13e      	bne.n	b4592 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xb6>
    return m_attr;
   b4514:	483b      	ldr	r0, [pc, #236]	; (b4604 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x128>)
            if(myFile.isOpen()) myFile.close();
   b4516:	7c03      	ldrb	r3, [r0, #16]
   b4518:	b113      	cbz	r3, b4520 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x44>
   b451a:	3010      	adds	r0, #16
   b451c:	f002 ff40 	bl	b73a0 <_ZN7FatFile5closeEv>
            memcpy(fileCommand,data,8 + MAX_FILENAME_LEN);
   b4520:	4623      	mov	r3, r4
   b4522:	f107 0228 	add.w	r2, r7, #40	; 0x28
   b4526:	f104 0520 	add.w	r5, r4, #32
   b452a:	6818      	ldr	r0, [r3, #0]
   b452c:	6859      	ldr	r1, [r3, #4]
   b452e:	4614      	mov	r4, r2
   b4530:	c403      	stmia	r4!, {r0, r1}
   b4532:	3308      	adds	r3, #8
   b4534:	42ab      	cmp	r3, r5
   b4536:	4622      	mov	r2, r4
   b4538:	d1f7      	bne.n	b452a <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4e>
   b453a:	6818      	ldr	r0, [r3, #0]
   b453c:	6020      	str	r0, [r4, #0]
   b453e:	889b      	ldrh	r3, [r3, #4]
   b4540:	80a3      	strh	r3, [r4, #4]
            strncpy(offloadFilename,fileCommand+8,MAX_FILENAME_LEN);
   b4542:	221e      	movs	r2, #30
   b4544:	f107 0130 	add.w	r1, r7, #48	; 0x30
   b4548:	482f      	ldr	r0, [pc, #188]	; (b4608 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b454a:	f009 fac8 	bl	bdade <strncpy>
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b454e:	2300      	movs	r3, #0
    return file.open(this, path, O_RDONLY);
   b4550:	4a2d      	ldr	r2, [pc, #180]	; (b4608 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b4552:	492e      	ldr	r1, [pc, #184]	; (b460c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x130>)
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b4554:	607b      	str	r3, [r7, #4]
    return file.open(this, path, O_RDONLY);
   b4556:	1d38      	adds	r0, r7, #4
   b4558:	f002 ff29 	bl	b73ae <_ZN7FatFile4openEPS_PKci>
            if(sd.exists(offloadFilename)){
   b455c:	b148      	cbz	r0, b4572 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x96>
                Serial.printlnf("File '%s' already exists, deleting and overwriting",offloadFilename);
   b455e:	f008 f82d 	bl	bc5bc <_Z16_fetch_usbserialv>
   b4562:	492b      	ldr	r1, [pc, #172]	; (b4610 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x134>)
   b4564:	4a28      	ldr	r2, [pc, #160]	; (b4608 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b4566:	f7ff ff21 	bl	b43ac <_ZN5Print8printlnfEPKcz>
  *
  * \return The value true is returned for success and
  * the value false is returned for failure.
  */
  bool remove(const char* path) {
    return FatFile::remove(vwd(), path);
   b456a:	4927      	ldr	r1, [pc, #156]	; (b4608 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b456c:	4827      	ldr	r0, [pc, #156]	; (b460c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x130>)
   b456e:	f002 ff6a 	bl	b7446 <_ZN7FatFile6removeEPS_PKc>
            Serial.printlnf("Starting offload of file: %s",offloadFilename);
   b4572:	f008 f823 	bl	bc5bc <_Z16_fetch_usbserialv>
   b4576:	4a24      	ldr	r2, [pc, #144]	; (b4608 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b4578:	4926      	ldr	r1, [pc, #152]	; (b4614 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   b457a:	f7ff ff17 	bl	b43ac <_ZN5Print8printlnfEPKcz>
            myFile.open(offloadFilename, O_RDWR | O_CREAT | O_AT_END);
   b457e:	4922      	ldr	r1, [pc, #136]	; (b4608 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b4580:	4825      	ldr	r0, [pc, #148]	; (b4618 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x13c>)
   b4582:	f244 2202 	movw	r2, #16898	; 0x4202
   b4586:	f7ff ffa1 	bl	b44cc <_ZN7FatFile4openEPKci>
}
   b458a:	3754      	adds	r7, #84	; 0x54
   b458c:	46b5      	mov	sp, r6
   b458e:	46bd      	mov	sp, r7
   b4590:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if(!strcmp(fileCommand,"filecomp")){
   b4592:	4922      	ldr	r1, [pc, #136]	; (b461c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x140>)
   b4594:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b4598:	f009 fa55 	bl	bda46 <strcmp>
   b459c:	b968      	cbnz	r0, b45ba <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xde>
            Serial.printlnf("Reached end of file: %s",offloadFilename);
   b459e:	f008 f80d 	bl	bc5bc <_Z16_fetch_usbserialv>
   b45a2:	4a19      	ldr	r2, [pc, #100]	; (b4608 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b45a4:	491e      	ldr	r1, [pc, #120]	; (b4620 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x144>)
   b45a6:	f7ff ff01 	bl	b43ac <_ZN5Print8printlnfEPKcz>
    return m_attr;
   b45aa:	4b16      	ldr	r3, [pc, #88]	; (b4604 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x128>)
            if(myFile.isOpen()) myFile.close();
   b45ac:	7c1b      	ldrb	r3, [r3, #16]
   b45ae:	2b00      	cmp	r3, #0
   b45b0:	d0eb      	beq.n	b458a <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xae>
   b45b2:	4819      	ldr	r0, [pc, #100]	; (b4618 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x13c>)
   b45b4:	f002 fef4 	bl	b73a0 <_ZN7FatFile5closeEv>
   b45b8:	e7e7      	b.n	b458a <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xae>
        else if(!strcmp(fileCommand,"filedone")){
   b45ba:	491a      	ldr	r1, [pc, #104]	; (b4624 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x148>)
   b45bc:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b45c0:	f009 fa41 	bl	bda46 <strcmp>
   b45c4:	b940      	cbnz	r0, b45d8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfc>
            Serial.println("Received done command");
   b45c6:	f007 fff9 	bl	bc5bc <_Z16_fetch_usbserialv>
   b45ca:	4917      	ldr	r1, [pc, #92]	; (b4628 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14c>)
   b45cc:	f007 fa89 	bl	bbae2 <_ZN5Print7printlnEPKc>
            offloadingDone = true;
   b45d0:	4b16      	ldr	r3, [pc, #88]	; (b462c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x150>)
   b45d2:	2201      	movs	r2, #1
   b45d4:	701a      	strb	r2, [r3, #0]
   b45d6:	e7e8      	b.n	b45aa <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xce>
    char dataStr[len];
   b45d8:	1deb      	adds	r3, r5, #7
   b45da:	f023 0307 	bic.w	r3, r3, #7
   b45de:	ebad 0d03 	sub.w	sp, sp, r3
    memcpy(dataStr,data,len);
   b45e2:	462a      	mov	r2, r5
   b45e4:	4621      	mov	r1, r4
   b45e6:	4668      	mov	r0, sp
   b45e8:	f009 f9bf 	bl	bd96a <memcpy>
    myFile.print(dataStr);
   b45ec:	4669      	mov	r1, sp
   b45ee:	4805      	ldr	r0, [pc, #20]	; (b4604 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x128>)
   b45f0:	f007 fa64 	bl	bbabc <_ZN5Print5printEPKc>
    Serial.println(dataStr);
   b45f4:	f007 ffe2 	bl	bc5bc <_Z16_fetch_usbserialv>
   b45f8:	4669      	mov	r1, sp
   b45fa:	f007 fa72 	bl	bbae2 <_ZN5Print7printlnEPKc>
   b45fe:	e7c4      	b.n	b458a <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xae>
   b4600:	000bfadf 	.word	0x000bfadf
   b4604:	2003ddf8 	.word	0x2003ddf8
   b4608:	2003de2c 	.word	0x2003de2c
   b460c:	2003e5ec 	.word	0x2003e5ec
   b4610:	000bfae8 	.word	0x000bfae8
   b4614:	000bfb1b 	.word	0x000bfb1b
   b4618:	2003de08 	.word	0x2003de08
   b461c:	000bfb38 	.word	0x000bfb38
   b4620:	000bfb41 	.word	0x000bfb41
   b4624:	000bfb59 	.word	0x000bfb59
   b4628:	000bfb62 	.word	0x000bfb62
   b462c:	2003de4a 	.word	0x2003de4a

000b4630 <_ZN5SdFat5beginEhN8particle11SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b4630:	b530      	push	{r4, r5, lr}
   b4632:	b085      	sub	sp, #20
class SPISettings : public Printable {
   b4634:	4b1b      	ldr	r3, [pc, #108]	; (b46a4 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x74>)
   b4636:	9300      	str	r3, [sp, #0]
   b4638:	7913      	ldrb	r3, [r2, #4]
   b463a:	f88d 3004 	strb.w	r3, [sp, #4]
   b463e:	6893      	ldr	r3, [r2, #8]
   b4640:	9302      	str	r3, [sp, #8]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b4642:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   b4646:	8993      	ldrh	r3, [r2, #12]
   b4648:	f8ad 300c 	strh.w	r3, [sp, #12]
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   b464c:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b464e:	460a      	mov	r2, r1
   b4650:	466b      	mov	r3, sp
   b4652:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   b4656:	4628      	mov	r0, r5
   b4658:	f003 fa42 	bl	b7ae0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   b465c:	b910      	cbnz	r0, b4664 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x34>
   b465e:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   b4660:	b005      	add	sp, #20
   b4662:	bd30      	pop	{r4, r5, pc}
    m_blockDev = blockDev;
   b4664:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   b4666:	f204 453c 	addw	r5, r4, #1084	; 0x43c
    vwd()->close();
   b466a:	4628      	mov	r0, r5
   b466c:	f002 fe98 	bl	b73a0 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   b4670:	2101      	movs	r1, #1
   b4672:	4620      	mov	r0, r4
   b4674:	f003 f8de 	bl	b7834 <_ZN9FatVolume4initEh>
   b4678:	4601      	mov	r1, r0
   b467a:	b168      	cbz	r0, b4698 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x68>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   b467c:	4621      	mov	r1, r4
   b467e:	4628      	mov	r0, r5
   b4680:	f002 fcc5 	bl	b700e <_ZN7FatFile8openRootEP9FatVolume>
   b4684:	2800      	cmp	r0, #0
   b4686:	d0ea      	beq.n	b465e <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    if (!dir->isDir()) {
   b4688:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   b468c:	f013 0f70 	tst.w	r3, #112	; 0x70
   b4690:	d0e5      	beq.n	b465e <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    m_cwd = dir;
   b4692:	4b05      	ldr	r3, [pc, #20]	; (b46a8 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x78>)
   b4694:	601d      	str	r5, [r3, #0]
    return true;
   b4696:	e7e3      	b.n	b4660 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x30>
    return (part ? init(part) : init(1) || init(0))
   b4698:	4620      	mov	r0, r4
   b469a:	f003 f8cb 	bl	b7834 <_ZN9FatVolume4initEh>
   b469e:	2800      	cmp	r0, #0
   b46a0:	d1ec      	bne.n	b467c <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x4c>
   b46a2:	e7dc      	b.n	b465e <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
   b46a4:	000c0134 	.word	0x000c0134
   b46a8:	2003e648 	.word	0x2003e648

000b46ac <_Z9setupXBeev>:
void setupXBee(){
   b46ac:	b508      	push	{r3, lr}
    Serial1.printf("\n");    //First character to set Bypass mode
   b46ae:	f008 fa2f 	bl	bcb10 <_Z22__fetch_global_Serial1v>
   b46b2:	4908      	ldr	r1, [pc, #32]	; (b46d4 <_Z9setupXBeev+0x28>)
   b46b4:	f7ff fe41 	bl	b433a <_ZN5Print6printfEPKcz>
    delay(20);              //Wait some time before sending next character
   b46b8:	2014      	movs	r0, #20
   b46ba:	f007 fb6b 	bl	bbd94 <delay>
    Serial1.printf("B");     //Second character to set Bypass mode
   b46be:	f008 fa27 	bl	bcb10 <_Z22__fetch_global_Serial1v>
   b46c2:	4905      	ldr	r1, [pc, #20]	; (b46d8 <_Z9setupXBeev+0x2c>)
   b46c4:	f7ff fe39 	bl	b433a <_ZN5Print6printfEPKcz>
}
   b46c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(20);
   b46cc:	2014      	movs	r0, #20
   b46ce:	f007 bb61 	b.w	bbd94 <delay>
   b46d2:	bf00      	nop
   b46d4:	000bff2a 	.word	0x000bff2a
   b46d8:	000c0119 	.word	0x000c0119

000b46dc <_Z8sendDataPKchbbb>:
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b46dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b46e0:	b084      	sub	sp, #16
   b46e2:	af02      	add	r7, sp, #8
   b46e4:	4680      	mov	r8, r0
   b46e6:	4691      	mov	r9, r2
   b46e8:	461e      	mov	r6, r3
   b46ea:	460d      	mov	r5, r1
    char outStr[strlen(dataOut)+2];
   b46ec:	f009 f9db 	bl	bdaa6 <strlen>
   b46f0:	3009      	adds	r0, #9
   b46f2:	f020 0107 	bic.w	r1, r0, #7
   b46f6:	ebad 0d01 	sub.w	sp, sp, r1
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b46fa:	4640      	mov	r0, r8
   b46fc:	f009 f9d3 	bl	bdaa6 <strlen>
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b4700:	f897 a028 	ldrb.w	sl, [r7, #40]	; 0x28
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b4704:	4926      	ldr	r1, [pc, #152]	; (b47a0 <_Z8sendDataPKchbbb+0xc4>)
    char outStr[strlen(dataOut)+2];
   b4706:	ac02      	add	r4, sp, #8
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b4708:	4603      	mov	r3, r0
   b470a:	4642      	mov	r2, r8
   b470c:	4620      	mov	r0, r4
   b470e:	f004 fc1b 	bl	b8f48 <sprintf>
    if(sendLTE || sendMode == 4){
   b4712:	f1ba 0f00 	cmp.w	sl, #0
   b4716:	d101      	bne.n	b471c <_Z8sendDataPKchbbb+0x40>
   b4718:	2d04      	cmp	r5, #4
   b471a:	d10d      	bne.n	b4738 <_Z8sendDataPKchbbb+0x5c>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b471c:	4b21      	ldr	r3, [pc, #132]	; (b47a4 <_Z8sendDataPKchbbb+0xc8>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b471e:	4922      	ldr	r1, [pc, #136]	; (b47a8 <_Z8sendDataPKchbbb+0xcc>)
   b4720:	781b      	ldrb	r3, [r3, #0]
   b4722:	f88d 3000 	strb.w	r3, [sp]
   b4726:	4638      	mov	r0, r7
   b4728:	233c      	movs	r3, #60	; 0x3c
   b472a:	4622      	mov	r2, r4
   b472c:	f007 fd04 	bl	bc138 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b4730:	6878      	ldr	r0, [r7, #4]
   b4732:	b108      	cbz	r0, b4738 <_Z8sendDataPKchbbb+0x5c>
	  _M_pi->_M_release();
   b4734:	f7ff fe86 	bl	b4444 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
    if((sendBLE || sendMode == 1) && BLE.connected()){
   b4738:	f1b9 0f00 	cmp.w	r9, #0
   b473c:	d101      	bne.n	b4742 <_Z8sendDataPKchbbb+0x66>
   b473e:	2d01      	cmp	r5, #1
   b4740:	d121      	bne.n	b4786 <_Z8sendDataPKchbbb+0xaa>
   b4742:	f005 fb6d 	bl	b9e20 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4746:	f005 fc14 	bl	b9f72 <_ZNK8particle14BleLocalDevice9connectedEv>
   b474a:	b1e0      	cbz	r0, b4786 <_Z8sendDataPKchbbb+0xaa>
        uint8_t txBuf_tmp[strlen(outStr)];
   b474c:	4620      	mov	r0, r4
   b474e:	f009 f9aa 	bl	bdaa6 <strlen>
   b4752:	3007      	adds	r0, #7
   b4754:	f020 0007 	bic.w	r0, r0, #7
        peerRxCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b4758:	46e8      	mov	r8, sp
        uint8_t txBuf_tmp[strlen(outStr)];
   b475a:	ebad 0d00 	sub.w	sp, sp, r0
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b475e:	4620      	mov	r0, r4
   b4760:	f009 f9a1 	bl	bdaa6 <strlen>
        uint8_t txBuf_tmp[strlen(outStr)];
   b4764:	f10d 0908 	add.w	r9, sp, #8
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b4768:	4602      	mov	r2, r0
   b476a:	4621      	mov	r1, r4
   b476c:	4648      	mov	r0, r9
   b476e:	f009 f8fc 	bl	bd96a <memcpy>
        peerRxCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b4772:	4620      	mov	r0, r4
   b4774:	f009 f997 	bl	bdaa6 <strlen>
   b4778:	2300      	movs	r3, #0
   b477a:	4602      	mov	r2, r0
   b477c:	4649      	mov	r1, r9
   b477e:	480b      	ldr	r0, [pc, #44]	; (b47ac <_Z8sendDataPKchbbb+0xd0>)
   b4780:	f005 f9e8 	bl	b9b54 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
   b4784:	46c5      	mov	sp, r8
    if(sendXBee || sendMode == 2){
   b4786:	b90e      	cbnz	r6, b478c <_Z8sendDataPKchbbb+0xb0>
   b4788:	2d02      	cmp	r5, #2
   b478a:	d104      	bne.n	b4796 <_Z8sendDataPKchbbb+0xba>
        Serial1.println(outStr);
   b478c:	f008 f9c0 	bl	bcb10 <_Z22__fetch_global_Serial1v>
   b4790:	4621      	mov	r1, r4
   b4792:	f007 f9a6 	bl	bbae2 <_ZN5Print7printlnEPKc>
}
   b4796:	3708      	adds	r7, #8
   b4798:	46bd      	mov	sp, r7
   b479a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b479e:	bf00      	nop
   b47a0:	000bfb78 	.word	0x000bfb78
   b47a4:	2003dcfc 	.word	0x2003dcfc
   b47a8:	000bfb7f 	.word	0x000bfb7f
   b47ac:	2003decc 	.word	0x2003decc

000b47b0 <_Z14XBeeLTEPairSetv>:
void XBeeLTEPairSet(){
   b47b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      : _M_current(__i) { }
   b47b4:	4d0e      	ldr	r5, [pc, #56]	; (b47f0 <_Z14XBeeLTEPairSetv+0x40>)
        sprintf(replyStr,"CCB%dhwa",p.botNum);
   b47b6:	4f0f      	ldr	r7, [pc, #60]	; (b47f4 <_Z14XBeeLTEPairSetv+0x44>)
   b47b8:	e9d5 4800 	ldrd	r4, r8, [r5]
void XBeeLTEPairSet(){
   b47bc:	b088      	sub	sp, #32
    for(WaterBot p: PairBots){
   b47be:	45a0      	cmp	r8, r4
   b47c0:	d013      	beq.n	b47ea <_Z14XBeeLTEPairSetv+0x3a>
   b47c2:	7923      	ldrb	r3, [r4, #4]
   b47c4:	78e6      	ldrb	r6, [r4, #3]
        sprintf(replyStr,"CCB%dhwa",p.botNum);
   b47c6:	f814 2b18 	ldrb.w	r2, [r4], #24
    for(WaterBot p: PairBots){
   b47ca:	9303      	str	r3, [sp, #12]
        sprintf(replyStr,"CCB%dhwa",p.botNum);
   b47cc:	4639      	mov	r1, r7
   b47ce:	a805      	add	r0, sp, #20
   b47d0:	f004 fbba 	bl	b8f48 <sprintf>
        sendData(replyStr,0,false,p.XBeeAvail,p.LTEAvail);
   b47d4:	2200      	movs	r2, #0
   b47d6:	9b03      	ldr	r3, [sp, #12]
   b47d8:	9600      	str	r6, [sp, #0]
   b47da:	4611      	mov	r1, r2
   b47dc:	a805      	add	r0, sp, #20
   b47de:	f7ff ff7d 	bl	b46dc <_Z8sendDataPKchbbb>
       */
      void
      pop_back() _GLIBCXX_NOEXCEPT
      {
	__glibcxx_requires_nonempty();
	--this->_M_impl._M_finish;
   b47e2:	686b      	ldr	r3, [r5, #4]
   b47e4:	3b18      	subs	r3, #24
   b47e6:	606b      	str	r3, [r5, #4]
	return *this;
   b47e8:	e7e9      	b.n	b47be <_Z14XBeeLTEPairSetv+0xe>
}
   b47ea:	b008      	add	sp, #32
   b47ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b47f0:	2003dc9c 	.word	0x2003dc9c
   b47f4:	000bfb87 	.word	0x000bfb87

000b47f8 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>:
      at(size_type __n)
   b47f8:	b510      	push	{r4, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b47fa:	e9d0 4200 	ldrd	r4, r2, [r0]
   b47fe:	4806      	ldr	r0, [pc, #24]	; (b4818 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj+0x20>)
   b4800:	1b12      	subs	r2, r2, r4
   b4802:	10d2      	asrs	r2, r2, #3
   b4804:	4342      	muls	r2, r0
	if (__n >= this->size())
   b4806:	4291      	cmp	r1, r2
   b4808:	d302      	bcc.n	b4810 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj+0x18>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
   b480a:	4804      	ldr	r0, [pc, #16]	; (b481c <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj+0x24>)
   b480c:	f008 f9e8 	bl	bcbe0 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
   b4810:	2018      	movs	r0, #24
   b4812:	fb00 4001 	mla	r0, r0, r1, r4
   b4816:	bd10      	pop	{r4, pc}
   b4818:	aaaaaaab 	.word	0xaaaaaaab
   b481c:	000bfb90 	.word	0x000bfb90

000b4820 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   b4820:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4824:	e9d0 8900 	ldrd	r8, r9, [r0]
   b4828:	4b29      	ldr	r3, [pc, #164]	; (b48d0 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb0>)
   b482a:	eba9 0408 	sub.w	r4, r9, r8
   b482e:	10e4      	asrs	r4, r4, #3
   b4830:	435c      	muls	r4, r3

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   b4832:	4b28      	ldr	r3, [pc, #160]	; (b48d4 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb4>)
   b4834:	429c      	cmp	r4, r3
   b4836:	4607      	mov	r7, r0
   b4838:	468a      	mov	sl, r1
   b483a:	4693      	mov	fp, r2
   b483c:	d102      	bne.n	b4844 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
   b483e:	4826      	ldr	r0, [pc, #152]	; (b48d8 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb8>)
   b4840:	f008 f9cb 	bl	bcbda <_ZSt20__throw_length_errorPKc>
   b4844:	2c01      	cmp	r4, #1
   b4846:	4622      	mov	r2, r4
   b4848:	bf38      	it	cc
   b484a:	2201      	movcc	r2, #1
   b484c:	18a4      	adds	r4, r4, r2
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b484e:	eba1 0508 	sub.w	r5, r1, r8

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b4852:	d238      	bcs.n	b48c6 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa6>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4854:	b3cc      	cbz	r4, b48ca <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xaa>
   b4856:	429c      	cmp	r4, r3
   b4858:	bf28      	it	cs
   b485a:	461c      	movcs	r4, r3
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b485c:	2018      	movs	r0, #24
   b485e:	4360      	muls	r0, r4
   b4860:	f7ff fc19 	bl	b4096 <_Znwj>
   b4864:	4606      	mov	r6, r0
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b4866:	eb16 0c05 	adds.w	ip, r6, r5
   b486a:	bf1f      	itttt	ne
   b486c:	e8bb 000f 	ldmiane.w	fp!, {r0, r1, r2, r3}
   b4870:	e8ac 000f 	stmiane.w	ip!, {r0, r1, r2, r3}
   b4874:	e9db 0100 	ldrdne	r0, r1, [fp]
   b4878:	e9cc 0100 	strdne	r0, r1, [ip]
    inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result, allocator<_Up>&) noexcept
    {
      ptrdiff_t __count = __last - __first;
      if (__count > 0)
   b487c:	2d00      	cmp	r5, #0
   b487e:	dd04      	ble.n	b488a <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x6a>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b4880:	462a      	mov	r2, r5
   b4882:	4641      	mov	r1, r8
   b4884:	4630      	mov	r0, r6
   b4886:	f009 f87e 	bl	bd986 <memmove>
      ptrdiff_t __count = __last - __first;
   b488a:	eba9 090a 	sub.w	r9, r9, sl
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
   b488e:	3518      	adds	r5, #24
      if (__count > 0)
   b4890:	f1b9 0f00 	cmp.w	r9, #0
   b4894:	4435      	add	r5, r6
   b4896:	dd04      	ble.n	b48a2 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x82>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b4898:	464a      	mov	r2, r9
   b489a:	4651      	mov	r1, sl
   b489c:	4628      	mov	r0, r5
   b489e:	f009 f864 	bl	bd96a <memcpy>
      return __result + __count;
   b48a2:	444d      	add	r5, r9
	if (__p)
   b48a4:	f1b8 0f00 	cmp.w	r8, #0
   b48a8:	d005      	beq.n	b48b6 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x96>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
   b48aa:	68b9      	ldr	r1, [r7, #8]
	::operator delete(__p
   b48ac:	4640      	mov	r0, r8
   b48ae:	eba1 0108 	sub.w	r1, r1, r8
   b48b2:	f7ff fbf4 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b48b6:	2018      	movs	r0, #24
   b48b8:	fb00 6404 	mla	r4, r0, r4, r6
      this->_M_impl._M_finish = __new_finish;
   b48bc:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b48c0:	60bc      	str	r4, [r7, #8]
    }
   b48c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b48c6:	461c      	mov	r4, r3
   b48c8:	e7c8      	b.n	b485c <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b48ca:	4626      	mov	r6, r4
   b48cc:	e7cb      	b.n	b4866 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
   b48ce:	bf00      	nop
   b48d0:	aaaaaaab 	.word	0xaaaaaaab
   b48d4:	05555555 	.word	0x05555555
   b48d8:	000bfbda 	.word	0x000bfbda

000b48dc <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
   b48dc:	b570      	push	{r4, r5, r6, lr}
   b48de:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b48e0:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b48e4:	4299      	cmp	r1, r3
      push_back(const value_type& __x)
   b48e6:	4606      	mov	r6, r0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b48e8:	d00c      	beq.n	b4904 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_+0x28>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b48ea:	b139      	cbz	r1, b48fc <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_+0x20>
   b48ec:	4615      	mov	r5, r2
   b48ee:	460c      	mov	r4, r1
   b48f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b48f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b48f4:	e895 0003 	ldmia.w	r5, {r0, r1}
   b48f8:	e884 0003 	stmia.w	r4, {r0, r1}
	    ++this->_M_impl._M_finish;
   b48fc:	6873      	ldr	r3, [r6, #4]
   b48fe:	3318      	adds	r3, #24
   b4900:	6073      	str	r3, [r6, #4]
      }
   b4902:	bd70      	pop	{r4, r5, r6, pc}
	  _M_realloc_insert(end(), __x);
   b4904:	f7ff ff8c 	bl	b4820 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
   b4908:	e7fb      	b.n	b4902 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_+0x26>
	...

000b490c <_Z14processCommandPKchb>:
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b490c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4910:	b09d      	sub	sp, #116	; 0x74
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
   b4912:	7883      	ldrb	r3, [r0, #2]
   b4914:	2b41      	cmp	r3, #65	; 0x41
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b4916:	af02      	add	r7, sp, #8
   b4918:	4606      	mov	r6, r0
   b491a:	468a      	mov	sl, r1
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
   b491c:	d15d      	bne.n	b49da <_Z14processCommandPKchb+0xce>
   b491e:	78c3      	ldrb	r3, [r0, #3]
   b4920:	2b42      	cmp	r3, #66	; 0x42
   b4922:	f040 8179 	bne.w	b4c18 <_Z14processCommandPKchb+0x30c>
        char dataStr[strlen(command)-8];
   b4926:	4630      	mov	r0, r6
   b4928:	f009 f8bd 	bl	bdaa6 <strlen>
   b492c:	3801      	subs	r0, #1
   b492e:	f020 0007 	bic.w	r0, r0, #7
        }
   b4932:	46e8      	mov	r8, sp
        char dataStr[strlen(command)-8];
   b4934:	ebad 0d00 	sub.w	sp, sp, r0
        dataStr[strlen(command)-9] = '\0';
   b4938:	4630      	mov	r0, r6
   b493a:	f009 f8b4 	bl	bdaa6 <strlen>
        char dataStr[strlen(command)-8];
   b493e:	ad02      	add	r5, sp, #8
        dataStr[strlen(command)-9] = '\0';
   b4940:	4428      	add	r0, r5
   b4942:	f04f 0900 	mov.w	r9, #0
        rxIDBuf[0] = command[1];
   b4946:	7873      	ldrb	r3, [r6, #1]
        dataStr[strlen(command)-9] = '\0';
   b4948:	f800 9c09 	strb.w	r9, [r0, #-9]
        uint8_t rxBotID = atoi(rxIDBuf);
   b494c:	f107 0018 	add.w	r0, r7, #24
        rxIDBuf[0] = command[1];
   b4950:	763b      	strb	r3, [r7, #24]
        uint8_t rxBotID = atoi(rxIDBuf);
   b4952:	f008 fff6 	bl	bd942 <atoi>
   b4956:	4604      	mov	r4, r0
        checkStr[0] = command[strlen(command)-2];
   b4958:	4630      	mov	r0, r6
        cmdStr[3] = '\0';
   b495a:	f887 9023 	strb.w	r9, [r7, #35]	; 0x23
        checkStr[0] = command[strlen(command)-2];
   b495e:	f009 f8a2 	bl	bdaa6 <strlen>
   b4962:	4430      	add	r0, r6
   b4964:	f810 3c02 	ldrb.w	r3, [r0, #-2]
   b4968:	773b      	strb	r3, [r7, #28]
        checkStr[1] = command[strlen(command)-1];
   b496a:	4630      	mov	r0, r6
   b496c:	f009 f89b 	bl	bdaa6 <strlen>
   b4970:	4430      	add	r0, r6
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b4972:	4649      	mov	r1, r9
        checkStr[1] = command[strlen(command)-1];
   b4974:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   b4978:	777b      	strb	r3, [r7, #29]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b497a:	2210      	movs	r2, #16
   b497c:	f107 001c 	add.w	r0, r7, #28
        checkStr[2] = '\0';
   b4980:	f887 901e 	strb.w	r9, [r7, #30]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b4984:	f009 ff7c 	bl	be880 <strtol>
   b4988:	4683      	mov	fp, r0
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
   b498a:	fa5f fb8b 	uxtb.w	fp, fp
   b498e:	f007 fe15 	bl	bc5bc <_Z16_fetch_usbserialv>
   b4992:	49c8      	ldr	r1, [pc, #800]	; (b4cb4 <_Z14processCommandPKchb+0x3a8>)
   b4994:	465b      	mov	r3, fp
   b4996:	465a      	mov	r2, fp
   b4998:	f7ff fd08 	bl	b43ac <_ZN5Print8printlnfEPKcz>
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b499c:	f04f 0904 	mov.w	r9, #4
   b49a0:	4630      	mov	r0, r6
   b49a2:	f009 f880 	bl	bdaa6 <strlen>
   b49a6:	3802      	subs	r0, #2
   b49a8:	4581      	cmp	r9, r0
   b49aa:	d21c      	bcs.n	b49e6 <_Z14processCommandPKchb+0xda>
            if(i < 7) cmdStr[i-4] = command[i];
   b49ac:	f1b9 0f06 	cmp.w	r9, #6
   b49b0:	bf9b      	ittet	ls
   b49b2:	f107 0368 	addls.w	r3, r7, #104	; 0x68
   b49b6:	444b      	addls	r3, r9
            else dataStr[i-7] = command[i];
   b49b8:	eb05 0309 	addhi.w	r3, r5, r9
            if(i < 7) cmdStr[i-4] = command[i];
   b49bc:	f816 2009 	ldrbls.w	r2, [r6, r9]
            else dataStr[i-7] = command[i];
   b49c0:	bf8c      	ite	hi
   b49c2:	f816 2009 	ldrbhi.w	r2, [r6, r9]
            if(i < 7) cmdStr[i-4] = command[i];
   b49c6:	f803 2c4c 	strbls.w	r2, [r3, #-76]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b49ca:	f109 0901 	add.w	r9, r9, #1
            else dataStr[i-7] = command[i];
   b49ce:	bf88      	it	hi
   b49d0:	f803 2c07 	strbhi.w	r2, [r3, #-7]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b49d4:	fa5f f989 	uxtb.w	r9, r9
   b49d8:	e7e2      	b.n	b49a0 <_Z14processCommandPKchb+0x94>
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
   b49da:	2b43      	cmp	r3, #67	; 0x43
   b49dc:	f040 811c 	bne.w	b4c18 <_Z14processCommandPKchb+0x30c>
   b49e0:	78c3      	ldrb	r3, [r0, #3]
   b49e2:	2b43      	cmp	r3, #67	; 0x43
   b49e4:	e79d      	b.n	b4922 <_Z14processCommandPKchb+0x16>
        if(checksum != strlen(command)-2){
   b49e6:	4558      	cmp	r0, fp
   b49e8:	d042      	beq.n	b4a70 <_Z14processCommandPKchb+0x164>
            Serial.printlnf("String Len: %d, Checksum: %d",strlen(command)-2,checksum);
   b49ea:	f007 fde7 	bl	bc5bc <_Z16_fetch_usbserialv>
   b49ee:	4604      	mov	r4, r0
   b49f0:	4630      	mov	r0, r6
   b49f2:	f009 f858 	bl	bdaa6 <strlen>
   b49f6:	1e82      	subs	r2, r0, #2
   b49f8:	4620      	mov	r0, r4
    return m_attr;
   b49fa:	4caf      	ldr	r4, [pc, #700]	; (b4cb8 <_Z14processCommandPKchb+0x3ac>)
   b49fc:	49af      	ldr	r1, [pc, #700]	; (b4cbc <_Z14processCommandPKchb+0x3b0>)
   b49fe:	465b      	mov	r3, fp
   b4a00:	f7ff fcd4 	bl	b43ac <_ZN5Print8printlnfEPKcz>
            if(!logFile.isOpen()){
   b4a04:	7c23      	ldrb	r3, [r4, #16]
   b4a06:	bb6b      	cbnz	r3, b4a64 <_Z14processCommandPKchb+0x158>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4a08:	49ad      	ldr	r1, [pc, #692]	; (b4cc0 <_Z14processCommandPKchb+0x3b4>)
   b4a0a:	f244 2202 	movw	r2, #16898	; 0x4202
   b4a0e:	f104 0010 	add.w	r0, r4, #16
   b4a12:	f7ff fd5b 	bl	b44cc <_ZN7FatFile4openEPKci>
                logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b4a16:	49ab      	ldr	r1, [pc, #684]	; (b4cc4 <_Z14processCommandPKchb+0x3b8>)
   b4a18:	4632      	mov	r2, r6
   b4a1a:	4620      	mov	r0, r4
   b4a1c:	f7ff fcc6 	bl	b43ac <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b4a20:	f104 0010 	add.w	r0, r4, #16
   b4a24:	f002 fcbc 	bl	b73a0 <_ZN7FatFile5closeEv>
            Serial.println("Warning, checksum does not match");
   b4a28:	f007 fdc8 	bl	bc5bc <_Z16_fetch_usbserialv>
   b4a2c:	49a6      	ldr	r1, [pc, #664]	; (b4cc8 <_Z14processCommandPKchb+0x3bc>)
   b4a2e:	f007 f858 	bl	bbae2 <_ZN5Print7printlnEPKc>
            if((command[1] >= '0' && command[1] <= '9') || command[1] == 'C'){
   b4a32:	7873      	ldrb	r3, [r6, #1]
   b4a34:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   b4a38:	2a09      	cmp	r2, #9
   b4a3a:	d902      	bls.n	b4a42 <_Z14processCommandPKchb+0x136>
   b4a3c:	2b43      	cmp	r3, #67	; 0x43
   b4a3e:	f040 80ea 	bne.w	b4c16 <_Z14processCommandPKchb+0x30a>
                rxBotNum[0] = command[0];
   b4a42:	7832      	ldrb	r2, [r6, #0]
   b4a44:	f887 2038 	strb.w	r2, [r7, #56]	; 0x38
                rxBotNum[1] = command[1];
   b4a48:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
                sprintf(errBuf,"CC%2snak%3s",rxBotNum,cmdStr);
   b4a4c:	499f      	ldr	r1, [pc, #636]	; (b4ccc <_Z14processCommandPKchb+0x3c0>)
   b4a4e:	48a0      	ldr	r0, [pc, #640]	; (b4cd0 <_Z14processCommandPKchb+0x3c4>)
   b4a50:	f107 0320 	add.w	r3, r7, #32
   b4a54:	f107 0238 	add.w	r2, r7, #56	; 0x38
   b4a58:	f004 fa76 	bl	b8f48 <sprintf>
                errModeReply = mode;
   b4a5c:	4b9d      	ldr	r3, [pc, #628]	; (b4cd4 <_Z14processCommandPKchb+0x3c8>)
            errCmdMode = mode;
   b4a5e:	f883 a000 	strb.w	sl, [r3]
   b4a62:	e0d8      	b.n	b4c16 <_Z14processCommandPKchb+0x30a>
            else logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b4a64:	4997      	ldr	r1, [pc, #604]	; (b4cc4 <_Z14processCommandPKchb+0x3b8>)
   b4a66:	4632      	mov	r2, r6
   b4a68:	4620      	mov	r0, r4
   b4a6a:	f7ff fc9f 	bl	b43ac <_ZN5Print8printlnfEPKcz>
   b4a6e:	e7db      	b.n	b4a28 <_Z14processCommandPKchb+0x11c>
        if(!strcmp(cmdStr,"ack")){  //Acknowledgement for XBee and BLE
   b4a70:	4999      	ldr	r1, [pc, #612]	; (b4cd8 <_Z14processCommandPKchb+0x3cc>)
   b4a72:	f107 0020 	add.w	r0, r7, #32
   b4a76:	f008 ffe6 	bl	bda46 <strcmp>
   b4a7a:	2800      	cmp	r0, #0
   b4a7c:	f000 80cb 	beq.w	b4c16 <_Z14processCommandPKchb+0x30a>
        else if(!strcmp(cmdStr,"sup")){
   b4a80:	4996      	ldr	r1, [pc, #600]	; (b4cdc <_Z14processCommandPKchb+0x3d0>)
   b4a82:	f107 0020 	add.w	r0, r7, #32
        uint8_t rxBotID = atoi(rxIDBuf);
   b4a86:	b2e4      	uxtb	r4, r4
        else if(!strcmp(cmdStr,"sup")){
   b4a88:	f008 ffdd 	bl	bda46 <strcmp>
   b4a8c:	2800      	cmp	r0, #0
   b4a8e:	f040 80c7 	bne.w	b4c20 <_Z14processCommandPKchb+0x314>
      : _M_current(__i) { }
   b4a92:	4b93      	ldr	r3, [pc, #588]	; (b4ce0 <_Z14processCommandPKchb+0x3d4>)
                    Serial.println("##########################");
   b4a94:	f8df 9290 	ldr.w	r9, [pc, #656]	; b4d28 <_Z14processCommandPKchb+0x41c>
   b4a98:	685a      	ldr	r2, [r3, #4]
   b4a9a:	681e      	ldr	r6, [r3, #0]
   b4a9c:	617a      	str	r2, [r7, #20]
            bool newBot = true;
   b4a9e:	2301      	movs	r3, #1
            for(WaterBot w: WaterBots){
   b4aa0:	697a      	ldr	r2, [r7, #20]
   b4aa2:	42b2      	cmp	r2, r6
   b4aa4:	d074      	beq.n	b4b90 <_Z14processCommandPKchb+0x284>
   b4aa6:	7832      	ldrb	r2, [r6, #0]
                if(rxBotID == w.botNum){
   b4aa8:	4294      	cmp	r4, r2
   b4aaa:	d16f      	bne.n	b4b8c <_Z14processCommandPKchb+0x280>
                    sscanf(dataStr,"%u %u %s %s",&battpct,&statflags,testLat,testLon);
   b4aac:	f107 0a38 	add.w	sl, r7, #56	; 0x38
   b4ab0:	f107 0b28 	add.w	fp, r7, #40	; 0x28
   b4ab4:	f107 0324 	add.w	r3, r7, #36	; 0x24
   b4ab8:	f107 021b 	add.w	r2, r7, #27
   b4abc:	4989      	ldr	r1, [pc, #548]	; (b4ce4 <_Z14processCommandPKchb+0x3d8>)
   b4abe:	f8cd a004 	str.w	sl, [sp, #4]
   b4ac2:	f8cd b000 	str.w	fp, [sp]
   b4ac6:	4628      	mov	r0, r5
   b4ac8:	f004 fa46 	bl	b8f58 <sscanf>
                    latRX = atof(testLat);
   b4acc:	4658      	mov	r0, fp
   b4ace:	f008 ff35 	bl	bd93c <atof>
                    lonRX = atof(testLon);
   b4ad2:	4650      	mov	r0, sl
                    latRX = atof(testLat);
   b4ad4:	ed87 0b02 	vstr	d0, [r7, #8]
                    lonRX = atof(testLon);
   b4ad8:	f008 ff30 	bl	bd93c <atof>
                    w.LTEAvail = statflags & 1;
   b4adc:	f897 a024 	ldrb.w	sl, [r7, #36]	; 0x24
                    w.battPercent = battpct;
   b4ae0:	f897 b01b 	ldrb.w	fp, [r7, #27]
                    lonRX = atof(testLon);
   b4ae4:	ed87 0b00 	vstr	d0, [r7]
                    Serial.println("Status Update!");
   b4ae8:	f007 fd68 	bl	bc5bc <_Z16_fetch_usbserialv>
   b4aec:	497e      	ldr	r1, [pc, #504]	; (b4ce8 <_Z14processCommandPKchb+0x3dc>)
   b4aee:	f006 fff8 	bl	bbae2 <_ZN5Print7printlnEPKc>
                    Serial.println("##########################");
   b4af2:	f007 fd63 	bl	bc5bc <_Z16_fetch_usbserialv>
   b4af6:	4649      	mov	r1, r9
   b4af8:	f006 fff3 	bl	bbae2 <_ZN5Print7printlnEPKc>
                    Serial.println("##     STATUS UPDATE    ##");
   b4afc:	f007 fd5e 	bl	bc5bc <_Z16_fetch_usbserialv>
   b4b00:	497a      	ldr	r1, [pc, #488]	; (b4cec <_Z14processCommandPKchb+0x3e0>)
   b4b02:	f006 ffee 	bl	bbae2 <_ZN5Print7printlnEPKc>
                    Serial.printlnf("##       Bot #: %1d      ##",w.botNum);
   b4b06:	f007 fd59 	bl	bc5bc <_Z16_fetch_usbserialv>
   b4b0a:	4979      	ldr	r1, [pc, #484]	; (b4cf0 <_Z14processCommandPKchb+0x3e4>)
   b4b0c:	4622      	mov	r2, r4
   b4b0e:	f7ff fc4d 	bl	b43ac <_ZN5Print8printlnfEPKcz>
                    Serial.printlnf("##      Batt %: %03d     ##",w.battPercent);
   b4b12:	f007 fd53 	bl	bc5bc <_Z16_fetch_usbserialv>
   b4b16:	465a      	mov	r2, fp
   b4b18:	4976      	ldr	r1, [pc, #472]	; (b4cf4 <_Z14processCommandPKchb+0x3e8>)
   b4b1a:	f7ff fc47 	bl	b43ac <_ZN5Print8printlnfEPKcz>
                    Serial.println("##    LTE  BLE  XBee    ##");
   b4b1e:	f007 fd4d 	bl	bc5bc <_Z16_fetch_usbserialv>
   b4b22:	4975      	ldr	r1, [pc, #468]	; (b4cf8 <_Z14processCommandPKchb+0x3ec>)
   b4b24:	f006 ffdd 	bl	bbae2 <_ZN5Print7printlnEPKc>
                    Serial.printlnf("##     %d    %d     %d     ##",w.LTEAvail,w.BLEAvail,w.XBeeAvail);
   b4b28:	f007 fd48 	bl	bc5bc <_Z16_fetch_usbserialv>
   b4b2c:	f3ca 0340 	ubfx	r3, sl, #1, #1
   b4b30:	f00a 0201 	and.w	r2, sl, #1
   b4b34:	4971      	ldr	r1, [pc, #452]	; (b4cfc <_Z14processCommandPKchb+0x3f0>)
   b4b36:	9300      	str	r3, [sp, #0]
   b4b38:	f3ca 0380 	ubfx	r3, sl, #2, #1
   b4b3c:	f7ff fc36 	bl	b43ac <_ZN5Print8printlnfEPKcz>
                    Serial.println("##  Latitude Longitude  ##");
   b4b40:	f007 fd3c 	bl	bc5bc <_Z16_fetch_usbserialv>
   b4b44:	496e      	ldr	r1, [pc, #440]	; (b4d00 <_Z14processCommandPKchb+0x3f4>)
   b4b46:	f006 ffcc 	bl	bbae2 <_ZN5Print7printlnEPKc>
                    Serial.printlnf("## %.6f %.6f ##",w.GPSLat,w.GPSLon);
   b4b4a:	f007 fd37 	bl	bc5bc <_Z16_fetch_usbserialv>
   b4b4e:	4682      	mov	sl, r0
                    latRX = atof(testLat);
   b4b50:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   b4b54:	f008 fe7e 	bl	bd854 <__aeabi_d2f>
                    Serial.printlnf("## %.6f %.6f ##",w.GPSLat,w.GPSLon);
   b4b58:	f008 fb6a 	bl	bd230 <__aeabi_f2d>
   b4b5c:	4602      	mov	r2, r0
   b4b5e:	460b      	mov	r3, r1
                    lonRX = atof(testLon);
   b4b60:	e9d7 0100 	ldrd	r0, r1, [r7]
                    Serial.printlnf("## %.6f %.6f ##",w.GPSLat,w.GPSLon);
   b4b64:	e9c7 2302 	strd	r2, r3, [r7, #8]
                    lonRX = atof(testLon);
   b4b68:	f008 fe74 	bl	bd854 <__aeabi_d2f>
                    Serial.printlnf("## %.6f %.6f ##",w.GPSLat,w.GPSLon);
   b4b6c:	f008 fb60 	bl	bd230 <__aeabi_f2d>
   b4b70:	e9cd 0100 	strd	r0, r1, [sp]
   b4b74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   b4b78:	4962      	ldr	r1, [pc, #392]	; (b4d04 <_Z14processCommandPKchb+0x3f8>)
   b4b7a:	4650      	mov	r0, sl
   b4b7c:	f7ff fc16 	bl	b43ac <_ZN5Print8printlnfEPKcz>
                    Serial.println("##########################");
   b4b80:	f007 fd1c 	bl	bc5bc <_Z16_fetch_usbserialv>
   b4b84:	4649      	mov	r1, r9
   b4b86:	f006 ffac 	bl	bbae2 <_ZN5Print7printlnEPKc>
                    newBot = false;
   b4b8a:	2300      	movs	r3, #0
      operator++() _GLIBCXX_NOEXCEPT
   b4b8c:	3618      	adds	r6, #24
	return *this;
   b4b8e:	e787      	b.n	b4aa0 <_Z14processCommandPKchb+0x194>
            if(newBot){
   b4b90:	2b00      	cmp	r3, #0
   b4b92:	d040      	beq.n	b4c16 <_Z14processCommandPKchb+0x30a>
                Serial.println("Found a new water bot ID");
   b4b94:	f007 fd12 	bl	bc5bc <_Z16_fetch_usbserialv>
   b4b98:	495b      	ldr	r1, [pc, #364]	; (b4d08 <_Z14processCommandPKchb+0x3fc>)
   b4b9a:	f006 ffa2 	bl	bbae2 <_ZN5Print7printlnEPKc>
                newWaterbot.BLEAvail = true;
   b4b9e:	2301      	movs	r3, #1
   b4ba0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
                sscanf(dataStr,"%u %u %f %f",&battpct,&statflags,&latRX,&lonRX);
   b4ba4:	f107 0328 	add.w	r3, r7, #40	; 0x28
                newWaterbot.botNum = rxBotID;
   b4ba8:	f887 4038 	strb.w	r4, [r7, #56]	; 0x38
                sscanf(dataStr,"%u %u %f %f",&battpct,&statflags,&latRX,&lonRX);
   b4bac:	9301      	str	r3, [sp, #4]
   b4bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
   b4bb2:	4956      	ldr	r1, [pc, #344]	; (b4d0c <_Z14processCommandPKchb+0x400>)
   b4bb4:	9300      	str	r3, [sp, #0]
   b4bb6:	f107 021a 	add.w	r2, r7, #26
   b4bba:	f107 031b 	add.w	r3, r7, #27
   b4bbe:	4628      	mov	r0, r5
   b4bc0:	f004 f9ca 	bl	b8f58 <sscanf>
                newWaterbot.battPercent = battpct;
   b4bc4:	7ebb      	ldrb	r3, [r7, #26]
   b4bc6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
                newWaterbot.LTEAvail = statflags & 1;
   b4bca:	7efb      	ldrb	r3, [r7, #27]
                WaterBots.push_back(newWaterbot);
   b4bcc:	4844      	ldr	r0, [pc, #272]	; (b4ce0 <_Z14processCommandPKchb+0x3d4>)
                newWaterbot.LTEAvail = statflags & 1;
   b4bce:	f003 0201 	and.w	r2, r3, #1
   b4bd2:	f887 203b 	strb.w	r2, [r7, #59]	; 0x3b
                newWaterbot.XBeeAvail = (statflags >> 1) & 1;
   b4bd6:	f3c3 0240 	ubfx	r2, r3, #1, #1
   b4bda:	f887 203c 	strb.w	r2, [r7, #60]	; 0x3c
                newWaterbot.BLEAvail = (statflags >> 2) & 1;
   b4bde:	f3c3 0280 	ubfx	r2, r3, #2, #1
   b4be2:	f887 203a 	strb.w	r2, [r7, #58]	; 0x3a
                newWaterbot.offloading = (statflags >> 3) & 1;
   b4be6:	f3c3 02c0 	ubfx	r2, r3, #3, #1
   b4bea:	f887 2040 	strb.w	r2, [r7, #64]	; 0x40
                newWaterbot.manualRC = (statflags >> 4) & 1;
   b4bee:	f3c3 1200 	ubfx	r2, r3, #4, #1
   b4bf2:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
                newWaterbot.lowBatt = (statflags >> 5) & 1;
   b4bf6:	f3c3 1240 	ubfx	r2, r3, #5, #1
                newWaterbot.dataRecording = (statflags >> 6) & 1;
   b4bfa:	f3c3 1380 	ubfx	r3, r3, #6, #1
   b4bfe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                newWaterbot.GPSLat = latRX;
   b4c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   b4c04:	647b      	str	r3, [r7, #68]	; 0x44
                WaterBots.push_back(newWaterbot);
   b4c06:	f107 0138 	add.w	r1, r7, #56	; 0x38
                newWaterbot.GPSLon = lonRX;
   b4c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
                newWaterbot.lowBatt = (statflags >> 5) & 1;
   b4c0c:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
                newWaterbot.GPSLon = lonRX;
   b4c10:	64bb      	str	r3, [r7, #72]	; 0x48
                WaterBots.push_back(newWaterbot);
   b4c12:	f7ff fe63 	bl	b48dc <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
   b4c16:	46c5      	mov	sp, r8
}
   b4c18:	376c      	adds	r7, #108	; 0x6c
   b4c1a:	46bd      	mov	sp, r7
   b4c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if(!strcmp(cmdStr,"nak")){  //Acknowledgement for XBee and BLE
   b4c20:	493b      	ldr	r1, [pc, #236]	; (b4d10 <_Z14processCommandPKchb+0x404>)
   b4c22:	f107 0020 	add.w	r0, r7, #32
   b4c26:	f008 ff0e 	bl	bda46 <strcmp>
   b4c2a:	b930      	cbnz	r0, b4c3a <_Z14processCommandPKchb+0x32e>
            strncpy(errCmdStr,dataStr,3);
   b4c2c:	4839      	ldr	r0, [pc, #228]	; (b4d14 <_Z14processCommandPKchb+0x408>)
   b4c2e:	2203      	movs	r2, #3
   b4c30:	4629      	mov	r1, r5
   b4c32:	f008 ff54 	bl	bdade <strncpy>
            errCmdMode = mode;
   b4c36:	4b38      	ldr	r3, [pc, #224]	; (b4d18 <_Z14processCommandPKchb+0x40c>)
   b4c38:	e711      	b.n	b4a5e <_Z14processCommandPKchb+0x152>
        else if(!strcmp(cmdStr,"hwd")){  //Hello World! - Received startup pairing message
   b4c3a:	4938      	ldr	r1, [pc, #224]	; (b4d1c <_Z14processCommandPKchb+0x410>)
   b4c3c:	f107 0020 	add.w	r0, r7, #32
   b4c40:	f008 ff01 	bl	bda46 <strcmp>
   b4c44:	2800      	cmp	r0, #0
   b4c46:	d171      	bne.n	b4d2c <_Z14processCommandPKchb+0x420>
      : _M_current(__i) { }
   b4c48:	4b25      	ldr	r3, [pc, #148]	; (b4ce0 <_Z14processCommandPKchb+0x3d4>)
   b4c4a:	e9d3 2000 	ldrd	r2, r0, [r3]
            bool newBot = true;
   b4c4e:	2301      	movs	r3, #1
            for(WaterBot w: WaterBots){
   b4c50:	4282      	cmp	r2, r0
   b4c52:	d005      	beq.n	b4c60 <_Z14processCommandPKchb+0x354>
                if(rxBotID == w.botNum) newBot = false;
   b4c54:	f812 1b18 	ldrb.w	r1, [r2], #24
   b4c58:	42a1      	cmp	r1, r4
   b4c5a:	bf08      	it	eq
   b4c5c:	2300      	moveq	r3, #0
	return *this;
   b4c5e:	e7f7      	b.n	b4c50 <_Z14processCommandPKchb+0x344>
            if(newBot){
   b4c60:	b1ab      	cbz	r3, b4c8e <_Z14processCommandPKchb+0x382>
                Serial.println("Found a new water bot ID");
   b4c62:	f007 fcab 	bl	bc5bc <_Z16_fetch_usbserialv>
   b4c66:	4928      	ldr	r1, [pc, #160]	; (b4d08 <_Z14processCommandPKchb+0x3fc>)
   b4c68:	f006 ff3b 	bl	bbae2 <_ZN5Print7printlnEPKc>
                if(mode == 1) newWaterbot.BLEAvail = true;
   b4c6c:	f1ba 0f01 	cmp.w	sl, #1
   b4c70:	d111      	bne.n	b4c96 <_Z14processCommandPKchb+0x38a>
   b4c72:	f887 a03a 	strb.w	sl, [r7, #58]	; 0x3a
                WaterBots.push_back(newWaterbot);
   b4c76:	481a      	ldr	r0, [pc, #104]	; (b4ce0 <_Z14processCommandPKchb+0x3d4>)
                newWaterbot.botNum = rxBotID;
   b4c78:	f887 4038 	strb.w	r4, [r7, #56]	; 0x38
                WaterBots.push_back(newWaterbot);
   b4c7c:	f107 0138 	add.w	r1, r7, #56	; 0x38
   b4c80:	f7ff fe2c 	bl	b48dc <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
                PairBots.push_back(newWaterbot);
   b4c84:	4826      	ldr	r0, [pc, #152]	; (b4d20 <_Z14processCommandPKchb+0x414>)
   b4c86:	f107 0138 	add.w	r1, r7, #56	; 0x38
   b4c8a:	f7ff fe27 	bl	b48dc <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
            botPairRx = true;
   b4c8e:	4b25      	ldr	r3, [pc, #148]	; (b4d24 <_Z14processCommandPKchb+0x418>)
   b4c90:	2201      	movs	r2, #1
   b4c92:	701a      	strb	r2, [r3, #0]
   b4c94:	e7bf      	b.n	b4c16 <_Z14processCommandPKchb+0x30a>
                else if(mode == 2) newWaterbot.XBeeAvail = true;
   b4c96:	f1ba 0f02 	cmp.w	sl, #2
   b4c9a:	f04f 0301 	mov.w	r3, #1
   b4c9e:	d102      	bne.n	b4ca6 <_Z14processCommandPKchb+0x39a>
   b4ca0:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
   b4ca4:	e7e7      	b.n	b4c76 <_Z14processCommandPKchb+0x36a>
                else if(mode == 3) newWaterbot.LTEAvail = true;
   b4ca6:	f1ba 0f03 	cmp.w	sl, #3
   b4caa:	bf08      	it	eq
   b4cac:	f887 303b 	strbeq.w	r3, [r7, #59]	; 0x3b
   b4cb0:	e7e1      	b.n	b4c76 <_Z14processCommandPKchb+0x36a>
   b4cb2:	bf00      	nop
   b4cb4:	000bfbf4 	.word	0x000bfbf4
   b4cb8:	2003ddc0 	.word	0x2003ddc0
   b4cbc:	000bfc09 	.word	0x000bfc09
   b4cc0:	2003dd68 	.word	0x2003dd68
   b4cc4:	000bfc26 	.word	0x000bfc26
   b4cc8:	000bfc52 	.word	0x000bfc52
   b4ccc:	000bfc73 	.word	0x000bfc73
   b4cd0:	2003dd54 	.word	0x2003dd54
   b4cd4:	2003dd67 	.word	0x2003dd67
   b4cd8:	000bfc7f 	.word	0x000bfc7f
   b4cdc:	000bfc83 	.word	0x000bfc83
   b4ce0:	2003dcb4 	.word	0x2003dcb4
   b4ce4:	000bfc87 	.word	0x000bfc87
   b4ce8:	000bfc93 	.word	0x000bfc93
   b4cec:	000bfcbd 	.word	0x000bfcbd
   b4cf0:	000bfcd8 	.word	0x000bfcd8
   b4cf4:	000bfcf4 	.word	0x000bfcf4
   b4cf8:	000bfd10 	.word	0x000bfd10
   b4cfc:	000bfd2b 	.word	0x000bfd2b
   b4d00:	000bfd49 	.word	0x000bfd49
   b4d04:	000bfd64 	.word	0x000bfd64
   b4d08:	000bfd74 	.word	0x000bfd74
   b4d0c:	000bfd8d 	.word	0x000bfd8d
   b4d10:	000bfd99 	.word	0x000bfd99
   b4d14:	2003dd64 	.word	0x2003dd64
   b4d18:	2003dd63 	.word	0x2003dd63
   b4d1c:	000c00a7 	.word	0x000c00a7
   b4d20:	2003dc9c 	.word	0x2003dc9c
   b4d24:	2003dd4c 	.word	0x2003dd4c
   b4d28:	000bfca2 	.word	0x000bfca2
        else if(!strcmp(cmdStr,"pts")){
   b4d2c:	4925      	ldr	r1, [pc, #148]	; (b4dc4 <_Z14processCommandPKchb+0x4b8>)
   b4d2e:	f107 0020 	add.w	r0, r7, #32
   b4d32:	f008 fe88 	bl	bda46 <strcmp>
   b4d36:	2800      	cmp	r0, #0
   b4d38:	f47f af6d 	bne.w	b4c16 <_Z14processCommandPKchb+0x30a>
            Serial.println(dataStr);
   b4d3c:	f007 fc3e 	bl	bc5bc <_Z16_fetch_usbserialv>
   b4d40:	4629      	mov	r1, r5
   b4d42:	f006 fece 	bl	bbae2 <_ZN5Print7printlnEPKc>
            myFile.open("RawWrite.txt", O_RDWR | O_CREAT | O_AT_END);
   b4d46:	f244 2202 	movw	r2, #16898	; 0x4202
   b4d4a:	491f      	ldr	r1, [pc, #124]	; (b4dc8 <_Z14processCommandPKchb+0x4bc>)
   b4d4c:	481f      	ldr	r0, [pc, #124]	; (b4dcc <_Z14processCommandPKchb+0x4c0>)
   b4d4e:	f7ff fbbd 	bl	b44cc <_ZN7FatFile4openEPKci>
            String modeStr[3] = {"LTE", "XBee", "Bluetooth"};
   b4d52:	491f      	ldr	r1, [pc, #124]	; (b4dd0 <_Z14processCommandPKchb+0x4c4>)
   b4d54:	f107 0038 	add.w	r0, r7, #56	; 0x38
   b4d58:	f004 faa7 	bl	b92aa <_ZN6StringC1EPK19__FlashStringHelper>
   b4d5c:	491d      	ldr	r1, [pc, #116]	; (b4dd4 <_Z14processCommandPKchb+0x4c8>)
   b4d5e:	f107 0048 	add.w	r0, r7, #72	; 0x48
   b4d62:	f004 faa2 	bl	b92aa <_ZN6StringC1EPK19__FlashStringHelper>
   b4d66:	491c      	ldr	r1, [pc, #112]	; (b4dd8 <_Z14processCommandPKchb+0x4cc>)
   b4d68:	f107 0058 	add.w	r0, r7, #88	; 0x58
   b4d6c:	f004 fa9d 	bl	b92aa <_ZN6StringC1EPK19__FlashStringHelper>
            myFile.printf("New string from %s: ", modeStr[mode]);
   b4d70:	f107 0338 	add.w	r3, r7, #56	; 0x38
   b4d74:	eb03 110a 	add.w	r1, r3, sl, lsl #4
   b4d78:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b4d7c:	f004 fae0 	bl	b9340 <_ZN6StringC1ERKS_>
   b4d80:	f107 0228 	add.w	r2, r7, #40	; 0x28
   b4d84:	4915      	ldr	r1, [pc, #84]	; (b4ddc <_Z14processCommandPKchb+0x4d0>)
   b4d86:	4816      	ldr	r0, [pc, #88]	; (b4de0 <_Z14processCommandPKchb+0x4d4>)
   b4d88:	f7ff fad7 	bl	b433a <_ZN5Print6printfEPKcz>
   b4d8c:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b4d90:	f004 fa40 	bl	b9214 <_ZN6StringD1Ev>
            myFile.println(dataStr);
   b4d94:	4629      	mov	r1, r5
   b4d96:	4812      	ldr	r0, [pc, #72]	; (b4de0 <_Z14processCommandPKchb+0x4d4>)
   b4d98:	f006 fea3 	bl	bbae2 <_ZN5Print7printlnEPKc>
            delay(5);
   b4d9c:	2005      	movs	r0, #5
   b4d9e:	f006 fff9 	bl	bbd94 <delay>
            myFile.close();
   b4da2:	480a      	ldr	r0, [pc, #40]	; (b4dcc <_Z14processCommandPKchb+0x4c0>)
   b4da4:	f002 fafc 	bl	b73a0 <_ZN7FatFile5closeEv>
            String modeStr[3] = {"LTE", "XBee", "Bluetooth"};
   b4da8:	f107 0058 	add.w	r0, r7, #88	; 0x58
   b4dac:	f004 fa32 	bl	b9214 <_ZN6StringD1Ev>
   b4db0:	f107 0048 	add.w	r0, r7, #72	; 0x48
   b4db4:	f004 fa2e 	bl	b9214 <_ZN6StringD1Ev>
   b4db8:	f107 0038 	add.w	r0, r7, #56	; 0x38
   b4dbc:	f004 fa2a 	bl	b9214 <_ZN6StringD1Ev>
        if(sendAck){    //Transmit out acknowledgement if needed
   b4dc0:	e729      	b.n	b4c16 <_Z14processCommandPKchb+0x30a>
   b4dc2:	bf00      	nop
   b4dc4:	000bfd9d 	.word	0x000bfd9d
   b4dc8:	000bfda1 	.word	0x000bfda1
   b4dcc:	2003de08 	.word	0x2003de08
   b4dd0:	000bfdae 	.word	0x000bfdae
   b4dd4:	000bfdb2 	.word	0x000bfdb2
   b4dd8:	000bfdb7 	.word	0x000bfdb7
   b4ddc:	000bfdc1 	.word	0x000bfdc1
   b4de0:	2003ddf8 	.word	0x2003ddf8

000b4de4 <_Z14dataLTEHandlerPKcS0_>:
void dataLTEHandler(const char *event, const char *data){
   b4de4:	b510      	push	{r4, lr}
   b4de6:	460c      	mov	r4, r1
    processCommand(data, 4,false);
   b4de8:	2200      	movs	r2, #0
   b4dea:	2104      	movs	r1, #4
   b4dec:	4620      	mov	r0, r4
   b4dee:	f7ff fd8d 	bl	b490c <_Z14processCommandPKchb>
    if(logMessages){
   b4df2:	4b0b      	ldr	r3, [pc, #44]	; (b4e20 <_Z14dataLTEHandlerPKcS0_+0x3c>)
   b4df4:	781b      	ldrb	r3, [r3, #0]
   b4df6:	b193      	cbz	r3, b4e1e <_Z14dataLTEHandlerPKcS0_+0x3a>
   b4df8:	480a      	ldr	r0, [pc, #40]	; (b4e24 <_Z14dataLTEHandlerPKcS0_+0x40>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4dfa:	7c03      	ldrb	r3, [r0, #16]
   b4dfc:	b92b      	cbnz	r3, b4e0a <_Z14dataLTEHandlerPKcS0_+0x26>
   b4dfe:	490a      	ldr	r1, [pc, #40]	; (b4e28 <_Z14dataLTEHandlerPKcS0_+0x44>)
   b4e00:	f244 2202 	movw	r2, #16898	; 0x4202
   b4e04:	3010      	adds	r0, #16
   b4e06:	f7ff fb61 	bl	b44cc <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
   b4e0a:	4622      	mov	r2, r4
   b4e0c:	4907      	ldr	r1, [pc, #28]	; (b4e2c <_Z14dataLTEHandlerPKcS0_+0x48>)
   b4e0e:	4805      	ldr	r0, [pc, #20]	; (b4e24 <_Z14dataLTEHandlerPKcS0_+0x40>)
   b4e10:	f7ff facc 	bl	b43ac <_ZN5Print8printlnfEPKcz>
}
   b4e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        logFile.close();
   b4e18:	4805      	ldr	r0, [pc, #20]	; (b4e30 <_Z14dataLTEHandlerPKcS0_+0x4c>)
   b4e1a:	f002 bac1 	b.w	b73a0 <_ZN7FatFile5closeEv>
}
   b4e1e:	bd10      	pop	{r4, pc}
   b4e20:	2003ddf4 	.word	0x2003ddf4
   b4e24:	2003ddc0 	.word	0x2003ddc0
   b4e28:	2003dd68 	.word	0x2003dd68
   b4e2c:	000bfdd6 	.word	0x000bfdd6
   b4e30:	2003ddd0 	.word	0x2003ddd0

000b4e34 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4e34:	b5b0      	push	{r4, r5, r7, lr}
    char btBuf[len+1];
   b4e36:	f101 0308 	add.w	r3, r1, #8
   b4e3a:	f023 0307 	bic.w	r3, r3, #7
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4e3e:	af00      	add	r7, sp, #0
    char btBuf[len+1];
   b4e40:	ebad 0d03 	sub.w	sp, sp, r3
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4e44:	460c      	mov	r4, r1
    for (size_t ii = 0; ii < len; ii++) btBuf[ii] = data[ii];
   b4e46:	460a      	mov	r2, r1
   b4e48:	4601      	mov	r1, r0
   b4e4a:	4668      	mov	r0, sp
   b4e4c:	f008 fd8d 	bl	bd96a <memcpy>
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b4e50:	eb0d 0304 	add.w	r3, sp, r4
    char btBuf[len+1];
   b4e54:	466d      	mov	r5, sp
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b4e56:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b4e5a:	b113      	cbz	r3, b4e62 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e>
   b4e5c:	2300      	movs	r3, #0
   b4e5e:	f80d 3004 	strb.w	r3, [sp, r4]
    Serial.print("New BT Command: ");
   b4e62:	f007 fbab 	bl	bc5bc <_Z16_fetch_usbserialv>
   b4e66:	4911      	ldr	r1, [pc, #68]	; (b4eac <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x78>)
   b4e68:	f006 fe28 	bl	bbabc <_ZN5Print5printEPKc>
    Serial.println(btBuf);
   b4e6c:	f007 fba6 	bl	bc5bc <_Z16_fetch_usbserialv>
   b4e70:	4629      	mov	r1, r5
   b4e72:	f006 fe36 	bl	bbae2 <_ZN5Print7printlnEPKc>
    processCommand(btBuf,1,true);
   b4e76:	2201      	movs	r2, #1
   b4e78:	4611      	mov	r1, r2
   b4e7a:	4628      	mov	r0, r5
   b4e7c:	f7ff fd46 	bl	b490c <_Z14processCommandPKchb>
    if(logMessages){
   b4e80:	4b0b      	ldr	r3, [pc, #44]	; (b4eb0 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7c>)
   b4e82:	781b      	ldrb	r3, [r3, #0]
   b4e84:	b183      	cbz	r3, b4ea8 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x74>
   b4e86:	480b      	ldr	r0, [pc, #44]	; (b4eb4 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x80>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4e88:	7c03      	ldrb	r3, [r0, #16]
   b4e8a:	b92b      	cbnz	r3, b4e98 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x64>
   b4e8c:	490a      	ldr	r1, [pc, #40]	; (b4eb8 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x84>)
   b4e8e:	f244 2202 	movw	r2, #16898	; 0x4202
   b4e92:	3010      	adds	r0, #16
   b4e94:	f7ff fb1a 	bl	b44cc <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
   b4e98:	4908      	ldr	r1, [pc, #32]	; (b4ebc <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x88>)
   b4e9a:	4806      	ldr	r0, [pc, #24]	; (b4eb4 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x80>)
   b4e9c:	462a      	mov	r2, r5
   b4e9e:	f7ff fa85 	bl	b43ac <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b4ea2:	4807      	ldr	r0, [pc, #28]	; (b4ec0 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8c>)
   b4ea4:	f002 fa7c 	bl	b73a0 <_ZN7FatFile5closeEv>
}
   b4ea8:	46bd      	mov	sp, r7
   b4eaa:	bdb0      	pop	{r4, r5, r7, pc}
   b4eac:	000bfdf6 	.word	0x000bfdf6
   b4eb0:	2003ddf4 	.word	0x2003ddf4
   b4eb4:	2003ddc0 	.word	0x2003ddc0
   b4eb8:	2003dd68 	.word	0x2003dd68
   b4ebc:	000bfe07 	.word	0x000bfe07
   b4ec0:	2003ddd0 	.word	0x2003ddd0

000b4ec4 <_Z11XBeeHandlerv>:
void XBeeHandler(){  
   b4ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        Serial.println("New XBee Command:");
   b4ec8:	f8df 80ec 	ldr.w	r8, [pc, #236]	; b4fb8 <_Z11XBeeHandlerv+0xf4>
        if(logMessages){
   b4ecc:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b4fbc <_Z11XBeeHandlerv+0xf8>
   b4ed0:	4d35      	ldr	r5, [pc, #212]	; (b4fa8 <_Z11XBeeHandlerv+0xe4>)
void XBeeHandler(){  
   b4ed2:	b089      	sub	sp, #36	; 0x24
   b4ed4:	af00      	add	r7, sp, #0
    while(Serial1.available()){
   b4ed6:	f007 fe1b 	bl	bcb10 <_Z22__fetch_global_Serial1v>
   b4eda:	6803      	ldr	r3, [r0, #0]
   b4edc:	691b      	ldr	r3, [r3, #16]
   b4ede:	4798      	blx	r3
   b4ee0:	2800      	cmp	r0, #0
   b4ee2:	d05c      	beq.n	b4f9e <_Z11XBeeHandlerv+0xda>
        String data = Serial1.readStringUntil('\n');
   b4ee4:	f007 fe14 	bl	bcb10 <_Z22__fetch_global_Serial1v>
   b4ee8:	220a      	movs	r2, #10
   b4eea:	4601      	mov	r1, r0
   b4eec:	4638      	mov	r0, r7
   b4eee:	f006 fe67 	bl	bbbc0 <_ZN6Stream15readStringUntilEc>
        char buffer[data.length()];
   b4ef2:	68bb      	ldr	r3, [r7, #8]
   b4ef4:	3307      	adds	r3, #7
   b4ef6:	f023 0307 	bic.w	r3, r3, #7
    }
   b4efa:	466e      	mov	r6, sp
        char buffer[data.length()];
   b4efc:	ebad 0d03 	sub.w	sp, sp, r3
   b4f00:	46ea      	mov	sl, sp
   b4f02:	2300      	movs	r3, #0
	// memory management
	// return true on success, false on failure (in which case, the string
	// is left unchanged).  reserve(0), if successful, will validate an
	// invalid string (i.e., "if (s)" will be true afterwards)
	unsigned char reserve(unsigned int size);
	inline unsigned int length(void) const {return len;}
   b4f04:	68b9      	ldr	r1, [r7, #8]
   b4f06:	fa1f fb83 	uxth.w	fp, r3
        for(uint16_t i = 0 ; i < data.length(); i++) buffer[i] = data.charAt(i);
   b4f0a:	458b      	cmp	fp, r1
   b4f0c:	f103 0401 	add.w	r4, r3, #1
   b4f10:	d207      	bcs.n	b4f22 <_Z11XBeeHandlerv+0x5e>
   b4f12:	4659      	mov	r1, fp
   b4f14:	4638      	mov	r0, r7
   b4f16:	f004 fa7f 	bl	b9418 <_ZNK6String6charAtEj>
   b4f1a:	4623      	mov	r3, r4
   b4f1c:	f80a 000b 	strb.w	r0, [sl, fp]
   b4f20:	e7f0      	b.n	b4f04 <_Z11XBeeHandlerv+0x40>
        if(data.length() > 1 && data.charAt(data.length()-1) == '\r') buffer[data.length()-1] = 0;
   b4f22:	2901      	cmp	r1, #1
   b4f24:	d90a      	bls.n	b4f3c <_Z11XBeeHandlerv+0x78>
   b4f26:	3901      	subs	r1, #1
   b4f28:	4638      	mov	r0, r7
   b4f2a:	f004 fa75 	bl	b9418 <_ZNK6String6charAtEj>
   b4f2e:	280d      	cmp	r0, #13
   b4f30:	bf01      	itttt	eq
   b4f32:	68bb      	ldreq	r3, [r7, #8]
   b4f34:	4453      	addeq	r3, sl
   b4f36:	2200      	moveq	r2, #0
   b4f38:	f803 2c01 	strbeq.w	r2, [r3, #-1]
        processCommand(buffer,2,true);
   b4f3c:	2201      	movs	r2, #1
   b4f3e:	2102      	movs	r1, #2
   b4f40:	4650      	mov	r0, sl
   b4f42:	f7ff fce3 	bl	b490c <_Z14processCommandPKchb>
        Serial.println("New XBee Command:");
   b4f46:	f007 fb39 	bl	bc5bc <_Z16_fetch_usbserialv>
   b4f4a:	4641      	mov	r1, r8
   b4f4c:	f006 fdc9 	bl	bbae2 <_ZN5Print7printlnEPKc>
        Serial.println(data); 
   b4f50:	f007 fb34 	bl	bc5bc <_Z16_fetch_usbserialv>
   b4f54:	6839      	ldr	r1, [r7, #0]
   b4f56:	f006 fdc4 	bl	bbae2 <_ZN5Print7printlnEPKc>
        if(logMessages){
   b4f5a:	f899 3000 	ldrb.w	r3, [r9]
   b4f5e:	b1cb      	cbz	r3, b4f94 <_Z11XBeeHandlerv+0xd0>
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4f60:	7c2b      	ldrb	r3, [r5, #16]
   b4f62:	b92b      	cbnz	r3, b4f70 <_Z11XBeeHandlerv+0xac>
   b4f64:	4911      	ldr	r1, [pc, #68]	; (b4fac <_Z11XBeeHandlerv+0xe8>)
   b4f66:	4812      	ldr	r0, [pc, #72]	; (b4fb0 <_Z11XBeeHandlerv+0xec>)
   b4f68:	f244 2202 	movw	r2, #16898	; 0x4202
   b4f6c:	f7ff faae 	bl	b44cc <_ZN7FatFile4openEPKci>
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
   b4f70:	4639      	mov	r1, r7
   b4f72:	f107 0010 	add.w	r0, r7, #16
   b4f76:	f004 f9e3 	bl	b9340 <_ZN6StringC1ERKS_>
   b4f7a:	490e      	ldr	r1, [pc, #56]	; (b4fb4 <_Z11XBeeHandlerv+0xf0>)
   b4f7c:	f107 0210 	add.w	r2, r7, #16
   b4f80:	4628      	mov	r0, r5
   b4f82:	f7ff fa13 	bl	b43ac <_ZN5Print8printlnfEPKcz>
   b4f86:	f107 0010 	add.w	r0, r7, #16
   b4f8a:	f004 f943 	bl	b9214 <_ZN6StringD1Ev>
            logFile.close();
   b4f8e:	4808      	ldr	r0, [pc, #32]	; (b4fb0 <_Z11XBeeHandlerv+0xec>)
   b4f90:	f002 fa06 	bl	b73a0 <_ZN7FatFile5closeEv>
        String data = Serial1.readStringUntil('\n');
   b4f94:	4638      	mov	r0, r7
   b4f96:	f004 f93d 	bl	b9214 <_ZN6StringD1Ev>
   b4f9a:	46b5      	mov	sp, r6
    while(Serial1.available()){
   b4f9c:	e79b      	b.n	b4ed6 <_Z11XBeeHandlerv+0x12>
}
   b4f9e:	3724      	adds	r7, #36	; 0x24
   b4fa0:	46bd      	mov	sp, r7
   b4fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4fa6:	bf00      	nop
   b4fa8:	2003ddc0 	.word	0x2003ddc0
   b4fac:	2003dd68 	.word	0x2003dd68
   b4fb0:	2003ddd0 	.word	0x2003ddd0
   b4fb4:	000bfe39 	.word	0x000bfe39
   b4fb8:	000bfe27 	.word	0x000bfe27
   b4fbc:	2003ddf4 	.word	0x2003ddf4

000b4fc0 <_Z11WaterBotSimh>:
void WaterBotSim(uint8_t count){
   b4fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4fc4:	4d19      	ldr	r5, [pc, #100]	; (b502c <_Z11WaterBotSimh+0x6c>)
        WaterBots.push_back(simBot);
   b4fc6:	f8df 8064 	ldr.w	r8, [pc, #100]	; b502c <_Z11WaterBotSimh+0x6c>
   b4fca:	e9d5 2300 	ldrd	r2, r3, [r5]
   b4fce:	1a9b      	subs	r3, r3, r2
   b4fd0:	4a17      	ldr	r2, [pc, #92]	; (b5030 <_Z11WaterBotSimh+0x70>)
   b4fd2:	10db      	asrs	r3, r3, #3
   b4fd4:	4353      	muls	r3, r2
    if(count + WaterBots.size() > 10) count = 10-WaterBots.size();
   b4fd6:	b2dc      	uxtb	r4, r3
   b4fd8:	4403      	add	r3, r0
   b4fda:	2b0a      	cmp	r3, #10
   b4fdc:	bf84      	itt	hi
   b4fde:	f1c4 000a 	rsbhi	r0, r4, #10
   b4fe2:	b2c0      	uxtbhi	r0, r0
    uint8_t botloop = count+WaterBots.size();
   b4fe4:	4420      	add	r0, r4
void WaterBotSim(uint8_t count){
   b4fe6:	b086      	sub	sp, #24
    uint8_t botloop = count+WaterBots.size();
   b4fe8:	b2c4      	uxtb	r4, r0
   b4fea:	2600      	movs	r6, #0
        simBot.XBeeAvail = true;
   b4fec:	2701      	movs	r7, #1
   b4fee:	b2f2      	uxtb	r2, r6
    for(uint8_t temp = 0; temp < botloop; temp++){
   b4ff0:	4294      	cmp	r4, r2
   b4ff2:	d917      	bls.n	b5024 <_Z11WaterBotSimh+0x64>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b4ff4:	e9d5 1c00 	ldrd	r1, ip, [r5]
        int dupeBot = false;
   b4ff8:	2300      	movs	r3, #0
        for(WaterBot wb: WaterBots){
   b4ffa:	458c      	cmp	ip, r1
   b4ffc:	d005      	beq.n	b500a <_Z11WaterBotSimh+0x4a>
            if(wb.botNum == temp) dupeBot = true;
   b4ffe:	f811 0b18 	ldrb.w	r0, [r1], #24
   b5002:	4290      	cmp	r0, r2
   b5004:	bf08      	it	eq
   b5006:	2301      	moveq	r3, #1
	return *this;
   b5008:	e7f7      	b.n	b4ffa <_Z11WaterBotSimh+0x3a>
        if(dupeBot) continue;
   b500a:	b94b      	cbnz	r3, b5020 <_Z11WaterBotSimh+0x60>
        WaterBots.push_back(simBot);
   b500c:	4669      	mov	r1, sp
   b500e:	4640      	mov	r0, r8
        simBot.botNum = temp;
   b5010:	f88d 2000 	strb.w	r2, [sp]
        simBot.BLEAvail = false;
   b5014:	f8ad 3002 	strh.w	r3, [sp, #2]
        simBot.XBeeAvail = true;
   b5018:	f88d 7004 	strb.w	r7, [sp, #4]
        WaterBots.push_back(simBot);
   b501c:	f7ff fc5e 	bl	b48dc <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
    for(uint8_t temp = 0; temp < botloop; temp++){
   b5020:	3601      	adds	r6, #1
   b5022:	e7e4      	b.n	b4fee <_Z11WaterBotSimh+0x2e>
}
   b5024:	b006      	add	sp, #24
   b5026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b502a:	bf00      	nop
   b502c:	2003dcb4 	.word	0x2003dcb4
   b5030:	aaaaaaab 	.word	0xaaaaaaab

000b5034 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
   b5034:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5038:	e9d0 8900 	ldrd	r8, r9, [r0]
   b503c:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
   b503e:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5042:	eba9 0208 	sub.w	r2, r9, r8
	if (max_size() - size() < __n)
   b5046:	ebb3 0fe2 	cmp.w	r3, r2, asr #3
   b504a:	4607      	mov	r7, r0
   b504c:	468a      	mov	sl, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b504e:	ea4f 04e2 	mov.w	r4, r2, asr #3
	if (max_size() - size() < __n)
   b5052:	d102      	bne.n	b505a <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   b5054:	4820      	ldr	r0, [pc, #128]	; (b50d8 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa4>)
   b5056:	f007 fdc0 	bl	bcbda <_ZSt20__throw_length_errorPKc>
   b505a:	2c01      	cmp	r4, #1
   b505c:	4622      	mov	r2, r4
   b505e:	bf38      	it	cc
   b5060:	2201      	movcc	r2, #1
   b5062:	18a4      	adds	r4, r4, r2
    { return __lhs.base() - __rhs.base(); }
   b5064:	eba1 0508 	sub.w	r5, r1, r8
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b5068:	d231      	bcs.n	b50ce <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b506a:	b394      	cbz	r4, b50d2 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9e>
   b506c:	429c      	cmp	r4, r3
   b506e:	bf28      	it	cs
   b5070:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b5072:	00e0      	lsls	r0, r4, #3
   b5074:	f7ff f80f 	bl	b4096 <_Znwj>
   b5078:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b507a:	1973      	adds	r3, r6, r5
   b507c:	bf1c      	itt	ne
   b507e:	e9db 0100 	ldrdne	r0, r1, [fp]
   b5082:	e9c3 0100 	strdne	r0, r1, [r3]
      if (__count > 0)
   b5086:	2d00      	cmp	r5, #0
   b5088:	dd04      	ble.n	b5094 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x60>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b508a:	462a      	mov	r2, r5
   b508c:	4641      	mov	r1, r8
   b508e:	4630      	mov	r0, r6
   b5090:	f008 fc79 	bl	bd986 <memmove>
      ptrdiff_t __count = __last - __first;
   b5094:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
   b5098:	3508      	adds	r5, #8
      if (__count > 0)
   b509a:	f1b9 0f00 	cmp.w	r9, #0
   b509e:	4435      	add	r5, r6
   b50a0:	dd04      	ble.n	b50ac <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x78>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b50a2:	464a      	mov	r2, r9
   b50a4:	4651      	mov	r1, sl
   b50a6:	4628      	mov	r0, r5
   b50a8:	f008 fc5f 	bl	bd96a <memcpy>
      return __result + __count;
   b50ac:	444d      	add	r5, r9
	if (__p)
   b50ae:	f1b8 0f00 	cmp.w	r8, #0
   b50b2:	d005      	beq.n	b50c0 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
   b50b4:	68b9      	ldr	r1, [r7, #8]
	::operator delete(__p
   b50b6:	4640      	mov	r0, r8
   b50b8:	eba1 0108 	sub.w	r1, r1, r8
   b50bc:	f7fe ffef 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b50c0:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
      this->_M_impl._M_finish = __new_finish;
   b50c4:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b50c8:	60bc      	str	r4, [r7, #8]
    }
   b50ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b50ce:	461c      	mov	r4, r3
   b50d0:	e7cf      	b.n	b5072 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b50d2:	4626      	mov	r6, r4
   b50d4:	e7d1      	b.n	b507a <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
   b50d6:	bf00      	nop
   b50d8:	000bfbda 	.word	0x000bfbda

000b50dc <_Z7BLEScani>:
void BLEScan(int BotNumber){
   b50dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b50e0:	b09f      	sub	sp, #124	; 0x7c
   b50e2:	4606      	mov	r6, r0
    size_t count = BLE.scan(scanResults, SCAN_RESULT_COUNT);
   b50e4:	f004 fe9c 	bl	b9e20 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b50e8:	4976      	ldr	r1, [pc, #472]	; (b52c4 <_Z7BLEScani+0x1e8>)
   b50ea:	2214      	movs	r2, #20
   b50ec:	f004 ff8c 	bl	ba008 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>
	if (count > 0) {
   b50f0:	4680      	mov	r8, r0
   b50f2:	2800      	cmp	r0, #0
   b50f4:	f000 80e2 	beq.w	b52bc <_Z7BLEScani+0x1e0>
    const BleAddress& address() const {
        return address_;
    }

    const BleAdvertisingData& advertisingData() const {
        return advertisingData_;
   b50f8:	f8df b1c8 	ldr.w	fp, [pc, #456]	; b52c4 <_Z7BLEScani+0x1e8>
		for (uint8_t ii = 0; ii < count; ii++) {
   b50fc:	2400      	movs	r4, #0
			BleUuid foundServiceUuid;
   b50fe:	eb04 09c4 	add.w	r9, r4, r4, lsl #3
   b5102:	ea4f 0989 	mov.w	r9, r9, lsl #2
   b5106:	f109 0708 	add.w	r7, r9, #8
   b510a:	a80b      	add	r0, sp, #44	; 0x2c
   b510c:	445f      	add	r7, fp
   b510e:	f004 faeb 	bl	b96e8 <_ZN8particle7BleUuidC1Ev>
			size_t svcCount = scanResults[ii].advertisingData().serviceUUID(&foundServiceUuid, 1);
   b5112:	2201      	movs	r2, #1
   b5114:	a90b      	add	r1, sp, #44	; 0x2c
   b5116:	4638      	mov	r0, r7
   b5118:	f005 fe3e 	bl	bad98 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>
            if (svcCount > 0 && foundServiceUuid == serviceUuid) {
   b511c:	4682      	mov	sl, r0
   b511e:	2800      	cmp	r0, #0
   b5120:	d056      	beq.n	b51d0 <_Z7BLEScani+0xf4>
   b5122:	4969      	ldr	r1, [pc, #420]	; (b52c8 <_Z7BLEScani+0x1ec>)
   b5124:	a80b      	add	r0, sp, #44	; 0x2c
   b5126:	f004 fb3a 	bl	b979e <_ZNK8particle7BleUuideqERKS0_>
   b512a:	4605      	mov	r5, r0
   b512c:	2800      	cmp	r0, #0
   b512e:	d04f      	beq.n	b51d0 <_Z7BLEScani+0xf4>
                scanResults[ii].advertisingData().customData(BLECustomData,CUSTOM_DATA_LEN);
   b5130:	2208      	movs	r2, #8
   b5132:	a909      	add	r1, sp, #36	; 0x24
   b5134:	4638      	mov	r0, r7
   b5136:	f004 fc8f 	bl	b9a58 <_ZNK8particle18BleAdvertisingData10customDataEPhj>
                if(BotNumber == -2){
   b513a:	1cb2      	adds	r2, r6, #2
   b513c:	d153      	bne.n	b51e6 <_Z7BLEScani+0x10a>
                    Serial.printlnf("Found Bot #: %d %d %d %d %d %d %d %d, services: %d",BLECustomData[0],BLECustomData[1],BLECustomData[2],BLECustomData[3],BLECustomData[4],BLECustomData[5],BLECustomData[6],BLECustomData[7], svcCount);
   b513e:	f007 fa3d 	bl	bc5bc <_Z16_fetch_usbserialv>
   b5142:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   b5146:	9305      	str	r3, [sp, #20]
   b5148:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
   b514c:	9304      	str	r3, [sp, #16]
   b514e:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
   b5152:	9303      	str	r3, [sp, #12]
   b5154:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   b5158:	9302      	str	r3, [sp, #8]
   b515a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
      : _M_current(__i) { }
   b515e:	4f5b      	ldr	r7, [pc, #364]	; (b52cc <_Z7BLEScani+0x1f0>)
   b5160:	9301      	str	r3, [sp, #4]
   b5162:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   b5166:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
   b516a:	4959      	ldr	r1, [pc, #356]	; (b52d0 <_Z7BLEScani+0x1f4>)
   b516c:	9300      	str	r3, [sp, #0]
   b516e:	f8cd a018 	str.w	sl, [sp, #24]
   b5172:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   b5176:	f7ff f919 	bl	b43ac <_ZN5Print8printlnfEPKcz>
   b517a:	687b      	ldr	r3, [r7, #4]
                        if(BLECustomData[0] == p.botNum){
   b517c:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
   b5180:	683a      	ldr	r2, [r7, #0]
                    for(PairBot p: BLEPair){
   b5182:	4293      	cmp	r3, r2
   b5184:	d005      	beq.n	b5192 <_Z7BLEScani+0xb6>
                        if(BLECustomData[0] == p.botNum){
   b5186:	f812 0b08 	ldrb.w	r0, [r2], #8
                            newBot = false;
   b518a:	4288      	cmp	r0, r1
   b518c:	bf08      	it	eq
   b518e:	2500      	moveq	r5, #0
	return *this;
   b5190:	e7f7      	b.n	b5182 <_Z7BLEScani+0xa6>
                    if(newBot){
   b5192:	b1ed      	cbz	r5, b51d0 <_Z7BLEScani+0xf4>
    const BleAdvertisingData& scanResponse() const {
        return scanResponse_;
    }

    int8_t rssi() const {
        return rssi_;
   b5194:	2224      	movs	r2, #36	; 0x24
   b5196:	fb02 b204 	mla	r2, r2, r4, fp
                        NewBot.botNum = BLECustomData[0];
   b519a:	f88d 1058 	strb.w	r1, [sp, #88]	; 0x58
                        NewBot.rssi = scanResults[ii].rssi();
   b519e:	f992 2020 	ldrsb.w	r2, [r2, #32]
   b51a2:	9217      	str	r2, [sp, #92]	; 0x5c
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b51a4:	68ba      	ldr	r2, [r7, #8]
   b51a6:	4293      	cmp	r3, r2
   b51a8:	d017      	beq.n	b51da <_Z7BLEScani+0xfe>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b51aa:	b11b      	cbz	r3, b51b4 <_Z7BLEScani+0xd8>
   b51ac:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   b51b0:	e883 0003 	stmia.w	r3, {r0, r1}
	    ++this->_M_impl._M_finish;
   b51b4:	687b      	ldr	r3, [r7, #4]
   b51b6:	3308      	adds	r3, #8
   b51b8:	607b      	str	r3, [r7, #4]
                        Serial.printlnf("Found new bot: %d", BLECustomData[0],BLEPair.size());
   b51ba:	f007 f9ff 	bl	bc5bc <_Z16_fetch_usbserialv>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b51be:	e9d7 2300 	ldrd	r2, r3, [r7]
   b51c2:	1a9b      	subs	r3, r3, r2
   b51c4:	4943      	ldr	r1, [pc, #268]	; (b52d4 <_Z7BLEScani+0x1f8>)
   b51c6:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
   b51ca:	10db      	asrs	r3, r3, #3
   b51cc:	f7ff f8ee 	bl	b43ac <_ZN5Print8printlnfEPKcz>
		for (uint8_t ii = 0; ii < count; ii++) {
   b51d0:	3401      	adds	r4, #1
   b51d2:	b2e4      	uxtb	r4, r4
   b51d4:	4544      	cmp	r4, r8
   b51d6:	d392      	bcc.n	b50fe <_Z7BLEScani+0x22>
   b51d8:	e070      	b.n	b52bc <_Z7BLEScani+0x1e0>
	  _M_realloc_insert(end(), __x);
   b51da:	483c      	ldr	r0, [pc, #240]	; (b52cc <_Z7BLEScani+0x1f0>)
   b51dc:	aa16      	add	r2, sp, #88	; 0x58
   b51de:	4619      	mov	r1, r3
   b51e0:	f7ff ff28 	bl	b5034 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
   b51e4:	e7e9      	b.n	b51ba <_Z7BLEScani+0xde>
                if(BotNumber == -1 || BotNumber == BLECustomData[0]){   //Check if a particular bot number was specified
   b51e6:	1c73      	adds	r3, r6, #1
   b51e8:	d003      	beq.n	b51f2 <_Z7BLEScani+0x116>
   b51ea:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b51ee:	42b3      	cmp	r3, r6
   b51f0:	d1ee      	bne.n	b51d0 <_Z7BLEScani+0xf4>
                    peer = BLE.connect(scanResults[ii].address());
   b51f2:	f004 fe15 	bl	b9e20 <_ZN8particle14BleLocalDevice11getInstanceEv>
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b51f6:	4d38      	ldr	r5, [pc, #224]	; (b52d8 <_Z7BLEScani+0x1fc>)
   b51f8:	4601      	mov	r1, r0
   b51fa:	2301      	movs	r3, #1
   b51fc:	eb0b 0209 	add.w	r2, fp, r9
   b5200:	a816      	add	r0, sp, #88	; 0x58
   b5202:	f006 fa01 	bl	bb608 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
   b5206:	9b16      	ldr	r3, [sp, #88]	; 0x58
   b5208:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   b520a:	602b      	str	r3, [r5, #0]
	if (__tmp != _M_pi)
   b520c:	686b      	ldr	r3, [r5, #4]
   b520e:	429c      	cmp	r4, r3
   b5210:	d008      	beq.n	b5224 <_Z7BLEScani+0x148>
	    if (__tmp != 0)
   b5212:	b114      	cbz	r4, b521a <_Z7BLEScani+0x13e>
    { ++_M_use_count; }
   b5214:	6863      	ldr	r3, [r4, #4]
   b5216:	3301      	adds	r3, #1
   b5218:	6063      	str	r3, [r4, #4]
	    if (_M_pi != 0)
   b521a:	6868      	ldr	r0, [r5, #4]
   b521c:	b108      	cbz	r0, b5222 <_Z7BLEScani+0x146>
	      _M_pi->_M_release();
   b521e:	f7ff f911 	bl	b4444 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b5222:	606c      	str	r4, [r5, #4]
   b5224:	a816      	add	r0, sp, #88	; 0x58
   b5226:	f004 ff66 	bl	ba0f6 <_ZN8particle13BlePeerDeviceD1Ev>
				    if (peer.connected()) {
   b522a:	482b      	ldr	r0, [pc, #172]	; (b52d8 <_Z7BLEScani+0x1fc>)
   b522c:	f004 fd6a 	bl	b9d04 <_ZNK8particle13BlePeerDevice9connectedEv>
   b5230:	4604      	mov	r4, r0
   b5232:	2800      	cmp	r0, #0
   b5234:	d042      	beq.n	b52bc <_Z7BLEScani+0x1e0>
                        meshPair = false;
   b5236:	4b29      	ldr	r3, [pc, #164]	; (b52dc <_Z7BLEScani+0x200>)
      : _M_current(__i) { }
   b5238:	4d29      	ldr	r5, [pc, #164]	; (b52e0 <_Z7BLEScani+0x204>)
   b523a:	2200      	movs	r2, #0
   b523c:	701a      	strb	r2, [r3, #0]
                        startConnect = true;
   b523e:	4b29      	ldr	r3, [pc, #164]	; (b52e4 <_Z7BLEScani+0x208>)
   b5240:	2201      	movs	r2, #1
   b5242:	701a      	strb	r2, [r3, #0]
                        scanResults[ii].advertisingData().customData(bufName, BLE_MAX_ADV_DATA_LEN);
   b5244:	a916      	add	r1, sp, #88	; 0x58
   b5246:	221f      	movs	r2, #31
   b5248:	4638      	mov	r0, r7
   b524a:	f004 fc05 	bl	b9a58 <_ZNK8particle18BleAdvertisingData10customDataEPhj>
					    peer.getCharacteristicByUUID(peerTxCharacteristic, txUuid);
   b524e:	4a26      	ldr	r2, [pc, #152]	; (b52e8 <_Z7BLEScani+0x20c>)
   b5250:	4926      	ldr	r1, [pc, #152]	; (b52ec <_Z7BLEScani+0x210>)
   b5252:	4821      	ldr	r0, [pc, #132]	; (b52d8 <_Z7BLEScani+0x1fc>)
   b5254:	f005 fe6c 	bl	baf30 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
					    peer.getCharacteristicByUUID(peerRxCharacteristic, rxUuid);
   b5258:	4a25      	ldr	r2, [pc, #148]	; (b52f0 <_Z7BLEScani+0x214>)
   b525a:	4926      	ldr	r1, [pc, #152]	; (b52f4 <_Z7BLEScani+0x218>)
   b525c:	481e      	ldr	r0, [pc, #120]	; (b52d8 <_Z7BLEScani+0x1fc>)
   b525e:	f005 fe67 	bl	baf30 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        peer.getCharacteristicByUUID(peerOffloadCharacteristic, offldUuid);
   b5262:	4a25      	ldr	r2, [pc, #148]	; (b52f8 <_Z7BLEScani+0x21c>)
   b5264:	4925      	ldr	r1, [pc, #148]	; (b52fc <_Z7BLEScani+0x220>)
   b5266:	481c      	ldr	r0, [pc, #112]	; (b52d8 <_Z7BLEScani+0x1fc>)
   b5268:	f005 fe62 	bl	baf30 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
						Serial.printlnf("Connected to Bot %d",bufName[0]);
   b526c:	f007 f9a6 	bl	bc5bc <_Z16_fetch_usbserialv>
   b5270:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
   b5274:	4922      	ldr	r1, [pc, #136]	; (b5300 <_Z7BLEScani+0x224>)
   b5276:	f7ff f899 	bl	b43ac <_ZN5Print8printlnfEPKcz>
   b527a:	6868      	ldr	r0, [r5, #4]
                            if(bufName[0] == w.botNum){
   b527c:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
   b5280:	682b      	ldr	r3, [r5, #0]
                        for(WaterBot w: WaterBots){
   b5282:	4298      	cmp	r0, r3
   b5284:	d005      	beq.n	b5292 <_Z7BLEScani+0x1b6>
                            if(bufName[0] == w.botNum){
   b5286:	f813 1b18 	ldrb.w	r1, [r3], #24
                                newBot = false;
   b528a:	4291      	cmp	r1, r2
   b528c:	bf08      	it	eq
   b528e:	2400      	moveq	r4, #0
	return *this;
   b5290:	e7f7      	b.n	b5282 <_Z7BLEScani+0x1a6>
                        if(newBot){
   b5292:	b19c      	cbz	r4, b52bc <_Z7BLEScani+0x1e0>
                            Serial.println("Found a new water bot ID");
   b5294:	f007 f992 	bl	bc5bc <_Z16_fetch_usbserialv>
   b5298:	491a      	ldr	r1, [pc, #104]	; (b5304 <_Z7BLEScani+0x228>)
   b529a:	f006 fc22 	bl	bbae2 <_ZN5Print7printlnEPKc>
                            newWaterbot.BLEAvail = true;
   b529e:	2301      	movs	r3, #1
   b52a0:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
                            WaterBots.push_back(newWaterbot);
   b52a4:	480e      	ldr	r0, [pc, #56]	; (b52e0 <_Z7BLEScani+0x204>)
                            newWaterbot.botNum = bufName[0];
   b52a6:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   b52aa:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
                            WaterBots.push_back(newWaterbot);
   b52ae:	a910      	add	r1, sp, #64	; 0x40
   b52b0:	f7ff fb14 	bl	b48dc <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
      { return __normal_iterator(_M_current - __n); }
   b52b4:	686b      	ldr	r3, [r5, #4]
                            BLEBot = &WaterBots.back();
   b52b6:	4a14      	ldr	r2, [pc, #80]	; (b5308 <_Z7BLEScani+0x22c>)
   b52b8:	3b18      	subs	r3, #24
   b52ba:	6013      	str	r3, [r2, #0]
}
   b52bc:	b01f      	add	sp, #124	; 0x7c
   b52be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b52c2:	bf00      	nop
   b52c4:	2003dee0 	.word	0x2003dee0
   b52c8:	2003dcc0 	.word	0x2003dcc0
   b52cc:	2003dc88 	.word	0x2003dc88
   b52d0:	000bfe5a 	.word	0x000bfe5a
   b52d4:	000bfe8d 	.word	0x000bfe8d
   b52d8:	2003debc 	.word	0x2003debc
   b52dc:	2003ddf6 	.word	0x2003ddf6
   b52e0:	2003dcb4 	.word	0x2003dcb4
   b52e4:	2003e634 	.word	0x2003e634
   b52e8:	2003dce8 	.word	0x2003dce8
   b52ec:	2003ded4 	.word	0x2003ded4
   b52f0:	2003dcd4 	.word	0x2003dcd4
   b52f4:	2003decc 	.word	0x2003decc
   b52f8:	2003dd00 	.word	0x2003dd00
   b52fc:	2003dec4 	.word	0x2003dec4
   b5300:	000bfe9f 	.word	0x000bfe9f
   b5304:	000bfd74 	.word	0x000bfd74
   b5308:	2003dc84 	.word	0x2003dc84

000b530c <_Z13DataOffloaderv>:
void DataOffloader(){
   b530c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!logDir.open("/")) {
   b530e:	4940      	ldr	r1, [pc, #256]	; (b5410 <_Z13DataOffloaderv+0x104>)
   b5310:	4840      	ldr	r0, [pc, #256]	; (b5414 <_Z13DataOffloaderv+0x108>)
void DataOffloader(){
   b5312:	b087      	sub	sp, #28
    if (!logDir.open("/")) {
   b5314:	2200      	movs	r2, #0
   b5316:	f7ff f8d9 	bl	b44cc <_ZN7FatFile4openEPKci>
   b531a:	2401      	movs	r4, #1
   b531c:	b948      	cbnz	r0, b5332 <_Z13DataOffloaderv+0x26>
        offloadingDone = true;
   b531e:	4b3e      	ldr	r3, [pc, #248]	; (b5418 <_Z13DataOffloaderv+0x10c>)
   b5320:	701c      	strb	r4, [r3, #0]
        Serial.println("Error, could not open root directory on SD Card. Is it inserted?");
   b5322:	f007 f94b 	bl	bc5bc <_Z16_fetch_usbserialv>
   b5326:	493d      	ldr	r1, [pc, #244]	; (b541c <_Z13DataOffloaderv+0x110>)
}
   b5328:	b007      	add	sp, #28
   b532a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        Serial.println("Error, could not open root directory on SD Card. Is it inserted?");
   b532e:	f006 bbd8 	b.w	bbae2 <_ZN5Print7printlnEPKc>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5332:	4e3b      	ldr	r6, [pc, #236]	; (b5420 <_Z13DataOffloaderv+0x114>)
        Serial.printlnf("Requested SD Card Data from Bot %d Over BLE\n",BLEBot->botNum);
   b5334:	4d3b      	ldr	r5, [pc, #236]	; (b5424 <_Z13DataOffloaderv+0x118>)
   b5336:	e9d6 2300 	ldrd	r2, r3, [r6]
   b533a:	1a9b      	subs	r3, r3, r2
   b533c:	4a3a      	ldr	r2, [pc, #232]	; (b5428 <_Z13DataOffloaderv+0x11c>)
   b533e:	10db      	asrs	r3, r3, #3
   b5340:	4353      	muls	r3, r2
    while(OffloadingBot <= WaterBots.size()){
   b5342:	429c      	cmp	r4, r3
   b5344:	d859      	bhi.n	b53fa <_Z13DataOffloaderv+0xee>
        snprintf(OffloadCommand,10,"CCB%ddmp",OffloadingBot);
   b5346:	466f      	mov	r7, sp
   b5348:	4a38      	ldr	r2, [pc, #224]	; (b542c <_Z13DataOffloaderv+0x120>)
   b534a:	4623      	mov	r3, r4
   b534c:	210a      	movs	r1, #10
   b534e:	4638      	mov	r0, r7
   b5350:	f003 fe0a 	bl	b8f68 <snprintf>
        memcpy(OffloadBuf,OffloadCommand,10);
   b5354:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   b5358:	ab03      	add	r3, sp, #12
   b535a:	c303      	stmia	r3!, {r0, r1}
        peerRxCharacteristic.setValue(OffloadBuf,10);
   b535c:	a903      	add	r1, sp, #12
        memcpy(OffloadBuf,OffloadCommand,10);
   b535e:	801a      	strh	r2, [r3, #0]
        peerRxCharacteristic.setValue(OffloadBuf,10);
   b5360:	4833      	ldr	r0, [pc, #204]	; (b5430 <_Z13DataOffloaderv+0x124>)
   b5362:	2300      	movs	r3, #0
   b5364:	220a      	movs	r2, #10
   b5366:	f004 fbf5 	bl	b9b54 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
        Serial.printlnf("Requested SD Card Data from Bot %d Over BLE\n",BLEBot->botNum);
   b536a:	f007 f927 	bl	bc5bc <_Z16_fetch_usbserialv>
   b536e:	682b      	ldr	r3, [r5, #0]
   b5370:	4930      	ldr	r1, [pc, #192]	; (b5434 <_Z13DataOffloaderv+0x128>)
   b5372:	781a      	ldrb	r2, [r3, #0]
   b5374:	f7ff f81a 	bl	b43ac <_ZN5Print8printlnfEPKcz>
        delay(1000);
   b5378:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b537c:	f006 fd0a 	bl	bbd94 <delay>
        if(BLEBot->botNum != OffloadingBot){
   b5380:	682b      	ldr	r3, [r5, #0]
   b5382:	781b      	ldrb	r3, [r3, #0]
   b5384:	42a3      	cmp	r3, r4
   b5386:	d01e      	beq.n	b53c6 <_Z13DataOffloaderv+0xba>
            Serial.printlnf("Currently connected to Bot %f, need to connect to Bot %d",BLEBot->botNum,OffloadingBot);
   b5388:	f007 f918 	bl	bc5bc <_Z16_fetch_usbserialv>
   b538c:	682a      	ldr	r2, [r5, #0]
   b538e:	492a      	ldr	r1, [pc, #168]	; (b5438 <_Z13DataOffloaderv+0x12c>)
   b5390:	7812      	ldrb	r2, [r2, #0]
   b5392:	4623      	mov	r3, r4
   b5394:	f7ff f80a 	bl	b43ac <_ZN5Print8printlnfEPKcz>
            BLE.disconnect();
   b5398:	f004 fd42 	bl	b9e20 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b539c:	f005 fb5a 	bl	baa54 <_ZNK8particle14BleLocalDevice10disconnectEv>
            while(!BLE.connected()){
   b53a0:	f004 fd3e 	bl	b9e20 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b53a4:	f004 fde5 	bl	b9f72 <_ZNK8particle14BleLocalDevice9connectedEv>
   b53a8:	b930      	cbnz	r0, b53b8 <_Z13DataOffloaderv+0xac>
                BLEScan(OffloadingBot);
   b53aa:	4620      	mov	r0, r4
   b53ac:	f7ff fe96 	bl	b50dc <_Z7BLEScani>
                delay(50);
   b53b0:	2032      	movs	r0, #50	; 0x32
   b53b2:	f006 fcef 	bl	bbd94 <delay>
            while(!BLE.connected()){
   b53b6:	e7f3      	b.n	b53a0 <_Z13DataOffloaderv+0x94>
            Serial.printlnf("Successfully connected to Bot %d", BLEBot->botNum);
   b53b8:	f007 f900 	bl	bc5bc <_Z16_fetch_usbserialv>
   b53bc:	682b      	ldr	r3, [r5, #0]
   b53be:	491f      	ldr	r1, [pc, #124]	; (b543c <_Z13DataOffloaderv+0x130>)
   b53c0:	781a      	ldrb	r2, [r3, #0]
   b53c2:	f7fe fff3 	bl	b43ac <_ZN5Print8printlnfEPKcz>
        Serial.printlnf("Starting file transfer from Bot %d",BLEBot->botNum);
   b53c6:	f007 f8f9 	bl	bc5bc <_Z16_fetch_usbserialv>
   b53ca:	682b      	ldr	r3, [r5, #0]
   b53cc:	491c      	ldr	r1, [pc, #112]	; (b5440 <_Z13DataOffloaderv+0x134>)
   b53ce:	781a      	ldrb	r2, [r3, #0]
        offloadingDone = false;
   b53d0:	4f11      	ldr	r7, [pc, #68]	; (b5418 <_Z13DataOffloaderv+0x10c>)
        Serial.printlnf("Starting file transfer from Bot %d",BLEBot->botNum);
   b53d2:	f7fe ffeb 	bl	b43ac <_ZN5Print8printlnfEPKcz>
        offloadingDone = false;
   b53d6:	2300      	movs	r3, #0
   b53d8:	703b      	strb	r3, [r7, #0]
        while(!offloadingDone) delay(100);
   b53da:	2064      	movs	r0, #100	; 0x64
   b53dc:	f006 fcda 	bl	bbd94 <delay>
   b53e0:	783b      	ldrb	r3, [r7, #0]
   b53e2:	2b00      	cmp	r3, #0
   b53e4:	d0f9      	beq.n	b53da <_Z13DataOffloaderv+0xce>
        Serial.printlnf("Finished transferring file from Bot %d",BLEBot->botNum);
   b53e6:	f007 f8e9 	bl	bc5bc <_Z16_fetch_usbserialv>
   b53ea:	682b      	ldr	r3, [r5, #0]
   b53ec:	4915      	ldr	r1, [pc, #84]	; (b5444 <_Z13DataOffloaderv+0x138>)
   b53ee:	781a      	ldrb	r2, [r3, #0]
        OffloadingBot++;
   b53f0:	3401      	adds	r4, #1
        Serial.printlnf("Finished transferring file from Bot %d",BLEBot->botNum);
   b53f2:	f7fe ffdb 	bl	b43ac <_ZN5Print8printlnfEPKcz>
        OffloadingBot++;
   b53f6:	b2e4      	uxtb	r4, r4
    while(OffloadingBot <= WaterBots.size()){
   b53f8:	e79d      	b.n	b5336 <_Z13DataOffloaderv+0x2a>
   b53fa:	4813      	ldr	r0, [pc, #76]	; (b5448 <_Z13DataOffloaderv+0x13c>)
    if(logDir.isOpen()) logDir.close();
   b53fc:	7c03      	ldrb	r3, [r0, #16]
   b53fe:	b12b      	cbz	r3, b540c <_Z13DataOffloaderv+0x100>
   b5400:	3010      	adds	r0, #16
}
   b5402:	b007      	add	sp, #28
   b5404:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    if(logDir.isOpen()) logDir.close();
   b5408:	f001 bfca 	b.w	b73a0 <_ZN7FatFile5closeEv>
}
   b540c:	b007      	add	sp, #28
   b540e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b5410:	000bfeb3 	.word	0x000bfeb3
   b5414:	2003dd9c 	.word	0x2003dd9c
   b5418:	2003de4a 	.word	0x2003de4a
   b541c:	000bfeb5 	.word	0x000bfeb5
   b5420:	2003dcb4 	.word	0x2003dcb4
   b5424:	2003dc84 	.word	0x2003dc84
   b5428:	aaaaaaab 	.word	0xaaaaaaab
   b542c:	000bfef6 	.word	0x000bfef6
   b5430:	2003decc 	.word	0x2003decc
   b5434:	000bfeff 	.word	0x000bfeff
   b5438:	000bff2c 	.word	0x000bff2c
   b543c:	000bff65 	.word	0x000bff65
   b5440:	000bff86 	.word	0x000bff86
   b5444:	000bffa9 	.word	0x000bffa9
   b5448:	2003dd8c 	.word	0x2003dd8c

000b544c <_GLOBAL__sub_I_SystemMode>:
   b544c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        val_(val) {
   b544e:	4b53      	ldr	r3, [pc, #332]	; (b559c <_GLOBAL__sub_I_SystemMode+0x150>)
   b5450:	4c53      	ldr	r4, [pc, #332]	; (b55a0 <_GLOBAL__sub_I_SystemMode+0x154>)
   b5452:	2201      	movs	r2, #1
   b5454:	701a      	strb	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5456:	4b53      	ldr	r3, [pc, #332]	; (b55a4 <_GLOBAL__sub_I_SystemMode+0x158>)
   b5458:	2200      	movs	r2, #0
   b545a:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b545e:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b5462:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5464:	2003      	movs	r0, #3
   b5466:	f003 fc8b 	bl	b8d80 <set_system_mode>
const BleUuid serviceUuid("b4206910-dc4b-5743-c8b1-92d0e75182b0");
   b546a:	494f      	ldr	r1, [pc, #316]	; (b55a8 <_GLOBAL__sub_I_SystemMode+0x15c>)
   b546c:	484f      	ldr	r0, [pc, #316]	; (b55ac <_GLOBAL__sub_I_SystemMode+0x160>)
   b546e:	f004 fa15 	bl	b989c <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("b4206912-dc4b-5743-c8b1-92d0e75182b0");
   b5472:	494f      	ldr	r1, [pc, #316]	; (b55b0 <_GLOBAL__sub_I_SystemMode+0x164>)
   b5474:	484f      	ldr	r0, [pc, #316]	; (b55b4 <_GLOBAL__sub_I_SystemMode+0x168>)
   b5476:	f004 fa11 	bl	b989c <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("b4206913-dc4b-5743-c8b1-92d0e75182b0");
   b547a:	494f      	ldr	r1, [pc, #316]	; (b55b8 <_GLOBAL__sub_I_SystemMode+0x16c>)
   b547c:	484f      	ldr	r0, [pc, #316]	; (b55bc <_GLOBAL__sub_I_SystemMode+0x170>)
   b547e:	f004 fa0d 	bl	b989c <_ZN8particle7BleUuidC1EPKc>
const BleUuid offldUuid("b4206914-dc4b-5743-c8b1-92d0e75182b0");
   b5482:	494f      	ldr	r1, [pc, #316]	; (b55c0 <_GLOBAL__sub_I_SystemMode+0x174>)
   b5484:	484f      	ldr	r0, [pc, #316]	; (b55c4 <_GLOBAL__sub_I_SystemMode+0x178>)
   b5486:	f004 fa09 	bl	b989c <_ZN8particle7BleUuidC1EPKc>
   b548a:	2514      	movs	r5, #20
            : rssi_(BLE_RSSI_INVALID) {
   b548c:	267f      	movs	r6, #127	; 0x7f
   b548e:	4620      	mov	r0, r4
   b5490:	f004 f91f 	bl	b96d2 <_ZN8particle10BleAddressC1Ev>
   b5494:	f104 0008 	add.w	r0, r4, #8
   b5498:	f005 f947 	bl	ba72a <_ZN8particle18BleAdvertisingDataC1Ev>
   b549c:	f104 0014 	add.w	r0, r4, #20
   b54a0:	f005 f943 	bl	ba72a <_ZN8particle18BleAdvertisingDataC1Ev>
BleScanResult scanResults[SCAN_RESULT_COUNT];
   b54a4:	3d01      	subs	r5, #1
   b54a6:	f884 6020 	strb.w	r6, [r4, #32]
   b54aa:	f104 0424 	add.w	r4, r4, #36	; 0x24
   b54ae:	d1ee      	bne.n	b548e <_GLOBAL__sub_I_SystemMode+0x42>
BleCharacteristic peerTxCharacteristic;
   b54b0:	4845      	ldr	r0, [pc, #276]	; (b55c8 <_GLOBAL__sub_I_SystemMode+0x17c>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b54b2:	4c46      	ldr	r4, [pc, #280]	; (b55cc <_GLOBAL__sub_I_SystemMode+0x180>)
   b54b4:	f004 fb28 	bl	b9b08 <_ZN8particle17BleCharacteristicC1Ev>
BleCharacteristic peerRxCharacteristic;
   b54b8:	4845      	ldr	r0, [pc, #276]	; (b55d0 <_GLOBAL__sub_I_SystemMode+0x184>)
   b54ba:	f004 fb25 	bl	b9b08 <_ZN8particle17BleCharacteristicC1Ev>
BleCharacteristic peerOffloadCharacteristic;
   b54be:	4845      	ldr	r0, [pc, #276]	; (b55d4 <_GLOBAL__sub_I_SystemMode+0x188>)
   b54c0:	f004 fb22 	bl	b9b08 <_ZN8particle17BleCharacteristicC1Ev>
BlePeerDevice peer;
   b54c4:	4844      	ldr	r0, [pc, #272]	; (b55d8 <_GLOBAL__sub_I_SystemMode+0x18c>)
   b54c6:	f004 fbfb 	bl	b9cc0 <_ZN8particle13BlePeerDeviceC1Ev>
OledWingAdafruit oled;
   b54ca:	4844      	ldr	r0, [pc, #272]	; (b55dc <_GLOBAL__sub_I_SystemMode+0x190>)
   b54cc:	2107      	movs	r1, #7
   b54ce:	f001 f925 	bl	b671c <_ZN16OledWingAdafruitC1Ei>
   b54d2:	7823      	ldrb	r3, [r4, #0]
   b54d4:	f3bf 8f5b 	dmb	ish
   b54d8:	07db      	lsls	r3, r3, #31
   b54da:	d40a      	bmi.n	b54f2 <_GLOBAL__sub_I_SystemMode+0xa6>
   b54dc:	4620      	mov	r0, r4
   b54de:	f7fe fded 	bl	b40bc <__cxa_guard_acquire>
   b54e2:	b130      	cbz	r0, b54f2 <_GLOBAL__sub_I_SystemMode+0xa6>
   b54e4:	483e      	ldr	r0, [pc, #248]	; (b55e0 <_GLOBAL__sub_I_SystemMode+0x194>)
   b54e6:	2101      	movs	r1, #1
   b54e8:	f003 fdc2 	bl	b9070 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b54ec:	4620      	mov	r0, r4
   b54ee:	f7fe fdea 	bl	b40c6 <__cxa_guard_release>
  explicit SdFat(SPIClass* spiPort) {
   b54f2:	4b3c      	ldr	r3, [pc, #240]	; (b55e4 <_GLOBAL__sub_I_SystemMode+0x198>)
	    _M_invoker = &_My_handler::_M_invoke;
   b54f4:	4e3c      	ldr	r6, [pc, #240]	; (b55e8 <_GLOBAL__sub_I_SystemMode+0x19c>)
	    _M_manager = &_My_handler::_M_manager;
   b54f6:	4d3d      	ldr	r5, [pc, #244]	; (b55ec <_GLOBAL__sub_I_SystemMode+0x1a0>)
Timer at1(5000,actionTimer5);
   b54f8:	483d      	ldr	r0, [pc, #244]	; (b55f0 <_GLOBAL__sub_I_SystemMode+0x1a4>)
	    _M_invoker = &_My_handler::_M_invoke;
   b54fa:	9603      	str	r6, [sp, #12]
   b54fc:	2264      	movs	r2, #100	; 0x64
   b54fe:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
  {
   b5502:	4a3c      	ldr	r2, [pc, #240]	; (b55f4 <_GLOBAL__sub_I_SystemMode+0x1a8>)
   b5504:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   b5508:	2201      	movs	r2, #1
   b550a:	2400      	movs	r4, #0
   b550c:	f883 2474 	strb.w	r2, [r3, #1140]	; 0x474
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   b5510:	4a33      	ldr	r2, [pc, #204]	; (b55e0 <_GLOBAL__sub_I_SystemMode+0x194>)
   b5512:	605c      	str	r4, [r3, #4]
   b5514:	f8c3 443c 	str.w	r4, [r3, #1084]	; 0x43c
   b5518:	f8c3 4468 	str.w	r4, [r3, #1128]	; 0x468
   b551c:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
   b5520:	f8a3 447c 	strh.w	r4, [r3, #1148]	; 0x47c
   b5524:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
    Print() : write_error(0) {}
   b5528:	4b33      	ldr	r3, [pc, #204]	; (b55f8 <_GLOBAL__sub_I_SystemMode+0x1ac>)
  File() {}
   b552a:	4a34      	ldr	r2, [pc, #208]	; (b55fc <_GLOBAL__sub_I_SystemMode+0x1b0>)
   b552c:	605c      	str	r4, [r3, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b552e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b5532:	6099      	str	r1, [r3, #8]
   b5534:	601a      	str	r2, [r3, #0]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b5536:	611c      	str	r4, [r3, #16]
   b5538:	4b31      	ldr	r3, [pc, #196]	; (b5600 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   b553a:	e9c3 4101 	strd	r4, r1, [r3, #4]
   b553e:	601a      	str	r2, [r3, #0]
   b5540:	611c      	str	r4, [r3, #16]
   b5542:	4b30      	ldr	r3, [pc, #192]	; (b5604 <_GLOBAL__sub_I_SystemMode+0x1b8>)
   b5544:	e9c3 4101 	strd	r4, r1, [r3, #4]
   b5548:	601a      	str	r2, [r3, #0]
   b554a:	611c      	str	r4, [r3, #16]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b554c:	4b2e      	ldr	r3, [pc, #184]	; (b5608 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   b554e:	e9c3 4400 	strd	r4, r4, [r3]
   b5552:	609c      	str	r4, [r3, #8]
   b5554:	4b2d      	ldr	r3, [pc, #180]	; (b560c <_GLOBAL__sub_I_SystemMode+0x1c0>)
   b5556:	e9c3 4400 	strd	r4, r4, [r3]
   b555a:	609c      	str	r4, [r3, #8]
   b555c:	4b2c      	ldr	r3, [pc, #176]	; (b5610 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   b555e:	e9c3 4400 	strd	r4, r4, [r3]
   b5562:	609c      	str	r4, [r3, #8]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b5564:	4b2b      	ldr	r3, [pc, #172]	; (b5614 <_GLOBAL__sub_I_SystemMode+0x1c8>)
   b5566:	9300      	str	r3, [sp, #0]
   b5568:	466a      	mov	r2, sp
   b556a:	4623      	mov	r3, r4
   b556c:	f241 3188 	movw	r1, #5000	; 0x1388
	    _M_manager = &_My_handler::_M_manager;
   b5570:	9502      	str	r5, [sp, #8]
   b5572:	f7fe ff7b 	bl	b446c <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b5576:	4668      	mov	r0, sp
   b5578:	f7fe ff26 	bl	b43c8 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b557c:	4b26      	ldr	r3, [pc, #152]	; (b5618 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   b557e:	9300      	str	r3, [sp, #0]
Timer at2(60000,actionTimer60);
   b5580:	466a      	mov	r2, sp
   b5582:	4623      	mov	r3, r4
   b5584:	f64e 2160 	movw	r1, #60000	; 0xea60
   b5588:	4824      	ldr	r0, [pc, #144]	; (b561c <_GLOBAL__sub_I_SystemMode+0x1d0>)
	    _M_manager = &_My_handler::_M_manager;
   b558a:	e9cd 5602 	strd	r5, r6, [sp, #8]
   b558e:	f7fe ff6d 	bl	b446c <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b5592:	4668      	mov	r0, sp
   b5594:	f7fe ff18 	bl	b43c8 <_ZNSt14_Function_baseD1Ev>
   b5598:	b004      	add	sp, #16
   b559a:	bd70      	pop	{r4, r5, r6, pc}
   b559c:	2003dcfc 	.word	0x2003dcfc
   b55a0:	2003dee0 	.word	0x2003dee0
   b55a4:	2003dca8 	.word	0x2003dca8
   b55a8:	000bffd0 	.word	0x000bffd0
   b55ac:	2003dcc0 	.word	0x2003dcc0
   b55b0:	000bfff5 	.word	0x000bfff5
   b55b4:	2003dcd4 	.word	0x2003dcd4
   b55b8:	000c001a 	.word	0x000c001a
   b55bc:	2003dce8 	.word	0x2003dce8
   b55c0:	000c003f 	.word	0x000c003f
   b55c4:	2003dd00 	.word	0x2003dd00
   b55c8:	2003ded4 	.word	0x2003ded4
   b55cc:	2003dc78 	.word	0x2003dc78
   b55d0:	2003decc 	.word	0x2003decc
   b55d4:	2003dec4 	.word	0x2003dec4
   b55d8:	2003debc 	.word	0x2003debc
   b55dc:	2003de4c 	.word	0x2003de4c
   b55e0:	2003dc7c 	.word	0x2003dc7c
   b55e4:	2003e1b0 	.word	0x2003e1b0
   b55e8:	000b4309 	.word	0x000b4309
   b55ec:	000b42f5 	.word	0x000b42f5
   b55f0:	2003dd14 	.word	0x2003dd14
   b55f4:	000c0134 	.word	0x000c0134
   b55f8:	2003ddf8 	.word	0x2003ddf8
   b55fc:	000c015c 	.word	0x000c015c
   b5600:	2003ddc0 	.word	0x2003ddc0
   b5604:	2003dd8c 	.word	0x2003dd8c
   b5608:	2003dcb4 	.word	0x2003dcb4
   b560c:	2003dc9c 	.word	0x2003dc9c
   b5610:	2003dc88 	.word	0x2003dc88
   b5614:	000b40e9 	.word	0x000b40e9
   b5618:	000b4249 	.word	0x000b4249
   b561c:	2003dd30 	.word	0x2003dd30

000b5620 <_Z11startupPairv>:
void startupPair(){
   b5620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    oled.clearDisplay();
   b5624:	4c6a      	ldr	r4, [pc, #424]	; (b57d0 <_Z11startupPairv+0x1b0>)
    startConnect = false;
   b5626:	4b6b      	ldr	r3, [pc, #428]	; (b57d4 <_Z11startupPairv+0x1b4>)
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b5628:	4f6b      	ldr	r7, [pc, #428]	; (b57d8 <_Z11startupPairv+0x1b8>)
void startupPair(){
   b562a:	b085      	sub	sp, #20
    startConnect = false;
   b562c:	2500      	movs	r5, #0
    oled.clearDisplay();
   b562e:	4620      	mov	r0, r4
    startConnect = false;
   b5630:	701d      	strb	r5, [r3, #0]
    oled.clearDisplay();
   b5632:	f002 fdd9 	bl	b81e8 <_ZN16Adafruit_SSD130612clearDisplayEv>
    oled.print("Scanning ");
   b5636:	4969      	ldr	r1, [pc, #420]	; (b57dc <_Z11startupPairv+0x1bc>)
    @brief  Set text cursor location
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b5638:	6125      	str	r5, [r4, #16]
   b563a:	4620      	mov	r0, r4
   b563c:	f006 fa3e 	bl	bbabc <_ZN5Print5printEPKc>
    oled.fillCircle(115,7,3,WHITE);
   b5640:	2301      	movs	r3, #1
   b5642:	9300      	str	r3, [sp, #0]
   b5644:	2207      	movs	r2, #7
   b5646:	2303      	movs	r3, #3
   b5648:	2173      	movs	r1, #115	; 0x73
   b564a:	4620      	mov	r0, r4
   b564c:	f000 fdd7 	bl	b61fe <_ZN12Adafruit_GFX10fillCircleEssst>
    oled.display();
   b5650:	4620      	mov	r0, r4
   b5652:	f003 f837 	bl	b86c4 <_ZN16Adafruit_SSD13067displayEv>
    while(!startConnect){
   b5656:	4b5f      	ldr	r3, [pc, #380]	; (b57d4 <_Z11startupPairv+0x1b4>)
   b5658:	781e      	ldrb	r6, [r3, #0]
   b565a:	2e00      	cmp	r6, #0
   b565c:	f040 80b4 	bne.w	b57c8 <_Z11startupPairv+0x1a8>
   b5660:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   b5664:	6123      	str	r3, [r4, #16]
        oled.fillRect(72,16,35,15,0);
   b5666:	230f      	movs	r3, #15
   b5668:	9300      	str	r3, [sp, #0]
   b566a:	2210      	movs	r2, #16
   b566c:	2323      	movs	r3, #35	; 0x23
   b566e:	2148      	movs	r1, #72	; 0x48
   b5670:	4620      	mov	r0, r4
   b5672:	9601      	str	r6, [sp, #4]
   b5674:	f000 fb89 	bl	b5d8a <_ZN12Adafruit_GFX8fillRectEsssst>
   b5678:	e9d7 3200 	ldrd	r3, r2, [r7]
   b567c:	1ad2      	subs	r2, r2, r3
        oled.printlnf("Bots: %d",BLEPair.size());
   b567e:	4958      	ldr	r1, [pc, #352]	; (b57e0 <_Z11startupPairv+0x1c0>)
   b5680:	10d2      	asrs	r2, r2, #3
   b5682:	4620      	mov	r0, r4
   b5684:	f7fe fe92 	bl	b43ac <_ZN5Print8printlnfEPKcz>
        Serial.printlnf("Array size: %d",BLEPair.size());
   b5688:	f006 ff98 	bl	bc5bc <_Z16_fetch_usbserialv>
   b568c:	e9d7 3200 	ldrd	r3, r2, [r7]
   b5690:	1ad2      	subs	r2, r2, r3
   b5692:	4954      	ldr	r1, [pc, #336]	; (b57e4 <_Z11startupPairv+0x1c4>)
   b5694:	10d2      	asrs	r2, r2, #3
   b5696:	f7fe fe89 	bl	b43ac <_ZN5Print8printlnfEPKcz>
        oled.drawCircle(115,7,loadAnim,WHITE);
   b569a:	2301      	movs	r3, #1
   b569c:	9300      	str	r3, [sp, #0]
   b569e:	2207      	movs	r2, #7
   b56a0:	462b      	mov	r3, r5
   b56a2:	2173      	movs	r1, #115	; 0x73
   b56a4:	4620      	mov	r0, r4
   b56a6:	f000 fc49 	bl	b5f3c <_ZN12Adafruit_GFX10drawCircleEssst>
        if(loadAnim-1) oled.fillCircle(115,7,loadAnim-1,0);
   b56aa:	2d01      	cmp	r5, #1
   b56ac:	d006      	beq.n	b56bc <_Z11startupPairv+0x9c>
   b56ae:	9600      	str	r6, [sp, #0]
   b56b0:	1e6b      	subs	r3, r5, #1
   b56b2:	2207      	movs	r2, #7
   b56b4:	2173      	movs	r1, #115	; 0x73
   b56b6:	4620      	mov	r0, r4
   b56b8:	f000 fda1 	bl	b61fe <_ZN12Adafruit_GFX10fillCircleEssst>
        loadAnim++;
   b56bc:	3501      	adds	r5, #1
        oled.display();
   b56be:	4620      	mov	r0, r4
        loadAnim++;
   b56c0:	b2ed      	uxtb	r5, r5
        oled.display();
   b56c2:	f002 ffff 	bl	b86c4 <_ZN16Adafruit_SSD13067displayEv>
        if(loadAnim > 7){
   b56c6:	2d07      	cmp	r5, #7
   b56c8:	d907      	bls.n	b56da <_Z11startupPairv+0xba>
            oled.drawCircle(115,7,7,0);
   b56ca:	2500      	movs	r5, #0
   b56cc:	2307      	movs	r3, #7
   b56ce:	9500      	str	r5, [sp, #0]
   b56d0:	461a      	mov	r2, r3
   b56d2:	2173      	movs	r1, #115	; 0x73
   b56d4:	4620      	mov	r0, r4
   b56d6:	f000 fc31 	bl	b5f3c <_ZN12Adafruit_GFX10drawCircleEssst>
        BLEScan(-2);
   b56da:	f06f 0001 	mvn.w	r0, #1
   b56de:	f7ff fcfd 	bl	b50dc <_Z7BLEScani>
        XBeeHandler();
   b56e2:	f7ff fbef 	bl	b4ec4 <_Z11XBeeHandlerv>
        XBeeLTEPairSet();
   b56e6:	f7ff f863 	bl	b47b0 <_Z14XBeeLTEPairSetv>
        if(digitalRead(E_DPAD) == LOW){
   b56ea:	201c      	movs	r0, #28
   b56ec:	f007 f9e2 	bl	bcab4 <digitalRead>
   b56f0:	2800      	cmp	r0, #0
   b56f2:	d1b0      	bne.n	b5656 <_Z11startupPairv+0x36>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b56f4:	e9d7 6b00 	ldrd	r6, fp, [r7]
            int minRSSI = -999;
   b56f8:	4b3b      	ldr	r3, [pc, #236]	; (b57e8 <_Z11startupPairv+0x1c8>)
                    Serial.println("Found a local bot");
   b56fa:	f8df a104 	ldr.w	sl, [pc, #260]	; b5800 <_Z11startupPairv+0x1e0>
            int selectedBot = -1;
   b56fe:	f04f 38ff 	mov.w	r8, #4294967295
            for(PairBot pb: BLEPair){
   b5702:	45b3      	cmp	fp, r6
   b5704:	d00d      	beq.n	b5722 <_Z11startupPairv+0x102>
   b5706:	f8d6 9004 	ldr.w	r9, [r6, #4]
                if(pb.rssi > minRSSI){
   b570a:	454b      	cmp	r3, r9
   b570c:	da07      	bge.n	b571e <_Z11startupPairv+0xfe>
                    selectedBot = pb.botNum;
   b570e:	f896 8000 	ldrb.w	r8, [r6]
                    Serial.println("Found a local bot");
   b5712:	f006 ff53 	bl	bc5bc <_Z16_fetch_usbserialv>
   b5716:	4651      	mov	r1, sl
   b5718:	f006 f9e3 	bl	bbae2 <_ZN5Print7printlnEPKc>
   b571c:	464b      	mov	r3, r9
      operator++() _GLIBCXX_NOEXCEPT
   b571e:	3608      	adds	r6, #8
	return *this;
   b5720:	e7ef      	b.n	b5702 <_Z11startupPairv+0xe2>
            if(selectedBot >= 0){
   b5722:	f1b8 3fff 	cmp.w	r8, #4294967295
   b5726:	f8df 90dc 	ldr.w	r9, [pc, #220]	; b5804 <_Z11startupPairv+0x1e4>
            botSelect = selectedBot;
   b572a:	f8df a0dc 	ldr.w	sl, [pc, #220]	; b5808 <_Z11startupPairv+0x1e8>
   b572e:	f8df b0dc 	ldr.w	fp, [pc, #220]	; b580c <_Z11startupPairv+0x1ec>
                meshPair = true;    //Did we find any bots over BLE
   b5732:	bf18      	it	ne
   b5734:	2301      	movne	r3, #1
            oled.clearDisplay();
   b5736:	4620      	mov	r0, r4
                meshPair = true;    //Did we find any bots over BLE
   b5738:	bf18      	it	ne
   b573a:	f889 3000 	strbne.w	r3, [r9]
   b573e:	2600      	movs	r6, #0
            oled.clearDisplay();
   b5740:	f002 fd52 	bl	b81e8 <_ZN16Adafruit_SSD130612clearDisplayEv>
            oled.print("Connecting");
   b5744:	4929      	ldr	r1, [pc, #164]	; (b57ec <_Z11startupPairv+0x1cc>)
   b5746:	6126      	str	r6, [r4, #16]
   b5748:	4620      	mov	r0, r4
   b574a:	f006 f9b7 	bl	bbabc <_ZN5Print5printEPKc>
   b574e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
            oled.printlnf("Bot: %d",selectedBot);
   b5752:	4927      	ldr	r1, [pc, #156]	; (b57f0 <_Z11startupPairv+0x1d0>)
   b5754:	6123      	str	r3, [r4, #16]
   b5756:	4642      	mov	r2, r8
   b5758:	4620      	mov	r0, r4
   b575a:	f7fe fe27 	bl	b43ac <_ZN5Print8printlnfEPKcz>
            oled.display();
   b575e:	4620      	mov	r0, r4
   b5760:	f002 ffb0 	bl	b86c4 <_ZN16Adafruit_SSD13067displayEv>
            botSelect = selectedBot;
   b5764:	f88a 8000 	strb.w	r8, [sl]
            while(meshPair){
   b5768:	f899 3000 	ldrb.w	r3, [r9]
   b576c:	b32b      	cbz	r3, b57ba <_Z11startupPairv+0x19a>
                BLEScan(selectedBot);
   b576e:	4640      	mov	r0, r8
   b5770:	f7ff fcb4 	bl	b50dc <_Z7BLEScani>
                if(WaterBots.size() == 0 && BLETimeout == LTE_BKP_Time) Particle.publish("Bot1dat", "CCABhwd", PRIVATE);
   b5774:	e9db 3200 	ldrd	r3, r2, [fp]
                BLETimeout++;
   b5778:	3601      	adds	r6, #1
                if(WaterBots.size() == 0 && BLETimeout == LTE_BKP_Time) Particle.publish("Bot1dat", "CCABhwd", PRIVATE);
   b577a:	429a      	cmp	r2, r3
                BLETimeout++;
   b577c:	b2f6      	uxtb	r6, r6
                if(WaterBots.size() == 0 && BLETimeout == LTE_BKP_Time) Particle.publish("Bot1dat", "CCABhwd", PRIVATE);
   b577e:	d113      	bne.n	b57a8 <_Z11startupPairv+0x188>
   b5780:	2e64      	cmp	r6, #100	; 0x64
   b5782:	d111      	bne.n	b57a8 <_Z11startupPairv+0x188>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b5784:	4b1b      	ldr	r3, [pc, #108]	; (b57f4 <_Z11startupPairv+0x1d4>)
   b5786:	4a1c      	ldr	r2, [pc, #112]	; (b57f8 <_Z11startupPairv+0x1d8>)
   b5788:	781b      	ldrb	r3, [r3, #0]
   b578a:	f88d 3000 	strb.w	r3, [sp]
   b578e:	a802      	add	r0, sp, #8
   b5790:	491a      	ldr	r1, [pc, #104]	; (b57fc <_Z11startupPairv+0x1dc>)
   b5792:	233c      	movs	r3, #60	; 0x3c
   b5794:	f006 fcd0 	bl	bc138 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
   b5798:	9803      	ldr	r0, [sp, #12]
   b579a:	b108      	cbz	r0, b57a0 <_Z11startupPairv+0x180>
	  _M_pi->_M_release();
   b579c:	f7fe fe52 	bl	b4444 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
                delay(100);
   b57a0:	2064      	movs	r0, #100	; 0x64
   b57a2:	f006 faf7 	bl	bbd94 <delay>
            while(meshPair){
   b57a6:	e7df      	b.n	b5768 <_Z11startupPairv+0x148>
                if(BLETimeout > BLE_MAX_CONN_TIME){
   b57a8:	2ec8      	cmp	r6, #200	; 0xc8
                    meshPair = false;
   b57aa:	bf81      	itttt	hi
   b57ac:	2200      	movhi	r2, #0
   b57ae:	f889 2000 	strbhi.w	r2, [r9]
                    botSelect = WaterBots.front().botNum;
   b57b2:	781b      	ldrbhi	r3, [r3, #0]
   b57b4:	f88a 3000 	strbhi.w	r3, [sl]
   b57b8:	e7f2      	b.n	b57a0 <_Z11startupPairv+0x180>
            oled.clearDisplay();
   b57ba:	4620      	mov	r0, r4
   b57bc:	f002 fd14 	bl	b81e8 <_ZN16Adafruit_SSD130612clearDisplayEv>
            oled.display();
   b57c0:	4620      	mov	r0, r4
   b57c2:	f002 ff7f 	bl	b86c4 <_ZN16Adafruit_SSD13067displayEv>
   b57c6:	e746      	b.n	b5656 <_Z11startupPairv+0x36>
}
   b57c8:	b005      	add	sp, #20
   b57ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b57ce:	bf00      	nop
   b57d0:	2003de4c 	.word	0x2003de4c
   b57d4:	2003e634 	.word	0x2003e634
   b57d8:	2003dc88 	.word	0x2003dc88
   b57dc:	000c0064 	.word	0x000c0064
   b57e0:	000c006e 	.word	0x000c006e
   b57e4:	000c0077 	.word	0x000c0077
   b57e8:	fffffc19 	.word	0xfffffc19
   b57ec:	000c0098 	.word	0x000c0098
   b57f0:	000c0124 	.word	0x000c0124
   b57f4:	2003dcfc 	.word	0x2003dcfc
   b57f8:	000c00a3 	.word	0x000c00a3
   b57fc:	000bfb7f 	.word	0x000bfb7f
   b5800:	000c0086 	.word	0x000c0086
   b5804:	2003ddf6 	.word	0x2003ddf6
   b5808:	2003dd4d 	.word	0x2003dd4d
   b580c:	2003dcb4 	.word	0x2003dcb4

000b5810 <setup>:
void setup() {
   b5810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    pinMode(E_DPAD,INPUT_PULLUP);
   b5814:	2102      	movs	r1, #2
void setup() {
   b5816:	b090      	sub	sp, #64	; 0x40
    pinMode(E_DPAD,INPUT_PULLUP);
   b5818:	201c      	movs	r0, #28
   b581a:	f007 f921 	bl	bca60 <pinMode>
    pinMode(U_DPAD,INPUT_PULLUP);
   b581e:	2102      	movs	r1, #2
   b5820:	200e      	movs	r0, #14
   b5822:	f007 f91d 	bl	bca60 <pinMode>
    pinMode(D_DPAD,INPUT_PULLUP);
   b5826:	2102      	movs	r1, #2
   b5828:	2007      	movs	r0, #7
   b582a:	f007 f919 	bl	bca60 <pinMode>
    pinMode(L_DPAD,INPUT_PULLUP);
   b582e:	2102      	movs	r1, #2
   b5830:	200f      	movs	r0, #15
   b5832:	f007 f915 	bl	bca60 <pinMode>
    pinMode(R_DPAD,INPUT_PULLUP);
   b5836:	2102      	movs	r1, #2
   b5838:	2013      	movs	r0, #19
    attachInterrupt(E_DPAD,entHandler,FALLING);
   b583a:	2400      	movs	r4, #0
    pinMode(R_DPAD,INPUT_PULLUP);
   b583c:	f007 f910 	bl	bca60 <pinMode>
    pinMode(JOY_BTN,INPUT_PULLUP);
   b5840:	2102      	movs	r1, #2
   b5842:	201d      	movs	r0, #29
   b5844:	f007 f90c 	bl	bca60 <pinMode>
    attachInterrupt(E_DPAD,entHandler,FALLING);
   b5848:	4969      	ldr	r1, [pc, #420]	; (b59f0 <setup+0x1e0>)
   b584a:	9400      	str	r4, [sp, #0]
   b584c:	f04f 33ff 	mov.w	r3, #4294967295
   b5850:	2202      	movs	r2, #2
   b5852:	201c      	movs	r0, #28
   b5854:	f006 feda 	bl	bc60c <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(U_DPAD,uHandler,FALLING);
   b5858:	4966      	ldr	r1, [pc, #408]	; (b59f4 <setup+0x1e4>)
   b585a:	9400      	str	r4, [sp, #0]
   b585c:	f04f 33ff 	mov.w	r3, #4294967295
   b5860:	2202      	movs	r2, #2
   b5862:	200e      	movs	r0, #14
   b5864:	f006 fed2 	bl	bc60c <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(D_DPAD,dHandler,FALLING);
   b5868:	4963      	ldr	r1, [pc, #396]	; (b59f8 <setup+0x1e8>)
   b586a:	9400      	str	r4, [sp, #0]
   b586c:	f04f 33ff 	mov.w	r3, #4294967295
   b5870:	2202      	movs	r2, #2
   b5872:	2007      	movs	r0, #7
   b5874:	f006 feca 	bl	bc60c <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(L_DPAD,lHandler,FALLING);
   b5878:	4960      	ldr	r1, [pc, #384]	; (b59fc <setup+0x1ec>)
   b587a:	9400      	str	r4, [sp, #0]
   b587c:	f04f 33ff 	mov.w	r3, #4294967295
   b5880:	2202      	movs	r2, #2
   b5882:	200f      	movs	r0, #15
   b5884:	f006 fec2 	bl	bc60c <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(R_DPAD,rHandler,FALLING);
   b5888:	495d      	ldr	r1, [pc, #372]	; (b5a00 <setup+0x1f0>)
   b588a:	9400      	str	r4, [sp, #0]
   b588c:	f04f 33ff 	mov.w	r3, #4294967295
   b5890:	2202      	movs	r2, #2
   b5892:	2013      	movs	r0, #19
   b5894:	f006 feba 	bl	bc60c <_Z15attachInterrupttPFvvE13InterruptModeah>
    attachInterrupt(JOY_BTN,jHandler,FALLING);
   b5898:	2202      	movs	r2, #2
   b589a:	495a      	ldr	r1, [pc, #360]	; (b5a04 <setup+0x1f4>)
   b589c:	9400      	str	r4, [sp, #0]
   b589e:	f04f 33ff 	mov.w	r3, #4294967295
   b58a2:	201d      	movs	r0, #29
   b58a4:	f006 feb2 	bl	bc60c <_Z15attachInterrupttPFvvE13InterruptModeah>
   b58a8:	f002 fffe 	bl	b88a8 <HAL_Timer_Get_Milli_Seconds>
    debounceTime = millis();
   b58ac:	4b56      	ldr	r3, [pc, #344]	; (b5a08 <setup+0x1f8>)
    logMessages = true;
   b58ae:	4f57      	ldr	r7, [pc, #348]	; (b5a0c <setup+0x1fc>)
    debounceTime = millis();
   b58b0:	6018      	str	r0, [r3, #0]
    Serial.begin(115200);
   b58b2:	f006 fe83 	bl	bc5bc <_Z16_fetch_usbserialv>
   b58b6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b58ba:	f006 fe73 	bl	bc5a4 <_ZN9USBSerial5beginEl>
    Serial1.begin(9600);                        //Start serial for XBee module
   b58be:	f007 f927 	bl	bcb10 <_Z22__fetch_global_Serial1v>
   b58c2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b58c6:	f006 ff6d 	bl	bc7a4 <_ZN11USARTSerial5beginEm>
    setupXBee();
   b58ca:	f7fe feef 	bl	b46ac <_Z9setupXBeev>
	BLE.on();
   b58ce:	f004 faa7 	bl	b9e20 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b58d2:	f004 faef 	bl	b9eb4 <_ZNK8particle14BleLocalDevice2onEv>
    BLE.setScanTimeout(50);
   b58d6:	f004 faa3 	bl	b9e20 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b58da:	2132      	movs	r1, #50	; 0x32
   b58dc:	f004 fb30 	bl	b9f40 <_ZNK8particle14BleLocalDevice14setScanTimeoutEt>
    peerTxCharacteristic.onDataReceived(BLEDataReceived, &peerTxCharacteristic);
   b58e0:	4a4b      	ldr	r2, [pc, #300]	; (b5a10 <setup+0x200>)
   b58e2:	494c      	ldr	r1, [pc, #304]	; (b5a14 <setup+0x204>)
   b58e4:	4610      	mov	r0, r2
   b58e6:	f005 fb4d 	bl	baf84 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    peerOffloadCharacteristic.onDataReceived(offloadDataReceived, &peerOffloadCharacteristic);
   b58ea:	4a4b      	ldr	r2, [pc, #300]	; (b5a18 <setup+0x208>)
   b58ec:	494b      	ldr	r1, [pc, #300]	; (b5a1c <setup+0x20c>)
   b58ee:	4610      	mov	r0, r2
   b58f0:	f005 fb48 	bl	baf84 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b58f4:	4622      	mov	r2, r4
   b58f6:	494a      	ldr	r1, [pc, #296]	; (b5a20 <setup+0x210>)
   b58f8:	484a      	ldr	r0, [pc, #296]	; (b5a24 <setup+0x214>)
   b58fa:	e9cd 4400 	strd	r4, r4, [sp]
   b58fe:	2301      	movs	r3, #1
   b5900:	f003 faf2 	bl	b8ee8 <spark_subscribe>
    offloadingMode = false;
   b5904:	4b48      	ldr	r3, [pc, #288]	; (b5a28 <setup+0x218>)
   b5906:	701c      	strb	r4, [r3, #0]
    offloadingDone = false;
   b5908:	4b48      	ldr	r3, [pc, #288]	; (b5a2c <setup+0x21c>)
   b590a:	701c      	strb	r4, [r3, #0]
    postStatus = false;
   b590c:	4b48      	ldr	r3, [pc, #288]	; (b5a30 <setup+0x220>)
   b590e:	701c      	strb	r4, [r3, #0]
    statusTimeout = false;
   b5910:	4b48      	ldr	r3, [pc, #288]	; (b5a34 <setup+0x224>)
    logMessages = true;
   b5912:	f04f 0901 	mov.w	r9, #1
    statusTimeout = false;
   b5916:	701c      	strb	r4, [r3, #0]
    logMessages = true;
   b5918:	f887 9000 	strb.w	r9, [r7]
    snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   b591c:	f006 fa1c 	bl	bbd58 <_ZN9TimeClass5monthEv>
   b5920:	9007      	str	r0, [sp, #28]
   b5922:	f006 fa0d 	bl	bbd40 <_ZN9TimeClass3dayEv>
   b5926:	4605      	mov	r5, r0
   b5928:	f006 fa1e 	bl	bbd68 <_ZN9TimeClass4yearEv>
   b592c:	4606      	mov	r6, r0
   b592e:	f006 f9e3 	bl	bbcf8 <_ZN9TimeClass4hourEv>
   b5932:	4680      	mov	r8, r0
   b5934:	f006 f9ec 	bl	bbd10 <_ZN9TimeClass6minuteEv>
   b5938:	4682      	mov	sl, r0
   b593a:	f006 f9f5 	bl	bbd28 <_ZN9TimeClass6secondEv>
   b593e:	9b07      	ldr	r3, [sp, #28]
   b5940:	4a3d      	ldr	r2, [pc, #244]	; (b5a38 <setup+0x228>)
   b5942:	9500      	str	r5, [sp, #0]
   b5944:	e9cd a003 	strd	sl, r0, [sp, #12]
   b5948:	2110      	movs	r1, #16
   b594a:	e9cd 6801 	strd	r6, r8, [sp, #4]
   b594e:	a808      	add	r0, sp, #32
   b5950:	f003 fb0a 	bl	b8f68 <snprintf>
    strcpy(filenameMessages,DEF_FILENAME);
   b5954:	4939      	ldr	r1, [pc, #228]	; (b5a3c <setup+0x22c>)
   b5956:	483a      	ldr	r0, [pc, #232]	; (b5a40 <setup+0x230>)
   b5958:	f008 f87f 	bl	bda5a <strcpy>
    strcat(filenameMessages,timestamp);
   b595c:	a908      	add	r1, sp, #32
   b595e:	4838      	ldr	r0, [pc, #224]	; (b5a40 <setup+0x230>)
   b5960:	f008 f862 	bl	bda28 <strcat>
    strcat(filenameMessages,"_LOG.txt");
   b5964:	4937      	ldr	r1, [pc, #220]	; (b5a44 <setup+0x234>)
   b5966:	4836      	ldr	r0, [pc, #216]	; (b5a40 <setup+0x230>)
   b5968:	f008 f85e 	bl	bda28 <strcat>
    oled.setup(); 
   b596c:	4836      	ldr	r0, [pc, #216]	; (b5a48 <setup+0x238>)
   b596e:	f000 ff03 	bl	b6778 <_ZN16OledWingAdafruit5setupEv>
    oled.clearDisplay();
   b5972:	4835      	ldr	r0, [pc, #212]	; (b5a48 <setup+0x238>)
   b5974:	f002 fc38 	bl	b81e8 <_ZN16Adafruit_SSD130612clearDisplayEv>
    oled.display();
   b5978:	4833      	ldr	r0, [pc, #204]	; (b5a48 <setup+0x238>)
   b597a:	f002 fea3 	bl	b86c4 <_ZN16Adafruit_SSD13067displayEv>
      dataMode_{dataMode}
   b597e:	4b33      	ldr	r3, [pc, #204]	; (b5a4c <setup+0x23c>)
   b5980:	930c      	str	r3, [sp, #48]	; 0x30
    if (!sd.begin(chipSelect, SD_SCK_MHZ(4))) {
   b5982:	4833      	ldr	r0, [pc, #204]	; (b5a50 <setup+0x240>)
   b5984:	4b33      	ldr	r3, [pc, #204]	; (b5a54 <setup+0x244>)
   b5986:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
   b598a:	aa0c      	add	r2, sp, #48	; 0x30
   b598c:	2108      	movs	r1, #8
   b598e:	930e      	str	r3, [sp, #56]	; 0x38
   b5990:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
   b5994:	f7fe fe4c 	bl	b4630 <_ZN5SdFat5beginEhN8particle11SPISettingsE>
   b5998:	4604      	mov	r4, r0
   b599a:	b928      	cbnz	r0, b59a8 <setup+0x198>
        Serial.println("Error: could not connect to SD card!");
   b599c:	f006 fe0e 	bl	bc5bc <_Z16_fetch_usbserialv>
   b59a0:	492d      	ldr	r1, [pc, #180]	; (b5a58 <setup+0x248>)
   b59a2:	f006 f89e 	bl	bbae2 <_ZN5Print7printlnEPKc>
        logMessages = false;
   b59a6:	703c      	strb	r4, [r7, #0]
    oled.setTextSize(2);
   b59a8:	4c27      	ldr	r4, [pc, #156]	; (b5a48 <setup+0x238>)
   b59aa:	2102      	movs	r1, #2
   b59ac:	4620      	mov	r0, r4
   b59ae:	f000 fe94 	bl	b66da <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b59b2:	2200      	movs	r2, #0
   b59b4:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b59b8:	e9c4 2304 	strd	r2, r3, [r4, #16]
    oled.print(" Starting ");
   b59bc:	4927      	ldr	r1, [pc, #156]	; (b5a5c <setup+0x24c>)
   b59be:	4620      	mov	r0, r4
   b59c0:	f006 f87c 	bl	bbabc <_ZN5Print5printEPKc>
    oled.display();
   b59c4:	4620      	mov	r0, r4
   b59c6:	f002 fe7d 	bl	b86c4 <_ZN16Adafruit_SSD13067displayEv>
    startupPair();
   b59ca:	f7ff fe29 	bl	b5620 <_Z11startupPairv>
    at1.start();
   b59ce:	4824      	ldr	r0, [pc, #144]	; (b5a60 <setup+0x250>)
   b59d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b59d4:	f7fe fc9a 	bl	b430c <_ZN5Timer5startEj.isra.0>
    at2.start();
   b59d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b59dc:	4821      	ldr	r0, [pc, #132]	; (b5a64 <setup+0x254>)
   b59de:	f7fe fc95 	bl	b430c <_ZN5Timer5startEj.isra.0>
    WaterBotSim(6);
   b59e2:	2006      	movs	r0, #6
   b59e4:	f7ff faec 	bl	b4fc0 <_Z11WaterBotSimh>
}
   b59e8:	b010      	add	sp, #64	; 0x40
   b59ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b59ee:	bf00      	nop
   b59f0:	000b422d 	.word	0x000b422d
   b59f4:	000b40f5 	.word	0x000b40f5
   b59f8:	000b4105 	.word	0x000b4105
   b59fc:	000b411d 	.word	0x000b411d
   b5a00:	000b4285 	.word	0x000b4285
   b5a04:	000b4119 	.word	0x000b4119
   b5a08:	2003dd50 	.word	0x2003dd50
   b5a0c:	2003ddf4 	.word	0x2003ddf4
   b5a10:	2003ded4 	.word	0x2003ded4
   b5a14:	000b4e35 	.word	0x000b4e35
   b5a18:	2003dec4 	.word	0x2003dec4
   b5a1c:	000b44dd 	.word	0x000b44dd
   b5a20:	000b4de5 	.word	0x000b4de5
   b5a24:	000bfb7f 	.word	0x000bfb7f
   b5a28:	2003de4b 	.word	0x2003de4b
   b5a2c:	2003de4a 	.word	0x2003de4a
   b5a30:	2003dedc 	.word	0x2003dedc
   b5a34:	2003e635 	.word	0x2003e635
   b5a38:	000c00ab 	.word	0x000c00ab
   b5a3c:	000c00c4 	.word	0x000c00c4
   b5a40:	2003dd68 	.word	0x2003dd68
   b5a44:	000c00cd 	.word	0x000c00cd
   b5a48:	2003de4c 	.word	0x2003de4c
   b5a4c:	000c0134 	.word	0x000c0134
   b5a50:	2003e1b0 	.word	0x2003e1b0
   b5a54:	003d0900 	.word	0x003d0900
   b5a58:	000c00d6 	.word	0x000c00d6
   b5a5c:	000c00fb 	.word	0x000c00fb
   b5a60:	2003dd14 	.word	0x2003dd14
   b5a64:	2003dd30 	.word	0x2003dd30

000b5a68 <_Z10updateMenuv>:
void updateMenu(){
   b5a68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(redrawMenu){
   b5a6c:	f8df 90cc 	ldr.w	r9, [pc, #204]	; b5b3c <_Z10updateMenuv+0xd4>
   b5a70:	f899 3000 	ldrb.w	r3, [r9]
   b5a74:	2b00      	cmp	r3, #0
   b5a76:	d05a      	beq.n	b5b2e <_Z10updateMenuv+0xc6>
        oled.fillRect(0,0,128,15,0);
   b5a78:	2500      	movs	r5, #0
   b5a7a:	230f      	movs	r3, #15
   b5a7c:	e9cd 3500 	strd	r3, r5, [sp]
   b5a80:	482c      	ldr	r0, [pc, #176]	; (b5b34 <_Z10updateMenuv+0xcc>)
   b5a82:	f8df 80bc 	ldr.w	r8, [pc, #188]	; b5b40 <_Z10updateMenuv+0xd8>
   b5a86:	f8df a0bc 	ldr.w	sl, [pc, #188]	; b5b44 <_Z10updateMenuv+0xdc>
            if(WaterBots.at(i).botNum == botSelect){
   b5a8a:	f8df b0bc 	ldr.w	fp, [pc, #188]	; b5b48 <_Z10updateMenuv+0xe0>
        oled.fillRect(0,0,128,15,0);
   b5a8e:	2380      	movs	r3, #128	; 0x80
   b5a90:	462a      	mov	r2, r5
   b5a92:	4629      	mov	r1, r5
   b5a94:	f000 f979 	bl	b5d8a <_ZN12Adafruit_GFX8fillRectEsssst>
   b5a98:	e9d8 2300 	ldrd	r2, r3, [r8]
   b5a9c:	1a9b      	subs	r3, r3, r2
   b5a9e:	10db      	asrs	r3, r3, #3
   b5aa0:	b2ef      	uxtb	r7, r5
   b5aa2:	fb0a f303 	mul.w	r3, sl, r3
        for(uint8_t i = 0; i < WaterBots.size(); i++){
   b5aa6:	429f      	cmp	r7, r3
   b5aa8:	d23b      	bcs.n	b5b22 <_Z10updateMenuv+0xba>
            if(WaterBots.at(i).botNum == botSelect){
   b5aaa:	4639      	mov	r1, r7
   b5aac:	4640      	mov	r0, r8
   b5aae:	f7fe fea3 	bl	b47f8 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
                oled.setCursor(5+18*i,4);
   b5ab2:	eb07 06c7 	add.w	r6, r7, r7, lsl #3
            if(WaterBots.at(i).botNum == botSelect){
   b5ab6:	7801      	ldrb	r1, [r0, #0]
   b5ab8:	f89b 3000 	ldrb.w	r3, [fp]
   b5abc:	4c1d      	ldr	r4, [pc, #116]	; (b5b34 <_Z10updateMenuv+0xcc>)
                oled.setCursor(5+18*i,4);
   b5abe:	0076      	lsls	r6, r6, #1
   b5ac0:	1d72      	adds	r2, r6, #5
            if(WaterBots.at(i).botNum == botSelect){
   b5ac2:	4299      	cmp	r1, r3
   b5ac4:	f04f 0304 	mov.w	r3, #4
                oled.fillRect(1+i*18,1,14,14,1);
   b5ac8:	f106 0601 	add.w	r6, r6, #1
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b5acc:	8222      	strh	r2, [r4, #16]
   b5ace:	8263      	strh	r3, [r4, #18]
                oled.setTextSize(1);
   b5ad0:	f04f 0101 	mov.w	r1, #1
   b5ad4:	4620      	mov	r0, r4
            if(WaterBots.at(i).botNum == botSelect){
   b5ad6:	d116      	bne.n	b5b06 <_Z10updateMenuv+0x9e>
                oled.setTextSize(1);
   b5ad8:	f000 fdff 	bl	b66da <_ZN12Adafruit_GFX11setTextSizeEh>
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b5adc:	2300      	movs	r3, #0
   b5ade:	6163      	str	r3, [r4, #20]
                oled.fillRect(1+i*18,1,14,14,1);
   b5ae0:	2201      	movs	r2, #1
   b5ae2:	230e      	movs	r3, #14
   b5ae4:	e9cd 3200 	strd	r3, r2, [sp]
   b5ae8:	4631      	mov	r1, r6
   b5aea:	4620      	mov	r0, r4
   b5aec:	f000 f94d 	bl	b5d8a <_ZN12Adafruit_GFX8fillRectEsssst>
                oled.printf("%d",WaterBots.at(i).botNum);
   b5af0:	4639      	mov	r1, r7
   b5af2:	4640      	mov	r0, r8
   b5af4:	f7fe fe80 	bl	b47f8 <_ZNSt6vectorI8WaterBotSaIS0_EE2atEj>
   b5af8:	490f      	ldr	r1, [pc, #60]	; (b5b38 <_Z10updateMenuv+0xd0>)
   b5afa:	7802      	ldrb	r2, [r0, #0]
   b5afc:	4620      	mov	r0, r4
   b5afe:	f7fe fc1c 	bl	b433a <_ZN5Print6printfEPKcz>
        for(uint8_t i = 0; i < WaterBots.size(); i++){
   b5b02:	3501      	adds	r5, #1
   b5b04:	e7c8      	b.n	b5a98 <_Z10updateMenuv+0x30>
                oled.setTextSize(1);
   b5b06:	f000 fde8 	bl	b66da <_ZN12Adafruit_GFX11setTextSizeEh>
   b5b0a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b5b0e:	6163      	str	r3, [r4, #20]
                oled.drawRect(1+i*18,1,14,14,1);
   b5b10:	2201      	movs	r2, #1
   b5b12:	230e      	movs	r3, #14
   b5b14:	e9cd 3200 	strd	r3, r2, [sp]
   b5b18:	4631      	mov	r1, r6
   b5b1a:	4620      	mov	r0, r4
   b5b1c:	f000 f9a8 	bl	b5e70 <_ZN12Adafruit_GFX8drawRectEsssst>
   b5b20:	e7e6      	b.n	b5af0 <_Z10updateMenuv+0x88>
        oled.display();
   b5b22:	4804      	ldr	r0, [pc, #16]	; (b5b34 <_Z10updateMenuv+0xcc>)
   b5b24:	f002 fdce 	bl	b86c4 <_ZN16Adafruit_SSD13067displayEv>
        redrawMenu = false;
   b5b28:	2300      	movs	r3, #0
   b5b2a:	f889 3000 	strb.w	r3, [r9]
}
   b5b2e:	b003      	add	sp, #12
   b5b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5b34:	2003de4c 	.word	0x2003de4c
   b5b38:	000c0083 	.word	0x000c0083
   b5b3c:	2003da98 	.word	0x2003da98
   b5b40:	2003dcb4 	.word	0x2003dcb4
   b5b44:	aaaaaaab 	.word	0xaaaaaaab
   b5b48:	2003dd4d 	.word	0x2003dd4d

000b5b4c <loop>:
void loop() {
   b5b4c:	b530      	push	{r4, r5, lr}
    if(postStatus){
   b5b4e:	4d25      	ldr	r5, [pc, #148]	; (b5be4 <loop+0x98>)
   b5b50:	782b      	ldrb	r3, [r5, #0]
void loop() {
   b5b52:	b08b      	sub	sp, #44	; 0x2c
    if(postStatus){
   b5b54:	b19b      	cbz	r3, b5b7e <loop+0x32>
        if(ControlledBot != NULL) sprintf(statusStr,"CCABspcB%d",ControlledBot->botNum);
   b5b56:	4b24      	ldr	r3, [pc, #144]	; (b5be8 <loop+0x9c>)
   b5b58:	681b      	ldr	r3, [r3, #0]
   b5b5a:	b36b      	cbz	r3, b5bb8 <loop+0x6c>
   b5b5c:	781a      	ldrb	r2, [r3, #0]
   b5b5e:	4923      	ldr	r1, [pc, #140]	; (b5bec <loop+0xa0>)
   b5b60:	a802      	add	r0, sp, #8
   b5b62:	f003 f9f1 	bl	b8f48 <sprintf>
        sendData(statusStr,0,true,true,statusTimeout);                                  
   b5b66:	4c22      	ldr	r4, [pc, #136]	; (b5bf0 <loop+0xa4>)
   b5b68:	7823      	ldrb	r3, [r4, #0]
   b5b6a:	9300      	str	r3, [sp, #0]
   b5b6c:	2301      	movs	r3, #1
   b5b6e:	461a      	mov	r2, r3
   b5b70:	2100      	movs	r1, #0
   b5b72:	a802      	add	r0, sp, #8
   b5b74:	f7fe fdb2 	bl	b46dc <_Z8sendDataPKchbbb>
        postStatus = false;
   b5b78:	2300      	movs	r3, #0
   b5b7a:	702b      	strb	r3, [r5, #0]
        statusTimeout = false;
   b5b7c:	7023      	strb	r3, [r4, #0]
    updateMenu();
   b5b7e:	f7ff ff73 	bl	b5a68 <_Z10updateMenuv>
    Serial.printlnf("Selected Bot: %d",botSelect);
   b5b82:	f006 fd1b 	bl	bc5bc <_Z16_fetch_usbserialv>
   b5b86:	4b1b      	ldr	r3, [pc, #108]	; (b5bf4 <loop+0xa8>)
   b5b88:	491b      	ldr	r1, [pc, #108]	; (b5bf8 <loop+0xac>)
   b5b8a:	781a      	ldrb	r2, [r3, #0]
   b5b8c:	f7fe fc0e 	bl	b43ac <_ZN5Print8printlnfEPKcz>
    if (BLE.connected()) {
   b5b90:	f004 f946 	bl	b9e20 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5b94:	f004 f9ed 	bl	b9f72 <_ZNK8particle14BleLocalDevice9connectedEv>
   b5b98:	b198      	cbz	r0, b5bc2 <loop+0x76>
        delay(250);
   b5b9a:	20fa      	movs	r0, #250	; 0xfa
   b5b9c:	f006 f8fa 	bl	bbd94 <delay>
    if(offloadingMode) DataOffloader();
   b5ba0:	4b16      	ldr	r3, [pc, #88]	; (b5bfc <loop+0xb0>)
   b5ba2:	781b      	ldrb	r3, [r3, #0]
   b5ba4:	b10b      	cbz	r3, b5baa <loop+0x5e>
   b5ba6:	f7ff fbb1 	bl	b530c <_Z13DataOffloaderv>
    XBeeHandler();
   b5baa:	f7ff f98b 	bl	b4ec4 <_Z11XBeeHandlerv>
}
   b5bae:	b00b      	add	sp, #44	; 0x2c
   b5bb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    XBeeLTEPairSet();
   b5bb4:	f7fe bdfc 	b.w	b47b0 <_Z14XBeeLTEPairSetv>
        else sprintf(statusStr,"CCABspcNB");
   b5bb8:	4911      	ldr	r1, [pc, #68]	; (b5c00 <loop+0xb4>)
   b5bba:	a802      	add	r0, sp, #8
   b5bbc:	f007 ff4d 	bl	bda5a <strcpy>
   b5bc0:	e7d1      	b.n	b5b66 <loop+0x1a>
    	if (millis() - lastScan >= SCAN_PERIOD_MS) {
   b5bc2:	4c10      	ldr	r4, [pc, #64]	; (b5c04 <loop+0xb8>)
   b5bc4:	f002 fe70 	bl	b88a8 <HAL_Timer_Get_Milli_Seconds>
   b5bc8:	6823      	ldr	r3, [r4, #0]
   b5bca:	1ac0      	subs	r0, r0, r3
   b5bcc:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   b5bd0:	d3e6      	bcc.n	b5ba0 <loop+0x54>
   b5bd2:	f002 fe69 	bl	b88a8 <HAL_Timer_Get_Milli_Seconds>
    		lastScan = millis();
   b5bd6:	6020      	str	r0, [r4, #0]
    		BLEScan(-1);
   b5bd8:	f04f 30ff 	mov.w	r0, #4294967295
   b5bdc:	f7ff fa7e 	bl	b50dc <_Z7BLEScani>
   b5be0:	e7de      	b.n	b5ba0 <loop+0x54>
   b5be2:	bf00      	nop
   b5be4:	2003dedc 	.word	0x2003dedc
   b5be8:	2003dc94 	.word	0x2003dc94
   b5bec:	000c0106 	.word	0x000c0106
   b5bf0:	2003e635 	.word	0x2003e635
   b5bf4:	2003dd4d 	.word	0x2003dd4d
   b5bf8:	000c011b 	.word	0x000c011b
   b5bfc:	2003de4b 	.word	0x2003de4b
   b5c00:	000c0111 	.word	0x000c0111
   b5c04:	2003dd88 	.word	0x2003dd88

000b5c08 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b5c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5c0c:	b085      	sub	sp, #20
   b5c0e:	461f      	mov	r7, r3
   b5c10:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b5c14:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b5c18:	eba8 0902 	sub.w	r9, r8, r2
   b5c1c:	eba7 0a01 	sub.w	sl, r7, r1
   b5c20:	f1b9 0f00 	cmp.w	r9, #0
   b5c24:	bfb8      	it	lt
   b5c26:	f1c9 0900 	rsblt	r9, r9, #0
   b5c2a:	f1ba 0f00 	cmp.w	sl, #0
   b5c2e:	bfb8      	it	lt
   b5c30:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b5c34:	45d1      	cmp	r9, sl
        uint16_t color) {
   b5c36:	4683      	mov	fp, r0
   b5c38:	460c      	mov	r4, r1
   b5c3a:	4615      	mov	r5, r2
    if (steep) {
   b5c3c:	dd04      	ble.n	b5c48 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b5c3e:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b5c40:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b5c42:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b5c44:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b5c46:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b5c48:	42bc      	cmp	r4, r7
   b5c4a:	dd05      	ble.n	b5c58 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b5c4c:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b5c4e:	4645      	mov	r5, r8
   b5c50:	4690      	mov	r8, r2
    if (x0 > x1) {
   b5c52:	4622      	mov	r2, r4
   b5c54:	463c      	mov	r4, r7
   b5c56:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b5c58:	1b3e      	subs	r6, r7, r4
   b5c5a:	b2b2      	uxth	r2, r6
   b5c5c:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b5c5e:	eba8 0205 	sub.w	r2, r8, r5
   b5c62:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b5c66:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b5c6a:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b5c6e:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b5c72:	4545      	cmp	r5, r8
   b5c74:	bfb4      	ite	lt
   b5c76:	2201      	movlt	r2, #1
   b5c78:	f04f 32ff 	movge.w	r2, #4294967295
    dy = abs(y1 - y0);
   b5c7c:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b5c7e:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b5c80:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b5c82:	42bc      	cmp	r4, r7
   b5c84:	dc1c      	bgt.n	b5cc0 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b5c86:	f8db 2000 	ldr.w	r2, [fp]
   b5c8a:	9303      	str	r3, [sp, #12]
        if (steep) {
   b5c8c:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b5c8e:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b5c92:	bfc7      	ittee	gt
   b5c94:	4629      	movgt	r1, r5
   b5c96:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b5c98:	462a      	movle	r2, r5
   b5c9a:	4621      	movle	r1, r4
   b5c9c:	4658      	mov	r0, fp
   b5c9e:	47c0      	blx	r8
        }
        err -= dy;
   b5ca0:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b5ca2:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b5ca4:	1ab6      	subs	r6, r6, r2
   b5ca6:	b2b1      	uxth	r1, r6
   b5ca8:	b236      	sxth	r6, r6
        if (err < 0) {
   b5caa:	2e00      	cmp	r6, #0
   b5cac:	da05      	bge.n	b5cba <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b5cae:	9a02      	ldr	r2, [sp, #8]
   b5cb0:	4415      	add	r5, r2
            err += dx;
   b5cb2:	9a00      	ldr	r2, [sp, #0]
   b5cb4:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b5cb6:	b22d      	sxth	r5, r5
            err += dx;
   b5cb8:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b5cba:	3401      	adds	r4, #1
   b5cbc:	b224      	sxth	r4, r4
   b5cbe:	e7e0      	b.n	b5c82 <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b5cc0:	b005      	add	sp, #20
   b5cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b5cc6 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b5cc6:	4770      	bx	lr

000b5cc8 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b5cc8:	b410      	push	{r4}
    drawPixel(x, y, color);
   b5cca:	6804      	ldr	r4, [r0, #0]
   b5ccc:	6924      	ldr	r4, [r4, #16]
   b5cce:	46a4      	mov	ip, r4
}
   b5cd0:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b5cd4:	4760      	bx	ip

000b5cd6 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b5cd6:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b5cd8:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b5cda:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b5cde:	9502      	str	r5, [sp, #8]
   b5ce0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b5ce2:	46a4      	mov	ip, r4
}
   b5ce4:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b5ce6:	4760      	bx	ip

000b5ce8 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b5ce8:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b5cea:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b5cec:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b5cf0:	9502      	str	r5, [sp, #8]
   b5cf2:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b5cf4:	46a4      	mov	ip, r4
}
   b5cf6:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b5cf8:	4760      	bx	ip

000b5cfa <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5cfa:	b470      	push	{r4, r5, r6}
   b5cfc:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b5d00:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b5d04:	6804      	ldr	r4, [r0, #0]
   b5d06:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b5d0a:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b5d0c:	46a4      	mov	ip, r4
}
   b5d0e:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b5d10:	4760      	bx	ip

000b5d12 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b5d12:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5d16:	461c      	mov	r4, r3
    startWrite();
   b5d18:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b5d1a:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b5d1e:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b5d20:	4605      	mov	r5, r0
   b5d22:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b5d24:	3c01      	subs	r4, #1
   b5d26:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b5d28:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b5d2a:	b224      	sxth	r4, r4
    startWrite();
   b5d2c:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b5d2e:	682b      	ldr	r3, [r5, #0]
   b5d30:	f8cd 8004 	str.w	r8, [sp, #4]
   b5d34:	9400      	str	r4, [sp, #0]
   b5d36:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b5d38:	4628      	mov	r0, r5
   b5d3a:	463b      	mov	r3, r7
   b5d3c:	4632      	mov	r2, r6
   b5d3e:	4639      	mov	r1, r7
   b5d40:	47a0      	blx	r4
    endWrite();
   b5d42:	682b      	ldr	r3, [r5, #0]
   b5d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5d46:	4628      	mov	r0, r5
}
   b5d48:	b002      	add	sp, #8
   b5d4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b5d4e:	4718      	bx	r3

000b5d50 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b5d50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b5d54:	461d      	mov	r5, r3
    startWrite();
   b5d56:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b5d58:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b5d5c:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b5d5e:	4604      	mov	r4, r0
   b5d60:	4617      	mov	r7, r2
   b5d62:	460e      	mov	r6, r1
    startWrite();
   b5d64:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b5d66:	e9cd 7800 	strd	r7, r8, [sp]
   b5d6a:	6822      	ldr	r2, [r4, #0]
   b5d6c:	1e6b      	subs	r3, r5, #1
   b5d6e:	4433      	add	r3, r6
   b5d70:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b5d72:	4620      	mov	r0, r4
   b5d74:	b21b      	sxth	r3, r3
   b5d76:	463a      	mov	r2, r7
   b5d78:	4631      	mov	r1, r6
   b5d7a:	47a8      	blx	r5
    endWrite();
   b5d7c:	6823      	ldr	r3, [r4, #0]
   b5d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5d80:	4620      	mov	r0, r4
}
   b5d82:	b002      	add	sp, #8
   b5d84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b5d88:	4718      	bx	r3

000b5d8a <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5d8a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5d8e:	461e      	mov	r6, r3
    startWrite();
   b5d90:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b5d92:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b5d96:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b5d98:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b5d9c:	460c      	mov	r4, r1
   b5d9e:	4605      	mov	r5, r0
   b5da0:	4617      	mov	r7, r2
    startWrite();
   b5da2:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b5da4:	4426      	add	r6, r4
   b5da6:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b5da8:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b5daa:	da0b      	bge.n	b5dc4 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b5dac:	f8cd 8000 	str.w	r8, [sp]
   b5db0:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b5db4:	4621      	mov	r1, r4
   b5db6:	464b      	mov	r3, r9
   b5db8:	463a      	mov	r2, r7
   b5dba:	4628      	mov	r0, r5
   b5dbc:	3401      	adds	r4, #1
   b5dbe:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b5dc0:	b224      	sxth	r4, r4
   b5dc2:	e7f0      	b.n	b5da6 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b5dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5dc6:	4628      	mov	r0, r5
}
   b5dc8:	b002      	add	sp, #8
   b5dca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b5dce:	4718      	bx	r3

000b5dd0 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b5dd0:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b5dd2:	6802      	ldr	r2, [r0, #0]
   b5dd4:	9101      	str	r1, [sp, #4]
   b5dd6:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b5dda:	9100      	str	r1, [sp, #0]
   b5ddc:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b5dde:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b5de2:	2200      	movs	r2, #0
   b5de4:	4611      	mov	r1, r2
   b5de6:	47a0      	blx	r4
}
   b5de8:	b002      	add	sp, #8
   b5dea:	bd10      	pop	{r4, pc}

000b5dec <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b5dec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b5df0:	4299      	cmp	r1, r3
        uint16_t color) {
   b5df2:	4616      	mov	r6, r2
   b5df4:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b5df8:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5dfc:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b5dfe:	4680      	mov	r8, r0
   b5e00:	460d      	mov	r5, r1
   b5e02:	461c      	mov	r4, r3
    if(x0 == x1){
   b5e04:	d113      	bne.n	b5e2e <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b5e06:	42be      	cmp	r6, r7
   b5e08:	bfc8      	it	gt
   b5e0a:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5e0c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b5e10:	bfc4      	itt	gt
   b5e12:	463e      	movgt	r6, r7
   b5e14:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b5e16:	1c7b      	adds	r3, r7, #1
   b5e18:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b5e1a:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5e1c:	b21b      	sxth	r3, r3
   b5e1e:	4632      	mov	r2, r6
   b5e20:	4629      	mov	r1, r5
   b5e22:	4640      	mov	r0, r8
   b5e24:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b5e26:	b003      	add	sp, #12
   b5e28:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5e2c:	4760      	bx	ip
    } else if(y0 == y1){
   b5e2e:	42be      	cmp	r6, r7
   b5e30:	d10a      	bne.n	b5e48 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b5e32:	4299      	cmp	r1, r3
   b5e34:	bfc2      	ittt	gt
   b5e36:	460b      	movgt	r3, r1
   b5e38:	4625      	movgt	r5, r4
   b5e3a:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b5e3c:	1c63      	adds	r3, r4, #1
   b5e3e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b5e42:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b5e44:	1b5b      	subs	r3, r3, r5
   b5e46:	e7e9      	b.n	b5e1c <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b5e48:	6953      	ldr	r3, [r2, #20]
   b5e4a:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b5e4c:	e9cd 7900 	strd	r7, r9, [sp]
   b5e50:	f8d8 3000 	ldr.w	r3, [r8]
   b5e54:	4640      	mov	r0, r8
   b5e56:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b5e58:	4632      	mov	r2, r6
   b5e5a:	4623      	mov	r3, r4
   b5e5c:	4629      	mov	r1, r5
   b5e5e:	47b8      	blx	r7
        endWrite();
   b5e60:	f8d8 3000 	ldr.w	r3, [r8]
   b5e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5e66:	4640      	mov	r0, r8
}
   b5e68:	b003      	add	sp, #12
   b5e6a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b5e6e:	4718      	bx	r3

000b5e70 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b5e70:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b5e74:	461d      	mov	r5, r3
    startWrite();
   b5e76:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b5e78:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b5e7c:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b5e7e:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b5e82:	4604      	mov	r4, r0
   b5e84:	460f      	mov	r7, r1
   b5e86:	4616      	mov	r6, r2
    startWrite();
   b5e88:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b5e8a:	6823      	ldr	r3, [r4, #0]
   b5e8c:	f8cd 8000 	str.w	r8, [sp]
   b5e90:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b5e94:	4632      	mov	r2, r6
   b5e96:	462b      	mov	r3, r5
   b5e98:	4639      	mov	r1, r7
   b5e9a:	4620      	mov	r0, r4
   b5e9c:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b5e9e:	6823      	ldr	r3, [r4, #0]
   b5ea0:	f8cd 8000 	str.w	r8, [sp]
   b5ea4:	f109 32ff 	add.w	r2, r9, #4294967295
   b5ea8:	4432      	add	r2, r6
   b5eaa:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b5eae:	4639      	mov	r1, r7
   b5eb0:	462b      	mov	r3, r5
   b5eb2:	4620      	mov	r0, r4
   b5eb4:	b212      	sxth	r2, r2
   b5eb6:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b5eb8:	6823      	ldr	r3, [r4, #0]
   b5eba:	f8cd 8000 	str.w	r8, [sp]
   b5ebe:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b5ec2:	4632      	mov	r2, r6
   b5ec4:	464b      	mov	r3, r9
   b5ec6:	4639      	mov	r1, r7
   b5ec8:	4620      	mov	r0, r4
   b5eca:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b5ecc:	1e6b      	subs	r3, r5, #1
   b5ece:	19d9      	adds	r1, r3, r7
   b5ed0:	6823      	ldr	r3, [r4, #0]
   b5ed2:	f8cd 8000 	str.w	r8, [sp]
   b5ed6:	6a1d      	ldr	r5, [r3, #32]
   b5ed8:	4620      	mov	r0, r4
   b5eda:	464b      	mov	r3, r9
   b5edc:	4632      	mov	r2, r6
   b5ede:	b209      	sxth	r1, r1
   b5ee0:	47a8      	blx	r5
    endWrite();
   b5ee2:	6823      	ldr	r3, [r4, #0]
   b5ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b5ee6:	4620      	mov	r0, r4
}
   b5ee8:	b002      	add	sp, #8
   b5eea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b5eee:	4718      	bx	r3

000b5ef0 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b5ef0:	4770      	bx	lr

000b5ef2 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b5ef2:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b5ef6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b5efa:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b5efc:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b5efe:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b5f02:	bf59      	ittee	pl
   b5f04:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b5f06:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b5f08:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b5f0a:	81c3      	strhmi	r3, [r0, #14]
}
   b5f0c:	4770      	bx	lr
	...

000b5f10 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b5f10:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b5f12:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b5f14:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b5f16:	4a07      	ldr	r2, [pc, #28]	; (b5f34 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b5f18:	4d07      	ldr	r5, [pc, #28]	; (b5f38 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b5f1a:	8101      	strh	r1, [r0, #8]
   b5f1c:	2400      	movs	r4, #0
    _width    = WIDTH;
   b5f1e:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b5f20:	f04f 31ff 	mov.w	r1, #4294967295
   b5f24:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b5f28:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b5f2a:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b5f2c:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b5f2e:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b5f30:	6204      	str	r4, [r0, #32]
}
   b5f32:	bd30      	pop	{r4, r5, pc}
   b5f34:	01000101 	.word	0x01000101
   b5f38:	000c0684 	.word	0x000c0684

000b5f3c <_ZN12Adafruit_GFX10drawCircleEssst>:
        uint16_t color) {
   b5f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int16_t f = 1 - r;
   b5f40:	b29d      	uxth	r5, r3
        uint16_t color) {
   b5f42:	4616      	mov	r6, r2
    int16_t f = 1 - r;
   b5f44:	f1c5 0201 	rsb	r2, r5, #1
        uint16_t color) {
   b5f48:	b087      	sub	sp, #28
   b5f4a:	461f      	mov	r7, r3
    int16_t f = 1 - r;
   b5f4c:	b213      	sxth	r3, r2
    int16_t ddF_y = -2 * r;
   b5f4e:	ebc5 32c5 	rsb	r2, r5, r5, lsl #15
   b5f52:	0052      	lsls	r2, r2, #1
    int16_t f = 1 - r;
   b5f54:	9301      	str	r3, [sp, #4]
    int16_t ddF_y = -2 * r;
   b5f56:	b213      	sxth	r3, r2
    startWrite();
   b5f58:	6802      	ldr	r2, [r0, #0]
    int16_t ddF_y = -2 * r;
   b5f5a:	9304      	str	r3, [sp, #16]
        uint16_t color) {
   b5f5c:	4604      	mov	r4, r0
    startWrite();
   b5f5e:	6952      	ldr	r2, [r2, #20]
        uint16_t color) {
   b5f60:	f8bd b040 	ldrh.w	fp, [sp, #64]	; 0x40
   b5f64:	4689      	mov	r9, r1
    startWrite();
   b5f66:	4790      	blx	r2
    writePixel(x0  , y0+r, color);
   b5f68:	6821      	ldr	r1, [r4, #0]
   b5f6a:	b2b3      	uxth	r3, r6
   b5f6c:	fa15 f286 	uxtah	r2, r5, r6
   b5f70:	f8d1 8018 	ldr.w	r8, [r1, #24]
   b5f74:	9300      	str	r3, [sp, #0]
   b5f76:	4649      	mov	r1, r9
   b5f78:	465b      	mov	r3, fp
   b5f7a:	b212      	sxth	r2, r2
   b5f7c:	4620      	mov	r0, r4
   b5f7e:	47c0      	blx	r8
    writePixel(x0  , y0-r, color);
   b5f80:	9b00      	ldr	r3, [sp, #0]
   b5f82:	6821      	ldr	r1, [r4, #0]
   b5f84:	1b5a      	subs	r2, r3, r5
   b5f86:	f8d1 8018 	ldr.w	r8, [r1, #24]
   b5f8a:	465b      	mov	r3, fp
   b5f8c:	4649      	mov	r1, r9
   b5f8e:	b212      	sxth	r2, r2
   b5f90:	4620      	mov	r0, r4
   b5f92:	47c0      	blx	r8
    writePixel(x0+r, y0  , color);
   b5f94:	6822      	ldr	r2, [r4, #0]
   b5f96:	fa15 f189 	uxtah	r1, r5, r9
   b5f9a:	fa1f f889 	uxth.w	r8, r9
   b5f9e:	465b      	mov	r3, fp
   b5fa0:	f8d2 9018 	ldr.w	r9, [r2, #24]
   b5fa4:	b209      	sxth	r1, r1
   b5fa6:	4632      	mov	r2, r6
   b5fa8:	4620      	mov	r0, r4
   b5faa:	47c8      	blx	r9
    writePixel(x0-r, y0  , color);
   b5fac:	6822      	ldr	r2, [r4, #0]
   b5fae:	eba8 0105 	sub.w	r1, r8, r5
   b5fb2:	465b      	mov	r3, fp
   b5fb4:	6995      	ldr	r5, [r2, #24]
   b5fb6:	b209      	sxth	r1, r1
   b5fb8:	4632      	mov	r2, r6
   b5fba:	4620      	mov	r0, r4
   b5fbc:	47a8      	blx	r5
    int16_t x = 0;
   b5fbe:	2300      	movs	r3, #0
   b5fc0:	9303      	str	r3, [sp, #12]
    while (x<y) {
   b5fc2:	9b03      	ldr	r3, [sp, #12]
   b5fc4:	42bb      	cmp	r3, r7
   b5fc6:	da76      	bge.n	b60b6 <_ZN12Adafruit_GFX10drawCircleEssst+0x17a>
        if (f >= 0) {
   b5fc8:	9b01      	ldr	r3, [sp, #4]
   b5fca:	2b00      	cmp	r3, #0
   b5fcc:	db0a      	blt.n	b5fe4 <_ZN12Adafruit_GFX10drawCircleEssst+0xa8>
            ddF_y += 2;
   b5fce:	9a04      	ldr	r2, [sp, #16]
   b5fd0:	3202      	adds	r2, #2
   b5fd2:	b213      	sxth	r3, r2
   b5fd4:	9304      	str	r3, [sp, #16]
            f += ddF_y;
   b5fd6:	9b01      	ldr	r3, [sp, #4]
   b5fd8:	fa13 f282 	uxtah	r2, r3, r2
            y--;
   b5fdc:	3f01      	subs	r7, #1
            f += ddF_y;
   b5fde:	b213      	sxth	r3, r2
            y--;
   b5fe0:	b23f      	sxth	r7, r7
            f += ddF_y;
   b5fe2:	9301      	str	r3, [sp, #4]
        x++;
   b5fe4:	9a03      	ldr	r2, [sp, #12]
        writePixel(x0 + x, y0 + y, color);
   b5fe6:	6821      	ldr	r1, [r4, #0]
   b5fe8:	3201      	adds	r2, #1
   b5fea:	b213      	sxth	r3, r2
   b5fec:	9303      	str	r3, [sp, #12]
        ddF_x += 2;
   b5fee:	9b01      	ldr	r3, [sp, #4]
        writePixel(x0 + x, y0 + y, color);
   b5ff0:	698d      	ldr	r5, [r1, #24]
   b5ff2:	b296      	uxth	r6, r2
        ddF_x += 2;
   b5ff4:	eb03 0246 	add.w	r2, r3, r6, lsl #1
        f += ddF_x;
   b5ff8:	3201      	adds	r2, #1
   b5ffa:	b213      	sxth	r3, r2
   b5ffc:	9301      	str	r3, [sp, #4]
        writePixel(x0 + x, y0 + y, color);
   b5ffe:	9b00      	ldr	r3, [sp, #0]
   b6000:	eb08 0a06 	add.w	sl, r8, r6
   b6004:	fa13 f287 	uxtah	r2, r3, r7
   b6008:	fa0f fa8a 	sxth.w	sl, sl
   b600c:	b212      	sxth	r2, r2
   b600e:	465b      	mov	r3, fp
   b6010:	9202      	str	r2, [sp, #8]
   b6012:	4651      	mov	r1, sl
   b6014:	4620      	mov	r0, r4
   b6016:	47a8      	blx	r5
        writePixel(x0 - x, y0 + y, color);
   b6018:	eba8 0906 	sub.w	r9, r8, r6
   b601c:	6821      	ldr	r1, [r4, #0]
   b601e:	9a02      	ldr	r2, [sp, #8]
   b6020:	698d      	ldr	r5, [r1, #24]
   b6022:	fa0f f989 	sxth.w	r9, r9
   b6026:	465b      	mov	r3, fp
   b6028:	4649      	mov	r1, r9
   b602a:	4620      	mov	r0, r4
   b602c:	47a8      	blx	r5
        writePixel(x0 + x, y0 - y, color);
   b602e:	b2bb      	uxth	r3, r7
   b6030:	9302      	str	r3, [sp, #8]
   b6032:	6821      	ldr	r1, [r4, #0]
   b6034:	9b00      	ldr	r3, [sp, #0]
   b6036:	9a02      	ldr	r2, [sp, #8]
   b6038:	1a9a      	subs	r2, r3, r2
   b603a:	698b      	ldr	r3, [r1, #24]
   b603c:	b212      	sxth	r2, r2
   b603e:	461d      	mov	r5, r3
   b6040:	9205      	str	r2, [sp, #20]
   b6042:	465b      	mov	r3, fp
   b6044:	4651      	mov	r1, sl
   b6046:	4620      	mov	r0, r4
   b6048:	47a8      	blx	r5
        writePixel(x0 - x, y0 - y, color);
   b604a:	6821      	ldr	r1, [r4, #0]
   b604c:	9a05      	ldr	r2, [sp, #20]
   b604e:	f8d1 a018 	ldr.w	sl, [r1, #24]
   b6052:	465b      	mov	r3, fp
   b6054:	4649      	mov	r1, r9
   b6056:	4620      	mov	r0, r4
   b6058:	47d0      	blx	sl
        writePixel(x0 + y, y0 + x, color);
   b605a:	9b02      	ldr	r3, [sp, #8]
   b605c:	6821      	ldr	r1, [r4, #0]
   b605e:	eb08 0903 	add.w	r9, r8, r3
   b6062:	9b00      	ldr	r3, [sp, #0]
   b6064:	f8d1 a018 	ldr.w	sl, [r1, #24]
   b6068:	199a      	adds	r2, r3, r6
   b606a:	fa0f f989 	sxth.w	r9, r9
   b606e:	b212      	sxth	r2, r2
   b6070:	465b      	mov	r3, fp
   b6072:	9205      	str	r2, [sp, #20]
   b6074:	4649      	mov	r1, r9
   b6076:	4620      	mov	r0, r4
   b6078:	47d0      	blx	sl
        writePixel(x0 - y, y0 + x, color);
   b607a:	9b02      	ldr	r3, [sp, #8]
   b607c:	6821      	ldr	r1, [r4, #0]
   b607e:	9a05      	ldr	r2, [sp, #20]
   b6080:	f8d1 a018 	ldr.w	sl, [r1, #24]
   b6084:	eba8 0503 	sub.w	r5, r8, r3
   b6088:	b22d      	sxth	r5, r5
   b608a:	465b      	mov	r3, fp
   b608c:	4629      	mov	r1, r5
   b608e:	4620      	mov	r0, r4
   b6090:	47d0      	blx	sl
        writePixel(x0 + y, y0 - x, color);
   b6092:	9b00      	ldr	r3, [sp, #0]
   b6094:	6821      	ldr	r1, [r4, #0]
   b6096:	1b9a      	subs	r2, r3, r6
   b6098:	b212      	sxth	r2, r2
   b609a:	698e      	ldr	r6, [r1, #24]
   b609c:	9202      	str	r2, [sp, #8]
   b609e:	465b      	mov	r3, fp
   b60a0:	4649      	mov	r1, r9
   b60a2:	4620      	mov	r0, r4
   b60a4:	47b0      	blx	r6
        writePixel(x0 - y, y0 - x, color);
   b60a6:	6821      	ldr	r1, [r4, #0]
   b60a8:	9a02      	ldr	r2, [sp, #8]
   b60aa:	698e      	ldr	r6, [r1, #24]
   b60ac:	465b      	mov	r3, fp
   b60ae:	4629      	mov	r1, r5
   b60b0:	4620      	mov	r0, r4
   b60b2:	47b0      	blx	r6
    while (x<y) {
   b60b4:	e785      	b.n	b5fc2 <_ZN12Adafruit_GFX10drawCircleEssst+0x86>
    endWrite();
   b60b6:	6823      	ldr	r3, [r4, #0]
   b60b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b60ba:	4620      	mov	r0, r4
}
   b60bc:	b007      	add	sp, #28
   b60be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b60c2:	4718      	bx	r3

000b60c4 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>:
  uint8_t corners, int16_t delta, uint16_t color) {
   b60c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b60c8:	b08b      	sub	sp, #44	; 0x2c
   b60ca:	461c      	mov	r4, r3
   b60cc:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   b60d0:	9304      	str	r3, [sp, #16]
    int16_t f     = 1 - r;
   b60d2:	b2a3      	uxth	r3, r4
   b60d4:	f1c3 0501 	rsb	r5, r3, #1
    int16_t ddF_y = -2 * r;
   b60d8:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
   b60dc:	005b      	lsls	r3, r3, #1
   b60de:	b21b      	sxth	r3, r3
   b60e0:	9307      	str	r3, [sp, #28]
    delta++; // Avoid some +1's in the loop
   b60e2:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
   b60e6:	3301      	adds	r3, #1
   b60e8:	b29b      	uxth	r3, r3
   b60ea:	9305      	str	r3, [sp, #20]
   b60ec:	b293      	uxth	r3, r2
   b60ee:	9306      	str	r3, [sp, #24]
  uint8_t corners, int16_t delta, uint16_t color) {
   b60f0:	4688      	mov	r8, r1
    delta++; // Avoid some +1's in the loop
   b60f2:	9b05      	ldr	r3, [sp, #20]
  uint8_t corners, int16_t delta, uint16_t color) {
   b60f4:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
    delta++; // Avoid some +1's in the loop
   b60f8:	9303      	str	r3, [sp, #12]
    int16_t x     = 0;
   b60fa:	2300      	movs	r3, #0
   b60fc:	9302      	str	r3, [sp, #8]
            if(corners & 1) writeFastVLine(x0+x, y0-y, 2*y+delta, color);
   b60fe:	f001 0301 	and.w	r3, r1, #1
   b6102:	9308      	str	r3, [sp, #32]
    delta++; // Avoid some +1's in the loop
   b6104:	f8dd a018 	ldr.w	sl, [sp, #24]
            if(corners & 2) writeFastVLine(x0-x, y0-y, 2*y+delta, color);
   b6108:	f001 0302 	and.w	r3, r1, #2
  uint8_t corners, int16_t delta, uint16_t color) {
   b610c:	4683      	mov	fp, r0
    int16_t f     = 1 - r;
   b610e:	b22d      	sxth	r5, r5
            if(corners & 2) writeFastVLine(x0-x, y0-y, 2*y+delta, color);
   b6110:	9309      	str	r3, [sp, #36]	; 0x24
    while(x < y) {
   b6112:	9b02      	ldr	r3, [sp, #8]
   b6114:	42a3      	cmp	r3, r4
   b6116:	da6f      	bge.n	b61f8 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x134>
        if (f >= 0) {
   b6118:	2d00      	cmp	r5, #0
   b611a:	db6b      	blt.n	b61f4 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x130>
            ddF_y += 2;
   b611c:	9b07      	ldr	r3, [sp, #28]
   b611e:	3302      	adds	r3, #2
            y--;
   b6120:	1e66      	subs	r6, r4, #1
            ddF_y += 2;
   b6122:	b21a      	sxth	r2, r3
            f     += ddF_y;
   b6124:	fa15 f583 	uxtah	r5, r5, r3
            y--;
   b6128:	b236      	sxth	r6, r6
            ddF_y += 2;
   b612a:	9207      	str	r2, [sp, #28]
            f     += ddF_y;
   b612c:	b22d      	sxth	r5, r5
        x++;
   b612e:	9f02      	ldr	r7, [sp, #8]
   b6130:	3701      	adds	r7, #1
   b6132:	fa1f f987 	uxth.w	r9, r7
   b6136:	b23b      	sxth	r3, r7
        ddF_x += 2;
   b6138:	eb05 0549 	add.w	r5, r5, r9, lsl #1
        f     += ddF_x;
   b613c:	3501      	adds	r5, #1
        if(x < (y + 1)) {
   b613e:	429e      	cmp	r6, r3
   b6140:	9302      	str	r3, [sp, #8]
        f     += ddF_x;
   b6142:	b22d      	sxth	r5, r5
        if(x < (y + 1)) {
   b6144:	db29      	blt.n	b619a <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xd6>
            if(corners & 1) writeFastVLine(x0+x, y0-y, 2*y+delta, color);
   b6146:	9b08      	ldr	r3, [sp, #32]
   b6148:	b193      	cbz	r3, b6170 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xac>
   b614a:	9804      	ldr	r0, [sp, #16]
   b614c:	9000      	str	r0, [sp, #0]
   b614e:	f8db 0000 	ldr.w	r0, [fp]
   b6152:	9906      	ldr	r1, [sp, #24]
   b6154:	9b05      	ldr	r3, [sp, #20]
   b6156:	6a00      	ldr	r0, [r0, #32]
   b6158:	b2b2      	uxth	r2, r6
   b615a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   b615e:	1a8a      	subs	r2, r1, r2
   b6160:	eb09 0108 	add.w	r1, r9, r8
   b6164:	4607      	mov	r7, r0
   b6166:	b21b      	sxth	r3, r3
   b6168:	b212      	sxth	r2, r2
   b616a:	b209      	sxth	r1, r1
   b616c:	4658      	mov	r0, fp
   b616e:	47b8      	blx	r7
            if(corners & 2) writeFastVLine(x0-x, y0-y, 2*y+delta, color);
   b6170:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b6172:	b193      	cbz	r3, b619a <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xd6>
   b6174:	9906      	ldr	r1, [sp, #24]
   b6176:	9804      	ldr	r0, [sp, #16]
   b6178:	9b05      	ldr	r3, [sp, #20]
   b617a:	9000      	str	r0, [sp, #0]
   b617c:	b2b2      	uxth	r2, r6
   b617e:	f8db 0000 	ldr.w	r0, [fp]
   b6182:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   b6186:	1a8a      	subs	r2, r1, r2
   b6188:	eba8 0109 	sub.w	r1, r8, r9
   b618c:	b21b      	sxth	r3, r3
   b618e:	f8d0 9020 	ldr.w	r9, [r0, #32]
   b6192:	b212      	sxth	r2, r2
   b6194:	b209      	sxth	r1, r1
   b6196:	4658      	mov	r0, fp
   b6198:	47c8      	blx	r9
        if(y != py) {
   b619a:	42b4      	cmp	r4, r6
   b619c:	d020      	beq.n	b61e0 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x11c>
            if(corners & 1) writeFastVLine(x0+py, y0-px, 2*px+delta, color);
   b619e:	9b08      	ldr	r3, [sp, #32]
   b61a0:	b173      	cbz	r3, b61c0 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0xfc>
   b61a2:	f8db 3000 	ldr.w	r3, [fp]
   b61a6:	9a04      	ldr	r2, [sp, #16]
   b61a8:	9200      	str	r2, [sp, #0]
   b61aa:	eb08 0104 	add.w	r1, r8, r4
   b61ae:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b61b2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
   b61b6:	fa0f f28a 	sxth.w	r2, sl
   b61ba:	b209      	sxth	r1, r1
   b61bc:	4658      	mov	r0, fp
   b61be:	47c8      	blx	r9
            if(corners & 2) writeFastVLine(x0-py, y0-px, 2*px+delta, color);
   b61c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b61c2:	b16b      	cbz	r3, b61e0 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x11c>
   b61c4:	f8db 3000 	ldr.w	r3, [fp]
   b61c8:	9a04      	ldr	r2, [sp, #16]
   b61ca:	9200      	str	r2, [sp, #0]
   b61cc:	eba8 0104 	sub.w	r1, r8, r4
   b61d0:	fa0f f28a 	sxth.w	r2, sl
   b61d4:	6a1c      	ldr	r4, [r3, #32]
   b61d6:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
   b61da:	b209      	sxth	r1, r1
   b61dc:	4658      	mov	r0, fp
   b61de:	47a0      	blx	r4
   b61e0:	f10a 33ff 	add.w	r3, sl, #4294967295
   b61e4:	fa1f fa83 	uxth.w	sl, r3
   b61e8:	9b03      	ldr	r3, [sp, #12]
   b61ea:	3302      	adds	r3, #2
   b61ec:	b29b      	uxth	r3, r3
   b61ee:	9303      	str	r3, [sp, #12]
  uint8_t corners, int16_t delta, uint16_t color) {
   b61f0:	4634      	mov	r4, r6
   b61f2:	e78e      	b.n	b6112 <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x4e>
   b61f4:	4626      	mov	r6, r4
   b61f6:	e79a      	b.n	b612e <_ZN12Adafruit_GFX16fillCircleHelperEssshst+0x6a>
}
   b61f8:	b00b      	add	sp, #44	; 0x2c
   b61fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b61fe <_ZN12Adafruit_GFX10fillCircleEssst>:
        uint16_t color) {
   b61fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6202:	461e      	mov	r6, r3
   b6204:	b086      	sub	sp, #24
    startWrite();
   b6206:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b6208:	9105      	str	r1, [sp, #20]
   b620a:	4604      	mov	r4, r0
    startWrite();
   b620c:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b620e:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
   b6212:	4615      	mov	r5, r2
    startWrite();
   b6214:	4798      	blx	r3
    writeFastVLine(x0, y0-r, 2*r+1, color);
   b6216:	b2b2      	uxth	r2, r6
   b6218:	6820      	ldr	r0, [r4, #0]
   b621a:	9700      	str	r7, [sp, #0]
   b621c:	0053      	lsls	r3, r2, #1
   b621e:	3301      	adds	r3, #1
   b6220:	1aaa      	subs	r2, r5, r2
   b6222:	f8d0 8020 	ldr.w	r8, [r0, #32]
   b6226:	9905      	ldr	r1, [sp, #20]
   b6228:	4620      	mov	r0, r4
   b622a:	b21b      	sxth	r3, r3
   b622c:	b212      	sxth	r2, r2
   b622e:	47c0      	blx	r8
    fillCircleHelper(x0, y0, r, 3, 0, color);
   b6230:	2303      	movs	r3, #3
   b6232:	2200      	movs	r2, #0
   b6234:	e9cd 3200 	strd	r3, r2, [sp]
   b6238:	4620      	mov	r0, r4
   b623a:	4633      	mov	r3, r6
   b623c:	9905      	ldr	r1, [sp, #20]
   b623e:	9702      	str	r7, [sp, #8]
   b6240:	462a      	mov	r2, r5
   b6242:	f7ff ff3f 	bl	b60c4 <_ZN12Adafruit_GFX16fillCircleHelperEssshst>
    endWrite();
   b6246:	6823      	ldr	r3, [r4, #0]
   b6248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b624a:	4620      	mov	r0, r4
}
   b624c:	b006      	add	sp, #24
   b624e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b6252:	4718      	bx	r3

000b6254 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b6254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6258:	b089      	sub	sp, #36	; 0x24
   b625a:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b625e:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b6260:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b6264:	9304      	str	r3, [sp, #16]
   b6266:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b626a:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b626c:	9305      	str	r3, [sp, #20]
   b626e:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b6272:	4604      	mov	r4, r0
    startWrite();
   b6274:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b6276:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b627a:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b627e:	bf48      	it	mi
   b6280:	f108 020e 	addmi.w	r2, r8, #14
   b6284:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b6288:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b628a:	4635      	mov	r5, r6
   b628c:	9b03      	ldr	r3, [sp, #12]
   b628e:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b6290:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b6294:	189a      	adds	r2, r3, r2
   b6296:	9b05      	ldr	r3, [sp, #20]
   b6298:	428b      	cmp	r3, r1
   b629a:	b212      	sxth	r2, r2
   b629c:	dd27      	ble.n	b62ee <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b629e:	9b04      	ldr	r3, [sp, #16]
   b62a0:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b62a2:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b62a6:	9306      	str	r3, [sp, #24]
   b62a8:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b62ac:	4580      	cmp	r8, r0
   b62ae:	fa1f f189 	uxth.w	r1, r9
   b62b2:	dd17      	ble.n	b62e4 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b62b4:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b62b6:	bf05      	ittet	eq
   b62b8:	9b06      	ldreq	r3, [sp, #24]
   b62ba:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b62bc:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b62be:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b62c0:	bf18      	it	ne
   b62c2:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b62c4:	062b      	lsls	r3, r5, #24
   b62c6:	d50a      	bpl.n	b62de <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b62c8:	9b02      	ldr	r3, [sp, #8]
   b62ca:	6820      	ldr	r0, [r4, #0]
   b62cc:	9207      	str	r2, [sp, #28]
   b62ce:	4419      	add	r1, r3
   b62d0:	6983      	ldr	r3, [r0, #24]
   b62d2:	b209      	sxth	r1, r1
   b62d4:	461f      	mov	r7, r3
   b62d6:	4620      	mov	r0, r4
   b62d8:	4653      	mov	r3, sl
   b62da:	47b8      	blx	r7
   b62dc:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b62de:	f109 0901 	add.w	r9, r9, #1
   b62e2:	e7e1      	b.n	b62a8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b62e4:	9b01      	ldr	r3, [sp, #4]
   b62e6:	3301      	adds	r3, #1
   b62e8:	9301      	str	r3, [sp, #4]
   b62ea:	445e      	add	r6, fp
   b62ec:	e7ce      	b.n	b628c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b62ee:	6823      	ldr	r3, [r4, #0]
   b62f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b62f2:	4620      	mov	r0, r4
}
   b62f4:	b009      	add	sp, #36	; 0x24
   b62f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b62fa:	4718      	bx	r3

000b62fc <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b62fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6300:	ed2d 8b02 	vpush	{d8}
   b6304:	b091      	sub	sp, #68	; 0x44
   b6306:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b6308:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b630a:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b630e:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b6312:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b6316:	9103      	str	r1, [sp, #12]
   b6318:	461f      	mov	r7, r3
   b631a:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b631e:	9304      	str	r3, [sp, #16]
   b6320:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b6322:	2a00      	cmp	r2, #0
   b6324:	f040 80c5 	bne.w	b64b2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b6328:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b632c:	428b      	cmp	r3, r1
   b632e:	f340 814c 	ble.w	b65ca <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b6332:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b6336:	42b3      	cmp	r3, r6
   b6338:	f340 8147 	ble.w	b65ca <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b633c:	2306      	movs	r3, #6
   b633e:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b6342:	2b00      	cmp	r3, #0
   b6344:	f340 8141 	ble.w	b65ca <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b6348:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b634c:	2b00      	cmp	r3, #0
   b634e:	f340 813c 	ble.w	b65ca <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b6352:	7f03      	ldrb	r3, [r0, #28]
   b6354:	b91b      	cbnz	r3, b635e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b6356:	2faf      	cmp	r7, #175	; 0xaf
   b6358:	bf84      	itt	hi
   b635a:	3701      	addhi	r7, #1
   b635c:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b635e:	f8db 3000 	ldr.w	r3, [fp]
   b6362:	4658      	mov	r0, fp
   b6364:	695b      	ldr	r3, [r3, #20]
   b6366:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b6368:	2205      	movs	r2, #5
   b636a:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b636c:	2200      	movs	r2, #0
   b636e:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b6370:	4a98      	ldr	r2, [pc, #608]	; (b65d4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b6372:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b6376:	18d3      	adds	r3, r2, r3
   b6378:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b637a:	b2b3      	uxth	r3, r6
   b637c:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b637e:	9a05      	ldr	r2, [sp, #20]
   b6380:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b6382:	5c9b      	ldrb	r3, [r3, r2]
   b6384:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b6386:	b2ab      	uxth	r3, r5
   b6388:	930b      	str	r3, [sp, #44]	; 0x2c
   b638a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b638e:	9308      	str	r3, [sp, #32]
   b6390:	9b03      	ldr	r3, [sp, #12]
   b6392:	fb02 f905 	mul.w	r9, r2, r5
   b6396:	fa19 f983 	uxtah	r9, r9, r3
   b639a:	fa0f f389 	sxth.w	r3, r9
   b639e:	ee08 3a10 	vmov	s16, r3
   b63a2:	2308      	movs	r3, #8
   b63a4:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b63a6:	9b03      	ldr	r3, [sp, #12]
   b63a8:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b63ac:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b63b0:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b63b4:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b63b6:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b63ba:	07d2      	lsls	r2, r2, #31
   b63bc:	d552      	bpl.n	b6464 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b63be:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b63c0:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b63c4:	d13e      	bne.n	b6444 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b63c6:	2c01      	cmp	r4, #1
   b63c8:	d13c      	bne.n	b6444 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b63ca:	699b      	ldr	r3, [r3, #24]
   b63cc:	9906      	ldr	r1, [sp, #24]
   b63ce:	461f      	mov	r7, r3
   b63d0:	9b04      	ldr	r3, [sp, #16]
   b63d2:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b63d4:	b212      	sxth	r2, r2
   b63d6:	4651      	mov	r1, sl
   b63d8:	4658      	mov	r0, fp
   b63da:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b63dc:	f109 0301 	add.w	r3, r9, #1
   b63e0:	fa4f f983 	sxtb.w	r9, r3
   b63e4:	9b07      	ldr	r3, [sp, #28]
   b63e6:	085b      	lsrs	r3, r3, #1
   b63e8:	9307      	str	r3, [sp, #28]
   b63ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b63ec:	3b01      	subs	r3, #1
   b63ee:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b63f2:	930a      	str	r3, [sp, #40]	; 0x28
   b63f4:	d1de      	bne.n	b63b4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b63f6:	9f05      	ldr	r7, [sp, #20]
   b63f8:	3701      	adds	r7, #1
   b63fa:	b27b      	sxtb	r3, r7
   b63fc:	9305      	str	r3, [sp, #20]
   b63fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b6400:	3b01      	subs	r3, #1
   b6402:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b6406:	9309      	str	r3, [sp, #36]	; 0x24
   b6408:	d1b9      	bne.n	b637e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b640a:	9b04      	ldr	r3, [sp, #16]
   b640c:	4543      	cmp	r3, r8
   b640e:	d00f      	beq.n	b6430 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b6410:	2d01      	cmp	r5, #1
   b6412:	f8db 3000 	ldr.w	r3, [fp]
   b6416:	d13b      	bne.n	b6490 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b6418:	2c01      	cmp	r4, #1
   b641a:	d139      	bne.n	b6490 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b641c:	9908      	ldr	r1, [sp, #32]
   b641e:	f8cd 8000 	str.w	r8, [sp]
   b6422:	3105      	adds	r1, #5
   b6424:	6a1c      	ldr	r4, [r3, #32]
   b6426:	4632      	mov	r2, r6
   b6428:	2308      	movs	r3, #8
   b642a:	b209      	sxth	r1, r1
   b642c:	4658      	mov	r0, fp
   b642e:	47a0      	blx	r4
        endWrite();
   b6430:	f8db 3000 	ldr.w	r3, [fp]
   b6434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6436:	4658      	mov	r0, fp
}
   b6438:	b011      	add	sp, #68	; 0x44
   b643a:	ecbd 8b02 	vpop	{d8}
   b643e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b6442:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b6444:	9906      	ldr	r1, [sp, #24]
   b6446:	fb14 f202 	smulbb	r2, r4, r2
   b644a:	440a      	add	r2, r1
   b644c:	9904      	ldr	r1, [sp, #16]
   b644e:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b6450:	9400      	str	r4, [sp, #0]
   b6452:	69db      	ldr	r3, [r3, #28]
   b6454:	ee18 1a10 	vmov	r1, s16
   b6458:	461f      	mov	r7, r3
   b645a:	b212      	sxth	r2, r2
   b645c:	462b      	mov	r3, r5
   b645e:	4658      	mov	r0, fp
   b6460:	47b8      	blx	r7
   b6462:	e7bb      	b.n	b63dc <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b6464:	9a04      	ldr	r2, [sp, #16]
   b6466:	4542      	cmp	r2, r8
   b6468:	d0b8      	beq.n	b63dc <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b646a:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b646c:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b6470:	d107      	bne.n	b6482 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b6472:	2c01      	cmp	r4, #1
   b6474:	d105      	bne.n	b6482 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b6476:	699b      	ldr	r3, [r3, #24]
   b6478:	9906      	ldr	r1, [sp, #24]
   b647a:	461f      	mov	r7, r3
   b647c:	440a      	add	r2, r1
   b647e:	4643      	mov	r3, r8
   b6480:	e7a8      	b.n	b63d4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b6482:	9906      	ldr	r1, [sp, #24]
   b6484:	f8cd 8004 	str.w	r8, [sp, #4]
   b6488:	fb14 f202 	smulbb	r2, r4, r2
   b648c:	440a      	add	r2, r1
   b648e:	e7df      	b.n	b6450 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b6490:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b6492:	f8cd 8004 	str.w	r8, [sp, #4]
   b6496:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b649a:	9a08      	ldr	r2, [sp, #32]
   b649c:	00e4      	lsls	r4, r4, #3
   b649e:	440a      	add	r2, r1
   b64a0:	4611      	mov	r1, r2
   b64a2:	9400      	str	r4, [sp, #0]
   b64a4:	69dc      	ldr	r4, [r3, #28]
   b64a6:	4632      	mov	r2, r6
   b64a8:	462b      	mov	r3, r5
   b64aa:	b209      	sxth	r1, r1
   b64ac:	4658      	mov	r0, fp
   b64ae:	47a0      	blx	r4
        endWrite();
   b64b0:	e7be      	b.n	b6430 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b64b2:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b64b4:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b64b6:	6812      	ldr	r2, [r2, #0]
   b64b8:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b64ba:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b64bc:	b2ff      	uxtb	r7, r7
   b64be:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b64c2:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b64c6:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b64c8:	789a      	ldrb	r2, [r3, #2]
   b64ca:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b64cc:	78da      	ldrb	r2, [r3, #3]
   b64ce:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b64d0:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b64d2:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b64d6:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b64da:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b64dc:	d801      	bhi.n	b64e2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b64de:	2c01      	cmp	r4, #1
   b64e0:	d957      	bls.n	b6592 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b64e2:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b64e6:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b64e8:	fa0f f38a 	sxth.w	r3, sl
   b64ec:	9307      	str	r3, [sp, #28]
        startWrite();
   b64ee:	f8db 3000 	ldr.w	r3, [fp]
   b64f2:	4658      	mov	r0, fp
   b64f4:	695b      	ldr	r3, [r3, #20]
   b64f6:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b64f8:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b64fa:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b64fe:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b6500:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b6504:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b6506:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b6508:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b650a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b650c:	429f      	cmp	r7, r3
   b650e:	d28f      	bcs.n	b6430 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6510:	9b07      	ldr	r3, [sp, #28]
   b6512:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b6514:	443b      	add	r3, r7
   b6516:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b651a:	2200      	movs	r2, #0
   b651c:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b651e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6520:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b6522:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b6526:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b652a:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b652e:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b6530:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b6532:	9905      	ldr	r1, [sp, #20]
   b6534:	4291      	cmp	r1, r2
   b6536:	d241      	bcs.n	b65bc <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b6538:	1c5a      	adds	r2, r3, #1
   b653a:	b2d2      	uxtb	r2, r2
   b653c:	075b      	lsls	r3, r3, #29
   b653e:	920d      	str	r2, [sp, #52]	; 0x34
   b6540:	d107      	bne.n	b6552 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b6542:	9b06      	ldr	r3, [sp, #24]
   b6544:	9906      	ldr	r1, [sp, #24]
   b6546:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b6548:	3301      	adds	r3, #1
   b654a:	b29b      	uxth	r3, r3
   b654c:	f812 9001 	ldrb.w	r9, [r2, r1]
   b6550:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b6552:	f019 0f80 	tst.w	r9, #128	; 0x80
   b6556:	d012      	beq.n	b657e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b6558:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b655a:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b655e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b6562:	d11a      	bne.n	b659a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b6564:	2c01      	cmp	r4, #1
   b6566:	d118      	bne.n	b659a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b6568:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b656a:	699b      	ldr	r3, [r3, #24]
   b656c:	4411      	add	r1, r2
   b656e:	9a05      	ldr	r2, [sp, #20]
   b6570:	4411      	add	r1, r2
   b6572:	461e      	mov	r6, r3
   b6574:	4652      	mov	r2, sl
   b6576:	9b04      	ldr	r3, [sp, #16]
   b6578:	b209      	sxth	r1, r1
   b657a:	4658      	mov	r0, fp
   b657c:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b657e:	9e05      	ldr	r6, [sp, #20]
   b6580:	3601      	adds	r6, #1
   b6582:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b6584:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b6588:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b658a:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b658e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b6590:	e7ce      	b.n	b6530 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b6592:	2300      	movs	r3, #0
   b6594:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b6598:	e7a9      	b.n	b64ee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b659a:	9805      	ldr	r0, [sp, #20]
   b659c:	9a08      	ldr	r2, [sp, #32]
   b659e:	4402      	add	r2, r0
   b65a0:	fb02 1105 	mla	r1, r2, r5, r1
   b65a4:	9a04      	ldr	r2, [sp, #16]
   b65a6:	e9cd 4200 	strd	r4, r2, [sp]
   b65aa:	69db      	ldr	r3, [r3, #28]
   b65ac:	ee18 2a10 	vmov	r2, s16
   b65b0:	461e      	mov	r6, r3
   b65b2:	b209      	sxth	r1, r1
   b65b4:	462b      	mov	r3, r5
   b65b6:	4658      	mov	r0, fp
   b65b8:	47b0      	blx	r6
   b65ba:	e7e0      	b.n	b657e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b65bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b65be:	3701      	adds	r7, #1
   b65c0:	4498      	add	r8, r3
   b65c2:	fa5f f888 	uxtb.w	r8, r8
   b65c6:	b2ff      	uxtb	r7, r7
   b65c8:	e79f      	b.n	b650a <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b65ca:	b011      	add	sp, #68	; 0x44
   b65cc:	ecbd 8b02 	vpop	{d8}
   b65d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b65d4:	000c017c 	.word	0x000c017c

000b65d8 <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b65d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b65da:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b65dc:	b085      	sub	sp, #20
   b65de:	4604      	mov	r4, r0
   b65e0:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b65e2:	2a00      	cmp	r2, #0
   b65e4:	d134      	bne.n	b6650 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b65e6:	290a      	cmp	r1, #10
   b65e8:	d108      	bne.n	b65fc <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b65ea:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b65ec:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b65ee:	7e42      	ldrb	r2, [r0, #25]
   b65f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b65f4:	8263      	strh	r3, [r4, #18]
}
   b65f6:	2001      	movs	r0, #1
   b65f8:	b005      	add	sp, #20
   b65fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b65fc:	290d      	cmp	r1, #13
   b65fe:	d0fa      	beq.n	b65f6 <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b6600:	7ee1      	ldrb	r1, [r4, #27]
   b6602:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b6604:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b6606:	b171      	cbz	r1, b6626 <_ZN12Adafruit_GFX5writeEh+0x4e>
   b6608:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b660c:	2106      	movs	r1, #6
   b660e:	fb11 6100 	smlabb	r1, r1, r0, r6
   b6612:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b6616:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b6618:	bfc1      	itttt	gt
   b661a:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b661e:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b6620:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b6624:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b6626:	8ae2      	ldrh	r2, [r4, #22]
   b6628:	9201      	str	r2, [sp, #4]
   b662a:	8aa2      	ldrh	r2, [r4, #20]
   b662c:	9200      	str	r2, [sp, #0]
   b662e:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b6632:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b6636:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b663a:	4620      	mov	r0, r4
   b663c:	f7ff fe5e 	bl	b62fc <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b6640:	7e23      	ldrb	r3, [r4, #24]
   b6642:	8a22      	ldrh	r2, [r4, #16]
   b6644:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b6648:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b664c:	8223      	strh	r3, [r4, #16]
   b664e:	e7d2      	b.n	b65f6 <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b6650:	290a      	cmp	r1, #10
   b6652:	d107      	bne.n	b6664 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b6654:	2300      	movs	r3, #0
   b6656:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b6658:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b665a:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b665c:	8a43      	ldrh	r3, [r0, #18]
   b665e:	fb01 3302 	mla	r3, r1, r2, r3
   b6662:	e7c7      	b.n	b65f4 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b6664:	290d      	cmp	r1, #13
   b6666:	d0c6      	beq.n	b65f6 <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b6668:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b666a:	42a9      	cmp	r1, r5
   b666c:	d3c3      	bcc.n	b65f6 <_ZN12Adafruit_GFX5writeEh+0x1e>
   b666e:	7a51      	ldrb	r1, [r2, #9]
   b6670:	4299      	cmp	r1, r3
   b6672:	d3c0      	bcc.n	b65f6 <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b6674:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b6676:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b6678:	b2ed      	uxtb	r5, r5
   b667a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b667e:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b6680:	b328      	cbz	r0, b66ce <_ZN12Adafruit_GFX5writeEh+0xf6>
   b6682:	78e9      	ldrb	r1, [r5, #3]
   b6684:	b319      	cbz	r1, b66ce <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b6686:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b6688:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b668a:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b668c:	b191      	cbz	r1, b66b4 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b668e:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b6692:	4408      	add	r0, r1
   b6694:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b6698:	fb06 1100 	mla	r1, r6, r0, r1
   b669c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b66a0:	4281      	cmp	r1, r0
   b66a2:	dd07      	ble.n	b66b4 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b66a4:	2000      	movs	r0, #0
   b66a6:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b66a8:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b66ac:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b66ae:	fb02 1207 	mla	r2, r2, r7, r1
   b66b2:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b66b4:	8ae2      	ldrh	r2, [r4, #22]
   b66b6:	9201      	str	r2, [sp, #4]
   b66b8:	8aa2      	ldrh	r2, [r4, #20]
   b66ba:	9200      	str	r2, [sp, #0]
   b66bc:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b66c0:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b66c4:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b66c8:	4620      	mov	r0, r4
   b66ca:	f7ff fe17 	bl	b62fc <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b66ce:	7929      	ldrb	r1, [r5, #4]
   b66d0:	7e22      	ldrb	r2, [r4, #24]
   b66d2:	8a23      	ldrh	r3, [r4, #16]
   b66d4:	fb01 3302 	mla	r3, r1, r2, r3
   b66d8:	e7b8      	b.n	b664c <_ZN12Adafruit_GFX5writeEh+0x74>

000b66da <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b66da:	2901      	cmp	r1, #1
   b66dc:	bf38      	it	cc
   b66de:	2101      	movcc	r1, #1
   b66e0:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b66e2:	7641      	strb	r1, [r0, #25]
}
   b66e4:	4770      	bx	lr
	...

000b66e8 <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   b66e8:	b510      	push	{r4, lr}
   b66ea:	4b06      	ldr	r3, [pc, #24]	; (b6704 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   b66ec:	6003      	str	r3, [r0, #0]
   b66ee:	4604      	mov	r4, r0
	if (mutex) {
   b66f0:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b66f2:	b108      	cbz	r0, b66f8 <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   b66f4:	f002 f9d4 	bl	b8aa0 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   b66f8:	4620      	mov	r0, r4
   b66fa:	f001 fc03 	bl	b7f04 <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   b66fe:	4620      	mov	r0, r4
   b6700:	bd10      	pop	{r4, pc}
   b6702:	bf00      	nop
   b6704:	000c06dc 	.word	0x000c06dc

000b6708 <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   b6708:	b510      	push	{r4, lr}
   b670a:	4604      	mov	r4, r0
}
   b670c:	f7ff ffec 	bl	b66e8 <_ZN16OledWingAdafruitD1Ev>
   b6710:	4620      	mov	r0, r4
   b6712:	2170      	movs	r1, #112	; 0x70
   b6714:	f7fd fcc3 	bl	b409e <_ZdlPvj>
   b6718:	4620      	mov	r0, r4
   b671a:	bd10      	pop	{r4, pc}

000b671c <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   b671c:	b530      	push	{r4, r5, lr}
   b671e:	b085      	sub	sp, #20
   b6720:	4604      	mov	r4, r0
   b6722:	460d      	mov	r5, r1
   b6724:	f006 fa30 	bl	bcb88 <_Z19__fetch_global_Wirev>
   b6728:	4a10      	ldr	r2, [pc, #64]	; (b676c <_ZN16OledWingAdafruitC1Ei+0x50>)
   b672a:	4911      	ldr	r1, [pc, #68]	; (b6770 <_ZN16OledWingAdafruitC1Ei+0x54>)
   b672c:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b6730:	f04f 32ff 	mov.w	r2, #4294967295
   b6734:	2180      	movs	r1, #128	; 0x80
   b6736:	4603      	mov	r3, r0
   b6738:	9200      	str	r2, [sp, #0]
   b673a:	4620      	mov	r0, r4
   b673c:	2220      	movs	r2, #32
   b673e:	f001 fc59 	bl	b7ff4 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   b6742:	4b0c      	ldr	r3, [pc, #48]	; (b6774 <_ZN16OledWingAdafruitC1Ei+0x58>)
   b6744:	6023      	str	r3, [r4, #0]
   b6746:	2300      	movs	r3, #0
   b6748:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   b674c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b6750:	f000 f83b 	bl	b67ca <_ZN8DebounceC1Ev>
   b6754:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b6758:	f000 f837 	bl	b67ca <_ZN8DebounceC1Ev>
   b675c:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b6760:	f000 f833 	bl	b67ca <_ZN8DebounceC1Ev>
}
   b6764:	4620      	mov	r0, r4
   b6766:	b005      	add	sp, #20
   b6768:	bd30      	pop	{r4, r5, pc}
   b676a:	bf00      	nop
   b676c:	00061a80 	.word	0x00061a80
   b6770:	000186a0 	.word	0x000186a0
   b6774:	000c06dc 	.word	0x000c06dc

000b6778 <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   b6778:	b513      	push	{r0, r1, r4, lr}
   b677a:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   b677c:	3050      	adds	r0, #80	; 0x50
   b677e:	f002 f987 	bl	b8a90 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   b6782:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b6784:	07d9      	lsls	r1, r3, #31
   b6786:	d505      	bpl.n	b6794 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   b6788:	2202      	movs	r2, #2
   b678a:	2104      	movs	r1, #4
   b678c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b6790:	f000 f82f 	bl	b67f2 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   b6794:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b6796:	079a      	lsls	r2, r3, #30
   b6798:	d505      	bpl.n	b67a6 <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   b679a:	2200      	movs	r2, #0
   b679c:	2103      	movs	r1, #3
   b679e:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b67a2:	f000 f826 	bl	b67f2 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   b67a6:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b67a8:	075b      	lsls	r3, r3, #29
   b67aa:	d505      	bpl.n	b67b8 <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   b67ac:	2202      	movs	r2, #2
   b67ae:	4611      	mov	r1, r2
   b67b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b67b4:	f000 f81d 	bl	b67f2 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b67b8:	2301      	movs	r3, #1
   b67ba:	9300      	str	r3, [sp, #0]
   b67bc:	223c      	movs	r2, #60	; 0x3c
   b67be:	2102      	movs	r1, #2
   b67c0:	4620      	mov	r0, r4
   b67c2:	f001 fd1f 	bl	b8204 <_ZN16Adafruit_SSD13065beginEhhbb>
}
   b67c6:	b002      	add	sp, #8
   b67c8:	bd10      	pop	{r4, pc}

000b67ca <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   b67ca:	2100      	movs	r1, #0
   b67cc:	220a      	movs	r2, #10
   b67ce:	e9c0 1200 	strd	r1, r2, [r0]
{}
   b67d2:	4770      	bx	lr

000b67d4 <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   b67d4:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   b67d6:	b510      	push	{r4, lr}
   b67d8:	4604      	mov	r4, r0
    this->pin = pin;
   b67da:	71c1      	strb	r1, [r0, #7]
    state = 0;
   b67dc:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   b67de:	b288      	uxth	r0, r1
   b67e0:	f006 f968 	bl	bcab4 <digitalRead>
   b67e4:	b108      	cbz	r0, b67ea <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   b67e6:	2303      	movs	r3, #3
   b67e8:	71a3      	strb	r3, [r4, #6]
   b67ea:	f002 f85d 	bl	b88a8 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   b67ee:	6020      	str	r0, [r4, #0]
#endif
}
   b67f0:	bd10      	pop	{r4, pc}

000b67f2 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   b67f2:	b538      	push	{r3, r4, r5, lr}
   b67f4:	460c      	mov	r4, r1
   b67f6:	4605      	mov	r5, r0
  pinMode(pin, mode);
   b67f8:	4611      	mov	r1, r2
   b67fa:	b2a0      	uxth	r0, r4
   b67fc:	f006 f930 	bl	bca60 <pinMode>
  
  this->attach(pin);
   b6800:	4621      	mov	r1, r4
   b6802:	4628      	mov	r0, r5
}
   b6804:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   b6808:	f7ff bfe4 	b.w	b67d4 <_ZN8Debounce6attachEi>

000b680c <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   b680c:	2904      	cmp	r1, #4
   b680e:	d804      	bhi.n	b681a <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
   b6810:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   b6814:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   b6818:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b681a:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   b681c:	bf9b      	ittet	ls
   b681e:	f101 31ff 	addls.w	r1, r1, #4294967295
   b6822:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b6826:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   b6828:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b682a:	bf84      	itt	hi
   b682c:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
   b6830:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
   b6832:	4770      	bx	lr

000b6834 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   b6834:	b510      	push	{r4, lr}
   b6836:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b6838:	3024      	adds	r0, #36	; 0x24
   b683a:	f000 feed 	bl	b7618 <_ZN8FatCache4syncEv>
   b683e:	b128      	cbz	r0, b684c <_ZN9FatVolume9cacheSyncEv+0x18>
   b6840:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   b6844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b6848:	f000 bee6 	b.w	b7618 <_ZN8FatCache4syncEv>
  }
   b684c:	bd10      	pop	{r4, pc}

000b684e <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
   b684e:	1e41      	subs	r1, r0, #1
   b6850:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   b6854:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b6856:	0842      	lsrs	r2, r0, #1
   b6858:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   b685c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b6860:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   b6864:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b6866:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   b6868:	d1f5      	bne.n	b6856 <_ZN7FatFile11lfnChecksumEPh+0x8>
}
   b686a:	4770      	bx	lr

000b686c <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   b686c:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   b686e:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
   b6870:	4604      	mov	r4, r0
   b6872:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   b6874:	b923      	cbnz	r3, b6880 <_ZN7FatFile11openClusterEPS_+0x14>
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   b6876:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
   b687a:	6889      	ldr	r1, [r1, #8]
   b687c:	f000 bbc7 	b.w	b700e <_ZN7FatFile8openRootEP9FatVolume>
  memset(this, 0, sizeof(FatFile));
   b6880:	2224      	movs	r2, #36	; 0x24
   b6882:	2100      	movs	r1, #0
   b6884:	f007 f899 	bl	bd9ba <memset>
  m_attr = FILE_ATTR_SUBDIR;
   b6888:	2310      	movs	r3, #16
  m_flags = F_READ;
   b688a:	2001      	movs	r0, #1
  m_attr = FILE_ATTR_SUBDIR;
   b688c:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b688e:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   b6890:	68ab      	ldr	r3, [r5, #8]
   b6892:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   b6894:	68eb      	ldr	r3, [r5, #12]
   b6896:	6223      	str	r3, [r4, #32]
}
   b6898:	bd38      	pop	{r3, r4, r5, pc}
	...

000b689c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   b689c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b68a0:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   b68a2:	f810 3b01 	ldrb.w	r3, [r0], #1
   b68a6:	2b20      	cmp	r3, #32
   b68a8:	d0fa      	beq.n	b68a0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b68aa:	4d6a      	ldr	r5, [pc, #424]	; (b6a54 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
    path++;
  }
  fname->lfn = path;
   b68ac:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   b68ae:	2400      	movs	r4, #0
    c = path[len];
   b68b0:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   b68b2:	b1c3      	cbz	r3, b68e6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   b68b4:	2b2f      	cmp	r3, #47	; 0x2f
   b68b6:	d016      	beq.n	b68e6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b68b8:	2b5c      	cmp	r3, #92	; 0x5c
   b68ba:	d102      	bne.n	b68c2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   b68bc:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   b68be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b68c2:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   b68c6:	b2c0      	uxtb	r0, r0
   b68c8:	281d      	cmp	r0, #29
   b68ca:	d803      	bhi.n	b68d4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   b68cc:	fa25 f000 	lsr.w	r0, r5, r0
   b68d0:	07c0      	lsls	r0, r0, #31
   b68d2:	d4f3      	bmi.n	b68bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   b68d4:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   b68d8:	283c      	cmp	r0, #60	; 0x3c
   b68da:	d0ef      	beq.n	b68bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   b68dc:	3b20      	subs	r3, #32
   b68de:	2b5e      	cmp	r3, #94	; 0x5e
   b68e0:	d8ec      	bhi.n	b68bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   b68e2:	3401      	adds	r4, #1
    c = path[len];
   b68e4:	e7e4      	b.n	b68b0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   b68e6:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   b68e8:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   b68ea:	4607      	mov	r7, r0
   b68ec:	f810 5b01 	ldrb.w	r5, [r0], #1
   b68f0:	2d20      	cmp	r5, #32
   b68f2:	d0fa      	beq.n	b68ea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   b68f4:	2d2f      	cmp	r5, #47	; 0x2f
   b68f6:	d0f8      	beq.n	b68ea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   b68f8:	6017      	str	r7, [r2, #0]
  while (len) {
   b68fa:	b14c      	cbz	r4, b6910 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   b68fc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   b6900:	2a2e      	cmp	r2, #46	; 0x2e
   b6902:	d001      	beq.n	b6908 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   b6904:	2a20      	cmp	r2, #32
   b6906:	d101      	bne.n	b690c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   b6908:	3c01      	subs	r4, #1
  while (len) {
   b690a:	e7f6      	b.n	b68fa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   b690c:	2cff      	cmp	r4, #255	; 0xff
   b690e:	dcd5      	bgt.n	b68bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
   b6910:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
   b6914:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
   b6918:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
   b691a:	f8c1 300d 	str.w	r3, [r1, #13]
   b691e:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b6920:	f04f 0800 	mov.w	r8, #0
   b6924:	f816 3008 	ldrb.w	r3, [r6, r8]
   b6928:	2b2e      	cmp	r3, #46	; 0x2e
   b692a:	d001      	beq.n	b6930 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
   b692c:	2b20      	cmp	r3, #32
   b692e:	d102      	bne.n	b6936 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
   b6930:	f108 0801 	add.w	r8, r8, #1
   b6934:	e7f6      	b.n	b6924 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
   b6936:	fab8 f088 	clz	r0, r8
   b693a:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b693c:	1e65      	subs	r5, r4, #1
   b693e:	1c6b      	adds	r3, r5, #1
   b6940:	d002      	beq.n	b6948 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
   b6942:	5d73      	ldrb	r3, [r6, r5]
   b6944:	2b2e      	cmp	r3, #46	; 0x2e
   b6946:	d114      	bne.n	b6972 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b6948:	f04f 0900 	mov.w	r9, #0
   b694c:	2707      	movs	r7, #7
   b694e:	464a      	mov	r2, r9
   b6950:	46ca      	mov	sl, r9
   b6952:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   b6956:	45a0      	cmp	r8, r4
   b6958:	da68      	bge.n	b6a2c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
   b695a:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   b695e:	2b20      	cmp	r3, #32
   b6960:	d003      	beq.n	b696a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   b6962:	2b2e      	cmp	r3, #46	; 0x2e
   b6964:	d107      	bne.n	b6976 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
   b6966:	45a8      	cmp	r8, r5
   b6968:	d012      	beq.n	b6990 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
   b696a:	2000      	movs	r0, #0
  for (; si < len; si++) {
   b696c:	f108 0801 	add.w	r8, r8, #1
   b6970:	e7f1      	b.n	b6956 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b6972:	3d01      	subs	r5, #1
   b6974:	e7e3      	b.n	b693e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
   b6976:	2b22      	cmp	r3, #34	; 0x22
   b6978:	d008      	beq.n	b698c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
   b697a:	2b7c      	cmp	r3, #124	; 0x7c
   b697c:	d006      	beq.n	b698c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   b697e:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   b6982:	f1bc 0f05 	cmp.w	ip, #5
   b6986:	d80a      	bhi.n	b699e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
   b6988:	2b2d      	cmp	r3, #45	; 0x2d
   b698a:	d012      	beq.n	b69b2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
   b698c:	45a8      	cmp	r8, r5
   b698e:	d15b      	bne.n	b6a48 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
   b6990:	2f0a      	cmp	r7, #10
   b6992:	d04a      	beq.n	b6a2a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
   b6994:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b6996:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b6998:	f04f 0e10 	mov.w	lr, #16
   b699c:	e7e6      	b.n	b696c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
   b699e:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   b69a2:	f1bc 0f05 	cmp.w	ip, #5
   b69a6:	d9f1      	bls.n	b698c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
   b69a8:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   b69ac:	f1bc 0f02 	cmp.w	ip, #2
   b69b0:	d9ec      	bls.n	b698c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
   b69b2:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   b69b6:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   b69ba:	d8e7      	bhi.n	b698c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
   b69bc:	45a8      	cmp	r8, r5
   b69be:	d0e7      	beq.n	b6990 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   b69c0:	42ba      	cmp	r2, r7
   b69c2:	d830      	bhi.n	b6a26 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
   b69c4:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   b69c8:	f1bc 0f19 	cmp.w	ip, #25
   b69cc:	d81a      	bhi.n	b6a04 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
   b69ce:	3b20      	subs	r3, #32
        lc |= bit;
   b69d0:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   b69d4:	b2db      	uxtb	r3, r3
        lc |= bit;
   b69d6:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   b69da:	f102 0c01 	add.w	ip, r2, #1
   b69de:	fa5f fc8c 	uxtb.w	ip, ip
   b69e2:	440a      	add	r2, r1
      if (i < 7) {
   b69e4:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   b69e8:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   b69ea:	d801      	bhi.n	b69f0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
   b69ec:	f881 c00c 	strb.w	ip, [r1, #12]
   b69f0:	4662      	mov	r2, ip
   b69f2:	e7bb      	b.n	b696c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
   b69f4:	45a8      	cmp	r8, r5
   b69f6:	dc18      	bgt.n	b6a2a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
   b69f8:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   b69fa:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b69fc:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b69fe:	f04f 0e10 	mov.w	lr, #16
   b6a02:	e7b2      	b.n	b696a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
   b6a04:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   b6a08:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   b6a0c:	bf98      	it	ls
   b6a0e:	ea4e 0a0a 	orrls.w	sl, lr, sl
   b6a12:	e7e2      	b.n	b69da <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->sfn[fname->seqPos] = '~';
   b6a14:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   b6a16:	2001      	movs	r0, #1
   b6a18:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   b6a1a:	4419      	add	r1, r3
   b6a1c:	237e      	movs	r3, #126	; 0x7e
   b6a1e:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   b6a20:	2331      	movs	r3, #49	; 0x31
   b6a22:	738b      	strb	r3, [r1, #14]
   b6a24:	e74b      	b.n	b68be <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   b6a26:	2f0a      	cmp	r7, #10
   b6a28:	d1e4      	bne.n	b69f4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
   b6a2a:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   b6a2c:	7b4b      	ldrb	r3, [r1, #13]
   b6a2e:	2b20      	cmp	r3, #32
   b6a30:	f43f af44 	beq.w	b68bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   b6a34:	2800      	cmp	r0, #0
   b6a36:	d0ed      	beq.n	b6a14 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   b6a38:	ea1a 0f09 	tst.w	sl, r9
   b6a3c:	bf18      	it	ne
   b6a3e:	f04f 0902 	movne.w	r9, #2
   b6a42:	f881 9000 	strb.w	r9, [r1]
   b6a46:	e73a      	b.n	b68be <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   b6a48:	42ba      	cmp	r2, r7
   b6a4a:	d8ec      	bhi.n	b6a26 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
   b6a4c:	2000      	movs	r0, #0
      c = '_';
   b6a4e:	235f      	movs	r3, #95	; 0x5f
   b6a50:	e7c3      	b.n	b69da <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
   b6a52:	bf00      	nop
   b6a54:	31000101 	.word	0x31000101

000b6a58 <_ZN7FatFile6removeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   b6a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6a5c:	b08a      	sub	sp, #40	; 0x28
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b6a5e:	2300      	movs	r3, #0
   b6a60:	9301      	str	r3, [sp, #4]
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   b6a62:	7803      	ldrb	r3, [r0, #0]
   b6a64:	0719      	lsls	r1, r3, #28
bool FatFile::remove() {
   b6a66:	4604      	mov	r4, r0
  if (!isFile() || !(m_flags & F_WRITE)) {
   b6a68:	d50a      	bpl.n	b6a80 <_ZN7FatFile6removeEv+0x28>
   b6a6a:	7883      	ldrb	r3, [r0, #2]
   b6a6c:	079a      	lsls	r2, r3, #30
   b6a6e:	d507      	bpl.n	b6a80 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   b6a70:	6a01      	ldr	r1, [r0, #32]
   b6a72:	b939      	cbnz	r1, b6a84 <_ZN7FatFile6removeEv+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b6a74:	2101      	movs	r1, #1
   b6a76:	4620      	mov	r0, r4
   b6a78:	f000 faba 	bl	b6ff0 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   b6a7c:	4605      	mov	r5, r0
   b6a7e:	b938      	cbnz	r0, b6a90 <_ZN7FatFile6removeEv+0x38>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
   b6a80:	2000      	movs	r0, #0
   b6a82:	e048      	b.n	b6b16 <_ZN7FatFile6removeEv+0xbe>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   b6a84:	6880      	ldr	r0, [r0, #8]
   b6a86:	f000 feb8 	bl	b77fa <_ZN9FatVolume9freeChainEm>
   b6a8a:	2800      	cmp	r0, #0
   b6a8c:	d1f2      	bne.n	b6a74 <_ZN7FatFile6removeEv+0x1c>
   b6a8e:	e7f7      	b.n	b6a80 <_ZN7FatFile6removeEv+0x28>
  chksum = lfnChecksum(dir->name);
   b6a90:	f7ff fedd 	bl	b684e <_ZN7FatFile11lfnChecksumEPh>
  dir->name[0] = DIR_NAME_DELETED;
   b6a94:	27e5      	movs	r7, #229	; 0xe5
   b6a96:	702f      	strb	r7, [r5, #0]
  m_attr = FILE_ATTR_CLOSED;
   b6a98:	2300      	movs	r3, #0
  chksum = lfnChecksum(dir->name);
   b6a9a:	4606      	mov	r6, r0
  m_attr = FILE_ATTR_CLOSED;
   b6a9c:	7023      	strb	r3, [r4, #0]
  if (!m_vol->cacheSync()) {
   b6a9e:	68a0      	ldr	r0, [r4, #8]
   b6aa0:	f7ff fec8 	bl	b6834 <_ZN9FatVolume9cacheSyncEv>
   b6aa4:	2800      	cmp	r0, #0
   b6aa6:	d0eb      	beq.n	b6a80 <_ZN7FatFile6removeEv+0x28>
  if (!isLFN()) {
   b6aa8:	78e3      	ldrb	r3, [r4, #3]
   b6aaa:	2b00      	cmp	r3, #0
   b6aac:	d033      	beq.n	b6b16 <_ZN7FatFile6removeEv+0xbe>
  if (!dirFile.openCluster(this)) {
   b6aae:	4621      	mov	r1, r4
   b6ab0:	a801      	add	r0, sp, #4
   b6ab2:	f7ff fedb 	bl	b686c <_ZN7FatFile11openClusterEPS_>
   b6ab6:	2800      	cmp	r0, #0
   b6ab8:	d0e2      	beq.n	b6a80 <_ZN7FatFile6removeEv+0x28>
   b6aba:	2501      	movs	r5, #1
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   b6abc:	78e3      	ldrb	r3, [r4, #3]
   b6abe:	fa5f f885 	uxtb.w	r8, r5
   b6ac2:	4543      	cmp	r3, r8
   b6ac4:	d3dc      	bcc.n	b6a80 <_ZN7FatFile6removeEv+0x28>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   b6ac6:	88a1      	ldrh	r1, [r4, #4]
   b6ac8:	1b49      	subs	r1, r1, r5
   b6aca:	0149      	lsls	r1, r1, #5
   b6acc:	a801      	add	r0, sp, #4
   b6ace:	f000 fb84 	bl	b71da <_ZN7FatFile7seekSetEm>
   b6ad2:	2800      	cmp	r0, #0
   b6ad4:	d0d4      	beq.n	b6a80 <_ZN7FatFile6removeEv+0x28>
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   b6ad6:	2100      	movs	r1, #0
   b6ad8:	a801      	add	r0, sp, #4
   b6ada:	f000 fb5f 	bl	b719c <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b6ade:	2800      	cmp	r0, #0
   b6ae0:	d0ce      	beq.n	b6a80 <_ZN7FatFile6removeEv+0x28>
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   b6ae2:	7ac3      	ldrb	r3, [r0, #11]
   b6ae4:	2b0f      	cmp	r3, #15
   b6ae6:	d1cb      	bne.n	b6a80 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   b6ae8:	7802      	ldrb	r2, [r0, #0]
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   b6aea:	f002 031f 	and.w	r3, r2, #31
   b6aee:	4543      	cmp	r3, r8
   b6af0:	d1c6      	bne.n	b6a80 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   b6af2:	7b43      	ldrb	r3, [r0, #13]
   b6af4:	42b3      	cmp	r3, r6
   b6af6:	d1c3      	bne.n	b6a80 <_ZN7FatFile6removeEv+0x28>
    ldir->ord = DIR_NAME_DELETED;
   b6af8:	7007      	strb	r7, [r0, #0]
    m_vol->cacheDirty();
   b6afa:	68a1      	ldr	r1, [r4, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b6afc:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
   b6b00:	f043 0301 	orr.w	r3, r3, #1
   b6b04:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
   b6b08:	0653      	lsls	r3, r2, #25
   b6b0a:	f105 0501 	add.w	r5, r5, #1
   b6b0e:	d5d5      	bpl.n	b6abc <_ZN7FatFile6removeEv+0x64>
      if (!m_vol->cacheSync()) {
   b6b10:	68a0      	ldr	r0, [r4, #8]
   b6b12:	f7ff fe8f 	bl	b6834 <_ZN9FatVolume9cacheSyncEv>
}
   b6b16:	b00a      	add	sp, #40	; 0x28
   b6b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6b1c <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b6b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   b6b20:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b6b24:	4606      	mov	r6, r0
   b6b26:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   b6b28:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   b6b2a:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b6b2c:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   b6b30:	6861      	ldr	r1, [r4, #4]
   b6b32:	68a2      	ldr	r2, [r4, #8]
   b6b34:	186b      	adds	r3, r5, r1
   b6b36:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b6b38:	4411      	add	r1, r2
   b6b3a:	4291      	cmp	r1, r2
   b6b3c:	d006      	beq.n	b6b4c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   b6b3e:	f812 0b01 	ldrb.w	r0, [r2], #1
   b6b42:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   b6b46:	4043      	eors	r3, r0
   b6b48:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b6b4a:	e7f6      	b.n	b6b3a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   b6b4c:	f1b9 0f03 	cmp.w	r9, #3
   b6b50:	bf28      	it	cs
   b6b52:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6b56:	f109 0204 	add.w	r2, r9, #4
   b6b5a:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   b6b5c:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6b60:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6b62:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6b64:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6b66:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6b68:	bf94      	ite	ls
   b6b6a:	3130      	addls	r1, #48	; 0x30
   b6b6c:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6b6e:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b6b70:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   b6b72:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6b76:	d1f1      	bne.n	b6b5c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   b6b78:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   b6b7c:	2100      	movs	r1, #0
   b6b7e:	735f      	strb	r7, [r3, #13]
   b6b80:	4630      	mov	r0, r6
   b6b82:	f000 fb2a 	bl	b71da <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   b6b86:	2101      	movs	r1, #1
   b6b88:	4630      	mov	r0, r6
   b6b8a:	f000 fb07 	bl	b719c <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   b6b8e:	4601      	mov	r1, r0
   b6b90:	b928      	cbnz	r0, b6b9e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   b6b92:	7870      	ldrb	r0, [r6, #1]
   b6b94:	fab0 f080 	clz	r0, r0
   b6b98:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   b6b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   b6b9e:	7803      	ldrb	r3, [r0, #0]
   b6ba0:	b16b      	cbz	r3, b6bbe <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b6ba2:	7ac3      	ldrb	r3, [r0, #11]
   b6ba4:	071b      	lsls	r3, r3, #28
   b6ba6:	d4ee      	bmi.n	b6b86 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   b6ba8:	220b      	movs	r2, #11
   b6baa:	4640      	mov	r0, r8
   b6bac:	f006 fecd 	bl	bd94a <memcmp>
   b6bb0:	2800      	cmp	r0, #0
   b6bb2:	d1e8      	bne.n	b6b86 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   b6bb4:	3501      	adds	r5, #1
   b6bb6:	b2ad      	uxth	r5, r5
   b6bb8:	2d64      	cmp	r5, #100	; 0x64
   b6bba:	d1b9      	bne.n	b6b30 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   b6bbc:	e7ed      	b.n	b6b9a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   b6bbe:	2001      	movs	r0, #1
   b6bc0:	e7eb      	b.n	b6b9a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000b6bc4 <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b6bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6bc8:	ed2d 8b02 	vpush	{d8}
   b6bcc:	b08b      	sub	sp, #44	; 0x2c
   b6bce:	460d      	mov	r5, r1
   b6bd0:	9306      	str	r3, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   b6bd2:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b6bd4:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
   b6bd6:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b6bda:	4617      	mov	r7, r2
  if (!dirFile->isDir() || isOpen()) {
   b6bdc:	d105      	bne.n	b6bea <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   b6bde:	2000      	movs	r0, #0
}
   b6be0:	b00b      	add	sp, #44	; 0x2c
   b6be2:	ecbd 8b02 	vpop	{d8}
   b6be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_attr;
   b6bea:	9b07      	ldr	r3, [sp, #28]
   b6bec:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
   b6bee:	2b00      	cmp	r3, #0
   b6bf0:	d1f5      	bne.n	b6bde <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   b6bf2:	6853      	ldr	r3, [r2, #4]
   b6bf4:	9305      	str	r3, [sp, #20]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   b6bf6:	7813      	ldrb	r3, [r2, #0]
   b6bf8:	079c      	lsls	r4, r3, #30
   b6bfa:	bf1f      	itttt	ne
   b6bfc:	9b05      	ldrne	r3, [sp, #20]
   b6bfe:	330c      	addne	r3, #12
   b6c00:	220d      	movne	r2, #13
   b6c02:	fbb3 f3f2 	udivne	r3, r3, r2
   b6c06:	bf1a      	itte	ne
   b6c08:	3301      	addne	r3, #1
   b6c0a:	b2db      	uxtbne	r3, r3
   b6c0c:	2301      	moveq	r3, #1
    seekSet(0);
   b6c0e:	2100      	movs	r1, #0
   b6c10:	4628      	mov	r0, r5
   b6c12:	9303      	str	r3, [sp, #12]
   b6c14:	f000 fae1 	bl	b71da <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b6c18:	f107 030d 	add.w	r3, r7, #13
  }
   b6c1c:	f04f 0b00 	mov.w	fp, #0
   b6c20:	ee08 3a10 	vmov	s16, r3
   b6c24:	46da      	mov	sl, fp
   b6c26:	465c      	mov	r4, fp
   b6c28:	465e      	mov	r6, fp
   b6c2a:	f8cd b010 	str.w	fp, [sp, #16]
   b6c2e:	46d9      	mov	r9, fp
    curIndex = dirFile->m_curPosition/32;
   b6c30:	696b      	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
   b6c32:	2101      	movs	r1, #1
   b6c34:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   b6c36:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
   b6c3a:	f000 faaf 	bl	b719c <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b6c3e:	4603      	mov	r3, r0
   b6c40:	2800      	cmp	r0, #0
   b6c42:	d171      	bne.n	b6d28 <_ZN7FatFile4openEPS_P7fname_ti+0x164>
      if (dirFile->getError()) {
   b6c44:	786b      	ldrb	r3, [r5, #1]
   b6c46:	2b00      	cmp	r3, #0
   b6c48:	d1c9      	bne.n	b6bde <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   b6c4a:	9b06      	ldr	r3, [sp, #24]
   b6c4c:	059a      	lsls	r2, r3, #22
   b6c4e:	d5c6      	bpl.n	b6bde <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   b6c50:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   b6c54:	3b01      	subs	r3, #1
   b6c56:	2b01      	cmp	r3, #1
   b6c58:	d8c1      	bhi.n	b6bde <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   b6c5a:	9b04      	ldr	r3, [sp, #16]
   b6c5c:	2c00      	cmp	r4, #0
   b6c5e:	bf08      	it	eq
   b6c60:	4643      	moveq	r3, r8
   b6c62:	9304      	str	r3, [sp, #16]
  while (freeFound < freeNeed) {
   b6c64:	9b03      	ldr	r3, [sp, #12]
   b6c66:	429c      	cmp	r4, r3
   b6c68:	f0c0 80f1 	bcc.w	b6e4e <_ZN7FatFile4openEPS_P7fname_ti+0x28a>
  if (fnameFound) {
   b6c6c:	f1b9 0f00 	cmp.w	r9, #0
   b6c70:	f040 810a 	bne.w	b6e88 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   b6c74:	9b04      	ldr	r3, [sp, #16]
   b6c76:	4628      	mov	r0, r5
   b6c78:	0159      	lsls	r1, r3, #5
   b6c7a:	f000 faae 	bl	b71da <_ZN7FatFile7seekSetEm>
   b6c7e:	2800      	cmp	r0, #0
   b6c80:	d0ad      	beq.n	b6bde <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   b6c82:	9b03      	ldr	r3, [sp, #12]
   b6c84:	f103 39ff 	add.w	r9, r3, #4294967295
   b6c88:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b6c8c:	464e      	mov	r6, r9
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b6c8e:	f04f 0a00 	mov.w	sl, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   b6c92:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b6c96:	2e00      	cmp	r6, #0
   b6c98:	f000 810d 	beq.w	b6eb6 <_ZN7FatFile4openEPS_P7fname_ti+0x2f2>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b6c9c:	2100      	movs	r1, #0
   b6c9e:	4628      	mov	r0, r5
   b6ca0:	f000 fa7c 	bl	b719c <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b6ca4:	4604      	mov	r4, r0
   b6ca6:	2800      	cmp	r0, #0
   b6ca8:	d099      	beq.n	b6bde <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   b6caa:	68aa      	ldr	r2, [r5, #8]
   b6cac:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   b6cb0:	454e      	cmp	r6, r9
   b6cb2:	f043 0301 	orr.w	r3, r3, #1
   b6cb6:	bf0c      	ite	eq
   b6cb8:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   b6cbc:	46b3      	movne	fp, r6
   b6cbe:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   b6cc2:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   b6cc6:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   b6cca:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   b6cce:	f107 000d 	add.w	r0, r7, #13
   b6cd2:	f7ff fdbc 	bl	b684e <_ZN7FatFile11lfnChecksumEPh>
    ldir->mustBeZero = 0;
   b6cd6:	f884 a01a 	strb.w	sl, [r4, #26]
    ldir->chksum = lfnChecksum(fname->sfn);
   b6cda:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   b6cdc:	f884 a01b 	strb.w	sl, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b6ce0:	f00b 031f 	and.w	r3, fp, #31
   b6ce4:	220d      	movs	r2, #13
   b6ce6:	3b01      	subs	r3, #1
    lfnPutName(ldir, fname->lfn, len);
   b6ce8:	f8d7 c008 	ldr.w	ip, [r7, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b6cec:	4353      	muls	r3, r2
   b6cee:	2200      	movs	r2, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b6cf0:	9905      	ldr	r1, [sp, #20]
   b6cf2:	4299      	cmp	r1, r3
   b6cf4:	f240 80d0 	bls.w	b6e98 <_ZN7FatFile4openEPS_P7fname_ti+0x2d4>
   b6cf8:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
   b6cfc:	2a04      	cmp	r2, #4
   b6cfe:	fa5f fe82 	uxtb.w	lr, r2
   b6d02:	f102 0001 	add.w	r0, r2, #1
   b6d06:	f200 80cd 	bhi.w	b6ea4 <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
    ldir->name1[i] = c;
   b6d0a:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   b6d0e:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   b6d12:	280d      	cmp	r0, #13
   b6d14:	f103 0301 	add.w	r3, r3, #1
   b6d18:	4602      	mov	r2, r0
   b6d1a:	d1e9      	bne.n	b6cf0 <_ZN7FatFile4openEPS_P7fname_ti+0x12c>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b6d1c:	3e01      	subs	r6, #1
   b6d1e:	b2f6      	uxtb	r6, r6
   b6d20:	e7b9      	b.n	b6c96 <_ZN7FatFile4openEPS_P7fname_ti+0xd2>
        fnameFound = true;
   b6d22:	f04f 0901 	mov.w	r9, #1
   b6d26:	e783      	b.n	b6c30 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   b6d28:	7802      	ldrb	r2, [r0, #0]
   b6d2a:	2ae5      	cmp	r2, #229	; 0xe5
   b6d2c:	d000      	beq.n	b6d30 <_ZN7FatFile4openEPS_P7fname_ti+0x16c>
   b6d2e:	b97a      	cbnz	r2, b6d50 <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
    curIndex = dirFile->m_curPosition/32;
   b6d30:	9904      	ldr	r1, [sp, #16]
   b6d32:	2c00      	cmp	r4, #0
   b6d34:	bf08      	it	eq
   b6d36:	4641      	moveq	r1, r8
   b6d38:	9104      	str	r1, [sp, #16]
      if (freeFound < freeNeed) {
   b6d3a:	9903      	ldr	r1, [sp, #12]
   b6d3c:	428c      	cmp	r4, r1
        freeFound++;
   b6d3e:	bf3c      	itt	cc
   b6d40:	3401      	addcc	r4, #1
   b6d42:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   b6d44:	2a00      	cmp	r2, #0
   b6d46:	d080      	beq.n	b6c4a <_ZN7FatFile4openEPS_P7fname_ti+0x86>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b6d48:	2ae5      	cmp	r2, #229	; 0xe5
   b6d4a:	d105      	bne.n	b6d58 <_ZN7FatFile4openEPS_P7fname_ti+0x194>
      lfnOrd = 0;
   b6d4c:	2600      	movs	r6, #0
   b6d4e:	e76f      	b.n	b6c30 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   b6d50:	9903      	ldr	r1, [sp, #12]
   b6d52:	428c      	cmp	r4, r1
   b6d54:	bf38      	it	cc
   b6d56:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b6d58:	2a2e      	cmp	r2, #46	; 0x2e
   b6d5a:	d0f7      	beq.n	b6d4c <_ZN7FatFile4openEPS_P7fname_ti+0x188>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for part of a long name else false.
 */
static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {
  return dir->attributes == DIR_ATT_LONG_NAME;
   b6d5c:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
   b6d5e:	290f      	cmp	r1, #15
   b6d60:	d14a      	bne.n	b6df8 <_ZN7FatFile4openEPS_P7fname_ti+0x234>
      if (!lfnOrd) {
   b6d62:	bb16      	cbnz	r6, b6daa <_ZN7FatFile4openEPS_P7fname_ti+0x1e6>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   b6d64:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   b6d68:	f43f af62 	beq.w	b6c30 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   b6d6c:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   b6d70:	f893 b00d 	ldrb.w	fp, [r3, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   b6d74:	46b2      	mov	sl, r6
      size_t k = 13*(ord - 1);
   b6d76:	220d      	movs	r2, #13
   b6d78:	f10a 38ff 	add.w	r8, sl, #4294967295
   b6d7c:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
   b6d80:	9a05      	ldr	r2, [sp, #20]
   b6d82:	4542      	cmp	r2, r8
   b6d84:	d9e2      	bls.n	b6d4c <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b6d86:	eba2 0208 	sub.w	r2, r2, r8
   b6d8a:	9208      	str	r2, [sp, #32]
   b6d8c:	2200      	movs	r2, #0
   b6d8e:	eb02 0108 	add.w	r1, r2, r8
   b6d92:	9109      	str	r1, [sp, #36]	; 0x24
        uint16_t u = lfnGetChar(ldir, i);
   b6d94:	4618      	mov	r0, r3
   b6d96:	b2d1      	uxtb	r1, r2
   b6d98:	f7ff fd38 	bl	b680c <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
   b6d9c:	9908      	ldr	r1, [sp, #32]
   b6d9e:	428a      	cmp	r2, r1
   b6da0:	d10d      	bne.n	b6dbe <_ZN7FatFile4openEPS_P7fname_ti+0x1fa>
            lfnOrd = 0;
   b6da2:	2800      	cmp	r0, #0
   b6da4:	bf18      	it	ne
   b6da6:	2600      	movne	r6, #0
   b6da8:	e742      	b.n	b6c30 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   b6daa:	f10a 3aff 	add.w	sl, sl, #4294967295
   b6dae:	fa5f fa8a 	uxtb.w	sl, sl
   b6db2:	4552      	cmp	r2, sl
   b6db4:	d1ca      	bne.n	b6d4c <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b6db6:	7b5a      	ldrb	r2, [r3, #13]
   b6db8:	455a      	cmp	r2, fp
   b6dba:	d0dc      	beq.n	b6d76 <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   b6dbc:	e7c6      	b.n	b6d4c <_ZN7FatFile4openEPS_P7fname_ti+0x188>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6dbe:	28ff      	cmp	r0, #255	; 0xff
   b6dc0:	d8c4      	bhi.n	b6d4c <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b6dc2:	fa5f fe80 	uxtb.w	lr, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b6dc6:	f1ae 0141 	sub.w	r1, lr, #65	; 0x41
   b6dca:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6dcc:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b6dce:	bf9c      	itt	ls
   b6dd0:	f10e 0020 	addls.w	r0, lr, #32
   b6dd4:	fa5f fe80 	uxtbls.w	lr, r0
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6dd8:	4608      	mov	r0, r1
   b6dda:	9909      	ldr	r1, [sp, #36]	; 0x24
   b6ddc:	5c41      	ldrb	r1, [r0, r1]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b6dde:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   b6de2:	f1bc 0f19 	cmp.w	ip, #25
   b6de6:	bf9c      	itt	ls
   b6de8:	3120      	addls	r1, #32
   b6dea:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6dec:	4571      	cmp	r1, lr
   b6dee:	d1ad      	bne.n	b6d4c <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      for (uint8_t i = 0; i < 13; i++) {
   b6df0:	3201      	adds	r2, #1
   b6df2:	2a0d      	cmp	r2, #13
   b6df4:	d1cb      	bne.n	b6d8e <_ZN7FatFile4openEPS_P7fname_ti+0x1ca>
   b6df6:	e71b      	b.n	b6c30 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b6df8:	0708      	lsls	r0, r1, #28
   b6dfa:	d4a7      	bmi.n	b6d4c <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      if (lfnOrd) {
   b6dfc:	b15e      	cbz	r6, b6e16 <_ZN7FatFile4openEPS_P7fname_ti+0x252>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   b6dfe:	f1ba 0f01 	cmp.w	sl, #1
   b6e02:	f47f aeec 	bne.w	b6bde <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b6e06:	4618      	mov	r0, r3
   b6e08:	f7ff fd21 	bl	b684e <_ZN7FatFile11lfnChecksumEPh>
   b6e0c:	4558      	cmp	r0, fp
   b6e0e:	f47f aee6 	bne.w	b6bde <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b6e12:	46b1      	mov	r9, r6
   b6e14:	e00e      	b.n	b6e34 <_ZN7FatFile4openEPS_P7fname_ti+0x270>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b6e16:	ee18 1a10 	vmov	r1, s16
   b6e1a:	220b      	movs	r2, #11
   b6e1c:	4618      	mov	r0, r3
   b6e1e:	f006 fd94 	bl	bd94a <memcmp>
   b6e22:	2800      	cmp	r0, #0
   b6e24:	f47f af04 	bne.w	b6c30 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   b6e28:	f897 9000 	ldrb.w	r9, [r7]
   b6e2c:	f019 0901 	ands.w	r9, r9, #1
   b6e30:	f47f af77 	bne.w	b6d22 <_ZN7FatFile4openEPS_P7fname_ti+0x15e>
  if (oflag & O_EXCL) {
   b6e34:	9b06      	ldr	r3, [sp, #24]
   b6e36:	0519      	lsls	r1, r3, #20
   b6e38:	f53f aed1 	bmi.w	b6bde <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   b6e3c:	9b06      	ldr	r3, [sp, #24]
   b6e3e:	9807      	ldr	r0, [sp, #28]
   b6e40:	f8cd 9000 	str.w	r9, [sp]
   b6e44:	4642      	mov	r2, r8
   b6e46:	4629      	mov	r1, r5
   b6e48:	f000 fa0a 	bl	b7260 <_ZN7FatFile15openCachedEntryEPS_tih>
   b6e4c:	e6c8      	b.n	b6be0 <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   b6e4e:	2100      	movs	r1, #0
   b6e50:	4628      	mov	r0, r5
   b6e52:	f000 f9a3 	bl	b719c <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b6e56:	b9a0      	cbnz	r0, b6e82 <_ZN7FatFile4openEPS_P7fname_ti+0x2be>
      if (dirFile->getError()) {
   b6e58:	786b      	ldrb	r3, [r5, #1]
   b6e5a:	2b00      	cmp	r3, #0
   b6e5c:	f47f aebf 	bne.w	b6bde <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   b6e60:	4628      	mov	r0, r5
   b6e62:	f000 f887 	bl	b6f74 <_ZN7FatFile13addDirClusterEv>
   b6e66:	2800      	cmp	r0, #0
   b6e68:	f43f aeb9 	beq.w	b6bde <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    return m_blocksPerCluster;
   b6e6c:	68ab      	ldr	r3, [r5, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   b6e6e:	791b      	ldrb	r3, [r3, #4]
   b6e70:	2b01      	cmp	r3, #1
   b6e72:	f63f aefb 	bhi.w	b6c6c <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
  while (freeFound < freeNeed) {
   b6e76:	9b03      	ldr	r3, [sp, #12]
    freeFound += 16;
   b6e78:	3410      	adds	r4, #16
   b6e7a:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b6e7c:	42a3      	cmp	r3, r4
   b6e7e:	d8ef      	bhi.n	b6e60 <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
   b6e80:	e6f4      	b.n	b6c6c <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   b6e82:	3401      	adds	r4, #1
   b6e84:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b6e86:	e6ed      	b.n	b6c64 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
    if (!dirFile->lfnUniqueSfn(fname)) {
   b6e88:	4639      	mov	r1, r7
   b6e8a:	4628      	mov	r0, r5
   b6e8c:	f7ff fe46 	bl	b6b1c <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   b6e90:	2800      	cmp	r0, #0
   b6e92:	f47f aeef 	bne.w	b6c74 <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   b6e96:	e6a2      	b.n	b6bde <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b6e98:	bf14      	ite	ne
   b6e9a:	f04f 31ff 	movne.w	r1, #4294967295
   b6e9e:	2100      	moveq	r1, #0
   b6ea0:	b289      	uxth	r1, r1
   b6ea2:	e72b      	b.n	b6cfc <_ZN7FatFile4openEPS_P7fname_ti+0x138>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b6ea4:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   b6ea8:	bf94      	ite	ls
   b6eaa:	eb04 0242 	addls.w	r2, r4, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   b6eae:	eb04 0240 	addhi.w	r2, r4, r0, lsl #1
   b6eb2:	8091      	strh	r1, [r2, #4]
   b6eb4:	e72d      	b.n	b6d12 <_ZN7FatFile4openEPS_P7fname_ti+0x14e>
  dir = dirFile->readDirCache();
   b6eb6:	4631      	mov	r1, r6
   b6eb8:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   b6eba:	f8d5 8014 	ldr.w	r8, [r5, #20]
  dir = dirFile->readDirCache();
   b6ebe:	f000 f96d 	bl	b719c <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   b6ec2:	4604      	mov	r4, r0
   b6ec4:	2800      	cmp	r0, #0
   b6ec6:	f43f ae8a 	beq.w	b6bde <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   b6eca:	2220      	movs	r2, #32
   b6ecc:	4631      	mov	r1, r6
   b6ece:	f006 fd74 	bl	bd9ba <memset>
  memcpy(dir->name, fname->sfn, 11);
   b6ed2:	f8d7 300d 	ldr.w	r3, [r7, #13]
   b6ed6:	6023      	str	r3, [r4, #0]
   b6ed8:	f8d7 3011 	ldr.w	r3, [r7, #17]
   b6edc:	6063      	str	r3, [r4, #4]
   b6ede:	f8b7 3015 	ldrh.w	r3, [r7, #21]
   b6ee2:	8123      	strh	r3, [r4, #8]
   b6ee4:	7dfb      	ldrb	r3, [r7, #23]
   b6ee6:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   b6ee8:	783b      	ldrb	r3, [r7, #0]
   b6eea:	f003 0318 	and.w	r3, r3, #24
   b6eee:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   b6ef0:	4b0f      	ldr	r3, [pc, #60]	; (b6f30 <_ZN7FatFile4openEPS_P7fname_ti+0x36c>)
   b6ef2:	681b      	ldr	r3, [r3, #0]
   b6ef4:	b19b      	cbz	r3, b6f1e <_ZN7FatFile4openEPS_P7fname_ti+0x35a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   b6ef6:	f104 010e 	add.w	r1, r4, #14
   b6efa:	f104 0010 	add.w	r0, r4, #16
   b6efe:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   b6f00:	8a23      	ldrh	r3, [r4, #16]
   b6f02:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   b6f04:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   b6f06:	89e3      	ldrh	r3, [r4, #14]
   b6f08:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   b6f0a:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b6f0c:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   b6f10:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   b6f14:	f3c8 184f 	ubfx	r8, r8, #5, #16
   b6f18:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  uint32_t cacheBlockNumber() {
    return m_cache.lbn();
  }
  void cacheDirty() {
    m_cache.dirty();
  }
   b6f1c:	e78e      	b.n	b6e3c <_ZN7FatFile4openEPS_P7fname_ti+0x278>
    dir->creationDate = FAT_DEFAULT_DATE;
   b6f1e:	2321      	movs	r3, #33	; 0x21
   b6f20:	7423      	strb	r3, [r4, #16]
   b6f22:	2328      	movs	r3, #40	; 0x28
   b6f24:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   b6f26:	2308      	movs	r3, #8
   b6f28:	73a6      	strb	r6, [r4, #14]
   b6f2a:	73e3      	strb	r3, [r4, #15]
   b6f2c:	e7e8      	b.n	b6f00 <_ZN7FatFile4openEPS_P7fname_ti+0x33c>
   b6f2e:	bf00      	nop
   b6f30:	2003e644 	.word	0x2003e644

000b6f34 <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   b6f34:	b538      	push	{r3, r4, r5, lr}
   b6f36:	4604      	mov	r4, r0
   b6f38:	460d      	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   b6f3a:	2224      	movs	r2, #36	; 0x24
   b6f3c:	2100      	movs	r1, #0
   b6f3e:	f006 fd3c 	bl	bd9ba <memset>

  m_vol = vol;
   b6f42:	60a5      	str	r5, [r4, #8]
    return m_fatType;
   b6f44:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
   b6f46:	2b10      	cmp	r3, #16
   b6f48:	d003      	beq.n	b6f52 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
   b6f4a:	2b20      	cmp	r3, #32
   b6f4c:	d006      	beq.n	b6f5c <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
   b6f4e:	2000      	movs	r0, #0
  m_flags = F_READ;
  return true;

fail:
  return false;
}
   b6f50:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
   b6f52:	2320      	movs	r3, #32
  m_flags = F_READ;
   b6f54:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
   b6f56:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b6f58:	70a0      	strb	r0, [r4, #2]
  return true;
   b6f5a:	e7f9      	b.n	b6f50 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
   b6f5c:	2340      	movs	r3, #64	; 0x40
   b6f5e:	e7f9      	b.n	b6f54 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

000b6f60 <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
   b6f60:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b6f62:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   b6f64:	f043 0304 	orr.w	r3, r3, #4
   b6f68:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b6f6a:	f100 0210 	add.w	r2, r0, #16
   b6f6e:	6880      	ldr	r0, [r0, #8]
   b6f70:	f000 bc08 	b.w	b7784 <_ZN9FatVolume15allocateClusterEmPm>

000b6f74 <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
   b6f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
   b6f78:	7801      	ldrb	r1, [r0, #0]
   b6f7a:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   b6f7e:	4604      	mov	r4, r0
  if (isRootFixed()) {
   b6f80:	d003      	beq.n	b6f8a <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
   b6f82:	2600      	movs	r6, #0
}
   b6f84:	4630      	mov	r0, r6
   b6f86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   b6f8a:	6942      	ldr	r2, [r0, #20]
   b6f8c:	4b17      	ldr	r3, [pc, #92]	; (b6fec <_ZN7FatFile13addDirClusterEv+0x78>)
   b6f8e:	429a      	cmp	r2, r3
   b6f90:	d2f7      	bcs.n	b6f82 <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   b6f92:	f7ff ffe5 	bl	b6f60 <_ZN7FatFile10addClusterEv>
   b6f96:	4606      	mov	r6, r0
   b6f98:	2800      	cmp	r0, #0
   b6f9a:	d0f2      	beq.n	b6f82 <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   b6f9c:	6921      	ldr	r1, [r4, #16]
   b6f9e:	68a0      	ldr	r0, [r4, #8]
   b6fa0:	f000 fb85 	bl	b76ae <_ZNK9FatVolume17clusterFirstBlockEm>
   b6fa4:	4607      	mov	r7, r0
    return m_cache.read(blockNumber, options);
   b6fa6:	68a0      	ldr	r0, [r4, #8]
   b6fa8:	2205      	movs	r2, #5
   b6faa:	4639      	mov	r1, r7
   b6fac:	3024      	adds	r0, #36	; 0x24
   b6fae:	f000 fb5b 	bl	b7668 <_ZN8FatCache4readEmh>
  if (!pc) {
   b6fb2:	4680      	mov	r8, r0
   b6fb4:	2800      	cmp	r0, #0
   b6fb6:	d0e4      	beq.n	b6f82 <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   b6fb8:	4629      	mov	r1, r5
   b6fba:	f44f 7200 	mov.w	r2, #512	; 0x200
   b6fbe:	f006 fcfc 	bl	bd9ba <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b6fc2:	2501      	movs	r5, #1
   b6fc4:	68a3      	ldr	r3, [r4, #8]
    return m_blocksPerCluster;
   b6fc6:	791a      	ldrb	r2, [r3, #4]
   b6fc8:	42aa      	cmp	r2, r5
   b6fca:	d909      	bls.n	b6fe0 <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   b6fcc:	6818      	ldr	r0, [r3, #0]
   b6fce:	4642      	mov	r2, r8
   b6fd0:	19e9      	adds	r1, r5, r7
   b6fd2:	f000 feb6 	bl	b7d42 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   b6fd6:	2800      	cmp	r0, #0
   b6fd8:	d0d3      	beq.n	b6f82 <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b6fda:	3501      	adds	r5, #1
   b6fdc:	b2ed      	uxtb	r5, r5
   b6fde:	e7f1      	b.n	b6fc4 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   b6fe0:	6963      	ldr	r3, [r4, #20]
   b6fe2:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   b6fe6:	6163      	str	r3, [r4, #20]
  return true;
   b6fe8:	e7cc      	b.n	b6f84 <_ZN7FatFile13addDirClusterEv+0x10>
   b6fea:	bf00      	nop
   b6fec:	001ffe00 	.word	0x001ffe00

000b6ff0 <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   b6ff0:	b510      	push	{r4, lr}
   b6ff2:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   b6ff4:	6880      	ldr	r0, [r0, #8]
   b6ff6:	460a      	mov	r2, r1
   b6ff8:	3024      	adds	r0, #36	; 0x24
   b6ffa:	69a1      	ldr	r1, [r4, #24]
   b6ffc:	f000 fb34 	bl	b7668 <_ZN8FatCache4readEmh>
  if (!pc) {
   b7000:	b120      	cbz	r0, b700c <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
   b7002:	88a3      	ldrh	r3, [r4, #4]
   b7004:	f003 030f 	and.w	r3, r3, #15
   b7008:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
   b700c:	bd10      	pop	{r4, pc}

000b700e <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
   b700e:	7803      	ldrb	r3, [r0, #0]
   b7010:	b90b      	cbnz	r3, b7016 <_ZN7FatFile8openRootEP9FatVolume+0x8>
   b7012:	f7ff bf8f 	b.w	b6f34 <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
   b7016:	2000      	movs	r0, #0
   b7018:	4770      	bx	lr

000b701a <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   b701a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return m_attr;
   b701e:	7803      	ldrb	r3, [r0, #0]
   b7020:	4604      	mov	r4, r0
   b7022:	4688      	mov	r8, r1
   b7024:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   b7026:	2b00      	cmp	r3, #0
   b7028:	d05d      	beq.n	b70e6 <_ZN7FatFile4readEPvj+0xcc>
   b702a:	7882      	ldrb	r2, [r0, #2]
   b702c:	07d1      	lsls	r1, r2, #31
   b702e:	d55a      	bpl.n	b70e6 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   b7030:	071a      	lsls	r2, r3, #28
   b7032:	d52d      	bpl.n	b7090 <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   b7034:	69c3      	ldr	r3, [r0, #28]
   b7036:	6942      	ldr	r2, [r0, #20]
   b7038:	1a9b      	subs	r3, r3, r2
   b703a:	429d      	cmp	r5, r3
   b703c:	bf28      	it	cs
   b703e:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   b7040:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   b7042:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b7046:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   b704a:	2e00      	cmp	r6, #0
   b704c:	f000 808f 	beq.w	b716e <_ZN7FatFile4readEPvj+0x154>
    return m_attr & FILE_ATTR_ROOT_FIXED;
   b7050:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   b7052:	6963      	ldr	r3, [r4, #20]
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b7054:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   b7056:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   b7058:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b705c:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   b7060:	d51f      	bpl.n	b70a2 <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b7062:	6a00      	ldr	r0, [r0, #32]
   b7064:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   b7066:	68a0      	ldr	r0, [r4, #8]
   b7068:	f1ba 0f00 	cmp.w	sl, #0
   b706c:	d142      	bne.n	b70f4 <_ZN7FatFile4readEPvj+0xda>
   b706e:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b7072:	d33f      	bcc.n	b70f4 <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
   b7074:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b7076:	4299      	cmp	r1, r3
   b7078:	d03c      	beq.n	b70f4 <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   b707a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b707e:	d252      	bcs.n	b7126 <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   b7080:	6800      	ldr	r0, [r0, #0]
   b7082:	4642      	mov	r2, r8
   b7084:	f000 fdd4 	bl	b7c30 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   b7088:	b368      	cbz	r0, b70e6 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   b708a:	f44f 7700 	mov.w	r7, #512	; 0x200
   b708e:	e044      	b.n	b711a <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   b7090:	069b      	lsls	r3, r3, #26
   b7092:	d5d5      	bpl.n	b7040 <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   b7094:	6883      	ldr	r3, [r0, #8]
   b7096:	891a      	ldrh	r2, [r3, #8]
   b7098:	6943      	ldr	r3, [r0, #20]
   b709a:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   b709e:	b29b      	uxth	r3, r3
   b70a0:	e7cb      	b.n	b703a <_ZN7FatFile4readEPvj+0x20>
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   b70a2:	f890 9005 	ldrb.w	r9, [r0, #5]
   b70a6:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   b70aa:	f1ba 0f00 	cmp.w	sl, #0
   b70ae:	d108      	bne.n	b70c2 <_ZN7FatFile4readEPvj+0xa8>
   b70b0:	f1b9 0f00 	cmp.w	r9, #0
   b70b4:	d105      	bne.n	b70c2 <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   b70b6:	b95b      	cbnz	r3, b70d0 <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b70b8:	0651      	lsls	r1, r2, #25
    return m_rootDirStart;
   b70ba:	bf4c      	ite	mi
   b70bc:	6a03      	ldrmi	r3, [r0, #32]
   b70be:	6a23      	ldrpl	r3, [r4, #32]
   b70c0:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b70c2:	6921      	ldr	r1, [r4, #16]
   b70c4:	68a0      	ldr	r0, [r4, #8]
   b70c6:	f000 faf2 	bl	b76ae <_ZNK9FatVolume17clusterFirstBlockEm>
   b70ca:	eb09 0100 	add.w	r1, r9, r0
   b70ce:	e7ca      	b.n	b7066 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b70d0:	6921      	ldr	r1, [r4, #16]
   b70d2:	465a      	mov	r2, fp
   b70d4:	f000 faf1 	bl	b76ba <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   b70d8:	2800      	cmp	r0, #0
   b70da:	db04      	blt.n	b70e6 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   b70dc:	d1f1      	bne.n	b70c2 <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   b70de:	7823      	ldrb	r3, [r4, #0]
   b70e0:	f013 0f70 	tst.w	r3, #112	; 0x70
   b70e4:	d143      	bne.n	b716e <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   b70e6:	7863      	ldrb	r3, [r4, #1]
   b70e8:	f043 0302 	orr.w	r3, r3, #2
   b70ec:	7063      	strb	r3, [r4, #1]
  return -1;
   b70ee:	f04f 30ff 	mov.w	r0, #4294967295
   b70f2:	e03d      	b.n	b7170 <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   b70f4:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   b70f8:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   b70fa:	f04f 0200 	mov.w	r2, #0
   b70fe:	f100 0024 	add.w	r0, r0, #36	; 0x24
   b7102:	bf28      	it	cs
   b7104:	4637      	movcs	r7, r6
   b7106:	f000 faaf 	bl	b7668 <_ZN8FatCache4readEmh>
      if (!pc) {
   b710a:	2800      	cmp	r0, #0
   b710c:	d0eb      	beq.n	b70e6 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   b710e:	eb00 010a 	add.w	r1, r0, sl
   b7112:	463a      	mov	r2, r7
   b7114:	4640      	mov	r0, r8
   b7116:	f006 fc28 	bl	bd96a <memcpy>
    m_curPosition += n;
   b711a:	6963      	ldr	r3, [r4, #20]
   b711c:	443b      	add	r3, r7
    dst += n;
   b711e:	44b8      	add	r8, r7
    m_curPosition += n;
   b7120:	6163      	str	r3, [r4, #20]
    toRead -= n;
   b7122:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   b7124:	e791      	b.n	b704a <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   b7126:	7822      	ldrb	r2, [r4, #0]
   b7128:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   b712a:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   b712e:	d406      	bmi.n	b713e <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   b7130:	7902      	ldrb	r2, [r0, #4]
   b7132:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   b7136:	b2d2      	uxtb	r2, r2
   b7138:	4592      	cmp	sl, r2
   b713a:	bf28      	it	cs
   b713c:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b713e:	4299      	cmp	r1, r3
      n = 512*nb;
   b7140:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b7144:	d208      	bcs.n	b7158 <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   b7146:	68a0      	ldr	r0, [r4, #8]
   b7148:	4653      	mov	r3, sl
   b714a:	6800      	ldr	r0, [r0, #0]
   b714c:	4642      	mov	r2, r8
   b714e:	f000 fdb7 	bl	b7cc0 <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   b7152:	2800      	cmp	r0, #0
   b7154:	d1e1      	bne.n	b711a <_ZN7FatFile4readEPvj+0x100>
   b7156:	e7c6      	b.n	b70e6 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b7158:	4453      	add	r3, sl
   b715a:	428b      	cmp	r3, r1
   b715c:	d9f3      	bls.n	b7146 <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   b715e:	3024      	adds	r0, #36	; 0x24
   b7160:	9101      	str	r1, [sp, #4]
   b7162:	f000 fa59 	bl	b7618 <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   b7166:	9901      	ldr	r1, [sp, #4]
   b7168:	2800      	cmp	r0, #0
   b716a:	d1ec      	bne.n	b7146 <_ZN7FatFile4readEPvj+0x12c>
   b716c:	e7bb      	b.n	b70e6 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   b716e:	1ba8      	subs	r0, r5, r6
}
   b7170:	b003      	add	sp, #12
   b7172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b7176 <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   b7176:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   b7178:	2201      	movs	r2, #1
   b717a:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   b717e:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   b7182:	4604      	mov	r4, r0
   b7184:	f7ff ff49 	bl	b701a <_ZN7FatFile4readEPvj>
   b7188:	2801      	cmp	r0, #1
   b718a:	bf0a      	itet	eq
   b718c:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b7190:	f04f 30ff 	movne.w	r0, #4294967295
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   b7194:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   b7198:	b002      	add	sp, #8
   b719a:	bd70      	pop	{r4, r5, r6, pc}

000b719c <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b719c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b719e:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   b71a0:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b71a4:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b71a6:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   b71aa:	d000      	beq.n	b71ae <_ZN7FatFile12readDirCacheEb+0x12>
   b71ac:	b999      	cbnz	r1, b71d6 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   b71ae:	2201      	movs	r2, #1
   b71b0:	f10d 0107 	add.w	r1, sp, #7
   b71b4:	4620      	mov	r0, r4
   b71b6:	f7ff ff30 	bl	b701a <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   b71ba:	b240      	sxtb	r0, r0
   b71bc:	2801      	cmp	r0, #1
   b71be:	d002      	beq.n	b71c6 <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   b71c0:	2000      	movs	r0, #0
}
   b71c2:	b003      	add	sp, #12
   b71c4:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   b71c6:	6963      	ldr	r3, [r4, #20]
   b71c8:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   b71ca:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   b71cc:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   b71ce:	3030      	adds	r0, #48	; 0x30
   b71d0:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   b71d4:	e7f5      	b.n	b71c2 <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   b71d6:	3320      	adds	r3, #32
   b71d8:	e7f7      	b.n	b71ca <_ZN7FatFile12readDirCacheEb+0x2e>

000b71da <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   b71da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
   b71de:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   b71e0:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   b71e2:	4604      	mov	r4, r0
   b71e4:	460d      	mov	r5, r1
  if (!isOpen()) {
   b71e6:	b162      	cbz	r2, b7202 <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   b71e8:	6940      	ldr	r0, [r0, #20]
   b71ea:	4288      	cmp	r0, r1
   b71ec:	d002      	beq.n	b71f4 <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   b71ee:	b919      	cbnz	r1, b71f8 <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   b71f0:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   b71f2:	6165      	str	r5, [r4, #20]
    return true;
   b71f4:	2001      	movs	r0, #1
   b71f6:	e006      	b.n	b7206 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   b71f8:	0716      	lsls	r6, r2, #28
   b71fa:	d506      	bpl.n	b720a <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   b71fc:	69e3      	ldr	r3, [r4, #28]
   b71fe:	428b      	cmp	r3, r1
   b7200:	d20b      	bcs.n	b721a <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   b7202:	6127      	str	r7, [r4, #16]
  return false;
   b7204:	2000      	movs	r0, #0
}
   b7206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   b720a:	0691      	lsls	r1, r2, #26
   b720c:	d505      	bpl.n	b721a <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
   b720e:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   b7210:	891b      	ldrh	r3, [r3, #8]
   b7212:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   b7216:	d9ec      	bls.n	b71f2 <_ZN7FatFile7seekSetEm+0x18>
   b7218:	e7f3      	b.n	b7202 <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b721a:	f8d4 c008 	ldr.w	ip, [r4, #8]
   b721e:	f89c 6006 	ldrb.w	r6, [ip, #6]
   b7222:	1e43      	subs	r3, r0, #1
   b7224:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b7228:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b722a:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b722c:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   b722e:	42b3      	cmp	r3, r6
   b7230:	d800      	bhi.n	b7234 <_ZN7FatFile7seekSetEm+0x5a>
   b7232:	b998      	cbnz	r0, b725c <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b7234:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
   b7236:	bf4c      	ite	mi
   b7238:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   b723c:	6a23      	ldrpl	r3, [r4, #32]
   b723e:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b7240:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   b7244:	2e00      	cmp	r6, #0
   b7246:	d0d4      	beq.n	b71f2 <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b7248:	6921      	ldr	r1, [r4, #16]
   b724a:	68a0      	ldr	r0, [r4, #8]
   b724c:	4642      	mov	r2, r8
   b724e:	f000 fa34 	bl	b76ba <_ZN9FatVolume6fatGetEmPm>
   b7252:	2800      	cmp	r0, #0
   b7254:	f106 36ff 	add.w	r6, r6, #4294967295
   b7258:	dcf4      	bgt.n	b7244 <_ZN7FatFile7seekSetEm+0x6a>
   b725a:	e7d2      	b.n	b7202 <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   b725c:	1af6      	subs	r6, r6, r3
   b725e:	e7ef      	b.n	b7240 <_ZN7FatFile7seekSetEm+0x66>

000b7260 <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   b7260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7262:	460f      	mov	r7, r1
   b7264:	4604      	mov	r4, r0
   b7266:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
   b7268:	2100      	movs	r1, #0
   b726a:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   b726c:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
   b726e:	f006 fba4 	bl	bd9ba <memset>
  m_vol = dirFile->m_vol;
   b7272:	68b8      	ldr	r0, [r7, #8]
   b7274:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   b7276:	80a5      	strh	r5, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   b7278:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
   b727c:	6a3b      	ldr	r3, [r7, #32]
   b727e:	60e3      	str	r3, [r4, #12]
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
   b7280:	016a      	lsls	r2, r5, #5
   b7282:	eb00 1545 	add.w	r5, r0, r5, lsl #5
   b7286:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   b728a:	071f      	lsls	r7, r3, #28
   b728c:	d444      	bmi.n	b7318 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   b728e:	f003 0317 	and.w	r3, r3, #23
   b7292:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   b7294:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
   b7298:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   b729c:	bf04      	itt	eq
   b729e:	f043 0308 	orreq.w	r3, r3, #8
   b72a2:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   b72a4:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b72a8:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   b72aa:	f006 0303 	and.w	r3, r6, #3
   b72ae:	2b01      	cmp	r3, #1
   b72b0:	d02c      	beq.n	b730c <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
   b72b2:	2b02      	cmp	r3, #2
   b72b4:	d028      	beq.n	b7308 <_ZN7FatFile15openCachedEntryEPS_tih+0xa8>
   b72b6:	bb7b      	cbnz	r3, b7318 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      if (oflag & O_TRUNC) {
   b72b8:	0571      	lsls	r1, r6, #21
   b72ba:	d42d      	bmi.n	b7318 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      m_flags = F_READ;
   b72bc:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   b72be:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   b72c0:	78a1      	ldrb	r1, [r4, #2]
   b72c2:	078b      	lsls	r3, r1, #30
   b72c4:	d504      	bpl.n	b72d0 <_ZN7FatFile15openCachedEntryEPS_tih+0x70>
    return m_attr & FILE_ATTR_SUBDIR;
   b72c6:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
   b72c8:	06df      	lsls	r7, r3, #27
   b72ca:	d425      	bmi.n	b7318 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
   b72cc:	07dd      	lsls	r5, r3, #31
   b72ce:	d423      	bmi.n	b7318 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   b72d0:	11b3      	asrs	r3, r6, #6
   b72d2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   b72d6:	f006 0508 	and.w	r5, r6, #8
   b72da:	432b      	orrs	r3, r5
   b72dc:	430b      	orrs	r3, r1
   b72de:	70a3      	strb	r3, [r4, #2]
    return m_lbn;
   b72e0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   b72e2:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b72e4:	1883      	adds	r3, r0, r2
   b72e6:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   b72ea:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b72ee:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   b72f2:	0572      	lsls	r2, r6, #21
   b72f4:	d513      	bpl.n	b731e <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b72f6:	b959      	cbnz	r1, b7310 <_ZN7FatFile15openCachedEntryEPS_tih+0xb0>
    m_flags |= F_FILE_DIR_DIRTY;
   b72f8:	78a3      	ldrb	r3, [r4, #2]
   b72fa:	f043 0304 	orr.w	r3, r3, #4
   b72fe:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b7300:	0473      	lsls	r3, r6, #17
   b7302:	d410      	bmi.n	b7326 <_ZN7FatFile15openCachedEntryEPS_tih+0xc6>
  return true;
   b7304:	2001      	movs	r0, #1
}
   b7306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   b7308:	2303      	movs	r3, #3
   b730a:	e7d8      	b.n	b72be <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
      m_flags = F_WRITE;
   b730c:	2302      	movs	r3, #2
   b730e:	e7d6      	b.n	b72be <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b7310:	f000 fa73 	bl	b77fa <_ZN9FatVolume9freeChainEm>
   b7314:	2800      	cmp	r0, #0
   b7316:	d1ef      	bne.n	b72f8 <_ZN7FatFile15openCachedEntryEPS_tih+0x98>
  m_attr = FILE_ATTR_CLOSED;
   b7318:	2000      	movs	r0, #0
   b731a:	7020      	strb	r0, [r4, #0]
  return false;
   b731c:	e7f3      	b.n	b7306 <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_firstCluster = firstCluster;
   b731e:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   b7320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b7322:	61e3      	str	r3, [r4, #28]
   b7324:	e7ec      	b.n	b7300 <_ZN7FatFile15openCachedEntryEPS_tih+0xa0>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b7326:	69e1      	ldr	r1, [r4, #28]
   b7328:	4620      	mov	r0, r4
   b732a:	f7ff ff56 	bl	b71da <_ZN7FatFile7seekSetEm>
   b732e:	2800      	cmp	r0, #0
   b7330:	d1e8      	bne.n	b7304 <_ZN7FatFile15openCachedEntryEPS_tih+0xa4>
   b7332:	e7f1      	b.n	b7318 <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>

000b7334 <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   b7334:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   b7336:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   b7338:	4604      	mov	r4, r0
  if (!isOpen()) {
   b733a:	b90b      	cbnz	r3, b7340 <_ZN7FatFile4syncEv+0xc>
    return true;
   b733c:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   b733e:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   b7340:	7883      	ldrb	r3, [r0, #2]
   b7342:	075a      	lsls	r2, r3, #29
   b7344:	d523      	bpl.n	b738e <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b7346:	2101      	movs	r1, #1
   b7348:	f7ff fe52 	bl	b6ff0 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b734c:	4605      	mov	r5, r0
   b734e:	b928      	cbnz	r0, b735c <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   b7350:	7863      	ldrb	r3, [r4, #1]
   b7352:	f043 0301 	orr.w	r3, r3, #1
   b7356:	7063      	strb	r3, [r4, #1]
  return false;
   b7358:	2000      	movs	r0, #0
   b735a:	e7f0      	b.n	b733e <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b735c:	7803      	ldrb	r3, [r0, #0]
   b735e:	2be5      	cmp	r3, #229	; 0xe5
   b7360:	d0f6      	beq.n	b7350 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   b7362:	7823      	ldrb	r3, [r4, #0]
   b7364:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   b7366:	bf44      	itt	mi
   b7368:	69e3      	ldrmi	r3, [r4, #28]
   b736a:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   b736c:	6a23      	ldr	r3, [r4, #32]
   b736e:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   b7370:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b7372:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   b7374:	4b09      	ldr	r3, [pc, #36]	; (b739c <_ZN7FatFile4syncEv+0x68>)
   b7376:	681b      	ldr	r3, [r3, #0]
   b7378:	b12b      	cbz	r3, b7386 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   b737a:	f100 0116 	add.w	r1, r0, #22
   b737e:	3018      	adds	r0, #24
   b7380:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   b7382:	8b2b      	ldrh	r3, [r5, #24]
   b7384:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   b7386:	78a3      	ldrb	r3, [r4, #2]
   b7388:	f023 0304 	bic.w	r3, r3, #4
   b738c:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   b738e:	68a0      	ldr	r0, [r4, #8]
   b7390:	f7ff fa50 	bl	b6834 <_ZN9FatVolume9cacheSyncEv>
   b7394:	2800      	cmp	r0, #0
   b7396:	d0db      	beq.n	b7350 <_ZN7FatFile4syncEv+0x1c>
   b7398:	e7d0      	b.n	b733c <_ZN7FatFile4syncEv+0x8>
   b739a:	bf00      	nop
   b739c:	2003e644 	.word	0x2003e644

000b73a0 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   b73a0:	b510      	push	{r4, lr}
   b73a2:	4604      	mov	r4, r0
  bool rtn = sync();
   b73a4:	f7ff ffc6 	bl	b7334 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   b73a8:	2300      	movs	r3, #0
   b73aa:	7023      	strb	r3, [r4, #0]
}
   b73ac:	bd10      	pop	{r4, pc}

000b73ae <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b73ae:	b5f0      	push	{r4, r5, r6, r7, lr}
   b73b0:	b093      	sub	sp, #76	; 0x4c
   b73b2:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b73b4:	2300      	movs	r3, #0
   b73b6:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   b73b8:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b73ba:	9201      	str	r2, [sp, #4]
   b73bc:	4606      	mov	r6, r0
   b73be:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   b73c0:	b113      	cbz	r3, b73c8 <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
   b73c2:	2000      	movs	r0, #0
}
   b73c4:	b013      	add	sp, #76	; 0x4c
   b73c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   b73c8:	780b      	ldrb	r3, [r1, #0]
   b73ca:	f013 0f70 	tst.w	r3, #112	; 0x70
   b73ce:	d0f8      	beq.n	b73c2 <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
   b73d0:	7813      	ldrb	r3, [r2, #0]
   b73d2:	2b2f      	cmp	r3, #47	; 0x2f
   b73d4:	d112      	bne.n	b73fc <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
   b73d6:	9a01      	ldr	r2, [sp, #4]
   b73d8:	7813      	ldrb	r3, [r2, #0]
   b73da:	2b2f      	cmp	r3, #47	; 0x2f
   b73dc:	d102      	bne.n	b73e4 <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
   b73de:	3201      	adds	r2, #1
   b73e0:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   b73e2:	e7f8      	b.n	b73d6 <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
   b73e4:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
   b73e6:	b91b      	cbnz	r3, b73f0 <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
   b73e8:	4630      	mov	r0, r6
   b73ea:	f7ff fe10 	bl	b700e <_ZN7FatFile8openRootEP9FatVolume>
   b73ee:	e7e9      	b.n	b73c4 <_ZN7FatFile4openEPS_PKci+0x16>
    return m_attr;
   b73f0:	a809      	add	r0, sp, #36	; 0x24
   b73f2:	f7ff fd9f 	bl	b6f34 <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   b73f6:	2800      	cmp	r0, #0
   b73f8:	d0e3      	beq.n	b73c2 <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
   b73fa:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   b73fc:	9801      	ldr	r0, [sp, #4]
   b73fe:	aa01      	add	r2, sp, #4
   b7400:	a903      	add	r1, sp, #12
   b7402:	f7ff fa4b 	bl	b689c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   b7406:	2800      	cmp	r0, #0
   b7408:	d0db      	beq.n	b73c2 <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
   b740a:	9b01      	ldr	r3, [sp, #4]
   b740c:	781b      	ldrb	r3, [r3, #0]
   b740e:	b19b      	cbz	r3, b7438 <_ZN7FatFile4openEPS_PKci+0x8a>
    if (!open(dirFile, &fname, O_RDONLY)) {
   b7410:	2300      	movs	r3, #0
   b7412:	aa03      	add	r2, sp, #12
   b7414:	4621      	mov	r1, r4
   b7416:	4630      	mov	r0, r6
   b7418:	f7ff fbd4 	bl	b6bc4 <_ZN7FatFile4openEPS_P7fname_ti>
   b741c:	2800      	cmp	r0, #0
   b741e:	d0d0      	beq.n	b73c2 <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir = *this;
   b7420:	4635      	mov	r5, r6
   b7422:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b7424:	ac09      	add	r4, sp, #36	; 0x24
   b7426:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b7428:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b742a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b742c:	682b      	ldr	r3, [r5, #0]
   b742e:	6023      	str	r3, [r4, #0]
    close();
   b7430:	4630      	mov	r0, r6
   b7432:	f7ff ffb5 	bl	b73a0 <_ZN7FatFile5closeEv>
  while (1) {
   b7436:	e7e0      	b.n	b73fa <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
   b7438:	463b      	mov	r3, r7
   b743a:	aa03      	add	r2, sp, #12
   b743c:	4621      	mov	r1, r4
   b743e:	4630      	mov	r0, r6
   b7440:	f7ff fbc0 	bl	b6bc4 <_ZN7FatFile4openEPS_P7fname_ti>
   b7444:	e7be      	b.n	b73c4 <_ZN7FatFile4openEPS_PKci+0x16>

000b7446 <_ZN7FatFile6removeEPS_PKc>:
bool FatFile::remove(FatFile* dirFile, const char* path) {
   b7446:	b500      	push	{lr}
   b7448:	b08b      	sub	sp, #44	; 0x2c
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b744a:	2300      	movs	r3, #0
   b744c:	460a      	mov	r2, r1
   b744e:	9301      	str	r3, [sp, #4]
  if (!file.open(dirFile, path, O_WRONLY)) {
   b7450:	4601      	mov	r1, r0
   b7452:	2301      	movs	r3, #1
   b7454:	a801      	add	r0, sp, #4
   b7456:	f7ff ffaa 	bl	b73ae <_ZN7FatFile4openEPS_PKci>
   b745a:	b110      	cbz	r0, b7462 <_ZN7FatFile6removeEPS_PKc+0x1c>
  return file.remove();
   b745c:	a801      	add	r0, sp, #4
   b745e:	f7ff fafb 	bl	b6a58 <_ZN7FatFile6removeEv>
}
   b7462:	b00b      	add	sp, #44	; 0x2c
   b7464:	f85d fb04 	ldr.w	pc, [sp], #4

000b7468 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   b7468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   b746c:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   b746e:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   b7470:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   b7472:	4604      	mov	r4, r0
   b7474:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   b7476:	d55b      	bpl.n	b7530 <_ZN7FatFile5writeEPKvj+0xc8>
   b7478:	7883      	ldrb	r3, [r0, #2]
   b747a:	079a      	lsls	r2, r3, #30
   b747c:	d558      	bpl.n	b7530 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   b747e:	071b      	lsls	r3, r3, #28
   b7480:	d451      	bmi.n	b7526 <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   b7482:	6963      	ldr	r3, [r4, #20]
   b7484:	43db      	mvns	r3, r3
   b7486:	42bb      	cmp	r3, r7
   b7488:	d352      	bcc.n	b7530 <_ZN7FatFile5writeEPKvj+0xc8>
   b748a:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b748c:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b7490:	6966      	ldr	r6, [r4, #20]
  while (nToWrite) {
   b7492:	f1b8 0f00 	cmp.w	r8, #0
   b7496:	f000 8091 	beq.w	b75bc <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b749a:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   b749c:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   b749e:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   b74a2:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   b74a6:	d10e      	bne.n	b74c6 <_ZN7FatFile5writeEPKvj+0x5e>
   b74a8:	b96d      	cbnz	r5, b74c6 <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
   b74aa:	6921      	ldr	r1, [r4, #16]
   b74ac:	2900      	cmp	r1, #0
   b74ae:	d046      	beq.n	b753e <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b74b0:	4652      	mov	r2, sl
   b74b2:	f000 f902 	bl	b76ba <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   b74b6:	2800      	cmp	r0, #0
   b74b8:	db3a      	blt.n	b7530 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   b74ba:	d104      	bne.n	b74c6 <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   b74bc:	4620      	mov	r0, r4
   b74be:	f7ff fd4f 	bl	b6f60 <_ZN7FatFile10addClusterEv>
   b74c2:	2800      	cmp	r0, #0
   b74c4:	d034      	beq.n	b7530 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b74c6:	6921      	ldr	r1, [r4, #16]
   b74c8:	68a0      	ldr	r0, [r4, #8]
   b74ca:	f000 f8f0 	bl	b76ae <_ZNK9FatVolume17clusterFirstBlockEm>
   b74ce:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   b74d0:	68a0      	ldr	r0, [r4, #8]
   b74d2:	b915      	cbnz	r5, b74da <_ZN7FatFile5writeEPKvj+0x72>
   b74d4:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   b74d8:	d23f      	bcs.n	b755a <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   b74da:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   b74de:	4546      	cmp	r6, r8
   b74e0:	bf28      	it	cs
   b74e2:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   b74e4:	2d00      	cmp	r5, #0
   b74e6:	d136      	bne.n	b7556 <_ZN7FatFile5writeEPKvj+0xee>
   b74e8:	6962      	ldr	r2, [r4, #20]
   b74ea:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   b74ec:	429a      	cmp	r2, r3
   b74ee:	bf34      	ite	cc
   b74f0:	2201      	movcc	r2, #1
   b74f2:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   b74f4:	3024      	adds	r0, #36	; 0x24
   b74f6:	f000 f8b7 	bl	b7668 <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   b74fa:	b1c8      	cbz	r0, b7530 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   b74fc:	4428      	add	r0, r5
   b74fe:	4632      	mov	r2, r6
   b7500:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   b7502:	4435      	add	r5, r6
      memcpy(dst, src, n);
   b7504:	f006 fa31 	bl	bd96a <memcpy>
      if (512 == (n + blockOffset)) {
   b7508:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   b750c:	d104      	bne.n	b7518 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   b750e:	68a0      	ldr	r0, [r4, #8]
   b7510:	3024      	adds	r0, #36	; 0x24
   b7512:	f000 f881 	bl	b7618 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   b7516:	b158      	cbz	r0, b7530 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   b7518:	6963      	ldr	r3, [r4, #20]
   b751a:	4433      	add	r3, r6
   b751c:	6163      	str	r3, [r4, #20]
    src += n;
   b751e:	44b1      	add	r9, r6
    nToWrite -= n;
   b7520:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   b7524:	e7b4      	b.n	b7490 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   b7526:	69c1      	ldr	r1, [r0, #28]
   b7528:	f7ff fe57 	bl	b71da <_ZN7FatFile7seekSetEm>
   b752c:	2800      	cmp	r0, #0
   b752e:	d1a8      	bne.n	b7482 <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   b7530:	7863      	ldrb	r3, [r4, #1]
   b7532:	f043 0301 	orr.w	r3, r3, #1
   b7536:	7063      	strb	r3, [r4, #1]
  return -1;
   b7538:	f04f 30ff 	mov.w	r0, #4294967295
   b753c:	e050      	b.n	b75e0 <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   b753e:	6a23      	ldr	r3, [r4, #32]
   b7540:	b93b      	cbnz	r3, b7552 <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   b7542:	4620      	mov	r0, r4
   b7544:	f7ff fd0c 	bl	b6f60 <_ZN7FatFile10addClusterEv>
   b7548:	2800      	cmp	r0, #0
   b754a:	d0f1      	beq.n	b7530 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   b754c:	6923      	ldr	r3, [r4, #16]
   b754e:	6223      	str	r3, [r4, #32]
   b7550:	e7b9      	b.n	b74c6 <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   b7552:	6123      	str	r3, [r4, #16]
   b7554:	e7b7      	b.n	b74c6 <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   b7556:	2201      	movs	r2, #1
   b7558:	e7cc      	b.n	b74f4 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   b755a:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
   b755e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   b7560:	d31b      	bcc.n	b759a <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   b7562:	f890 c004 	ldrb.w	ip, [r0, #4]
   b7566:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   b756a:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   b756c:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   b7570:	4573      	cmp	r3, lr
   b7572:	bf28      	it	cs
   b7574:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b7576:	4291      	cmp	r1, r2
      n = 512*nb;
   b7578:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b757c:	d307      	bcc.n	b758e <_ZN7FatFile5writeEPKvj+0x126>
   b757e:	441a      	add	r2, r3
   b7580:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   b7582:	bf82      	ittt	hi
   b7584:	f04f 32ff 	movhi.w	r2, #4294967295
    m_status = 0;
   b7588:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b758c:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeBlocks(block, src, nb);
   b758e:	68a5      	ldr	r5, [r4, #8]
   b7590:	464a      	mov	r2, r9
   b7592:	6828      	ldr	r0, [r5, #0]
   b7594:	f000 fc4b 	bl	b7e2e <_ZN9SdSpiCard11writeBlocksEmPKhj>
   b7598:	e7bd      	b.n	b7516 <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   b759a:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   b759c:	bf02      	ittt	eq
   b759e:	f04f 33ff 	moveq.w	r3, #4294967295
    m_status = 0;
   b75a2:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b75a6:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeBlock(block, src);
   b75a8:	68a3      	ldr	r3, [r4, #8]
   b75aa:	464a      	mov	r2, r9
   b75ac:	6818      	ldr	r0, [r3, #0]
   b75ae:	f000 fbc8 	bl	b7d42 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(block, src)) {
   b75b2:	2800      	cmp	r0, #0
   b75b4:	d0bc      	beq.n	b7530 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   b75b6:	f44f 7600 	mov.w	r6, #512	; 0x200
   b75ba:	e7ad      	b.n	b7518 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   b75bc:	69e2      	ldr	r2, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b75be:	78a3      	ldrb	r3, [r4, #2]
  if (m_curPosition > m_fileSize) {
   b75c0:	42b2      	cmp	r2, r6
   b75c2:	d204      	bcs.n	b75ce <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   b75c4:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b75c6:	f043 0304 	orr.w	r3, r3, #4
   b75ca:	70a3      	strb	r3, [r4, #2]
   b75cc:	e003      	b.n	b75d6 <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   b75ce:	4a08      	ldr	r2, [pc, #32]	; (b75f0 <_ZN7FatFile5writeEPKvj+0x188>)
   b75d0:	6812      	ldr	r2, [r2, #0]
   b75d2:	2a00      	cmp	r2, #0
   b75d4:	d1f7      	bne.n	b75c6 <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   b75d6:	f994 3002 	ldrsb.w	r3, [r4, #2]
   b75da:	2b00      	cmp	r3, #0
   b75dc:	db02      	blt.n	b75e4 <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   b75de:	4638      	mov	r0, r7
}
   b75e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   b75e4:	4620      	mov	r0, r4
   b75e6:	f7ff fea5 	bl	b7334 <_ZN7FatFile4syncEv>
   b75ea:	2800      	cmp	r0, #0
   b75ec:	d1f7      	bne.n	b75de <_ZN7FatFile5writeEPKvj+0x176>
   b75ee:	e79f      	b.n	b7530 <_ZN7FatFile5writeEPKvj+0xc8>
   b75f0:	2003e644 	.word	0x2003e644

000b75f4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b75f4:	b513      	push	{r0, r1, r4, lr}
   b75f6:	4604      	mov	r4, r0
    }
   b75f8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b75fa:	b159      	cbz	r1, b7614 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b75fc:	9101      	str	r1, [sp, #4]
   b75fe:	f006 fa52 	bl	bdaa6 <strlen>
   b7602:	6823      	ldr	r3, [r4, #0]
   b7604:	9901      	ldr	r1, [sp, #4]
   b7606:	68db      	ldr	r3, [r3, #12]
   b7608:	4602      	mov	r2, r0
   b760a:	4620      	mov	r0, r4
    }
   b760c:	b002      	add	sp, #8
   b760e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b7612:	4718      	bx	r3
    }
   b7614:	b002      	add	sp, #8
   b7616:	bd10      	pop	{r4, pc}

000b7618 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   b7618:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   b761a:	7803      	ldrb	r3, [r0, #0]
   b761c:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   b761e:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   b7620:	d520      	bpl.n	b7664 <_ZN8FatCache4syncEv+0x4c>
   b7622:	6843      	ldr	r3, [r0, #4]
   b7624:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   b7626:	f100 020c 	add.w	r2, r0, #12
   b762a:	6818      	ldr	r0, [r3, #0]
   b762c:	9201      	str	r2, [sp, #4]
   b762e:	f000 fb88 	bl	b7d42 <_ZN9SdSpiCard10writeBlockEmPKh>
   b7632:	9a01      	ldr	r2, [sp, #4]
   b7634:	4605      	mov	r5, r0
   b7636:	b918      	cbnz	r0, b7640 <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   b7638:	2500      	movs	r5, #0
}
   b763a:	4628      	mov	r0, r5
   b763c:	b003      	add	sp, #12
   b763e:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   b7640:	7823      	ldrb	r3, [r4, #0]
   b7642:	079b      	lsls	r3, r3, #30
   b7644:	d404      	bmi.n	b7650 <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   b7646:	7823      	ldrb	r3, [r4, #0]
   b7648:	f023 0301 	bic.w	r3, r3, #1
   b764c:	7023      	strb	r3, [r4, #0]
   b764e:	e7f4      	b.n	b763a <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   b7650:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   b7654:	6919      	ldr	r1, [r3, #16]
   b7656:	4401      	add	r1, r0
   b7658:	6818      	ldr	r0, [r3, #0]
   b765a:	f000 fb72 	bl	b7d42 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   b765e:	2800      	cmp	r0, #0
   b7660:	d1f1      	bne.n	b7646 <_ZN8FatCache4syncEv+0x2e>
   b7662:	e7e9      	b.n	b7638 <_ZN8FatCache4syncEv+0x20>
  return true;
   b7664:	2501      	movs	r5, #1
   b7666:	e7e8      	b.n	b763a <_ZN8FatCache4syncEv+0x22>

000b7668 <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b7668:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   b766a:	6883      	ldr	r3, [r0, #8]
   b766c:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b766e:	4604      	mov	r4, r0
   b7670:	460e      	mov	r6, r1
   b7672:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   b7674:	d009      	beq.n	b768a <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   b7676:	f7ff ffcf 	bl	b7618 <_ZN8FatCache4syncEv>
   b767a:	b908      	cbnz	r0, b7680 <_ZN8FatCache4readEmh+0x18>
  return 0;
   b767c:	2000      	movs	r0, #0
}
   b767e:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   b7680:	076b      	lsls	r3, r5, #29
   b7682:	d50a      	bpl.n	b769a <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   b7684:	2300      	movs	r3, #0
   b7686:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   b7688:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   b768a:	7822      	ldrb	r2, [r4, #0]
   b768c:	f005 0503 	and.w	r5, r5, #3
   b7690:	4620      	mov	r0, r4
   b7692:	4315      	orrs	r5, r2
   b7694:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   b7698:	e7f1      	b.n	b767e <_ZN8FatCache4readEmh+0x16>
    return m_blockDev->readBlock(block, dst);
   b769a:	6863      	ldr	r3, [r4, #4]
   b769c:	f104 020c 	add.w	r2, r4, #12
   b76a0:	6818      	ldr	r0, [r3, #0]
   b76a2:	4631      	mov	r1, r6
   b76a4:	f000 fac4 	bl	b7c30 <_ZN9SdSpiCard9readBlockEmPh>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   b76a8:	2800      	cmp	r0, #0
   b76aa:	d1eb      	bne.n	b7684 <_ZN8FatCache4readEmh+0x1c>
   b76ac:	e7e6      	b.n	b767c <_ZN8FatCache4readEmh+0x14>

000b76ae <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   b76ae:	7983      	ldrb	r3, [r0, #6]
   b76b0:	6940      	ldr	r0, [r0, #20]
   b76b2:	3902      	subs	r1, #2
   b76b4:	4099      	lsls	r1, r3
}
   b76b6:	4408      	add	r0, r1
   b76b8:	4770      	bx	lr

000b76ba <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b76ba:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   b76bc:	b570      	push	{r4, r5, r6, lr}
   b76be:	4605      	mov	r5, r0
   b76c0:	460c      	mov	r4, r1
   b76c2:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b76c4:	d802      	bhi.n	b76cc <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   b76c6:	f04f 30ff 	mov.w	r0, #4294967295
}
   b76ca:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b76cc:	69c3      	ldr	r3, [r0, #28]
   b76ce:	428b      	cmp	r3, r1
   b76d0:	d3f9      	bcc.n	b76c6 <_ZN9FatVolume6fatGetEmPm+0xc>
    return m_fatType;
   b76d2:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b76d4:	2b20      	cmp	r3, #32
   b76d6:	d116      	bne.n	b7706 <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   b76d8:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b76da:	2202      	movs	r2, #2
   b76dc:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b76e0:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b76e4:	f7ff ffc0 	bl	b7668 <_ZN8FatCache4readEmh>
    if (!pc) {
   b76e8:	2800      	cmp	r0, #0
   b76ea:	d0ec      	beq.n	b76c6 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   b76ec:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b76f0:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   b76f4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   b76f8:	69ea      	ldr	r2, [r5, #28]
   b76fa:	429a      	cmp	r2, r3
  *value = next;
   b76fc:	bf26      	itte	cs
   b76fe:	6033      	strcs	r3, [r6, #0]
  return 1;
   b7700:	2001      	movcs	r0, #1
    return 0;
   b7702:	2000      	movcc	r0, #0
   b7704:	e7e1      	b.n	b76ca <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   b7706:	2b10      	cmp	r3, #16
   b7708:	d1dd      	bne.n	b76c6 <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b770a:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b770e:	6981      	ldr	r1, [r0, #24]
   b7710:	2202      	movs	r2, #2
   b7712:	4419      	add	r1, r3
   b7714:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7718:	f7ff ffa6 	bl	b7668 <_ZN8FatCache4readEmh>
    if (!pc) {
   b771c:	2800      	cmp	r0, #0
   b771e:	d0d2      	beq.n	b76c6 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   b7720:	b2e4      	uxtb	r4, r4
   b7722:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   b7726:	e7e7      	b.n	b76f8 <_ZN9FatVolume6fatGetEmPm+0x3e>

000b7728 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b7728:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   b772a:	b538      	push	{r3, r4, r5, lr}
   b772c:	460c      	mov	r4, r1
   b772e:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b7730:	d801      	bhi.n	b7736 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   b7732:	2000      	movs	r0, #0
}
   b7734:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b7736:	69c3      	ldr	r3, [r0, #28]
   b7738:	428b      	cmp	r3, r1
   b773a:	d3fa      	bcc.n	b7732 <_ZN9FatVolume6fatPutEmm+0xa>
    return m_fatType;
   b773c:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b773e:	2b20      	cmp	r3, #32
   b7740:	d10f      	bne.n	b7762 <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   b7742:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b7744:	2203      	movs	r2, #3
   b7746:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b774a:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b774e:	f7ff ff8b 	bl	b7668 <_ZN8FatCache4readEmh>
    if (!pc) {
   b7752:	2800      	cmp	r0, #0
   b7754:	d0ed      	beq.n	b7732 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   b7756:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b775a:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   b775e:	2001      	movs	r0, #1
   b7760:	e7e8      	b.n	b7734 <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   b7762:	2b10      	cmp	r3, #16
   b7764:	d1e5      	bne.n	b7732 <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b7766:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b776a:	6981      	ldr	r1, [r0, #24]
   b776c:	2203      	movs	r2, #3
   b776e:	4419      	add	r1, r3
   b7770:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b7774:	f7ff ff78 	bl	b7668 <_ZN8FatCache4readEmh>
    if (!pc) {
   b7778:	2800      	cmp	r0, #0
   b777a:	d0da      	beq.n	b7732 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   b777c:	b2e4      	uxtb	r4, r4
   b777e:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   b7782:	e7ec      	b.n	b775e <_ZN9FatVolume6fatPutEmm+0x36>

000b7784 <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b7784:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   b7788:	68c4      	ldr	r4, [r0, #12]
   b778a:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b778c:	4605      	mov	r5, r0
   b778e:	460e      	mov	r6, r1
   b7790:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   b7792:	d301      	bcc.n	b7798 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   b7794:	2701      	movs	r7, #1
   b7796:	e001      	b.n	b779c <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b7798:	460c      	mov	r4, r1
    setStart = false;
   b779a:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   b779c:	69eb      	ldr	r3, [r5, #28]
    find++;
   b779e:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   b77a0:	42a3      	cmp	r3, r4
   b77a2:	d202      	bcs.n	b77aa <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   b77a4:	b9c7      	cbnz	r7, b77d8 <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   b77a6:	68ec      	ldr	r4, [r5, #12]
   b77a8:	e7f4      	b.n	b7794 <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   b77aa:	42a6      	cmp	r6, r4
   b77ac:	d014      	beq.n	b77d8 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   b77ae:	aa01      	add	r2, sp, #4
   b77b0:	4621      	mov	r1, r4
   b77b2:	4628      	mov	r0, r5
   b77b4:	f7ff ff81 	bl	b76ba <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b77b8:	2800      	cmp	r0, #0
   b77ba:	db0d      	blt.n	b77d8 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   b77bc:	d0ee      	beq.n	b779c <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b77be:	9b01      	ldr	r3, [sp, #4]
   b77c0:	2b00      	cmp	r3, #0
   b77c2:	d1eb      	bne.n	b779c <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   b77c4:	b107      	cbz	r7, b77c8 <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   b77c6:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   b77c8:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   b77cc:	4621      	mov	r1, r4
   b77ce:	4628      	mov	r0, r5
   b77d0:	f7ff ffaa 	bl	b7728 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   b77d4:	4607      	mov	r7, r0
   b77d6:	b920      	cbnz	r0, b77e2 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   b77d8:	2700      	movs	r7, #0
}
   b77da:	4638      	mov	r0, r7
   b77dc:	b002      	add	sp, #8
   b77de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   b77e2:	b916      	cbnz	r6, b77ea <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   b77e4:	f8c8 4000 	str.w	r4, [r8]
  return true;
   b77e8:	e7f7      	b.n	b77da <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   b77ea:	4622      	mov	r2, r4
   b77ec:	4631      	mov	r1, r6
   b77ee:	4628      	mov	r0, r5
   b77f0:	f7ff ff9a 	bl	b7728 <_ZN9FatVolume6fatPutEmm>
   b77f4:	2800      	cmp	r0, #0
   b77f6:	d1f5      	bne.n	b77e4 <_ZN9FatVolume15allocateClusterEmPm+0x60>
   b77f8:	e7ee      	b.n	b77d8 <_ZN9FatVolume15allocateClusterEmPm+0x54>

000b77fa <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   b77fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b77fc:	4605      	mov	r5, r0
   b77fe:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   b7800:	aa01      	add	r2, sp, #4
   b7802:	4621      	mov	r1, r4
   b7804:	4628      	mov	r0, r5
   b7806:	f7ff ff58 	bl	b76ba <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b780a:	1e06      	subs	r6, r0, #0
   b780c:	db10      	blt.n	b7830 <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   b780e:	2200      	movs	r2, #0
   b7810:	4621      	mov	r1, r4
   b7812:	4628      	mov	r0, r5
   b7814:	f7ff ff88 	bl	b7728 <_ZN9FatVolume6fatPutEmm>
   b7818:	b150      	cbz	r0, b7830 <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   b781a:	68eb      	ldr	r3, [r5, #12]
   b781c:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   b781e:	bf24      	itt	cs
   b7820:	f104 34ff 	addcs.w	r4, r4, #4294967295
   b7824:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   b7826:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   b7828:	2e00      	cmp	r6, #0
   b782a:	d1e9      	bne.n	b7800 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   b782c:	b002      	add	sp, #8
   b782e:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b7830:	2000      	movs	r0, #0
   b7832:	e7fb      	b.n	b782c <_ZN9FatVolume9freeChainEm+0x32>

000b7834 <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   b7834:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   b7836:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   b7838:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   b783a:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   b783c:	f04f 33ff 	mov.w	r3, #4294967295
bool FatVolume::init(uint8_t part) {
   b7840:	4604      	mov	r4, r0
  m_fatType = 0;
   b7842:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   b7844:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   b7848:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   b784a:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b784e:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   b7850:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   b7854:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   b7858:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   b785c:	460d      	mov	r5, r1
   b785e:	b1b9      	cbz	r1, b7890 <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   b7860:	2904      	cmp	r1, #4
   b7862:	d901      	bls.n	b7868 <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   b7864:	2000      	movs	r0, #0
}
   b7866:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   b7868:	4611      	mov	r1, r2
   b786a:	4630      	mov	r0, r6
   b786c:	f7ff fefc 	bl	b7668 <_ZN8FatCache4readEmh>
    if (!pc) {
   b7870:	2800      	cmp	r0, #0
   b7872:	d0f7      	beq.n	b7864 <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   b7874:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   b7878:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   b787c:	065b      	lsls	r3, r3, #25
   b787e:	d1f1      	bne.n	b7864 <_ZN9FatVolume4initEh+0x30>
   b7880:	f105 011b 	add.w	r1, r5, #27
   b7884:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   b7888:	f8d0 5006 	ldr.w	r5, [r0, #6]
   b788c:	2d00      	cmp	r5, #0
   b788e:	d0e9      	beq.n	b7864 <_ZN9FatVolume4initEh+0x30>
   b7890:	2200      	movs	r2, #0
   b7892:	4629      	mov	r1, r5
   b7894:	4630      	mov	r0, r6
   b7896:	f7ff fee7 	bl	b7668 <_ZN8FatCache4readEmh>
  if (!pc) {
   b789a:	2800      	cmp	r0, #0
   b789c:	d0e2      	beq.n	b7864 <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   b789e:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   b78a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   b78a6:	d1dd      	bne.n	b7864 <_ZN9FatVolume4initEh+0x30>
   b78a8:	7c03      	ldrb	r3, [r0, #16]
   b78aa:	2b02      	cmp	r3, #2
   b78ac:	d1da      	bne.n	b7864 <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   b78ae:	89c3      	ldrh	r3, [r0, #14]
   b78b0:	2b00      	cmp	r3, #0
   b78b2:	d0d7      	beq.n	b7864 <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   b78b4:	7b41      	ldrb	r1, [r0, #13]
   b78b6:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   b78b8:	1e4b      	subs	r3, r1, #1
   b78ba:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   b78bc:	2300      	movs	r3, #0
   b78be:	71a3      	strb	r3, [r4, #6]
   b78c0:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b78c2:	2301      	movs	r3, #1
   b78c4:	4299      	cmp	r1, r3
   b78c6:	d007      	beq.n	b78d8 <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   b78c8:	3e01      	subs	r6, #1
   b78ca:	d0cb      	beq.n	b7864 <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b78cc:	79a2      	ldrb	r2, [r4, #6]
   b78ce:	005b      	lsls	r3, r3, #1
   b78d0:	3201      	adds	r2, #1
   b78d2:	b2db      	uxtb	r3, r3
   b78d4:	71a2      	strb	r2, [r4, #6]
   b78d6:	e7f5      	b.n	b78c4 <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   b78d8:	8ac1      	ldrh	r1, [r0, #22]
   b78da:	b901      	cbnz	r1, b78de <_ZN9FatVolume4initEh+0xaa>
   b78dc:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b78de:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   b78e0:	89c3      	ldrh	r3, [r0, #14]
   b78e2:	442b      	add	r3, r5
   b78e4:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   b78e6:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   b78ea:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   b78ec:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   b78f0:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   b78f2:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   b78f6:	0149      	lsls	r1, r1, #5
   b78f8:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   b78fc:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   b7900:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   b7902:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   b7906:	b902      	cbnz	r2, b790a <_ZN9FatVolume4initEh+0xd6>
   b7908:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b790a:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   b790c:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b790e:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   b7910:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   b7912:	1c4b      	adds	r3, r1, #1
   b7914:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   b7916:	f640 73f4 	movw	r3, #4084	; 0xff4
   b791a:	4299      	cmp	r1, r3
   b791c:	d802      	bhi.n	b7924 <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   b791e:	230c      	movs	r3, #12
   b7920:	71e3      	strb	r3, [r4, #7]
   b7922:	e79f      	b.n	b7864 <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   b7924:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   b7928:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   b792a:	bf85      	ittet	hi
   b792c:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   b792e:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   b7930:	2310      	movls	r3, #16
    m_fatType = 32;
   b7932:	2320      	movhi	r3, #32
   b7934:	71e3      	strb	r3, [r4, #7]
  return true;
   b7936:	2001      	movs	r0, #1
   b7938:	e795      	b.n	b7866 <_ZN9FatVolume4initEh+0x32>

000b793a <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   b793a:	f000 bacb 	b.w	b7ed4 <_ZN14SdSpiAltDriver4sendEh>

000b793e <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spiDriver->receive();
   b793e:	f000 baae 	b.w	b7e9e <_ZN14SdSpiAltDriver7receiveEv>
	...

000b7944 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b7944:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b7946:	4e0e      	ldr	r6, [pc, #56]	; (b7980 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b7948:	460d      	mov	r5, r1
   b794a:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b794c:	f000 ffa4 	bl	b8898 <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b7950:	6833      	ldr	r3, [r6, #0]
   b7952:	1ac0      	subs	r0, r0, r3
   b7954:	4b0b      	ldr	r3, [pc, #44]	; (b7984 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   b7956:	4298      	cmp	r0, r3
   b7958:	d908      	bls.n	b796c <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b795a:	f000 ffa5 	bl	b88a8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b795e:	4b0a      	ldr	r3, [pc, #40]	; (b7988 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   b7960:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b7962:	f001 faa9 	bl	b8eb8 <spark_process>
   b7966:	f000 ff97 	bl	b8898 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   b796a:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b796c:	f000 ff9c 	bl	b88a8 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   b7970:	b280      	uxth	r0, r0
   b7972:	1b40      	subs	r0, r0, r5
}
   b7974:	42a0      	cmp	r0, r4
   b7976:	bfd4      	ite	le
   b7978:	2000      	movle	r0, #0
   b797a:	2001      	movgt	r0, #1
   b797c:	bd70      	pop	{r4, r5, r6, pc}
   b797e:	bf00      	nop
   b7980:	2003e64c 	.word	0x2003e64c
   b7984:	000186a0 	.word	0x000186a0
   b7988:	2003e740 	.word	0x2003e740

000b798c <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   b798c:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   b798e:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   b7990:	4604      	mov	r4, r0
  if (!m_spiActive) {
   b7992:	b94d      	cbnz	r5, b79a8 <_ZN9SdSpiCard8spiStartEv+0x1c>
    m_spiDriver->activate();
   b7994:	6840      	ldr	r0, [r0, #4]
   b7996:	f000 fa6b 	bl	b7e70 <_ZN14SdSpiAltDriver8activateEv>
     digitalWrite(m_csPin, LOW);
   b799a:	6863      	ldr	r3, [r4, #4]
   b799c:	4629      	mov	r1, r5
   b799e:	7d18      	ldrb	r0, [r3, #20]
   b79a0:	f005 f86f 	bl	bca82 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   b79a4:	2301      	movs	r3, #1
   b79a6:	7223      	strb	r3, [r4, #8]
  }
}
   b79a8:	bd38      	pop	{r3, r4, r5, pc}

000b79aa <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   b79aa:	b510      	push	{r4, lr}
  if (m_spiActive) {
   b79ac:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   b79ae:	4604      	mov	r4, r0
  if (m_spiActive) {
   b79b0:	b16b      	cbz	r3, b79ce <_ZN9SdSpiCard7spiStopEv+0x24>
    digitalWrite(m_csPin, HIGH);
   b79b2:	6843      	ldr	r3, [r0, #4]
   b79b4:	2101      	movs	r1, #1
   b79b6:	7d18      	ldrb	r0, [r3, #20]
   b79b8:	f005 f863 	bl	bca82 <digitalWrite>
    spiUnselect();
    spiSend(0XFF);
   b79bc:	6860      	ldr	r0, [r4, #4]
   b79be:	21ff      	movs	r1, #255	; 0xff
   b79c0:	f7ff ffbb 	bl	b793a <_ZN9SdSpiCard7spiSendEh.isra.0>
    m_spiDriver->deactivate();
   b79c4:	6860      	ldr	r0, [r4, #4]
   b79c6:	f000 fa67 	bl	b7e98 <_ZN14SdSpiAltDriver10deactivateEv>
    spiDeactivate();
    m_spiActive = false;
   b79ca:	2300      	movs	r3, #0
   b79cc:	7223      	strb	r3, [r4, #8]
  }
}
   b79ce:	bd10      	pop	{r4, pc}

000b79d0 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   b79d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b79d2:	4604      	mov	r4, r0
   b79d4:	460d      	mov	r5, r1
   b79d6:	4616      	mov	r6, r2
   b79d8:	f000 ff66 	bl	b88a8 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   b79dc:	b287      	uxth	r7, r0
  while ((m_status = spiReceive()) == 0XFF) {
   b79de:	6860      	ldr	r0, [r4, #4]
   b79e0:	f7ff ffad 	bl	b793e <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b79e4:	28ff      	cmp	r0, #255	; 0xff
   b79e6:	7260      	strb	r0, [r4, #9]
   b79e8:	d10e      	bne.n	b7a08 <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   b79ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b79ee:	4639      	mov	r1, r7
   b79f0:	4620      	mov	r0, r4
   b79f2:	f7ff ffa7 	bl	b7944 <_ZN9SdSpiCard10isTimedOutEtt>
   b79f6:	2800      	cmp	r0, #0
   b79f8:	d0f1      	beq.n	b79de <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   b79fa:	2355      	movs	r3, #85	; 0x55
  spiStop();
   b79fc:	4620      	mov	r0, r4
   b79fe:	7023      	strb	r3, [r4, #0]
   b7a00:	f7ff ffd3 	bl	b79aa <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7a04:	2000      	movs	r0, #0
}
   b7a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   b7a08:	28fe      	cmp	r0, #254	; 0xfe
   b7a0a:	d001      	beq.n	b7a10 <_ZN9SdSpiCard8readDataEPhj+0x40>
   b7a0c:	2350      	movs	r3, #80	; 0x50
   b7a0e:	e7f5      	b.n	b79fc <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   b7a10:	6860      	ldr	r0, [r4, #4]
   b7a12:	4632      	mov	r2, r6
   b7a14:	4629      	mov	r1, r5
   b7a16:	f000 fa47 	bl	b7ea8 <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   b7a1a:	7260      	strb	r0, [r4, #9]
   b7a1c:	b108      	cbz	r0, b7a22 <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   b7a1e:	2360      	movs	r3, #96	; 0x60
   b7a20:	e7ec      	b.n	b79fc <_ZN9SdSpiCard8readDataEPhj+0x2c>
  spiReceive();
   b7a22:	6860      	ldr	r0, [r4, #4]
   b7a24:	f7ff ff8b 	bl	b793e <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
   b7a28:	6860      	ldr	r0, [r4, #4]
   b7a2a:	f7ff ff88 	bl	b793e <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
   b7a2e:	2001      	movs	r0, #1
   b7a30:	e7e9      	b.n	b7a06 <_ZN9SdSpiCard8readDataEPhj+0x36>

000b7a32 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   b7a32:	b570      	push	{r4, r5, r6, lr}
   b7a34:	4604      	mov	r4, r0
   b7a36:	460e      	mov	r6, r1
   b7a38:	f000 ff36 	bl	b88a8 <HAL_Timer_Get_Milli_Seconds>
   b7a3c:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   b7a3e:	4632      	mov	r2, r6
   b7a40:	4629      	mov	r1, r5
   b7a42:	4620      	mov	r0, r4
   b7a44:	f7ff ff7e 	bl	b7944 <_ZN9SdSpiCard10isTimedOutEtt>
   b7a48:	b930      	cbnz	r0, b7a58 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
    if (spiReceive() == 0XFF) {
   b7a4a:	6860      	ldr	r0, [r4, #4]
   b7a4c:	f7ff ff77 	bl	b793e <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7a50:	28ff      	cmp	r0, #255	; 0xff
   b7a52:	d1f4      	bne.n	b7a3e <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   b7a54:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   b7a56:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b7a58:	2000      	movs	r0, #0
   b7a5a:	e7fc      	b.n	b7a56 <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000b7a5c <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b7a5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   b7a5e:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b7a60:	9201      	str	r2, [sp, #4]
   b7a62:	4604      	mov	r4, r0
   b7a64:	460d      	mov	r5, r1
  if (!m_spiActive) {
   b7a66:	b90b      	cbnz	r3, b7a6c <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   b7a68:	f7ff ff90 	bl	b798c <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   b7a6c:	b125      	cbz	r5, b7a78 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   b7a6e:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b7a72:	4620      	mov	r0, r4
   b7a74:	f7ff ffdd 	bl	b7a32 <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
   b7a78:	6860      	ldr	r0, [r4, #4]
   b7a7a:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   b7a7e:	f7ff ff5c 	bl	b793a <_ZN9SdSpiCard7spiSendEh.isra.0>
   b7a82:	2603      	movs	r6, #3
    spiSend(pa[i]);
   b7a84:	af01      	add	r7, sp, #4
   b7a86:	5db9      	ldrb	r1, [r7, r6]
   b7a88:	6860      	ldr	r0, [r4, #4]
   b7a8a:	f7ff ff56 	bl	b793a <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
   b7a8e:	3e01      	subs	r6, #1
   b7a90:	d2f9      	bcs.n	b7a86 <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   b7a92:	2d00      	cmp	r5, #0
   b7a94:	6860      	ldr	r0, [r4, #4]
   b7a96:	bf0c      	ite	eq
   b7a98:	2195      	moveq	r1, #149	; 0x95
   b7a9a:	2187      	movne	r1, #135	; 0x87
   b7a9c:	f7ff ff4d 	bl	b793a <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiReceive();
   b7aa0:	6860      	ldr	r0, [r4, #4]
   b7aa2:	f7ff ff4c 	bl	b793e <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7aa6:	250b      	movs	r5, #11
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   b7aa8:	6860      	ldr	r0, [r4, #4]
   b7aaa:	f7ff ff48 	bl	b793e <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7aae:	0603      	lsls	r3, r0, #24
   b7ab0:	7260      	strb	r0, [r4, #9]
   b7ab2:	d503      	bpl.n	b7abc <_ZN9SdSpiCard11cardCommandEhm+0x60>
   b7ab4:	3d01      	subs	r5, #1
   b7ab6:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b7aba:	d1f5      	bne.n	b7aa8 <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   b7abc:	b003      	add	sp, #12
   b7abe:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7ac0 <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   b7ac0:	b570      	push	{r4, r5, r6, lr}
   b7ac2:	4604      	mov	r4, r0
   b7ac4:	460d      	mov	r5, r1
   b7ac6:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   b7ac8:	2137      	movs	r1, #55	; 0x37
   b7aca:	2200      	movs	r2, #0
   b7acc:	f7ff ffc6 	bl	b7a5c <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   b7ad0:	4632      	mov	r2, r6
   b7ad2:	4629      	mov	r1, r5
   b7ad4:	4620      	mov	r0, r4
  }
   b7ad6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   b7ada:	f7ff bfbf 	b.w	b7a5c <_ZN9SdSpiCard11cardCommandEhm>
	...

000b7ae0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b7ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   b7ae4:	2500      	movs	r5, #0
   b7ae6:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   b7ae8:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   b7aea:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   b7aec:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b7aee:	4604      	mov	r4, r0
   b7af0:	4690      	mov	r8, r2
   b7af2:	461e      	mov	r6, r3
   b7af4:	f000 fed8 	bl	b88a8 <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   b7af8:	4641      	mov	r1, r8
   b7afa:	4607      	mov	r7, r0
   b7afc:	6860      	ldr	r0, [r4, #4]
   b7afe:	f000 f9bb 	bl	b7e78 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   b7b02:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   b7b04:	4a49      	ldr	r2, [pc, #292]	; (b7c2c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   b7b06:	721d      	strb	r5, [r3, #8]
   b7b08:	2501      	movs	r5, #1
   b7b0a:	60da      	str	r2, [r3, #12]
   b7b0c:	821d      	strh	r5, [r3, #16]
  spiStart();
   b7b0e:	4620      	mov	r0, r4
   b7b10:	f7ff ff3c 	bl	b798c <_ZN9SdSpiCard8spiStartEv>
   b7b14:	6863      	ldr	r3, [r4, #4]
   b7b16:	4629      	mov	r1, r5
   b7b18:	7d18      	ldrb	r0, [r3, #20]
   b7b1a:	f004 ffb2 	bl	bca82 <digitalWrite>
   b7b1e:	250a      	movs	r5, #10
    spiSend(0XFF);
   b7b20:	6860      	ldr	r0, [r4, #4]
   b7b22:	21ff      	movs	r1, #255	; 0xff
  for (uint8_t i = 0; i < 10; i++) {
   b7b24:	3d01      	subs	r5, #1
    spiSend(0XFF);
   b7b26:	f7ff ff08 	bl	b793a <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
   b7b2a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b7b2e:	d1f7      	bne.n	b7b20 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
     digitalWrite(m_csPin, LOW);
   b7b30:	6863      	ldr	r3, [r4, #4]
   b7b32:	4629      	mov	r1, r5
   b7b34:	7d18      	ldrb	r0, [r3, #20]
   b7b36:	f004 ffa4 	bl	bca82 <digitalWrite>
  }
   b7b3a:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   b7b3c:	2200      	movs	r2, #0
   b7b3e:	4611      	mov	r1, r2
   b7b40:	4620      	mov	r0, r4
   b7b42:	f7ff ff8b 	bl	b7a5c <_ZN9SdSpiCard11cardCommandEhm>
   b7b46:	2801      	cmp	r0, #1
   b7b48:	4680      	mov	r8, r0
   b7b4a:	d018      	beq.n	b7b7e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   b7b4c:	3d01      	subs	r5, #1
   b7b4e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b7b52:	d107      	bne.n	b7b64 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   b7b54:	2320      	movs	r3, #32
  spiStop();
   b7b56:	4620      	mov	r0, r4
   b7b58:	7023      	strb	r3, [r4, #0]
   b7b5a:	f7ff ff26 	bl	b79aa <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7b5e:	2000      	movs	r0, #0
}
   b7b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiSend(STOP_TRAN_TOKEN);
   b7b64:	6860      	ldr	r0, [r4, #4]
   b7b66:	21fd      	movs	r1, #253	; 0xfd
   b7b68:	f7ff fee7 	bl	b793a <_ZN9SdSpiCard7spiSendEh.isra.0>
   b7b6c:	f44f 7802 	mov.w	r8, #520	; 0x208
      spiReceive();
   b7b70:	6860      	ldr	r0, [r4, #4]
   b7b72:	f7ff fee4 	bl	b793e <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (int i = 0; i < 520; i++) {
   b7b76:	f1b8 0801 	subs.w	r8, r8, #1
   b7b7a:	d1f9      	bne.n	b7b70 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   b7b7c:	e7de      	b.n	b7b3c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   b7b7e:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   b7b82:	2108      	movs	r1, #8
   b7b84:	4620      	mov	r0, r4
   b7b86:	f7ff ff69 	bl	b7a5c <_ZN9SdSpiCard11cardCommandEhm>
   b7b8a:	2805      	cmp	r0, #5
   b7b8c:	d114      	bne.n	b7bb8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   b7b8e:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b7b92:	2500      	movs	r5, #0
   b7b94:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   b7b96:	462a      	mov	r2, r5
   b7b98:	2129      	movs	r1, #41	; 0x29
   b7b9a:	4620      	mov	r0, r4
   b7b9c:	f7ff ff90 	bl	b7ac0 <_ZN9SdSpiCard8cardAcmdEhm>
   b7ba0:	4602      	mov	r2, r0
   b7ba2:	b1d8      	cbz	r0, b7bdc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   b7ba4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   b7ba8:	4639      	mov	r1, r7
   b7baa:	4620      	mov	r0, r4
   b7bac:	f7ff feca 	bl	b7944 <_ZN9SdSpiCard10isTimedOutEtt>
   b7bb0:	2800      	cmp	r0, #0
   b7bb2:	d0f0      	beq.n	b7b96 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   b7bb4:	2343      	movs	r3, #67	; 0x43
   b7bb6:	e7ce      	b.n	b7b56 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   b7bb8:	2504      	movs	r5, #4
      m_status = spiReceive();
   b7bba:	6860      	ldr	r0, [r4, #4]
   b7bbc:	f7ff febf 	bl	b793e <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
   b7bc0:	3d01      	subs	r5, #1
   b7bc2:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   b7bc6:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   b7bc8:	d1f7      	bne.n	b7bba <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   b7bca:	28aa      	cmp	r0, #170	; 0xaa
   b7bcc:	d104      	bne.n	b7bd8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   b7bce:	2302      	movs	r3, #2
   b7bd0:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b7bd2:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   b7bd6:	e7dd      	b.n	b7b94 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   b7bd8:	2325      	movs	r3, #37	; 0x25
   b7bda:	e7bc      	b.n	b7b56 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   b7bdc:	7aa3      	ldrb	r3, [r4, #10]
   b7bde:	2b02      	cmp	r3, #2
   b7be0:	d118      	bne.n	b7c14 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   b7be2:	213a      	movs	r1, #58	; 0x3a
   b7be4:	4620      	mov	r0, r4
   b7be6:	f7ff ff39 	bl	b7a5c <_ZN9SdSpiCard11cardCommandEhm>
   b7bea:	b108      	cbz	r0, b7bf0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   b7bec:	2337      	movs	r3, #55	; 0x37
   b7bee:	e7b2      	b.n	b7b56 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    if ((spiReceive() & 0XC0) == 0XC0) {
   b7bf0:	6860      	ldr	r0, [r4, #4]
   b7bf2:	f7ff fea4 	bl	b793e <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7bf6:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   b7bfa:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   b7bfc:	bf04      	itt	eq
   b7bfe:	2303      	moveq	r3, #3
   b7c00:	72a3      	strbeq	r3, [r4, #10]
      spiReceive();
   b7c02:	6860      	ldr	r0, [r4, #4]
   b7c04:	f7ff fe9b 	bl	b793e <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7c08:	6860      	ldr	r0, [r4, #4]
   b7c0a:	f7ff fe98 	bl	b793e <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7c0e:	6860      	ldr	r0, [r4, #4]
   b7c10:	f7ff fe95 	bl	b793e <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiStop();
   b7c14:	4620      	mov	r0, r4
   b7c16:	f7ff fec8 	bl	b79aa <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   b7c1a:	6863      	ldr	r3, [r4, #4]
   b7c1c:	7930      	ldrb	r0, [r6, #4]
   b7c1e:	68b1      	ldr	r1, [r6, #8]
   b7c20:	89b2      	ldrh	r2, [r6, #12]
   b7c22:	821a      	strh	r2, [r3, #16]
   b7c24:	7218      	strb	r0, [r3, #8]
   b7c26:	60d9      	str	r1, [r3, #12]
  return true;
   b7c28:	2001      	movs	r0, #1
   b7c2a:	e799      	b.n	b7b60 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   b7c2c:	0003d090 	.word	0x0003d090

000b7c30 <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b7c30:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b7c32:	7a83      	ldrb	r3, [r0, #10]
   b7c34:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b7c36:	bf18      	it	ne
   b7c38:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b7c3a:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   b7c3c:	460a      	mov	r2, r1
   b7c3e:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b7c40:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   b7c42:	f7ff ff0b 	bl	b7a5c <_ZN9SdSpiCard11cardCommandEhm>
   b7c46:	b130      	cbz	r0, b7c56 <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   b7c48:	2330      	movs	r3, #48	; 0x30
   b7c4a:	7023      	strb	r3, [r4, #0]
  spiStop();
   b7c4c:	4620      	mov	r0, r4
   b7c4e:	f7ff feac 	bl	b79aa <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7c52:	2500      	movs	r5, #0
   b7c54:	e00b      	b.n	b7c6e <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   b7c56:	4629      	mov	r1, r5
   b7c58:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7c5c:	4620      	mov	r0, r4
   b7c5e:	f7ff feb7 	bl	b79d0 <_ZN9SdSpiCard8readDataEPhj>
   b7c62:	4605      	mov	r5, r0
   b7c64:	2800      	cmp	r0, #0
   b7c66:	d0f1      	beq.n	b7c4c <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   b7c68:	4620      	mov	r0, r4
   b7c6a:	f7ff fe9e 	bl	b79aa <_ZN9SdSpiCard7spiStopEv>
}
   b7c6e:	4628      	mov	r0, r5
   b7c70:	bd38      	pop	{r3, r4, r5, pc}

000b7c72 <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b7c72:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b7c74:	7a83      	ldrb	r3, [r0, #10]
   b7c76:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b7c78:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b7c7a:	bf18      	it	ne
   b7c7c:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   b7c7e:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b7c80:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   b7c82:	f7ff feeb 	bl	b7a5c <_ZN9SdSpiCard11cardCommandEhm>
   b7c86:	b130      	cbz	r0, b7c96 <_ZN9SdSpiCard9readStartEm+0x24>
   b7c88:	2331      	movs	r3, #49	; 0x31
  spiStop();
   b7c8a:	4620      	mov	r0, r4
   b7c8c:	7023      	strb	r3, [r4, #0]
   b7c8e:	f7ff fe8c 	bl	b79aa <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7c92:	2000      	movs	r0, #0
}
   b7c94:	bd10      	pop	{r4, pc}
  return true;
   b7c96:	2001      	movs	r0, #1
   b7c98:	e7fc      	b.n	b7c94 <_ZN9SdSpiCard9readStartEm+0x22>

000b7c9a <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   b7c9a:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   b7c9c:	2200      	movs	r2, #0
   b7c9e:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   b7ca0:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   b7ca2:	f7ff fedb 	bl	b7a5c <_ZN9SdSpiCard11cardCommandEhm>
   b7ca6:	b130      	cbz	r0, b7cb6 <_ZN9SdSpiCard8readStopEv+0x1c>
   b7ca8:	2328      	movs	r3, #40	; 0x28
  spiStop();
   b7caa:	4620      	mov	r0, r4
   b7cac:	7023      	strb	r3, [r4, #0]
   b7cae:	f7ff fe7c 	bl	b79aa <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7cb2:	2000      	movs	r0, #0
}
   b7cb4:	bd10      	pop	{r4, pc}
  spiStop();
   b7cb6:	4620      	mov	r0, r4
   b7cb8:	f7ff fe77 	bl	b79aa <_ZN9SdSpiCard7spiStopEv>
  return true;
   b7cbc:	2001      	movs	r0, #1
   b7cbe:	e7f9      	b.n	b7cb4 <_ZN9SdSpiCard8readStopEv+0x1a>

000b7cc0 <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   b7cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7cc2:	4604      	mov	r4, r0
   b7cc4:	4616      	mov	r6, r2
   b7cc6:	461f      	mov	r7, r3
  if (!readStart(block)) {
   b7cc8:	f7ff ffd3 	bl	b7c72 <_ZN9SdSpiCard9readStartEm>
   b7ccc:	b168      	cbz	r0, b7cea <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   b7cce:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   b7cd0:	b2ab      	uxth	r3, r5
   b7cd2:	429f      	cmp	r7, r3
   b7cd4:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   b7cd8:	d909      	bls.n	b7cee <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   b7cda:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7cde:	4620      	mov	r0, r4
   b7ce0:	f7ff fe76 	bl	b79d0 <_ZN9SdSpiCard8readDataEPhj>
   b7ce4:	3501      	adds	r5, #1
   b7ce6:	2800      	cmp	r0, #0
   b7ce8:	d1f2      	bne.n	b7cd0 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   b7cea:	2000      	movs	r0, #0
   b7cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   b7cee:	4620      	mov	r0, r4
}
   b7cf0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   b7cf4:	f7ff bfd1 	b.w	b7c9a <_ZN9SdSpiCard8readStopEv>

000b7cf8 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   b7cf8:	b538      	push	{r3, r4, r5, lr}
   b7cfa:	4604      	mov	r4, r0
   b7cfc:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
   b7cfe:	6840      	ldr	r0, [r0, #4]
   b7d00:	f7ff fe1b 	bl	b793a <_ZN9SdSpiCard7spiSendEh.isra.0>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   b7d04:	f44f 7200 	mov.w	r2, #512	; 0x200
   b7d08:	6860      	ldr	r0, [r4, #4]
   b7d0a:	4629      	mov	r1, r5
   b7d0c:	f000 f8e6 	bl	b7edc <_ZN14SdSpiAltDriver4sendEPKhj>
  spiSend(src, 512);
  spiSend(crc >> 8);
   b7d10:	6860      	ldr	r0, [r4, #4]
   b7d12:	21ff      	movs	r1, #255	; 0xff
   b7d14:	f7ff fe11 	bl	b793a <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
   b7d18:	6860      	ldr	r0, [r4, #4]
   b7d1a:	21ff      	movs	r1, #255	; 0xff
   b7d1c:	f7ff fe0d 	bl	b793a <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
   b7d20:	6860      	ldr	r0, [r4, #4]
   b7d22:	f7ff fe0c 	bl	b793e <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7d26:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   b7d28:	f000 001f 	and.w	r0, r0, #31
   b7d2c:	2805      	cmp	r0, #5
   b7d2e:	d006      	beq.n	b7d3e <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   b7d30:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   b7d32:	4620      	mov	r0, r4
   b7d34:	7023      	strb	r3, [r4, #0]
   b7d36:	f7ff fe38 	bl	b79aa <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7d3a:	2000      	movs	r0, #0
}
   b7d3c:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   b7d3e:	2001      	movs	r0, #1
   b7d40:	e7fc      	b.n	b7d3c <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000b7d42 <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b7d42:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b7d44:	7a83      	ldrb	r3, [r0, #10]
   b7d46:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b7d48:	bf18      	it	ne
   b7d4a:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b7d4c:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   b7d4e:	460a      	mov	r2, r1
   b7d50:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b7d52:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   b7d54:	f7ff fe82 	bl	b7a5c <_ZN9SdSpiCard11cardCommandEhm>
   b7d58:	4606      	mov	r6, r0
   b7d5a:	b130      	cbz	r0, b7d6a <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   b7d5c:	2332      	movs	r3, #50	; 0x32
   b7d5e:	7023      	strb	r3, [r4, #0]
  spiStop();
   b7d60:	4620      	mov	r0, r4
   b7d62:	f7ff fe22 	bl	b79aa <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7d66:	2500      	movs	r5, #0
   b7d68:	e01f      	b.n	b7daa <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   b7d6a:	462a      	mov	r2, r5
   b7d6c:	21fe      	movs	r1, #254	; 0xfe
   b7d6e:	4620      	mov	r0, r4
   b7d70:	f7ff ffc2 	bl	b7cf8 <_ZN9SdSpiCard9writeDataEhPKh>
   b7d74:	2800      	cmp	r0, #0
   b7d76:	d0f3      	beq.n	b7d60 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7d78:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b7d7c:	4620      	mov	r0, r4
   b7d7e:	f7ff fe58 	bl	b7a32 <_ZN9SdSpiCard11waitNotBusyEt>
   b7d82:	4605      	mov	r5, r0
   b7d84:	b908      	cbnz	r0, b7d8a <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   b7d86:	235a      	movs	r3, #90	; 0x5a
   b7d88:	e7e9      	b.n	b7d5e <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   b7d8a:	4632      	mov	r2, r6
   b7d8c:	210d      	movs	r1, #13
   b7d8e:	4620      	mov	r0, r4
   b7d90:	f7ff fe64 	bl	b7a5c <_ZN9SdSpiCard11cardCommandEhm>
   b7d94:	b108      	cbz	r0, b7d9a <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   b7d96:	2329      	movs	r3, #41	; 0x29
   b7d98:	e7e1      	b.n	b7d5e <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
   b7d9a:	6860      	ldr	r0, [r4, #4]
   b7d9c:	f7ff fdcf 	bl	b793e <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b7da0:	2800      	cmp	r0, #0
   b7da2:	d1f8      	bne.n	b7d96 <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   b7da4:	4620      	mov	r0, r4
   b7da6:	f7ff fe00 	bl	b79aa <_ZN9SdSpiCard7spiStopEv>
}
   b7daa:	4628      	mov	r0, r5
   b7dac:	bd70      	pop	{r4, r5, r6, pc}

000b7dae <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   b7dae:	b513      	push	{r0, r1, r4, lr}
   b7db0:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7db2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   b7db6:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7db8:	f7ff fe3b 	bl	b7a32 <_ZN9SdSpiCard11waitNotBusyEt>
   b7dbc:	9a01      	ldr	r2, [sp, #4]
   b7dbe:	b930      	cbnz	r0, b7dce <_ZN9SdSpiCard9writeDataEPKh+0x20>
   b7dc0:	235b      	movs	r3, #91	; 0x5b
   b7dc2:	7023      	strb	r3, [r4, #0]
  spiStop();
   b7dc4:	4620      	mov	r0, r4
   b7dc6:	f7ff fdf0 	bl	b79aa <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7dca:	2000      	movs	r0, #0
   b7dcc:	e005      	b.n	b7dda <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   b7dce:	21fc      	movs	r1, #252	; 0xfc
   b7dd0:	4620      	mov	r0, r4
   b7dd2:	f7ff ff91 	bl	b7cf8 <_ZN9SdSpiCard9writeDataEhPKh>
   b7dd6:	2800      	cmp	r0, #0
   b7dd8:	d0f4      	beq.n	b7dc4 <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   b7dda:	b002      	add	sp, #8
   b7ddc:	bd10      	pop	{r4, pc}

000b7dde <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7dde:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   b7de0:	7a83      	ldrb	r3, [r0, #10]
   b7de2:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7de4:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b7de6:	bf18      	it	ne
   b7de8:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   b7dea:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b7dec:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   b7dee:	f7ff fe35 	bl	b7a5c <_ZN9SdSpiCard11cardCommandEhm>
   b7df2:	b130      	cbz	r0, b7e02 <_ZN9SdSpiCard10writeStartEm+0x24>
   b7df4:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   b7df6:	4620      	mov	r0, r4
   b7df8:	7023      	strb	r3, [r4, #0]
   b7dfa:	f7ff fdd6 	bl	b79aa <_ZN9SdSpiCard7spiStopEv>
  return false;
   b7dfe:	2000      	movs	r0, #0
}
   b7e00:	bd10      	pop	{r4, pc}
  return true;
   b7e02:	2001      	movs	r0, #1
   b7e04:	e7fc      	b.n	b7e00 <_ZN9SdSpiCard10writeStartEm+0x22>

000b7e06 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   b7e06:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7e08:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   b7e0c:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b7e0e:	f7ff fe10 	bl	b7a32 <_ZN9SdSpiCard11waitNotBusyEt>
   b7e12:	4605      	mov	r5, r0
   b7e14:	b930      	cbnz	r0, b7e24 <_ZN9SdSpiCard9writeStopEv+0x1e>
   b7e16:	2356      	movs	r3, #86	; 0x56
   b7e18:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   b7e1a:	4620      	mov	r0, r4
   b7e1c:	f7ff fdc5 	bl	b79aa <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   b7e20:	4628      	mov	r0, r5
   b7e22:	bd38      	pop	{r3, r4, r5, pc}
  spiSend(STOP_TRAN_TOKEN);
   b7e24:	6860      	ldr	r0, [r4, #4]
   b7e26:	21fd      	movs	r1, #253	; 0xfd
   b7e28:	f7ff fd87 	bl	b793a <_ZN9SdSpiCard7spiSendEh.isra.0>
   b7e2c:	e7f5      	b.n	b7e1a <_ZN9SdSpiCard9writeStopEv+0x14>

000b7e2e <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   b7e2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b7e30:	4604      	mov	r4, r0
   b7e32:	4616      	mov	r6, r2
   b7e34:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   b7e36:	f7ff ffd2 	bl	b7dde <_ZN9SdSpiCard10writeStartEm>
   b7e3a:	b170      	cbz	r0, b7e5a <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b7e3c:	2500      	movs	r5, #0
   b7e3e:	42bd      	cmp	r5, r7
   b7e40:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   b7e44:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   b7e46:	d004      	beq.n	b7e52 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   b7e48:	f7ff ffb1 	bl	b7dae <_ZN9SdSpiCard9writeDataEPKh>
   b7e4c:	b128      	cbz	r0, b7e5a <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b7e4e:	3501      	adds	r5, #1
   b7e50:	e7f5      	b.n	b7e3e <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   b7e52:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   b7e56:	f7ff bfd6 	b.w	b7e06 <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   b7e5a:	4620      	mov	r0, r4
   b7e5c:	f7ff fda5 	bl	b79aa <_ZN9SdSpiCard7spiStopEv>
}
   b7e60:	2000      	movs	r0, #0
   b7e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b7e64 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   b7e64:	4b01      	ldr	r3, [pc, #4]	; (b7e6c <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   b7e66:	2201      	movs	r2, #1
   b7e68:	701a      	strb	r2, [r3, #0]
}
   b7e6a:	4770      	bx	lr
   b7e6c:	2003e650 	.word	0x2003e650

000b7e70 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   b7e70:	1d01      	adds	r1, r0, #4
   b7e72:	6800      	ldr	r0, [r0, #0]
   b7e74:	f001 b934 	b.w	b90e0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b7e78 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   b7e78:	b510      	push	{r4, lr}
   b7e7a:	4604      	mov	r4, r0
  m_csPin = csPin;
   b7e7c:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   b7e7e:	6800      	ldr	r0, [r0, #0]
   b7e80:	f001 f900 	bl	b9084 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   b7e84:	7d20      	ldrb	r0, [r4, #20]
   b7e86:	2101      	movs	r1, #1
   b7e88:	f004 fdea 	bl	bca60 <pinMode>
  digitalWrite(m_csPin, HIGH);
   b7e8c:	7d20      	ldrb	r0, [r4, #20]
   b7e8e:	2101      	movs	r1, #1
}
   b7e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   b7e94:	f004 bdf5 	b.w	bca82 <digitalWrite>

000b7e98 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   b7e98:	6800      	ldr	r0, [r0, #0]
   b7e9a:	f001 b907 	b.w	b90ac <_ZN8SPIClass14endTransactionEv>

000b7e9e <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   b7e9e:	6800      	ldr	r0, [r0, #0]
   b7ea0:	21ff      	movs	r1, #255	; 0xff
   b7ea2:	f001 b98b 	b.w	b91bc <_ZN8SPIClass8transferEh>
	...

000b7ea8 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   b7ea8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7eaa:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b7eac:	4a07      	ldr	r2, [pc, #28]	; (b7ecc <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   b7eae:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b7eb0:	2500      	movs	r5, #0
   b7eb2:	4c07      	ldr	r4, [pc, #28]	; (b7ed0 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b7eb4:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b7eb6:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b7eb8:	460a      	mov	r2, r1
   b7eba:	4629      	mov	r1, r5
   b7ebc:	f001 f984 	bl	b91c8 <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   b7ec0:	7823      	ldrb	r3, [r4, #0]
   b7ec2:	2b00      	cmp	r3, #0
   b7ec4:	d0fc      	beq.n	b7ec0 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   b7ec6:	2000      	movs	r0, #0
   b7ec8:	b003      	add	sp, #12
   b7eca:	bd30      	pop	{r4, r5, pc}
   b7ecc:	000b7e65 	.word	0x000b7e65
   b7ed0:	2003e650 	.word	0x2003e650

000b7ed4 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   b7ed4:	6800      	ldr	r0, [r0, #0]
   b7ed6:	f001 b971 	b.w	b91bc <_ZN8SPIClass8transferEh>
	...

000b7edc <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   b7edc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7ede:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7ee0:	4a06      	ldr	r2, [pc, #24]	; (b7efc <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   b7ee2:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b7ee4:	2500      	movs	r5, #0
   b7ee6:	4c06      	ldr	r4, [pc, #24]	; (b7f00 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7ee8:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b7eea:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b7eec:	462a      	mov	r2, r5
   b7eee:	f001 f96b 	bl	b91c8 <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   b7ef2:	7823      	ldrb	r3, [r4, #0]
   b7ef4:	2b00      	cmp	r3, #0
   b7ef6:	d0fc      	beq.n	b7ef2 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   b7ef8:	b003      	add	sp, #12
   b7efa:	bd30      	pop	{r4, r5, pc}
   b7efc:	000b7e65 	.word	0x000b7e65
   b7f00:	2003e650 	.word	0x2003e650

000b7f04 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b7f04:	b510      	push	{r4, lr}
   b7f06:	4b04      	ldr	r3, [pc, #16]	; (b7f18 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b7f08:	6003      	str	r3, [r0, #0]
   b7f0a:	4604      	mov	r4, r0
  if(buffer) {
   b7f0c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b7f0e:	b108      	cbz	r0, b7f14 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b7f10:	f001 f80a 	bl	b8f28 <free>
    buffer = NULL;
  }
}
   b7f14:	4620      	mov	r0, r4
   b7f16:	bd10      	pop	{r4, pc}
   b7f18:	000c0bd4 	.word	0x000c0bd4

000b7f1c <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b7f1c:	b510      	push	{r4, lr}
   b7f1e:	4604      	mov	r4, r0
}
   b7f20:	f7ff fff0 	bl	b7f04 <_ZN16Adafruit_SSD1306D1Ev>
   b7f24:	4620      	mov	r0, r4
   b7f26:	2150      	movs	r1, #80	; 0x50
   b7f28:	f7fc f8b9 	bl	b409e <_ZdlPvj>
   b7f2c:	4620      	mov	r0, r4
   b7f2e:	bd10      	pop	{r4, pc}

000b7f30 <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b7f30:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b7f32:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b7f34:	db4b      	blt.n	b7fce <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b7f36:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b7f3a:	428c      	cmp	r4, r1
   b7f3c:	dd47      	ble.n	b7fce <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b7f3e:	2a00      	cmp	r2, #0
   b7f40:	db45      	blt.n	b7fce <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b7f42:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b7f46:	4294      	cmp	r4, r2
   b7f48:	dd41      	ble.n	b7fce <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b7f4a:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b7f4c:	2c02      	cmp	r4, #2
   b7f4e:	d01f      	beq.n	b7f90 <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b7f50:	2c03      	cmp	r4, #3
   b7f52:	d026      	beq.n	b7fa2 <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b7f54:	2c01      	cmp	r4, #1
   b7f56:	d104      	bne.n	b7f62 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b7f58:	8904      	ldrh	r4, [r0, #8]
   b7f5a:	43d2      	mvns	r2, r2
   b7f5c:	4414      	add	r4, r2
      break;
   b7f5e:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b7f60:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b7f62:	2b01      	cmp	r3, #1
   b7f64:	d023      	beq.n	b7fae <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b7f66:	2b02      	cmp	r3, #2
   b7f68:	d032      	beq.n	b7fd0 <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b7f6a:	bb83      	cbnz	r3, b7fce <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b7f6c:	2a00      	cmp	r2, #0
   b7f6e:	4613      	mov	r3, r2
   b7f70:	8904      	ldrh	r4, [r0, #8]
   b7f72:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b7f74:	bfb8      	it	lt
   b7f76:	1dd3      	addlt	r3, r2, #7
   b7f78:	10db      	asrs	r3, r3, #3
   b7f7a:	fb13 1104 	smlabb	r1, r3, r4, r1
   b7f7e:	f002 0207 	and.w	r2, r2, #7
   b7f82:	2301      	movs	r3, #1
   b7f84:	4093      	lsls	r3, r2
   b7f86:	5c42      	ldrb	r2, [r0, r1]
   b7f88:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b7f8c:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b7f8e:	e01e      	b.n	b7fce <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b7f90:	8904      	ldrh	r4, [r0, #8]
   b7f92:	3c01      	subs	r4, #1
   b7f94:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b7f96:	8944      	ldrh	r4, [r0, #10]
   b7f98:	43d2      	mvns	r2, r2
   b7f9a:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b7f9c:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b7f9e:	b212      	sxth	r2, r2
      break;
   b7fa0:	e7df      	b.n	b7f62 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b7fa2:	8944      	ldrh	r4, [r0, #10]
   b7fa4:	3c01      	subs	r4, #1
   b7fa6:	1a64      	subs	r4, r4, r1
      break;
   b7fa8:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b7faa:	b222      	sxth	r2, r4
      break;
   b7fac:	e7d9      	b.n	b7f62 <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b7fae:	2a00      	cmp	r2, #0
   b7fb0:	8904      	ldrh	r4, [r0, #8]
   b7fb2:	4613      	mov	r3, r2
   b7fb4:	bfb8      	it	lt
   b7fb6:	1dd3      	addlt	r3, r2, #7
   b7fb8:	10db      	asrs	r3, r3, #3
   b7fba:	fb13 1104 	smlabb	r1, r3, r4, r1
   b7fbe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b7fc0:	f002 0007 	and.w	r0, r2, #7
   b7fc4:	2201      	movs	r2, #1
   b7fc6:	4082      	lsls	r2, r0
   b7fc8:	5c58      	ldrb	r0, [r3, r1]
   b7fca:	4302      	orrs	r2, r0
   b7fcc:	545a      	strb	r2, [r3, r1]
}
   b7fce:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b7fd0:	2a00      	cmp	r2, #0
   b7fd2:	4613      	mov	r3, r2
   b7fd4:	8904      	ldrh	r4, [r0, #8]
   b7fd6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b7fd8:	bfb8      	it	lt
   b7fda:	1dd3      	addlt	r3, r2, #7
   b7fdc:	10db      	asrs	r3, r3, #3
   b7fde:	fb13 1104 	smlabb	r1, r3, r4, r1
   b7fe2:	f002 0207 	and.w	r2, r2, #7
   b7fe6:	2301      	movs	r3, #1
   b7fe8:	fa03 f202 	lsl.w	r2, r3, r2
   b7fec:	5c43      	ldrb	r3, [r0, r1]
   b7fee:	405a      	eors	r2, r3
   b7ff0:	e7cc      	b.n	b7f8c <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b7ff4 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   b7ff4:	b570      	push	{r4, r5, r6, lr}
   b7ff6:	4604      	mov	r4, r0
   b7ff8:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   b7ffa:	2600      	movs	r6, #0
   b7ffc:	f7fd ff88 	bl	b5f10 <_ZN12Adafruit_GFXC1Ess>
   b8000:	4b11      	ldr	r3, [pc, #68]	; (b8048 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   b8002:	6023      	str	r3, [r4, #0]
   b8004:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   b8006:	b915      	cbnz	r5, b800e <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   b8008:	f004 fdbe 	bl	bcb88 <_Z19__fetch_global_Wirev>
   b800c:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   b800e:	23ff      	movs	r3, #255	; 0xff
   b8010:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b8014:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   b8018:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   b801c:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   b8020:	4b0a      	ldr	r3, [pc, #40]	; (b804c <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   b8022:	63a3      	str	r3, [r4, #56]	; 0x38
   b8024:	2301      	movs	r3, #1
   b8026:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b802a:	9b05      	ldr	r3, [sp, #20]
   b802c:	64a3      	str	r3, [r4, #72]	; 0x48
   b802e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b8032:	9b06      	ldr	r3, [sp, #24]
   b8034:	86a2      	strh	r2, [r4, #52]	; 0x34
   b8036:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   b803a:	6426      	str	r6, [r4, #64]	; 0x40
   b803c:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   b8040:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   b8042:	4620      	mov	r0, r4
   b8044:	bd70      	pop	{r4, r5, r6, pc}
   b8046:	bf00      	nop
   b8048:	000c0bd4 	.word	0x000c0bd4
   b804c:	000c0134 	.word	0x000c0134

000b8050 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b8050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8052:	4604      	mov	r4, r0
  if(wire) { // I2C
   b8054:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b8056:	460d      	mov	r5, r1
  if(wire) { // I2C
   b8058:	b190      	cbz	r0, b8080 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b805a:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b805e:	f004 fc05 	bl	bc86c <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b8062:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8064:	6803      	ldr	r3, [r0, #0]
   b8066:	2100      	movs	r1, #0
   b8068:	689b      	ldr	r3, [r3, #8]
   b806a:	4798      	blx	r3
    WIRE_WRITE(c);
   b806c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b806e:	6803      	ldr	r3, [r0, #0]
   b8070:	4629      	mov	r1, r5
   b8072:	689b      	ldr	r3, [r3, #8]
   b8074:	4798      	blx	r3
    wire->endTransmission();
   b8076:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b8078:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b807c:	f004 bbfd 	b.w	bc87a <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b8080:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b8084:	4601      	mov	r1, r0
   b8086:	b298      	uxth	r0, r3
   b8088:	f004 fcfb 	bl	bca82 <digitalWrite>
  if(spi) {
   b808c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b808e:	b120      	cbz	r0, b809a <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b8090:	4629      	mov	r1, r5
}
   b8092:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b8096:	f001 b891 	b.w	b91bc <_ZN8SPIClass8transferEh>
   b809a:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b809c:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b809e:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b80a2:	ea05 0107 	and.w	r1, r5, r7
   b80a6:	b280      	uxth	r0, r0
   b80a8:	f004 fceb 	bl	bca82 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b80ac:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b80b0:	2101      	movs	r1, #1
   b80b2:	b280      	uxth	r0, r0
   b80b4:	f004 fce5 	bl	bca82 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b80b8:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b80bc:	2100      	movs	r1, #0
   b80be:	b280      	uxth	r0, r0
   b80c0:	f004 fcdf 	bl	bca82 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b80c4:	3e01      	subs	r6, #1
   b80c6:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b80ca:	d1e8      	bne.n	b809e <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b80cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b80ce <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b80ce:	b538      	push	{r3, r4, r5, lr}
   b80d0:	4604      	mov	r4, r0
  TRANSACTION_START
   b80d2:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b80d4:	460d      	mov	r5, r1
  TRANSACTION_START
   b80d6:	b180      	cbz	r0, b80fa <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b80d8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b80da:	f004 fbb9 	bl	bc850 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b80de:	2d00      	cmp	r5, #0
   b80e0:	4620      	mov	r0, r4
   b80e2:	bf14      	ite	ne
   b80e4:	21a7      	movne	r1, #167	; 0xa7
   b80e6:	21a6      	moveq	r1, #166	; 0xa6
   b80e8:	f7ff ffb2 	bl	b8050 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b80ec:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b80ee:	b188      	cbz	r0, b8114 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b80f0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b80f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b80f6:	f004 bbab 	b.w	bc850 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b80fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b80fc:	b118      	cbz	r0, b8106 <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b80fe:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b8102:	f000 ffed 	bl	b90e0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b8106:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b810a:	2100      	movs	r1, #0
   b810c:	b280      	uxth	r0, r0
   b810e:	f004 fcb8 	bl	bca82 <digitalWrite>
   b8112:	e7e4      	b.n	b80de <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b8114:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8118:	2101      	movs	r1, #1
   b811a:	b280      	uxth	r0, r0
   b811c:	f004 fcb1 	bl	bca82 <digitalWrite>
   b8120:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b8122:	b118      	cbz	r0, b812c <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b8124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b8128:	f000 bfc0 	b.w	b90ac <_ZN8SPIClass14endTransactionEv>
}
   b812c:	bd38      	pop	{r3, r4, r5, pc}

000b812e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b812e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b8132:	4604      	mov	r4, r0
  if(wire) { // I2C
   b8134:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b8136:	460d      	mov	r5, r1
  if(wire) { // I2C
   b8138:	188f      	adds	r7, r1, r2
   b813a:	b340      	cbz	r0, b818e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b813c:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b8140:	f004 fb94 	bl	bc86c <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b8144:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8146:	6803      	ldr	r3, [r0, #0]
   b8148:	2100      	movs	r1, #0
   b814a:	689b      	ldr	r3, [r3, #8]
   b814c:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b814e:	2601      	movs	r6, #1
    while(n--) {
   b8150:	42af      	cmp	r7, r5
        wire->endTransmission();
   b8152:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b8154:	d017      	beq.n	b8186 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b8156:	2e1f      	cmp	r6, #31
   b8158:	d90c      	bls.n	b8174 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b815a:	f004 fb8e 	bl	bc87a <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b815e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b8162:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8164:	f004 fb82 	bl	bc86c <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b8168:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b816a:	6803      	ldr	r3, [r0, #0]
   b816c:	2100      	movs	r1, #0
   b816e:	689b      	ldr	r3, [r3, #8]
   b8170:	4798      	blx	r3
        bytesOut = 1;
   b8172:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b8174:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8176:	f815 1b01 	ldrb.w	r1, [r5], #1
   b817a:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b817c:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b817e:	689b      	ldr	r3, [r3, #8]
   b8180:	4798      	blx	r3
      bytesOut++;
   b8182:	b2f6      	uxtb	r6, r6
    while(n--) {
   b8184:	e7e4      	b.n	b8150 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b8186:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b818a:	f004 bb76 	b.w	bc87a <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b818e:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b8192:	4601      	mov	r1, r0
   b8194:	b298      	uxth	r0, r3
   b8196:	f004 fc74 	bl	bca82 <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b819a:	42bd      	cmp	r5, r7
   b819c:	d022      	beq.n	b81e4 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b819e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b81a0:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b81a4:	b118      	cbz	r0, b81ae <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b81a6:	4649      	mov	r1, r9
   b81a8:	f001 f808 	bl	b91bc <_ZN8SPIClass8transferEh>
   b81ac:	e7f5      	b.n	b819a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b81ae:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b81b0:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b81b4:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b81b8:	ea09 0108 	and.w	r1, r9, r8
   b81bc:	b280      	uxth	r0, r0
   b81be:	f004 fc60 	bl	bca82 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b81c2:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b81c6:	2101      	movs	r1, #1
   b81c8:	b280      	uxth	r0, r0
   b81ca:	f004 fc5a 	bl	bca82 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b81ce:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b81d2:	2100      	movs	r1, #0
   b81d4:	b280      	uxth	r0, r0
   b81d6:	f004 fc54 	bl	bca82 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b81da:	3e01      	subs	r6, #1
   b81dc:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b81e0:	d1e8      	bne.n	b81b4 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b81e2:	e7da      	b.n	b819a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b81e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b81e8 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b81e8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b81ec:	1dda      	adds	r2, r3, #7
   b81ee:	bf48      	it	mi
   b81f0:	f103 020e 	addmi.w	r2, r3, #14
   b81f4:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b81f8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b81fa:	10d2      	asrs	r2, r2, #3
   b81fc:	435a      	muls	r2, r3
   b81fe:	2100      	movs	r1, #0
   b8200:	f005 bbdb 	b.w	bd9ba <memset>

000b8204 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b8204:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b8208:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b820a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b820c:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b8210:	4604      	mov	r4, r0
   b8212:	460f      	mov	r7, r1
   b8214:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b8216:	b1c3      	cbz	r3, b824a <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
   b8218:	4620      	mov	r0, r4
   b821a:	f7ff ffe5 	bl	b81e8 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b821e:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   b8222:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b8226:	2820      	cmp	r0, #32
   b8228:	dc21      	bgt.n	b826e <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b822a:	2320      	movs	r3, #32
   b822c:	2201      	movs	r2, #1
   b822e:	3820      	subs	r0, #32
   b8230:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b8234:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   b8238:	2373      	movs	r3, #115	; 0x73
   b823a:	3973      	subs	r1, #115	; 0x73
   b823c:	9300      	str	r3, [sp, #0]
   b823e:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b8242:	4b89      	ldr	r3, [pc, #548]	; (b8468 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b8244:	f340 024f 	sbfx	r2, r0, #1, #16
   b8248:	e021      	b.n	b828e <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b824a:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b824e:	1dd8      	adds	r0, r3, #7
   b8250:	bf48      	it	mi
   b8252:	f103 000e 	addmi.w	r0, r3, #14
   b8256:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b825a:	10c0      	asrs	r0, r0, #3
   b825c:	4358      	muls	r0, r3
   b825e:	f000 fe5b 	bl	b8f18 <malloc>
   b8262:	62e0      	str	r0, [r4, #44]	; 0x2c
   b8264:	2800      	cmp	r0, #0
   b8266:	d1d7      	bne.n	b8218 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b8268:	b004      	add	sp, #16
   b826a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   b826e:	3840      	subs	r0, #64	; 0x40
   b8270:	f3c0 32c0 	ubfx	r2, r0, #15, #1
   b8274:	fa02 f280 	sxtah	r2, r2, r0
   b8278:	2340      	movs	r3, #64	; 0x40
   b827a:	2001      	movs	r0, #1
   b827c:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b8280:	2352      	movs	r3, #82	; 0x52
   b8282:	3952      	subs	r1, #82	; 0x52
   b8284:	9300      	str	r3, [sp, #0]
   b8286:	4b79      	ldr	r3, [pc, #484]	; (b846c <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b8288:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b828c:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b828e:	4620      	mov	r0, r4
   b8290:	f341 014f 	sbfx	r1, r1, #1, #16
   b8294:	f7fd ffde 	bl	b6254 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b8298:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b829a:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b829e:	2800      	cmp	r0, #0
   b82a0:	d078      	beq.n	b8394 <_ZN16Adafruit_SSD13065beginEhhbb+0x190>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b82a2:	2d00      	cmp	r5, #0
   b82a4:	d174      	bne.n	b8390 <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
   b82a6:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b82aa:	2b20      	cmp	r3, #32
   b82ac:	bf0c      	ite	eq
   b82ae:	253c      	moveq	r5, #60	; 0x3c
   b82b0:	253d      	movne	r5, #61	; 0x3d
   b82b2:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b82b6:	f1b8 0f00 	cmp.w	r8, #0
   b82ba:	d001      	beq.n	b82c0 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b82bc:	f004 facc 	bl	bc858 <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b82c0:	b1fe      	cbz	r6, b8302 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
   b82c2:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b82c6:	2800      	cmp	r0, #0
   b82c8:	db1b      	blt.n	b8302 <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
    pinMode(     rstPin, OUTPUT);
   b82ca:	2101      	movs	r1, #1
   b82cc:	b280      	uxth	r0, r0
   b82ce:	f004 fbc7 	bl	bca60 <pinMode>
    digitalWrite(rstPin, HIGH);
   b82d2:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b82d6:	2101      	movs	r1, #1
   b82d8:	b280      	uxth	r0, r0
   b82da:	f004 fbd2 	bl	bca82 <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b82de:	2001      	movs	r0, #1
   b82e0:	f003 fd58 	bl	bbd94 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b82e4:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b82e8:	2100      	movs	r1, #0
   b82ea:	b280      	uxth	r0, r0
   b82ec:	f004 fbc9 	bl	bca82 <digitalWrite>
    delay(10);                  // Wait 10 ms
   b82f0:	200a      	movs	r0, #10
   b82f2:	f003 fd4f 	bl	bbd94 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b82f6:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b82fa:	2101      	movs	r1, #1
   b82fc:	b280      	uxth	r0, r0
   b82fe:	f004 fbc0 	bl	bca82 <digitalWrite>
  TRANSACTION_START
   b8302:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8304:	2800      	cmp	r0, #0
   b8306:	d074      	beq.n	b83f2 <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b8308:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b830a:	f004 faa1 	bl	bc850 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b830e:	2204      	movs	r2, #4
   b8310:	4957      	ldr	r1, [pc, #348]	; (b8470 <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b8312:	4620      	mov	r0, r4
   b8314:	f7ff ff0b 	bl	b812e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b8318:	8961      	ldrh	r1, [r4, #10]
   b831a:	3901      	subs	r1, #1
   b831c:	b2c9      	uxtb	r1, r1
   b831e:	4620      	mov	r0, r4
   b8320:	f7ff fe96 	bl	b8050 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b8324:	4953      	ldr	r1, [pc, #332]	; (b8474 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b8326:	2204      	movs	r2, #4
   b8328:	4620      	mov	r0, r4
   b832a:	f7ff ff00 	bl	b812e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b832e:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b8332:	2b01      	cmp	r3, #1
   b8334:	bf0c      	ite	eq
   b8336:	2110      	moveq	r1, #16
   b8338:	2114      	movne	r1, #20
   b833a:	4620      	mov	r0, r4
   b833c:	f7ff fe88 	bl	b8050 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b8340:	2204      	movs	r2, #4
   b8342:	494d      	ldr	r1, [pc, #308]	; (b8478 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b8344:	4620      	mov	r0, r4
   b8346:	f7ff fef2 	bl	b812e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b834a:	68a3      	ldr	r3, [r4, #8]
   b834c:	4a4b      	ldr	r2, [pc, #300]	; (b847c <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b834e:	4293      	cmp	r3, r2
   b8350:	d15c      	bne.n	b840c <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    ssd1306_commandList(init4a, sizeof(init4a));
   b8352:	494b      	ldr	r1, [pc, #300]	; (b8480 <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b8354:	2204      	movs	r2, #4
   b8356:	4620      	mov	r0, r4
   b8358:	f7ff fee9 	bl	b812e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b835c:	21d9      	movs	r1, #217	; 0xd9
   b835e:	4620      	mov	r0, r4
   b8360:	f7ff fe76 	bl	b8050 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b8364:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b8368:	2b01      	cmp	r3, #1
   b836a:	bf0c      	ite	eq
   b836c:	2122      	moveq	r1, #34	; 0x22
   b836e:	21f1      	movne	r1, #241	; 0xf1
   b8370:	4620      	mov	r0, r4
   b8372:	f7ff fe6d 	bl	b8050 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b8376:	4620      	mov	r0, r4
   b8378:	4942      	ldr	r1, [pc, #264]	; (b8484 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b837a:	2206      	movs	r2, #6
   b837c:	f7ff fed7 	bl	b812e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b8380:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8382:	2800      	cmp	r0, #0
   b8384:	d063      	beq.n	b844e <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
   b8386:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b8388:	f004 fa62 	bl	bc850 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b838c:	2001      	movs	r0, #1
   b838e:	e76b      	b.n	b8268 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b8390:	b26d      	sxtb	r5, r5
   b8392:	e78e      	b.n	b82b2 <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b8394:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b8398:	2101      	movs	r1, #1
   b839a:	b280      	uxth	r0, r0
   b839c:	f004 fb60 	bl	bca60 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b83a0:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b83a4:	2101      	movs	r1, #1
   b83a6:	b280      	uxth	r0, r0
   b83a8:	f004 fb5a 	bl	bca60 <pinMode>
    SSD1306_DESELECT
   b83ac:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b83b0:	2101      	movs	r1, #1
   b83b2:	b280      	uxth	r0, r0
   b83b4:	f004 fb65 	bl	bca82 <digitalWrite>
    if(spi) { // Hardware SPI
   b83b8:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b83ba:	b13d      	cbz	r5, b83cc <_ZN16Adafruit_SSD13065beginEhhbb+0x1c8>
      if(periphBegin) spi->begin();
   b83bc:	f1b8 0f00 	cmp.w	r8, #0
   b83c0:	f43f af7e 	beq.w	b82c0 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b83c4:	4628      	mov	r0, r5
   b83c6:	f000 fe5d 	bl	b9084 <_ZN8SPIClass5beginEv>
   b83ca:	e779      	b.n	b82c0 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b83cc:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b83d0:	2101      	movs	r1, #1
   b83d2:	b280      	uxth	r0, r0
   b83d4:	f004 fb44 	bl	bca60 <pinMode>
      pinMode(clkPin , OUTPUT);
   b83d8:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b83dc:	2101      	movs	r1, #1
   b83de:	b280      	uxth	r0, r0
   b83e0:	f004 fb3e 	bl	bca60 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b83e4:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b83e8:	4629      	mov	r1, r5
   b83ea:	b280      	uxth	r0, r0
   b83ec:	f004 fb49 	bl	bca82 <digitalWrite>
   b83f0:	e766      	b.n	b82c0 <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
  TRANSACTION_START
   b83f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b83f4:	b118      	cbz	r0, b83fe <_ZN16Adafruit_SSD13065beginEhhbb+0x1fa>
   b83f6:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b83fa:	f000 fe71 	bl	b90e0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b83fe:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8402:	2100      	movs	r1, #0
   b8404:	b280      	uxth	r0, r0
   b8406:	f004 fb3c 	bl	bca82 <digitalWrite>
   b840a:	e780      	b.n	b830e <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b840c:	4a1e      	ldr	r2, [pc, #120]	; (b8488 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b840e:	4293      	cmp	r3, r2
   b8410:	d10e      	bne.n	b8430 <_ZN16Adafruit_SSD13065beginEhhbb+0x22c>
    ssd1306_commandList(init4b, sizeof(init4b));
   b8412:	491e      	ldr	r1, [pc, #120]	; (b848c <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   b8414:	2203      	movs	r2, #3
   b8416:	4620      	mov	r0, r4
   b8418:	f7ff fe89 	bl	b812e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b841c:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b8420:	2b01      	cmp	r3, #1
   b8422:	bf0c      	ite	eq
   b8424:	219f      	moveq	r1, #159	; 0x9f
   b8426:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b8428:	4620      	mov	r0, r4
   b842a:	f7ff fe11 	bl	b8050 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b842e:	e795      	b.n	b835c <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b8430:	4a17      	ldr	r2, [pc, #92]	; (b8490 <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   b8432:	4293      	cmp	r3, r2
   b8434:	d192      	bne.n	b835c <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
    ssd1306_commandList(init4c, sizeof(init4c));
   b8436:	4917      	ldr	r1, [pc, #92]	; (b8494 <_ZN16Adafruit_SSD13065beginEhhbb+0x290>)
   b8438:	2203      	movs	r2, #3
   b843a:	4620      	mov	r0, r4
   b843c:	f7ff fe77 	bl	b812e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b8440:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b8444:	2b01      	cmp	r3, #1
   b8446:	bf0c      	ite	eq
   b8448:	2110      	moveq	r1, #16
   b844a:	21af      	movne	r1, #175	; 0xaf
   b844c:	e7ec      	b.n	b8428 <_ZN16Adafruit_SSD13065beginEhhbb+0x224>
  TRANSACTION_END
   b844e:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8452:	2101      	movs	r1, #1
   b8454:	b280      	uxth	r0, r0
   b8456:	f004 fb14 	bl	bca82 <digitalWrite>
   b845a:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b845c:	2800      	cmp	r0, #0
   b845e:	d095      	beq.n	b838c <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b8460:	f000 fe24 	bl	b90ac <_ZN8SPIClass14endTransactionEv>
   b8464:	e792      	b.n	b838c <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b8466:	bf00      	nop
   b8468:	000c09ec 	.word	0x000c09ec
   b846c:	000c072c 	.word	0x000c072c
   b8470:	000c0c34 	.word	0x000c0c34
   b8474:	000c0c38 	.word	0x000c0c38
   b8478:	000c0c3c 	.word	0x000c0c3c
   b847c:	00200080 	.word	0x00200080
   b8480:	000c0c46 	.word	0x000c0c46
   b8484:	000c0c40 	.word	0x000c0c40
   b8488:	00400080 	.word	0x00400080
   b848c:	000c0c4a 	.word	0x000c0c4a
   b8490:	00100060 	.word	0x00100060
   b8494:	000c0c4d 	.word	0x000c0c4d

000b8498 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b8498:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b849a:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b849c:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b84a0:	db3d      	blt.n	b851e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b84a2:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b84a6:	4294      	cmp	r4, r2
   b84a8:	dd39      	ble.n	b851e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b84aa:	2900      	cmp	r1, #0
      w += x;
   b84ac:	bfbe      	ittt	lt
   b84ae:	185b      	addlt	r3, r3, r1
   b84b0:	b21b      	sxthlt	r3, r3
      x  = 0;
   b84b2:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b84b4:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b84b8:	18ce      	adds	r6, r1, r3
   b84ba:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b84bc:	bfc4      	itt	gt
   b84be:	1a63      	subgt	r3, r4, r1
   b84c0:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b84c2:	2b00      	cmp	r3, #0
   b84c4:	dd2b      	ble.n	b851e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b84c6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b84c8:	10d6      	asrs	r6, r2, #3
   b84ca:	fb14 1106 	smlabb	r1, r4, r6, r1
   b84ce:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b84d0:	f002 0007 	and.w	r0, r2, #7
   b84d4:	2201      	movs	r2, #1
   b84d6:	4082      	lsls	r2, r0
      switch(color) {
   b84d8:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b84da:	b2d2      	uxtb	r2, r2
      switch(color) {
   b84dc:	d016      	beq.n	b850c <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b84de:	2d02      	cmp	r5, #2
   b84e0:	d00b      	beq.n	b84fa <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b84e2:	b9e5      	cbnz	r5, b851e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b84e4:	43d2      	mvns	r2, r2
   b84e6:	b2d2      	uxtb	r2, r2
   b84e8:	440b      	add	r3, r1
   b84ea:	4299      	cmp	r1, r3
   b84ec:	d017      	beq.n	b851e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b84ee:	f811 0b01 	ldrb.w	r0, [r1], #1
   b84f2:	4010      	ands	r0, r2
   b84f4:	f801 0c01 	strb.w	r0, [r1, #-1]
   b84f8:	e7f7      	b.n	b84ea <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b84fa:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b84fc:	4299      	cmp	r1, r3
   b84fe:	d00e      	beq.n	b851e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b8500:	f811 0b01 	ldrb.w	r0, [r1], #1
   b8504:	4050      	eors	r0, r2
   b8506:	f801 0c01 	strb.w	r0, [r1, #-1]
   b850a:	e7f7      	b.n	b84fc <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b850c:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b850e:	4299      	cmp	r1, r3
   b8510:	d005      	beq.n	b851e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b8512:	f811 0b01 	ldrb.w	r0, [r1], #1
   b8516:	4310      	orrs	r0, r2
   b8518:	f801 0c01 	strb.w	r0, [r1, #-1]
   b851c:	e7f7      	b.n	b850e <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b851e:	bd70      	pop	{r4, r5, r6, pc}

000b8520 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b8520:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b8522:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b8524:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b8528:	db76      	blt.n	b8618 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b852a:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b852e:	42b1      	cmp	r1, r6
   b8530:	da72      	bge.n	b8618 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b8532:	2a00      	cmp	r2, #0
      __h += __y;
   b8534:	bfbe      	ittt	lt
   b8536:	189b      	addlt	r3, r3, r2
   b8538:	b21b      	sxthlt	r3, r3
      __y = 0;
   b853a:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b853c:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b8540:	18d7      	adds	r7, r2, r3
   b8542:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b8544:	bfc4      	itt	gt
   b8546:	1aa3      	subgt	r3, r4, r2
   b8548:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b854a:	2b00      	cmp	r3, #0
   b854c:	dd64      	ble.n	b8618 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b854e:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b8552:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b8554:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b8558:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b855c:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b855e:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b8562:	d023      	beq.n	b85ac <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b8564:	f1c2 0208 	rsb	r2, r2, #8
   b8568:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b856a:	492d      	ldr	r1, [pc, #180]	; (b8620 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b856c:	4293      	cmp	r3, r2
   b856e:	bf3c      	itt	cc
   b8570:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b8574:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b8578:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b857a:	bf3c      	itt	cc
   b857c:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b8580:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b8584:	2d01      	cmp	r5, #1
   b8586:	d007      	beq.n	b8598 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b8588:	2d02      	cmp	r5, #2
   b858a:	d02e      	beq.n	b85ea <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b858c:	b94d      	cbnz	r5, b85a2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b858e:	f817 c006 	ldrb.w	ip, [r7, r6]
   b8592:	ea2c 0101 	bic.w	r1, ip, r1
   b8596:	e003      	b.n	b85a0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b8598:	f817 c006 	ldrb.w	ip, [r7, r6]
   b859c:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b85a0:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b85a2:	4293      	cmp	r3, r2
   b85a4:	d338      	bcc.n	b8618 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b85a6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b85aa:	440c      	add	r4, r1
        h -= mod;
   b85ac:	1a9a      	subs	r2, r3, r2
   b85ae:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b85b0:	2a07      	cmp	r2, #7
   b85b2:	d90e      	bls.n	b85d2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b85b4:	2d02      	cmp	r5, #2
   b85b6:	d11d      	bne.n	b85f4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b85b8:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b85ba:	7821      	ldrb	r1, [r4, #0]
   b85bc:	43c9      	mvns	r1, r1
   b85be:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b85c0:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b85c2:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b85c6:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b85c8:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b85ca:	440c      	add	r4, r1
            } while(h >= 8);
   b85cc:	d8f5      	bhi.n	b85ba <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b85ce:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b85d2:	b30a      	cbz	r2, b8618 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b85d4:	4b13      	ldr	r3, [pc, #76]	; (b8624 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b85d6:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b85d8:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b85da:	d01a      	beq.n	b8612 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b85dc:	2d02      	cmp	r5, #2
   b85de:	d01c      	beq.n	b861a <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b85e0:	b9d5      	cbnz	r5, b8618 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b85e2:	7822      	ldrb	r2, [r4, #0]
   b85e4:	ea22 0303 	bic.w	r3, r2, r3
   b85e8:	e015      	b.n	b8616 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b85ea:	f817 c006 	ldrb.w	ip, [r7, r6]
   b85ee:	ea81 010c 	eor.w	r1, r1, ip
   b85f2:	e7d5      	b.n	b85a0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b85f4:	1e29      	subs	r1, r5, #0
   b85f6:	bf18      	it	ne
   b85f8:	2101      	movne	r1, #1
   b85fa:	4249      	negs	r1, r1
   b85fc:	b2c9      	uxtb	r1, r1
   b85fe:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b8600:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b8602:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b8604:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b8608:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b860a:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b860c:	4434      	add	r4, r6
            } while(h >= 8);
   b860e:	d8f7      	bhi.n	b8600 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b8610:	e7dd      	b.n	b85ce <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b8612:	7822      	ldrb	r2, [r4, #0]
   b8614:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b8616:	7023      	strb	r3, [r4, #0]
}
   b8618:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b861a:	7822      	ldrb	r2, [r4, #0]
   b861c:	4053      	eors	r3, r2
   b861e:	e7fa      	b.n	b8616 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b8620:	000c0c24 	.word	0x000c0c24
   b8624:	000c0c2c 	.word	0x000c0c2c

000b8628 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b8628:	b470      	push	{r4, r5, r6}
   b862a:	4614      	mov	r4, r2
  switch(rotation) {
   b862c:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b862e:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b8632:	2a02      	cmp	r2, #2
   b8634:	d00d      	beq.n	b8652 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b8636:	2a03      	cmp	r2, #3
   b8638:	d018      	beq.n	b866c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b863a:	2a01      	cmp	r2, #1
   b863c:	d111      	bne.n	b8662 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b863e:	8902      	ldrh	r2, [r0, #8]
   b8640:	43e4      	mvns	r4, r4
   b8642:	4414      	add	r4, r2
   b8644:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b8646:	9603      	str	r6, [sp, #12]
   b8648:	460a      	mov	r2, r1
   b864a:	4621      	mov	r1, r4
}
   b864c:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b864e:	f7ff bf67 	b.w	b8520 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b8652:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b8654:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b8656:	43e4      	mvns	r4, r4
    x -= (w-1);
   b8658:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b865a:	4414      	add	r4, r2
    x -= (w-1);
   b865c:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b865e:	b224      	sxth	r4, r4
    x -= (w-1);
   b8660:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b8662:	9603      	str	r6, [sp, #12]
   b8664:	4622      	mov	r2, r4
}
   b8666:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b8668:	f7ff bf16 	b.w	b8498 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b866c:	8945      	ldrh	r5, [r0, #10]
   b866e:	4419      	add	r1, r3
   b8670:	1a69      	subs	r1, r5, r1
   b8672:	b209      	sxth	r1, r1
    break;
   b8674:	e7e7      	b.n	b8646 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b8676 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b8676:	b430      	push	{r4, r5}
   b8678:	4614      	mov	r4, r2
  switch(rotation) {
   b867a:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b867c:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b8680:	2a02      	cmp	r2, #2
   b8682:	d00d      	beq.n	b86a0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b8684:	2a03      	cmp	r2, #3
   b8686:	d018      	beq.n	b86ba <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b8688:	2a01      	cmp	r2, #1
   b868a:	d111      	bne.n	b86b0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b868c:	18e2      	adds	r2, r4, r3
   b868e:	8904      	ldrh	r4, [r0, #8]
   b8690:	1aa4      	subs	r4, r4, r2
   b8692:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b8694:	9502      	str	r5, [sp, #8]
   b8696:	460a      	mov	r2, r1
   b8698:	4621      	mov	r1, r4
}
   b869a:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b869c:	f7ff befc 	b.w	b8498 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b86a0:	8902      	ldrh	r2, [r0, #8]
   b86a2:	43c9      	mvns	r1, r1
   b86a4:	4411      	add	r1, r2
    y -= (h-1);
   b86a6:	18e2      	adds	r2, r4, r3
   b86a8:	8944      	ldrh	r4, [r0, #10]
   b86aa:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b86ac:	b209      	sxth	r1, r1
    y -= (h-1);
   b86ae:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b86b0:	9502      	str	r5, [sp, #8]
   b86b2:	4622      	mov	r2, r4
}
   b86b4:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b86b6:	f7ff bf33 	b.w	b8520 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b86ba:	8942      	ldrh	r2, [r0, #10]
   b86bc:	43c9      	mvns	r1, r1
   b86be:	4411      	add	r1, r2
   b86c0:	b209      	sxth	r1, r1
    break;
   b86c2:	e7e7      	b.n	b8694 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b86c4 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b86c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b86c8:	4604      	mov	r4, r0
  TRANSACTION_START
   b86ca:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b86cc:	2800      	cmp	r0, #0
   b86ce:	d042      	beq.n	b8756 <_ZN16Adafruit_SSD13067displayEv+0x92>
   b86d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b86d2:	f004 f8bd 	bl	bc850 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b86d6:	4947      	ldr	r1, [pc, #284]	; (b87f4 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b86d8:	2205      	movs	r2, #5
   b86da:	4620      	mov	r0, r4
   b86dc:	f7ff fd27 	bl	b812e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b86e0:	8921      	ldrh	r1, [r4, #8]
   b86e2:	3901      	subs	r1, #1
   b86e4:	4620      	mov	r0, r4
   b86e6:	b2c9      	uxtb	r1, r1
   b86e8:	f7ff fcb2 	bl	b8050 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b86ec:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b86f0:	1dde      	adds	r6, r3, #7
   b86f2:	bf48      	it	mi
   b86f4:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b86f8:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b86fc:	8923      	ldrh	r3, [r4, #8]
   b86fe:	10f6      	asrs	r6, r6, #3
   b8700:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b8704:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b8708:	2800      	cmp	r0, #0
   b870a:	d03a      	beq.n	b8782 <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b870c:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b8710:	f004 f8ac 	bl	bc86c <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b8714:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8716:	6803      	ldr	r3, [r0, #0]
   b8718:	2140      	movs	r1, #64	; 0x40
   b871a:	689b      	ldr	r3, [r3, #8]
   b871c:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b871e:	2701      	movs	r7, #1
    while(count--) {
   b8720:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b8722:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b8724:	d024      	beq.n	b8770 <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b8726:	2f1f      	cmp	r7, #31
   b8728:	d90c      	bls.n	b8744 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b872a:	f004 f8a6 	bl	bc87a <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b872e:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b8732:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8734:	f004 f89a 	bl	bc86c <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b8738:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b873a:	6803      	ldr	r3, [r0, #0]
   b873c:	2140      	movs	r1, #64	; 0x40
   b873e:	689b      	ldr	r3, [r3, #8]
   b8740:	4798      	blx	r3
        bytesOut = 1;
   b8742:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b8744:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8746:	f815 1b01 	ldrb.w	r1, [r5], #1
   b874a:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b874c:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b874e:	689b      	ldr	r3, [r3, #8]
   b8750:	4798      	blx	r3
      bytesOut++;
   b8752:	b2ff      	uxtb	r7, r7
    while(count--) {
   b8754:	e7e4      	b.n	b8720 <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b8756:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b8758:	b118      	cbz	r0, b8762 <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b875a:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b875e:	f000 fcbf 	bl	b90e0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b8762:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b8766:	2100      	movs	r1, #0
   b8768:	b280      	uxth	r0, r0
   b876a:	f004 f98a 	bl	bca82 <digitalWrite>
   b876e:	e7b2      	b.n	b86d6 <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b8770:	f004 f883 	bl	bc87a <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b8774:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b8776:	b378      	cbz	r0, b87d8 <_ZN16Adafruit_SSD13067displayEv+0x114>
   b8778:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b877a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b877e:	f004 b867 	b.w	bc850 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b8782:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b8786:	2101      	movs	r1, #1
   b8788:	b280      	uxth	r0, r0
   b878a:	f004 f97a 	bl	bca82 <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b878e:	42ae      	cmp	r6, r5
   b8790:	d0f0      	beq.n	b8774 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b8792:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b8794:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b8798:	b118      	cbz	r0, b87a2 <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b879a:	4649      	mov	r1, r9
   b879c:	f000 fd0e 	bl	b91bc <_ZN8SPIClass8transferEh>
   b87a0:	e7f5      	b.n	b878e <_ZN16Adafruit_SSD13067displayEv+0xca>
   b87a2:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b87a4:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b87a8:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b87ac:	ea09 0108 	and.w	r1, r9, r8
   b87b0:	b280      	uxth	r0, r0
   b87b2:	f004 f966 	bl	bca82 <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b87b6:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b87ba:	2101      	movs	r1, #1
   b87bc:	b280      	uxth	r0, r0
   b87be:	f004 f960 	bl	bca82 <digitalWrite>
      digitalWrite(clkPin , LOW);
   b87c2:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b87c6:	2100      	movs	r1, #0
   b87c8:	b280      	uxth	r0, r0
   b87ca:	f004 f95a 	bl	bca82 <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b87ce:	3f01      	subs	r7, #1
   b87d0:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b87d4:	d1e8      	bne.n	b87a8 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b87d6:	e7da      	b.n	b878e <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b87d8:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b87dc:	2101      	movs	r1, #1
   b87de:	b280      	uxth	r0, r0
   b87e0:	f004 f94f 	bl	bca82 <digitalWrite>
   b87e4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b87e6:	b118      	cbz	r0, b87f0 <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b87e8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b87ec:	f000 bc5e 	b.w	b90ac <_ZN8SPIClass14endTransactionEv>
}
   b87f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b87f4:	000c0c50 	.word	0x000c0c50

000b87f8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b87f8:	b508      	push	{r3, lr}
   b87fa:	4b02      	ldr	r3, [pc, #8]	; (b8804 <netdb_freeaddrinfo+0xc>)
   b87fc:	681b      	ldr	r3, [r3, #0]
   b87fe:	689b      	ldr	r3, [r3, #8]
   b8800:	9301      	str	r3, [sp, #4]
   b8802:	bd08      	pop	{r3, pc}
   b8804:	00030268 	.word	0x00030268

000b8808 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b8808:	b508      	push	{r3, lr}
   b880a:	4b02      	ldr	r3, [pc, #8]	; (b8814 <netdb_getaddrinfo+0xc>)
   b880c:	681b      	ldr	r3, [r3, #0]
   b880e:	68db      	ldr	r3, [r3, #12]
   b8810:	9301      	str	r3, [sp, #4]
   b8812:	bd08      	pop	{r3, pc}
   b8814:	00030268 	.word	0x00030268

000b8818 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b8818:	b508      	push	{r3, lr}
   b881a:	4b02      	ldr	r3, [pc, #8]	; (b8824 <HAL_Pin_Mode+0xc>)
   b881c:	681b      	ldr	r3, [r3, #0]
   b881e:	689b      	ldr	r3, [r3, #8]
   b8820:	9301      	str	r3, [sp, #4]
   b8822:	bd08      	pop	{r3, pc}
   b8824:	0003022c 	.word	0x0003022c

000b8828 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b8828:	b508      	push	{r3, lr}
   b882a:	4b02      	ldr	r3, [pc, #8]	; (b8834 <HAL_Get_Pin_Mode+0xc>)
   b882c:	681b      	ldr	r3, [r3, #0]
   b882e:	68db      	ldr	r3, [r3, #12]
   b8830:	9301      	str	r3, [sp, #4]
   b8832:	bd08      	pop	{r3, pc}
   b8834:	0003022c 	.word	0x0003022c

000b8838 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b8838:	b508      	push	{r3, lr}
   b883a:	4b02      	ldr	r3, [pc, #8]	; (b8844 <HAL_GPIO_Write+0xc>)
   b883c:	681b      	ldr	r3, [r3, #0]
   b883e:	691b      	ldr	r3, [r3, #16]
   b8840:	9301      	str	r3, [sp, #4]
   b8842:	bd08      	pop	{r3, pc}
   b8844:	0003022c 	.word	0x0003022c

000b8848 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b8848:	b508      	push	{r3, lr}
   b884a:	4b02      	ldr	r3, [pc, #8]	; (b8854 <HAL_GPIO_Read+0xc>)
   b884c:	681b      	ldr	r3, [r3, #0]
   b884e:	695b      	ldr	r3, [r3, #20]
   b8850:	9301      	str	r3, [sp, #4]
   b8852:	bd08      	pop	{r3, pc}
   b8854:	0003022c 	.word	0x0003022c

000b8858 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   b8858:	b508      	push	{r3, lr}
   b885a:	4b02      	ldr	r3, [pc, #8]	; (b8864 <HAL_Interrupts_Attach+0xc>)
   b885c:	681b      	ldr	r3, [r3, #0]
   b885e:	699b      	ldr	r3, [r3, #24]
   b8860:	9301      	str	r3, [sp, #4]
   b8862:	bd08      	pop	{r3, pc}
   b8864:	0003022c 	.word	0x0003022c

000b8868 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   b8868:	b508      	push	{r3, lr}
   b886a:	4b02      	ldr	r3, [pc, #8]	; (b8874 <HAL_Interrupts_Detach+0xc>)
   b886c:	681b      	ldr	r3, [r3, #0]
   b886e:	69db      	ldr	r3, [r3, #28]
   b8870:	9301      	str	r3, [sp, #4]
   b8872:	bd08      	pop	{r3, pc}
   b8874:	0003022c 	.word	0x0003022c

000b8878 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b8878:	b508      	push	{r3, lr}
   b887a:	4b02      	ldr	r3, [pc, #8]	; (b8884 <HAL_RNG_GetRandomNumber+0xc>)
   b887c:	681b      	ldr	r3, [r3, #0]
   b887e:	685b      	ldr	r3, [r3, #4]
   b8880:	9301      	str	r3, [sp, #4]
   b8882:	bd08      	pop	{r3, pc}
   b8884:	00030218 	.word	0x00030218

000b8888 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b8888:	b508      	push	{r3, lr}
   b888a:	4b02      	ldr	r3, [pc, #8]	; (b8894 <HAL_Delay_Microseconds+0xc>)
   b888c:	681b      	ldr	r3, [r3, #0]
   b888e:	68db      	ldr	r3, [r3, #12]
   b8890:	9301      	str	r3, [sp, #4]
   b8892:	bd08      	pop	{r3, pc}
   b8894:	00030218 	.word	0x00030218

000b8898 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b8898:	b508      	push	{r3, lr}
   b889a:	4b02      	ldr	r3, [pc, #8]	; (b88a4 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b889c:	681b      	ldr	r3, [r3, #0]
   b889e:	691b      	ldr	r3, [r3, #16]
   b88a0:	9301      	str	r3, [sp, #4]
   b88a2:	bd08      	pop	{r3, pc}
   b88a4:	00030218 	.word	0x00030218

000b88a8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b88a8:	b508      	push	{r3, lr}
   b88aa:	4b02      	ldr	r3, [pc, #8]	; (b88b4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b88ac:	681b      	ldr	r3, [r3, #0]
   b88ae:	695b      	ldr	r3, [r3, #20]
   b88b0:	9301      	str	r3, [sp, #4]
   b88b2:	bd08      	pop	{r3, pc}
   b88b4:	00030218 	.word	0x00030218

000b88b8 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b88b8:	b508      	push	{r3, lr}
   b88ba:	4b02      	ldr	r3, [pc, #8]	; (b88c4 <hal_rtc_time_is_valid+0xc>)
   b88bc:	681b      	ldr	r3, [r3, #0]
   b88be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b88c0:	9301      	str	r3, [sp, #4]
   b88c2:	bd08      	pop	{r3, pc}
   b88c4:	00030218 	.word	0x00030218

000b88c8 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b88c8:	b508      	push	{r3, lr}
   b88ca:	4b02      	ldr	r3, [pc, #8]	; (b88d4 <hal_rtc_get_time+0xc>)
   b88cc:	681b      	ldr	r3, [r3, #0]
   b88ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b88d0:	9301      	str	r3, [sp, #4]
   b88d2:	bd08      	pop	{r3, pc}
   b88d4:	00030218 	.word	0x00030218

000b88d8 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b88d8:	b508      	push	{r3, lr}
   b88da:	4b02      	ldr	r3, [pc, #8]	; (b88e4 <hal_ble_stack_init+0xc>)
   b88dc:	681b      	ldr	r3, [r3, #0]
   b88de:	689b      	ldr	r3, [r3, #8]
   b88e0:	9301      	str	r3, [sp, #4]
   b88e2:	bd08      	pop	{r3, pc}
   b88e4:	00030278 	.word	0x00030278

000b88e8 <hal_ble_gap_set_scan_parameters>:
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
DYNALIB_FN(25, hal_ble, hal_ble_gap_set_auto_advertise, int(hal_ble_auto_adv_cfg_t, void*))
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
   b88e8:	b508      	push	{r3, lr}
   b88ea:	4b02      	ldr	r3, [pc, #8]	; (b88f4 <hal_ble_gap_set_scan_parameters+0xc>)
   b88ec:	681b      	ldr	r3, [r3, #0]
   b88ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   b88f0:	9301      	str	r3, [sp, #4]
   b88f2:	bd08      	pop	{r3, pc}
   b88f4:	00030278 	.word	0x00030278

000b88f8 <hal_ble_gap_get_scan_parameters>:
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
   b88f8:	b508      	push	{r3, lr}
   b88fa:	4b02      	ldr	r3, [pc, #8]	; (b8904 <hal_ble_gap_get_scan_parameters+0xc>)
   b88fc:	681b      	ldr	r3, [r3, #0]
   b88fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
   b8900:	9301      	str	r3, [sp, #4]
   b8902:	bd08      	pop	{r3, pc}
   b8904:	00030278 	.word	0x00030278

000b8908 <hal_ble_gap_start_scan>:
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   b8908:	b508      	push	{r3, lr}
   b890a:	4b02      	ldr	r3, [pc, #8]	; (b8914 <hal_ble_gap_start_scan+0xc>)
   b890c:	681b      	ldr	r3, [r3, #0]
   b890e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b8910:	9301      	str	r3, [sp, #4]
   b8912:	bd08      	pop	{r3, pc}
   b8914:	00030278 	.word	0x00030278

000b8918 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   b8918:	b508      	push	{r3, lr}
   b891a:	4b03      	ldr	r3, [pc, #12]	; (b8928 <hal_ble_gap_stop_scan+0x10>)
   b891c:	681b      	ldr	r3, [r3, #0]
   b891e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   b8922:	9301      	str	r3, [sp, #4]
   b8924:	bd08      	pop	{r3, pc}
   b8926:	0000      	.short	0x0000
   b8928:	00030278 	.word	0x00030278

000b892c <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b892c:	b508      	push	{r3, lr}
   b892e:	4b03      	ldr	r3, [pc, #12]	; (b893c <hal_ble_gap_disconnect+0x10>)
   b8930:	681b      	ldr	r3, [r3, #0]
   b8932:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b8936:	9301      	str	r3, [sp, #4]
   b8938:	bd08      	pop	{r3, pc}
   b893a:	0000      	.short	0x0000
   b893c:	00030278 	.word	0x00030278

000b8940 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b8940:	b508      	push	{r3, lr}
   b8942:	4b03      	ldr	r3, [pc, #12]	; (b8950 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b8944:	681b      	ldr	r3, [r3, #0]
   b8946:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b894a:	9301      	str	r3, [sp, #4]
   b894c:	bd08      	pop	{r3, pc}
   b894e:	0000      	.short	0x0000
   b8950:	00030278 	.word	0x00030278

000b8954 <hal_ble_gatt_client_discover_all_services>:
DYNALIB_FN(46, hal_ble, hal_ble_gatt_server_get_characteristic_value, ssize_t(hal_ble_attr_handle_t, uint8_t*, size_t, void*))
DYNALIB_FN(47, hal_ble, hal_ble_gatt_client_discover_all_services, int(hal_ble_conn_handle_t, hal_ble_on_disc_service_cb_t, void*, void*))
   b8954:	b508      	push	{r3, lr}
   b8956:	4b03      	ldr	r3, [pc, #12]	; (b8964 <hal_ble_gatt_client_discover_all_services+0x10>)
   b8958:	681b      	ldr	r3, [r3, #0]
   b895a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   b895e:	9301      	str	r3, [sp, #4]
   b8960:	bd08      	pop	{r3, pc}
   b8962:	0000      	.short	0x0000
   b8964:	00030278 	.word	0x00030278

000b8968 <hal_ble_gatt_client_discover_characteristics>:
DYNALIB_FN(48, hal_ble, hal_ble_gatt_client_discover_service_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_uuid_t*, hal_ble_on_disc_service_cb_t, void*, void*))
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
   b8968:	b508      	push	{r3, lr}
   b896a:	4b03      	ldr	r3, [pc, #12]	; (b8978 <hal_ble_gatt_client_discover_characteristics+0x10>)
   b896c:	681b      	ldr	r3, [r3, #0]
   b896e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   b8972:	9301      	str	r3, [sp, #4]
   b8974:	bd08      	pop	{r3, pc}
   b8976:	0000      	.short	0x0000
   b8978:	00030278 	.word	0x00030278

000b897c <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b897c:	b508      	push	{r3, lr}
   b897e:	4b03      	ldr	r3, [pc, #12]	; (b898c <hal_ble_gatt_client_write_with_response+0x10>)
   b8980:	681b      	ldr	r3, [r3, #0]
   b8982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b8986:	9301      	str	r3, [sp, #4]
   b8988:	bd08      	pop	{r3, pc}
   b898a:	0000      	.short	0x0000
   b898c:	00030278 	.word	0x00030278

000b8990 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b8990:	b508      	push	{r3, lr}
   b8992:	4b03      	ldr	r3, [pc, #12]	; (b89a0 <hal_ble_gatt_client_write_without_response+0x10>)
   b8994:	681b      	ldr	r3, [r3, #0]
   b8996:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b899a:	9301      	str	r3, [sp, #4]
   b899c:	bd08      	pop	{r3, pc}
   b899e:	0000      	.short	0x0000
   b89a0:	00030278 	.word	0x00030278

000b89a4 <hal_ble_gatt_client_read>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))
   b89a4:	b508      	push	{r3, lr}
   b89a6:	4b03      	ldr	r3, [pc, #12]	; (b89b4 <hal_ble_gatt_client_read+0x10>)
   b89a8:	681b      	ldr	r3, [r3, #0]
   b89aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   b89ae:	9301      	str	r3, [sp, #4]
   b89b0:	bd08      	pop	{r3, pc}
   b89b2:	0000      	.short	0x0000
   b89b4:	00030278 	.word	0x00030278

000b89b8 <hal_ble_gap_connect>:

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
   b89b8:	b508      	push	{r3, lr}
   b89ba:	4b03      	ldr	r3, [pc, #12]	; (b89c8 <hal_ble_gap_connect+0x10>)
   b89bc:	681b      	ldr	r3, [r3, #0]
   b89be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
   b89c2:	9301      	str	r3, [sp, #4]
   b89c4:	bd08      	pop	{r3, pc}
   b89c6:	0000      	.short	0x0000
   b89c8:	00030278 	.word	0x00030278

000b89cc <hal_ble_gap_get_connection_info>:
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
   b89cc:	b508      	push	{r3, lr}
   b89ce:	4b03      	ldr	r3, [pc, #12]	; (b89dc <hal_ble_gap_get_connection_info+0x10>)
   b89d0:	681b      	ldr	r3, [r3, #0]
   b89d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
   b89d6:	9301      	str	r3, [sp, #4]
   b89d8:	bd08      	pop	{r3, pc}
   b89da:	0000      	.short	0x0000
   b89dc:	00030278 	.word	0x00030278

000b89e0 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b89e0:	b508      	push	{r3, lr}
   b89e2:	4b03      	ldr	r3, [pc, #12]	; (b89f0 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b89e4:	681b      	ldr	r3, [r3, #0]
   b89e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b89ea:	9301      	str	r3, [sp, #4]
   b89ec:	bd08      	pop	{r3, pc}
   b89ee:	0000      	.short	0x0000
   b89f0:	00030278 	.word	0x00030278

000b89f4 <hal_ble_gatt_client_configure_cccd>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
   b89f4:	b508      	push	{r3, lr}
   b89f6:	4b03      	ldr	r3, [pc, #12]	; (b8a04 <hal_ble_gatt_client_configure_cccd+0x10>)
   b89f8:	681b      	ldr	r3, [r3, #0]
   b89fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
   b89fe:	9301      	str	r3, [sp, #4]
   b8a00:	bd08      	pop	{r3, pc}
   b8a02:	0000      	.short	0x0000
   b8a04:	00030278 	.word	0x00030278

000b8a08 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b8a08:	b508      	push	{r3, lr}
   b8a0a:	4b03      	ldr	r3, [pc, #12]	; (b8a18 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b8a0c:	681b      	ldr	r3, [r3, #0]
   b8a0e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b8a12:	9301      	str	r3, [sp, #4]
   b8a14:	bd08      	pop	{r3, pc}
   b8a16:	0000      	.short	0x0000
   b8a18:	00030278 	.word	0x00030278

000b8a1c <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b8a1c:	b508      	push	{r3, lr}
   b8a1e:	4b03      	ldr	r3, [pc, #12]	; (b8a2c <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b8a20:	681b      	ldr	r3, [r3, #0]
   b8a22:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b8a26:	9301      	str	r3, [sp, #4]
   b8a28:	bd08      	pop	{r3, pc}
   b8a2a:	0000      	.short	0x0000
   b8a2c:	00030278 	.word	0x00030278

000b8a30 <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b8a30:	b508      	push	{r3, lr}
   b8a32:	4b02      	ldr	r3, [pc, #8]	; (b8a3c <os_thread_yield+0xc>)
   b8a34:	681b      	ldr	r3, [r3, #0]
   b8a36:	68db      	ldr	r3, [r3, #12]
   b8a38:	9301      	str	r3, [sp, #4]
   b8a3a:	bd08      	pop	{r3, pc}
   b8a3c:	00030248 	.word	0x00030248

000b8a40 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b8a40:	b508      	push	{r3, lr}
   b8a42:	4b02      	ldr	r3, [pc, #8]	; (b8a4c <os_thread_scheduling+0xc>)
   b8a44:	681b      	ldr	r3, [r3, #0]
   b8a46:	69db      	ldr	r3, [r3, #28]
   b8a48:	9301      	str	r3, [sp, #4]
   b8a4a:	bd08      	pop	{r3, pc}
   b8a4c:	00030248 	.word	0x00030248

000b8a50 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   b8a50:	b508      	push	{r3, lr}
   b8a52:	4b02      	ldr	r3, [pc, #8]	; (b8a5c <os_timer_create+0xc>)
   b8a54:	681b      	ldr	r3, [r3, #0]
   b8a56:	6a1b      	ldr	r3, [r3, #32]
   b8a58:	9301      	str	r3, [sp, #4]
   b8a5a:	bd08      	pop	{r3, pc}
   b8a5c:	00030248 	.word	0x00030248

000b8a60 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   b8a60:	b508      	push	{r3, lr}
   b8a62:	4b02      	ldr	r3, [pc, #8]	; (b8a6c <os_timer_destroy+0xc>)
   b8a64:	681b      	ldr	r3, [r3, #0]
   b8a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8a68:	9301      	str	r3, [sp, #4]
   b8a6a:	bd08      	pop	{r3, pc}
   b8a6c:	00030248 	.word	0x00030248

000b8a70 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   b8a70:	b508      	push	{r3, lr}
   b8a72:	4b02      	ldr	r3, [pc, #8]	; (b8a7c <os_timer_get_id+0xc>)
   b8a74:	681b      	ldr	r3, [r3, #0]
   b8a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8a78:	9301      	str	r3, [sp, #4]
   b8a7a:	bd08      	pop	{r3, pc}
   b8a7c:	00030248 	.word	0x00030248

000b8a80 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   b8a80:	b508      	push	{r3, lr}
   b8a82:	4b02      	ldr	r3, [pc, #8]	; (b8a8c <os_timer_change+0xc>)
   b8a84:	681b      	ldr	r3, [r3, #0]
   b8a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8a88:	9301      	str	r3, [sp, #4]
   b8a8a:	bd08      	pop	{r3, pc}
   b8a8c:	00030248 	.word	0x00030248

000b8a90 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b8a90:	b508      	push	{r3, lr}
   b8a92:	4b02      	ldr	r3, [pc, #8]	; (b8a9c <os_mutex_create+0xc>)
   b8a94:	681b      	ldr	r3, [r3, #0]
   b8a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8a98:	9301      	str	r3, [sp, #4]
   b8a9a:	bd08      	pop	{r3, pc}
   b8a9c:	00030248 	.word	0x00030248

000b8aa0 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   b8aa0:	b508      	push	{r3, lr}
   b8aa2:	4b02      	ldr	r3, [pc, #8]	; (b8aac <os_mutex_destroy+0xc>)
   b8aa4:	681b      	ldr	r3, [r3, #0]
   b8aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8aa8:	9301      	str	r3, [sp, #4]
   b8aaa:	bd08      	pop	{r3, pc}
   b8aac:	00030248 	.word	0x00030248

000b8ab0 <os_mutex_recursive_create>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b8ab0:	b508      	push	{r3, lr}
   b8ab2:	4b02      	ldr	r3, [pc, #8]	; (b8abc <os_mutex_recursive_create+0xc>)
   b8ab4:	681b      	ldr	r3, [r3, #0]
   b8ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8ab8:	9301      	str	r3, [sp, #4]
   b8aba:	bd08      	pop	{r3, pc}
   b8abc:	00030248 	.word	0x00030248

000b8ac0 <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b8ac0:	b508      	push	{r3, lr}
   b8ac2:	4b02      	ldr	r3, [pc, #8]	; (b8acc <os_mutex_recursive_lock+0xc>)
   b8ac4:	681b      	ldr	r3, [r3, #0]
   b8ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b8ac8:	9301      	str	r3, [sp, #4]
   b8aca:	bd08      	pop	{r3, pc}
   b8acc:	00030248 	.word	0x00030248

000b8ad0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b8ad0:	b508      	push	{r3, lr}
   b8ad2:	4b02      	ldr	r3, [pc, #8]	; (b8adc <os_mutex_recursive_unlock+0xc>)
   b8ad4:	681b      	ldr	r3, [r3, #0]
   b8ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8ad8:	9301      	str	r3, [sp, #4]
   b8ada:	bd08      	pop	{r3, pc}
   b8adc:	00030248 	.word	0x00030248

000b8ae0 <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   b8ae0:	b508      	push	{r3, lr}
   b8ae2:	4b02      	ldr	r3, [pc, #8]	; (b8aec <os_timer_set_id+0xc>)
   b8ae4:	681b      	ldr	r3, [r3, #0]
   b8ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b8ae8:	9301      	str	r3, [sp, #4]
   b8aea:	bd08      	pop	{r3, pc}
   b8aec:	00030248 	.word	0x00030248

000b8af0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b8af0:	b508      	push	{r3, lr}
   b8af2:	4b02      	ldr	r3, [pc, #8]	; (b8afc <inet_inet_ntop+0xc>)
   b8af4:	681b      	ldr	r3, [r3, #0]
   b8af6:	695b      	ldr	r3, [r3, #20]
   b8af8:	9301      	str	r3, [sp, #4]
   b8afa:	bd08      	pop	{r3, pc}
   b8afc:	00030264 	.word	0x00030264

000b8b00 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b8b00:	b508      	push	{r3, lr}
   b8b02:	4b02      	ldr	r3, [pc, #8]	; (b8b0c <hal_usart_write+0xc>)
   b8b04:	681b      	ldr	r3, [r3, #0]
   b8b06:	68db      	ldr	r3, [r3, #12]
   b8b08:	9301      	str	r3, [sp, #4]
   b8b0a:	bd08      	pop	{r3, pc}
   b8b0c:	0003023c 	.word	0x0003023c

000b8b10 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b8b10:	b508      	push	{r3, lr}
   b8b12:	4b02      	ldr	r3, [pc, #8]	; (b8b1c <hal_usart_available+0xc>)
   b8b14:	681b      	ldr	r3, [r3, #0]
   b8b16:	691b      	ldr	r3, [r3, #16]
   b8b18:	9301      	str	r3, [sp, #4]
   b8b1a:	bd08      	pop	{r3, pc}
   b8b1c:	0003023c 	.word	0x0003023c

000b8b20 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b8b20:	b508      	push	{r3, lr}
   b8b22:	4b02      	ldr	r3, [pc, #8]	; (b8b2c <hal_usart_read+0xc>)
   b8b24:	681b      	ldr	r3, [r3, #0]
   b8b26:	695b      	ldr	r3, [r3, #20]
   b8b28:	9301      	str	r3, [sp, #4]
   b8b2a:	bd08      	pop	{r3, pc}
   b8b2c:	0003023c 	.word	0x0003023c

000b8b30 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b8b30:	b508      	push	{r3, lr}
   b8b32:	4b02      	ldr	r3, [pc, #8]	; (b8b3c <hal_usart_peek+0xc>)
   b8b34:	681b      	ldr	r3, [r3, #0]
   b8b36:	699b      	ldr	r3, [r3, #24]
   b8b38:	9301      	str	r3, [sp, #4]
   b8b3a:	bd08      	pop	{r3, pc}
   b8b3c:	0003023c 	.word	0x0003023c

000b8b40 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b8b40:	b508      	push	{r3, lr}
   b8b42:	4b02      	ldr	r3, [pc, #8]	; (b8b4c <hal_usart_flush+0xc>)
   b8b44:	681b      	ldr	r3, [r3, #0]
   b8b46:	69db      	ldr	r3, [r3, #28]
   b8b48:	9301      	str	r3, [sp, #4]
   b8b4a:	bd08      	pop	{r3, pc}
   b8b4c:	0003023c 	.word	0x0003023c

000b8b50 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b8b50:	b508      	push	{r3, lr}
   b8b52:	4b02      	ldr	r3, [pc, #8]	; (b8b5c <hal_usart_is_enabled+0xc>)
   b8b54:	681b      	ldr	r3, [r3, #0]
   b8b56:	6a1b      	ldr	r3, [r3, #32]
   b8b58:	9301      	str	r3, [sp, #4]
   b8b5a:	bd08      	pop	{r3, pc}
   b8b5c:	0003023c 	.word	0x0003023c

000b8b60 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b8b60:	b508      	push	{r3, lr}
   b8b62:	4b02      	ldr	r3, [pc, #8]	; (b8b6c <hal_usart_available_data_for_write+0xc>)
   b8b64:	681b      	ldr	r3, [r3, #0]
   b8b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8b68:	9301      	str	r3, [sp, #4]
   b8b6a:	bd08      	pop	{r3, pc}
   b8b6c:	0003023c 	.word	0x0003023c

000b8b70 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   b8b70:	b508      	push	{r3, lr}
   b8b72:	4b02      	ldr	r3, [pc, #8]	; (b8b7c <hal_usart_begin_config+0xc>)
   b8b74:	681b      	ldr	r3, [r3, #0]
   b8b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8b78:	9301      	str	r3, [sp, #4]
   b8b7a:	bd08      	pop	{r3, pc}
   b8b7c:	0003023c 	.word	0x0003023c

000b8b80 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b8b80:	b508      	push	{r3, lr}
   b8b82:	4b02      	ldr	r3, [pc, #8]	; (b8b8c <hal_usart_init_ex+0xc>)
   b8b84:	681b      	ldr	r3, [r3, #0]
   b8b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8b88:	9301      	str	r3, [sp, #4]
   b8b8a:	bd08      	pop	{r3, pc}
   b8b8c:	0003023c 	.word	0x0003023c

000b8b90 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b8b90:	b508      	push	{r3, lr}
   b8b92:	4b02      	ldr	r3, [pc, #8]	; (b8b9c <hal_i2c_set_speed+0xc>)
   b8b94:	681b      	ldr	r3, [r3, #0]
   b8b96:	681b      	ldr	r3, [r3, #0]
   b8b98:	9301      	str	r3, [sp, #4]
   b8b9a:	bd08      	pop	{r3, pc}
   b8b9c:	00030228 	.word	0x00030228

000b8ba0 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b8ba0:	b508      	push	{r3, lr}
   b8ba2:	4b02      	ldr	r3, [pc, #8]	; (b8bac <hal_i2c_begin+0xc>)
   b8ba4:	681b      	ldr	r3, [r3, #0]
   b8ba6:	68db      	ldr	r3, [r3, #12]
   b8ba8:	9301      	str	r3, [sp, #4]
   b8baa:	bd08      	pop	{r3, pc}
   b8bac:	00030228 	.word	0x00030228

000b8bb0 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b8bb0:	b508      	push	{r3, lr}
   b8bb2:	4b02      	ldr	r3, [pc, #8]	; (b8bbc <hal_i2c_begin_transmission+0xc>)
   b8bb4:	681b      	ldr	r3, [r3, #0]
   b8bb6:	699b      	ldr	r3, [r3, #24]
   b8bb8:	9301      	str	r3, [sp, #4]
   b8bba:	bd08      	pop	{r3, pc}
   b8bbc:	00030228 	.word	0x00030228

000b8bc0 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b8bc0:	b508      	push	{r3, lr}
   b8bc2:	4b02      	ldr	r3, [pc, #8]	; (b8bcc <hal_i2c_end_transmission+0xc>)
   b8bc4:	681b      	ldr	r3, [r3, #0]
   b8bc6:	69db      	ldr	r3, [r3, #28]
   b8bc8:	9301      	str	r3, [sp, #4]
   b8bca:	bd08      	pop	{r3, pc}
   b8bcc:	00030228 	.word	0x00030228

000b8bd0 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b8bd0:	b508      	push	{r3, lr}
   b8bd2:	4b02      	ldr	r3, [pc, #8]	; (b8bdc <hal_i2c_write+0xc>)
   b8bd4:	681b      	ldr	r3, [r3, #0]
   b8bd6:	6a1b      	ldr	r3, [r3, #32]
   b8bd8:	9301      	str	r3, [sp, #4]
   b8bda:	bd08      	pop	{r3, pc}
   b8bdc:	00030228 	.word	0x00030228

000b8be0 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b8be0:	b508      	push	{r3, lr}
   b8be2:	4b02      	ldr	r3, [pc, #8]	; (b8bec <hal_i2c_available+0xc>)
   b8be4:	681b      	ldr	r3, [r3, #0]
   b8be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8be8:	9301      	str	r3, [sp, #4]
   b8bea:	bd08      	pop	{r3, pc}
   b8bec:	00030228 	.word	0x00030228

000b8bf0 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b8bf0:	b508      	push	{r3, lr}
   b8bf2:	4b02      	ldr	r3, [pc, #8]	; (b8bfc <hal_i2c_read+0xc>)
   b8bf4:	681b      	ldr	r3, [r3, #0]
   b8bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8bf8:	9301      	str	r3, [sp, #4]
   b8bfa:	bd08      	pop	{r3, pc}
   b8bfc:	00030228 	.word	0x00030228

000b8c00 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b8c00:	b508      	push	{r3, lr}
   b8c02:	4b02      	ldr	r3, [pc, #8]	; (b8c0c <hal_i2c_peek+0xc>)
   b8c04:	681b      	ldr	r3, [r3, #0]
   b8c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8c08:	9301      	str	r3, [sp, #4]
   b8c0a:	bd08      	pop	{r3, pc}
   b8c0c:	00030228 	.word	0x00030228

000b8c10 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b8c10:	b508      	push	{r3, lr}
   b8c12:	4b02      	ldr	r3, [pc, #8]	; (b8c1c <hal_i2c_flush+0xc>)
   b8c14:	681b      	ldr	r3, [r3, #0]
   b8c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8c18:	9301      	str	r3, [sp, #4]
   b8c1a:	bd08      	pop	{r3, pc}
   b8c1c:	00030228 	.word	0x00030228

000b8c20 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b8c20:	b508      	push	{r3, lr}
   b8c22:	4b02      	ldr	r3, [pc, #8]	; (b8c2c <hal_i2c_is_enabled+0xc>)
   b8c24:	681b      	ldr	r3, [r3, #0]
   b8c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8c28:	9301      	str	r3, [sp, #4]
   b8c2a:	bd08      	pop	{r3, pc}
   b8c2c:	00030228 	.word	0x00030228

000b8c30 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b8c30:	b508      	push	{r3, lr}
   b8c32:	4b02      	ldr	r3, [pc, #8]	; (b8c3c <hal_i2c_init+0xc>)
   b8c34:	681b      	ldr	r3, [r3, #0]
   b8c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8c38:	9301      	str	r3, [sp, #4]
   b8c3a:	bd08      	pop	{r3, pc}
   b8c3c:	00030228 	.word	0x00030228

000b8c40 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b8c40:	b508      	push	{r3, lr}
   b8c42:	4b02      	ldr	r3, [pc, #8]	; (b8c4c <hal_spi_begin+0xc>)
   b8c44:	681b      	ldr	r3, [r3, #0]
   b8c46:	681b      	ldr	r3, [r3, #0]
   b8c48:	9301      	str	r3, [sp, #4]
   b8c4a:	bd08      	pop	{r3, pc}
   b8c4c:	00030230 	.word	0x00030230

000b8c50 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b8c50:	b508      	push	{r3, lr}
   b8c52:	4b02      	ldr	r3, [pc, #8]	; (b8c5c <hal_spi_transfer+0xc>)
   b8c54:	681b      	ldr	r3, [r3, #0]
   b8c56:	695b      	ldr	r3, [r3, #20]
   b8c58:	9301      	str	r3, [sp, #4]
   b8c5a:	bd08      	pop	{r3, pc}
   b8c5c:	00030230 	.word	0x00030230

000b8c60 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b8c60:	b508      	push	{r3, lr}
   b8c62:	4b02      	ldr	r3, [pc, #8]	; (b8c6c <hal_spi_init+0xc>)
   b8c64:	681b      	ldr	r3, [r3, #0]
   b8c66:	69db      	ldr	r3, [r3, #28]
   b8c68:	9301      	str	r3, [sp, #4]
   b8c6a:	bd08      	pop	{r3, pc}
   b8c6c:	00030230 	.word	0x00030230

000b8c70 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b8c70:	b508      	push	{r3, lr}
   b8c72:	4b02      	ldr	r3, [pc, #8]	; (b8c7c <hal_spi_is_enabled+0xc>)
   b8c74:	681b      	ldr	r3, [r3, #0]
   b8c76:	6a1b      	ldr	r3, [r3, #32]
   b8c78:	9301      	str	r3, [sp, #4]
   b8c7a:	bd08      	pop	{r3, pc}
   b8c7c:	00030230 	.word	0x00030230

000b8c80 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b8c80:	b508      	push	{r3, lr}
   b8c82:	4b02      	ldr	r3, [pc, #8]	; (b8c8c <hal_spi_info+0xc>)
   b8c84:	681b      	ldr	r3, [r3, #0]
   b8c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8c88:	9301      	str	r3, [sp, #4]
   b8c8a:	bd08      	pop	{r3, pc}
   b8c8c:	00030230 	.word	0x00030230

000b8c90 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   b8c90:	b508      	push	{r3, lr}
   b8c92:	4b02      	ldr	r3, [pc, #8]	; (b8c9c <hal_spi_transfer_dma+0xc>)
   b8c94:	681b      	ldr	r3, [r3, #0]
   b8c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b8c98:	9301      	str	r3, [sp, #4]
   b8c9a:	bd08      	pop	{r3, pc}
   b8c9c:	00030230 	.word	0x00030230

000b8ca0 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   b8ca0:	b508      	push	{r3, lr}
   b8ca2:	4b02      	ldr	r3, [pc, #8]	; (b8cac <hal_spi_transfer_dma_status+0xc>)
   b8ca4:	681b      	ldr	r3, [r3, #0]
   b8ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b8ca8:	9301      	str	r3, [sp, #4]
   b8caa:	bd08      	pop	{r3, pc}
   b8cac:	00030230 	.word	0x00030230

000b8cb0 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b8cb0:	b508      	push	{r3, lr}
   b8cb2:	4b02      	ldr	r3, [pc, #8]	; (b8cbc <hal_spi_set_settings+0xc>)
   b8cb4:	681b      	ldr	r3, [r3, #0]
   b8cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8cb8:	9301      	str	r3, [sp, #4]
   b8cba:	bd08      	pop	{r3, pc}
   b8cbc:	00030230 	.word	0x00030230

000b8cc0 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b8cc0:	b508      	push	{r3, lr}
   b8cc2:	4b02      	ldr	r3, [pc, #8]	; (b8ccc <hal_spi_acquire+0xc>)
   b8cc4:	681b      	ldr	r3, [r3, #0]
   b8cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8cc8:	9301      	str	r3, [sp, #4]
   b8cca:	bd08      	pop	{r3, pc}
   b8ccc:	00030230 	.word	0x00030230

000b8cd0 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b8cd0:	b508      	push	{r3, lr}
   b8cd2:	4b02      	ldr	r3, [pc, #8]	; (b8cdc <hal_spi_release+0xc>)
   b8cd4:	681b      	ldr	r3, [r3, #0]
   b8cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8cd8:	9301      	str	r3, [sp, #4]
   b8cda:	bd08      	pop	{r3, pc}
   b8cdc:	00030230 	.word	0x00030230

000b8ce0 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b8ce0:	b508      	push	{r3, lr}
   b8ce2:	4b02      	ldr	r3, [pc, #8]	; (b8cec <HAL_USB_USART_Init+0xc>)
   b8ce4:	681b      	ldr	r3, [r3, #0]
   b8ce6:	681b      	ldr	r3, [r3, #0]
   b8ce8:	9301      	str	r3, [sp, #4]
   b8cea:	bd08      	pop	{r3, pc}
   b8cec:	0003024c 	.word	0x0003024c

000b8cf0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b8cf0:	b508      	push	{r3, lr}
   b8cf2:	4b02      	ldr	r3, [pc, #8]	; (b8cfc <HAL_USB_USART_Begin+0xc>)
   b8cf4:	681b      	ldr	r3, [r3, #0]
   b8cf6:	685b      	ldr	r3, [r3, #4]
   b8cf8:	9301      	str	r3, [sp, #4]
   b8cfa:	bd08      	pop	{r3, pc}
   b8cfc:	0003024c 	.word	0x0003024c

000b8d00 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b8d00:	b508      	push	{r3, lr}
   b8d02:	4b02      	ldr	r3, [pc, #8]	; (b8d0c <HAL_USB_USART_Available_Data+0xc>)
   b8d04:	681b      	ldr	r3, [r3, #0]
   b8d06:	691b      	ldr	r3, [r3, #16]
   b8d08:	9301      	str	r3, [sp, #4]
   b8d0a:	bd08      	pop	{r3, pc}
   b8d0c:	0003024c 	.word	0x0003024c

000b8d10 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b8d10:	b508      	push	{r3, lr}
   b8d12:	4b02      	ldr	r3, [pc, #8]	; (b8d1c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b8d14:	681b      	ldr	r3, [r3, #0]
   b8d16:	695b      	ldr	r3, [r3, #20]
   b8d18:	9301      	str	r3, [sp, #4]
   b8d1a:	bd08      	pop	{r3, pc}
   b8d1c:	0003024c 	.word	0x0003024c

000b8d20 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b8d20:	b508      	push	{r3, lr}
   b8d22:	4b02      	ldr	r3, [pc, #8]	; (b8d2c <HAL_USB_USART_Receive_Data+0xc>)
   b8d24:	681b      	ldr	r3, [r3, #0]
   b8d26:	699b      	ldr	r3, [r3, #24]
   b8d28:	9301      	str	r3, [sp, #4]
   b8d2a:	bd08      	pop	{r3, pc}
   b8d2c:	0003024c 	.word	0x0003024c

000b8d30 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b8d30:	b508      	push	{r3, lr}
   b8d32:	4b02      	ldr	r3, [pc, #8]	; (b8d3c <HAL_USB_USART_Send_Data+0xc>)
   b8d34:	681b      	ldr	r3, [r3, #0]
   b8d36:	69db      	ldr	r3, [r3, #28]
   b8d38:	9301      	str	r3, [sp, #4]
   b8d3a:	bd08      	pop	{r3, pc}
   b8d3c:	0003024c 	.word	0x0003024c

000b8d40 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b8d40:	b508      	push	{r3, lr}
   b8d42:	4b02      	ldr	r3, [pc, #8]	; (b8d4c <HAL_USB_USART_Flush_Data+0xc>)
   b8d44:	681b      	ldr	r3, [r3, #0]
   b8d46:	6a1b      	ldr	r3, [r3, #32]
   b8d48:	9301      	str	r3, [sp, #4]
   b8d4a:	bd08      	pop	{r3, pc}
   b8d4c:	0003024c 	.word	0x0003024c

000b8d50 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b8d50:	b508      	push	{r3, lr}
   b8d52:	4b02      	ldr	r3, [pc, #8]	; (b8d5c <panic_+0xc>)
   b8d54:	681b      	ldr	r3, [r3, #0]
   b8d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8d58:	9301      	str	r3, [sp, #4]
   b8d5a:	bd08      	pop	{r3, pc}
   b8d5c:	00030260 	.word	0x00030260

000b8d60 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b8d60:	b508      	push	{r3, lr}
   b8d62:	4b02      	ldr	r3, [pc, #8]	; (b8d6c <log_message+0xc>)
   b8d64:	681b      	ldr	r3, [r3, #0]
   b8d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b8d68:	9301      	str	r3, [sp, #4]
   b8d6a:	bd08      	pop	{r3, pc}
   b8d6c:	00030260 	.word	0x00030260

000b8d70 <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b8d70:	b508      	push	{r3, lr}
   b8d72:	4b02      	ldr	r3, [pc, #8]	; (b8d7c <system_mode+0xc>)
   b8d74:	681b      	ldr	r3, [r3, #0]
   b8d76:	681b      	ldr	r3, [r3, #0]
   b8d78:	9301      	str	r3, [sp, #4]
   b8d7a:	bd08      	pop	{r3, pc}
   b8d7c:	00030220 	.word	0x00030220

000b8d80 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b8d80:	b508      	push	{r3, lr}
   b8d82:	4b02      	ldr	r3, [pc, #8]	; (b8d8c <set_system_mode+0xc>)
   b8d84:	681b      	ldr	r3, [r3, #0]
   b8d86:	685b      	ldr	r3, [r3, #4]
   b8d88:	9301      	str	r3, [sp, #4]
   b8d8a:	bd08      	pop	{r3, pc}
   b8d8c:	00030220 	.word	0x00030220

000b8d90 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b8d90:	b508      	push	{r3, lr}
   b8d92:	4b02      	ldr	r3, [pc, #8]	; (b8d9c <system_delay_ms+0xc>)
   b8d94:	681b      	ldr	r3, [r3, #0]
   b8d96:	695b      	ldr	r3, [r3, #20]
   b8d98:	9301      	str	r3, [sp, #4]
   b8d9a:	bd08      	pop	{r3, pc}
   b8d9c:	00030220 	.word	0x00030220

000b8da0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b8da0:	b508      	push	{r3, lr}
   b8da2:	4b02      	ldr	r3, [pc, #8]	; (b8dac <application_thread_current+0xc>)
   b8da4:	681b      	ldr	r3, [r3, #0]
   b8da6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b8da8:	9301      	str	r3, [sp, #4]
   b8daa:	bd08      	pop	{r3, pc}
   b8dac:	00030220 	.word	0x00030220

000b8db0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b8db0:	b508      	push	{r3, lr}
   b8db2:	4b02      	ldr	r3, [pc, #8]	; (b8dbc <application_thread_invoke+0xc>)
   b8db4:	681b      	ldr	r3, [r3, #0]
   b8db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b8db8:	9301      	str	r3, [sp, #4]
   b8dba:	bd08      	pop	{r3, pc}
   b8dbc:	00030220 	.word	0x00030220

000b8dc0 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b8dc0:	b508      	push	{r3, lr}
   b8dc2:	4b02      	ldr	r3, [pc, #8]	; (b8dcc <system_thread_get_state+0xc>)
   b8dc4:	681b      	ldr	r3, [r3, #0]
   b8dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b8dc8:	9301      	str	r3, [sp, #4]
   b8dca:	bd08      	pop	{r3, pc}
   b8dcc:	00030220 	.word	0x00030220

000b8dd0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b8dd0:	b508      	push	{r3, lr}
   b8dd2:	4b03      	ldr	r3, [pc, #12]	; (b8de0 <system_ctrl_set_app_request_handler+0x10>)
   b8dd4:	681b      	ldr	r3, [r3, #0]
   b8dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b8dda:	9301      	str	r3, [sp, #4]
   b8ddc:	bd08      	pop	{r3, pc}
   b8dde:	0000      	.short	0x0000
   b8de0:	00030220 	.word	0x00030220

000b8de4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b8de4:	b508      	push	{r3, lr}
   b8de6:	4b03      	ldr	r3, [pc, #12]	; (b8df4 <system_ctrl_set_result+0x10>)
   b8de8:	681b      	ldr	r3, [r3, #0]
   b8dea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b8dee:	9301      	str	r3, [sp, #4]
   b8df0:	bd08      	pop	{r3, pc}
   b8df2:	0000      	.short	0x0000
   b8df4:	00030220 	.word	0x00030220

000b8df8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b8df8:	b508      	push	{r3, lr}
   b8dfa:	4b02      	ldr	r3, [pc, #8]	; (b8e04 <network_connect+0xc>)
   b8dfc:	681b      	ldr	r3, [r3, #0]
   b8dfe:	685b      	ldr	r3, [r3, #4]
   b8e00:	9301      	str	r3, [sp, #4]
   b8e02:	bd08      	pop	{r3, pc}
   b8e04:	00030240 	.word	0x00030240

000b8e08 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b8e08:	b508      	push	{r3, lr}
   b8e0a:	4b02      	ldr	r3, [pc, #8]	; (b8e14 <network_connecting+0xc>)
   b8e0c:	681b      	ldr	r3, [r3, #0]
   b8e0e:	689b      	ldr	r3, [r3, #8]
   b8e10:	9301      	str	r3, [sp, #4]
   b8e12:	bd08      	pop	{r3, pc}
   b8e14:	00030240 	.word	0x00030240

000b8e18 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b8e18:	b508      	push	{r3, lr}
   b8e1a:	4b02      	ldr	r3, [pc, #8]	; (b8e24 <network_disconnect+0xc>)
   b8e1c:	681b      	ldr	r3, [r3, #0]
   b8e1e:	68db      	ldr	r3, [r3, #12]
   b8e20:	9301      	str	r3, [sp, #4]
   b8e22:	bd08      	pop	{r3, pc}
   b8e24:	00030240 	.word	0x00030240

000b8e28 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b8e28:	b508      	push	{r3, lr}
   b8e2a:	4b02      	ldr	r3, [pc, #8]	; (b8e34 <network_ready+0xc>)
   b8e2c:	681b      	ldr	r3, [r3, #0]
   b8e2e:	691b      	ldr	r3, [r3, #16]
   b8e30:	9301      	str	r3, [sp, #4]
   b8e32:	bd08      	pop	{r3, pc}
   b8e34:	00030240 	.word	0x00030240

000b8e38 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b8e38:	b508      	push	{r3, lr}
   b8e3a:	4b02      	ldr	r3, [pc, #8]	; (b8e44 <network_on+0xc>)
   b8e3c:	681b      	ldr	r3, [r3, #0]
   b8e3e:	695b      	ldr	r3, [r3, #20]
   b8e40:	9301      	str	r3, [sp, #4]
   b8e42:	bd08      	pop	{r3, pc}
   b8e44:	00030240 	.word	0x00030240

000b8e48 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b8e48:	b508      	push	{r3, lr}
   b8e4a:	4b02      	ldr	r3, [pc, #8]	; (b8e54 <network_off+0xc>)
   b8e4c:	681b      	ldr	r3, [r3, #0]
   b8e4e:	699b      	ldr	r3, [r3, #24]
   b8e50:	9301      	str	r3, [sp, #4]
   b8e52:	bd08      	pop	{r3, pc}
   b8e54:	00030240 	.word	0x00030240

000b8e58 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b8e58:	b508      	push	{r3, lr}
   b8e5a:	4b02      	ldr	r3, [pc, #8]	; (b8e64 <network_listen+0xc>)
   b8e5c:	681b      	ldr	r3, [r3, #0]
   b8e5e:	69db      	ldr	r3, [r3, #28]
   b8e60:	9301      	str	r3, [sp, #4]
   b8e62:	bd08      	pop	{r3, pc}
   b8e64:	00030240 	.word	0x00030240

000b8e68 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b8e68:	b508      	push	{r3, lr}
   b8e6a:	4b02      	ldr	r3, [pc, #8]	; (b8e74 <network_listening+0xc>)
   b8e6c:	681b      	ldr	r3, [r3, #0]
   b8e6e:	6a1b      	ldr	r3, [r3, #32]
   b8e70:	9301      	str	r3, [sp, #4]
   b8e72:	bd08      	pop	{r3, pc}
   b8e74:	00030240 	.word	0x00030240

000b8e78 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b8e78:	b508      	push	{r3, lr}
   b8e7a:	4b02      	ldr	r3, [pc, #8]	; (b8e84 <network_set_listen_timeout+0xc>)
   b8e7c:	681b      	ldr	r3, [r3, #0]
   b8e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8e80:	9301      	str	r3, [sp, #4]
   b8e82:	bd08      	pop	{r3, pc}
   b8e84:	00030240 	.word	0x00030240

000b8e88 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b8e88:	b508      	push	{r3, lr}
   b8e8a:	4b02      	ldr	r3, [pc, #8]	; (b8e94 <network_get_listen_timeout+0xc>)
   b8e8c:	681b      	ldr	r3, [r3, #0]
   b8e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b8e90:	9301      	str	r3, [sp, #4]
   b8e92:	bd08      	pop	{r3, pc}
   b8e94:	00030240 	.word	0x00030240

000b8e98 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b8e98:	b508      	push	{r3, lr}
   b8e9a:	4b02      	ldr	r3, [pc, #8]	; (b8ea4 <network_is_on+0xc>)
   b8e9c:	681b      	ldr	r3, [r3, #0]
   b8e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8ea0:	9301      	str	r3, [sp, #4]
   b8ea2:	bd08      	pop	{r3, pc}
   b8ea4:	00030240 	.word	0x00030240

000b8ea8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b8ea8:	b508      	push	{r3, lr}
   b8eaa:	4b02      	ldr	r3, [pc, #8]	; (b8eb4 <network_is_off+0xc>)
   b8eac:	681b      	ldr	r3, [r3, #0]
   b8eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8eb0:	9301      	str	r3, [sp, #4]
   b8eb2:	bd08      	pop	{r3, pc}
   b8eb4:	00030240 	.word	0x00030240

000b8eb8 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b8eb8:	b508      	push	{r3, lr}
   b8eba:	4b02      	ldr	r3, [pc, #8]	; (b8ec4 <spark_process+0xc>)
   b8ebc:	681b      	ldr	r3, [r3, #0]
   b8ebe:	689b      	ldr	r3, [r3, #8]
   b8ec0:	9301      	str	r3, [sp, #4]
   b8ec2:	bd08      	pop	{r3, pc}
   b8ec4:	00030244 	.word	0x00030244

000b8ec8 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b8ec8:	b508      	push	{r3, lr}
   b8eca:	4b02      	ldr	r3, [pc, #8]	; (b8ed4 <spark_cloud_flag_connected+0xc>)
   b8ecc:	681b      	ldr	r3, [r3, #0]
   b8ece:	695b      	ldr	r3, [r3, #20]
   b8ed0:	9301      	str	r3, [sp, #4]
   b8ed2:	bd08      	pop	{r3, pc}
   b8ed4:	00030244 	.word	0x00030244

000b8ed8 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b8ed8:	b508      	push	{r3, lr}
   b8eda:	4b02      	ldr	r3, [pc, #8]	; (b8ee4 <spark_send_event+0xc>)
   b8edc:	681b      	ldr	r3, [r3, #0]
   b8ede:	6a1b      	ldr	r3, [r3, #32]
   b8ee0:	9301      	str	r3, [sp, #4]
   b8ee2:	bd08      	pop	{r3, pc}
   b8ee4:	00030244 	.word	0x00030244

000b8ee8 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b8ee8:	b508      	push	{r3, lr}
   b8eea:	4b02      	ldr	r3, [pc, #8]	; (b8ef4 <spark_subscribe+0xc>)
   b8eec:	681b      	ldr	r3, [r3, #0]
   b8eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8ef0:	9301      	str	r3, [sp, #4]
   b8ef2:	bd08      	pop	{r3, pc}
   b8ef4:	00030244 	.word	0x00030244

000b8ef8 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b8ef8:	b508      	push	{r3, lr}
   b8efa:	4b02      	ldr	r3, [pc, #8]	; (b8f04 <spark_sync_time_pending+0xc>)
   b8efc:	681b      	ldr	r3, [r3, #0]
   b8efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8f00:	9301      	str	r3, [sp, #4]
   b8f02:	bd08      	pop	{r3, pc}
   b8f04:	00030244 	.word	0x00030244

000b8f08 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b8f08:	b508      	push	{r3, lr}
   b8f0a:	4b02      	ldr	r3, [pc, #8]	; (b8f14 <spark_set_random_seed_from_cloud_handler+0xc>)
   b8f0c:	681b      	ldr	r3, [r3, #0]
   b8f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8f10:	9301      	str	r3, [sp, #4]
   b8f12:	bd08      	pop	{r3, pc}
   b8f14:	00030244 	.word	0x00030244

000b8f18 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b8f18:	b508      	push	{r3, lr}
   b8f1a:	4b02      	ldr	r3, [pc, #8]	; (b8f24 <malloc+0xc>)
   b8f1c:	681b      	ldr	r3, [r3, #0]
   b8f1e:	681b      	ldr	r3, [r3, #0]
   b8f20:	9301      	str	r3, [sp, #4]
   b8f22:	bd08      	pop	{r3, pc}
   b8f24:	0003021c 	.word	0x0003021c

000b8f28 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b8f28:	b508      	push	{r3, lr}
   b8f2a:	4b02      	ldr	r3, [pc, #8]	; (b8f34 <free+0xc>)
   b8f2c:	681b      	ldr	r3, [r3, #0]
   b8f2e:	685b      	ldr	r3, [r3, #4]
   b8f30:	9301      	str	r3, [sp, #4]
   b8f32:	bd08      	pop	{r3, pc}
   b8f34:	0003021c 	.word	0x0003021c

000b8f38 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b8f38:	b508      	push	{r3, lr}
   b8f3a:	4b02      	ldr	r3, [pc, #8]	; (b8f44 <realloc+0xc>)
   b8f3c:	681b      	ldr	r3, [r3, #0]
   b8f3e:	689b      	ldr	r3, [r3, #8]
   b8f40:	9301      	str	r3, [sp, #4]
   b8f42:	bd08      	pop	{r3, pc}
   b8f44:	0003021c 	.word	0x0003021c

000b8f48 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b8f48:	b508      	push	{r3, lr}
   b8f4a:	4b02      	ldr	r3, [pc, #8]	; (b8f54 <sprintf+0xc>)
   b8f4c:	681b      	ldr	r3, [r3, #0]
   b8f4e:	68db      	ldr	r3, [r3, #12]
   b8f50:	9301      	str	r3, [sp, #4]
   b8f52:	bd08      	pop	{r3, pc}
   b8f54:	0003021c 	.word	0x0003021c

000b8f58 <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b8f58:	b508      	push	{r3, lr}
   b8f5a:	4b02      	ldr	r3, [pc, #8]	; (b8f64 <sscanf+0xc>)
   b8f5c:	681b      	ldr	r3, [r3, #0]
   b8f5e:	695b      	ldr	r3, [r3, #20]
   b8f60:	9301      	str	r3, [sp, #4]
   b8f62:	bd08      	pop	{r3, pc}
   b8f64:	0003021c 	.word	0x0003021c

000b8f68 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b8f68:	b508      	push	{r3, lr}
   b8f6a:	4b02      	ldr	r3, [pc, #8]	; (b8f74 <snprintf+0xc>)
   b8f6c:	681b      	ldr	r3, [r3, #0]
   b8f6e:	69db      	ldr	r3, [r3, #28]
   b8f70:	9301      	str	r3, [sp, #4]
   b8f72:	bd08      	pop	{r3, pc}
   b8f74:	0003021c 	.word	0x0003021c

000b8f78 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b8f78:	b508      	push	{r3, lr}
   b8f7a:	4b02      	ldr	r3, [pc, #8]	; (b8f84 <vsnprintf+0xc>)
   b8f7c:	681b      	ldr	r3, [r3, #0]
   b8f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b8f80:	9301      	str	r3, [sp, #4]
   b8f82:	bd08      	pop	{r3, pc}
   b8f84:	0003021c 	.word	0x0003021c

000b8f88 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b8f88:	b508      	push	{r3, lr}
   b8f8a:	4b02      	ldr	r3, [pc, #8]	; (b8f94 <abort+0xc>)
   b8f8c:	681b      	ldr	r3, [r3, #0]
   b8f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b8f90:	9301      	str	r3, [sp, #4]
   b8f92:	bd08      	pop	{r3, pc}
   b8f94:	0003021c 	.word	0x0003021c

000b8f98 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b8f98:	b508      	push	{r3, lr}
   b8f9a:	4b02      	ldr	r3, [pc, #8]	; (b8fa4 <_malloc_r+0xc>)
   b8f9c:	681b      	ldr	r3, [r3, #0]
   b8f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b8fa0:	9301      	str	r3, [sp, #4]
   b8fa2:	bd08      	pop	{r3, pc}
   b8fa4:	0003021c 	.word	0x0003021c

000b8fa8 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b8fa8:	b508      	push	{r3, lr}
   b8faa:	4b02      	ldr	r3, [pc, #8]	; (b8fb4 <__errno+0xc>)
   b8fac:	681b      	ldr	r3, [r3, #0]
   b8fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b8fb0:	9301      	str	r3, [sp, #4]
   b8fb2:	bd08      	pop	{r3, pc}
   b8fb4:	0003021c 	.word	0x0003021c

000b8fb8 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b8fb8:	b508      	push	{r3, lr}
   b8fba:	4b02      	ldr	r3, [pc, #8]	; (b8fc4 <__assert_func+0xc>)
   b8fbc:	681b      	ldr	r3, [r3, #0]
   b8fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b8fc0:	9301      	str	r3, [sp, #4]
   b8fc2:	bd08      	pop	{r3, pc}
   b8fc4:	0003021c 	.word	0x0003021c

000b8fc8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b8fc8:	b508      	push	{r3, lr}
   b8fca:	4b02      	ldr	r3, [pc, #8]	; (b8fd4 <newlib_impure_ptr_callback+0xc>)
   b8fcc:	681b      	ldr	r3, [r3, #0]
   b8fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b8fd0:	9301      	str	r3, [sp, #4]
   b8fd2:	bd08      	pop	{r3, pc}
   b8fd4:	0003021c 	.word	0x0003021c

000b8fd8 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b8fd8:	b508      	push	{r3, lr}
   b8fda:	4b02      	ldr	r3, [pc, #8]	; (b8fe4 <localtime_r+0xc>)
   b8fdc:	681b      	ldr	r3, [r3, #0]
   b8fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b8fe0:	9301      	str	r3, [sp, #4]
   b8fe2:	bd08      	pop	{r3, pc}
   b8fe4:	0003021c 	.word	0x0003021c

000b8fe8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b8fe8:	2200      	movs	r2, #0
   b8fea:	6840      	ldr	r0, [r0, #4]
   b8fec:	4611      	mov	r1, r2
   b8fee:	f7ff bf3b 	b.w	b8e68 <network_listening>

000b8ff2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b8ff2:	2200      	movs	r2, #0
   b8ff4:	6840      	ldr	r0, [r0, #4]
   b8ff6:	4611      	mov	r1, r2
   b8ff8:	f7ff bf46 	b.w	b8e88 <network_get_listen_timeout>

000b8ffc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b8ffc:	6840      	ldr	r0, [r0, #4]
   b8ffe:	2200      	movs	r2, #0
   b9000:	f7ff bf3a 	b.w	b8e78 <network_set_listen_timeout>

000b9004 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b9004:	6840      	ldr	r0, [r0, #4]
   b9006:	2200      	movs	r2, #0
   b9008:	f081 0101 	eor.w	r1, r1, #1
   b900c:	f7ff bf24 	b.w	b8e58 <network_listen>

000b9010 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b9010:	2300      	movs	r3, #0
   b9012:	6840      	ldr	r0, [r0, #4]
   b9014:	461a      	mov	r2, r3
   b9016:	4619      	mov	r1, r3
   b9018:	f7ff bf16 	b.w	b8e48 <network_off>

000b901c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b901c:	2300      	movs	r3, #0
   b901e:	6840      	ldr	r0, [r0, #4]
   b9020:	461a      	mov	r2, r3
   b9022:	4619      	mov	r1, r3
   b9024:	f7ff bf08 	b.w	b8e38 <network_on>

000b9028 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b9028:	2200      	movs	r2, #0
   b902a:	6840      	ldr	r0, [r0, #4]
   b902c:	4611      	mov	r1, r2
   b902e:	f7ff befb 	b.w	b8e28 <network_ready>

000b9032 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b9032:	2200      	movs	r2, #0
   b9034:	6840      	ldr	r0, [r0, #4]
   b9036:	4611      	mov	r1, r2
   b9038:	f7ff bee6 	b.w	b8e08 <network_connecting>

000b903c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b903c:	6840      	ldr	r0, [r0, #4]
   b903e:	2200      	movs	r2, #0
   b9040:	2102      	movs	r1, #2
   b9042:	f7ff bee9 	b.w	b8e18 <network_disconnect>

000b9046 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b9046:	2300      	movs	r3, #0
   b9048:	6840      	ldr	r0, [r0, #4]
   b904a:	461a      	mov	r2, r3
   b904c:	f7ff bed4 	b.w	b8df8 <network_connect>

000b9050 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b9050:	4b02      	ldr	r3, [pc, #8]	; (b905c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b9052:	2203      	movs	r2, #3
   b9054:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b9056:	4a02      	ldr	r2, [pc, #8]	; (b9060 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b9058:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b905a:	4770      	bx	lr
   b905c:	2003e654 	.word	0x2003e654
   b9060:	000c0c60 	.word	0x000c0c60

000b9064 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b9064:	2100      	movs	r1, #0
   b9066:	f7ff be33 	b.w	b8cd0 <hal_spi_release>

000b906a <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b906a:	2100      	movs	r1, #0
   b906c:	f7ff be28 	b.w	b8cc0 <hal_spi_acquire>

000b9070 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b9070:	b510      	push	{r4, lr}
   b9072:	4604      	mov	r4, r0
   b9074:	4608      	mov	r0, r1
{
    _spi = spi;
   b9076:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b9078:	f7ff fdf2 	bl	b8c60 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b907c:	2300      	movs	r3, #0
   b907e:	6063      	str	r3, [r4, #4]
}
   b9080:	4620      	mov	r0, r4
   b9082:	bd10      	pop	{r4, pc}

000b9084 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b9084:	b513      	push	{r0, r1, r4, lr}
   b9086:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b9088:	7800      	ldrb	r0, [r0, #0]
   b908a:	f7ff ffee 	bl	b906a <_ZN8SPIClass4lockEv.isra.0>
   b908e:	b958      	cbnz	r0, b90a8 <_ZN8SPIClass5beginEv+0x24>
   b9090:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b9092:	9001      	str	r0, [sp, #4]
   b9094:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b9098:	f7ff fdd2 	bl	b8c40 <hal_spi_begin>
        unlock();
   b909c:	9801      	ldr	r0, [sp, #4]
    }
}
   b909e:	b002      	add	sp, #8
   b90a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b90a4:	f7ff bfde 	b.w	b9064 <_ZN8SPIClass6unlockEv.isra.0>
   b90a8:	b002      	add	sp, #8
   b90aa:	bd10      	pop	{r4, pc}

000b90ac <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b90ac:	7800      	ldrb	r0, [r0, #0]
   b90ae:	f7ff bfd9 	b.w	b9064 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b90b4 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b90b4:	0840      	lsrs	r0, r0, #1
{
   b90b6:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b90b8:	6018      	str	r0, [r3, #0]
   b90ba:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b90bc:	6818      	ldr	r0, [r3, #0]
   b90be:	4288      	cmp	r0, r1
   b90c0:	b2e5      	uxtb	r5, r4
   b90c2:	d906      	bls.n	b90d2 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b90c4:	3401      	adds	r4, #1
   b90c6:	2c08      	cmp	r4, #8
   b90c8:	d002      	beq.n	b90d0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b90ca:	0840      	lsrs	r0, r0, #1
   b90cc:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b90ce:	e7f5      	b.n	b90bc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b90d0:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b90d2:	4b02      	ldr	r3, [pc, #8]	; (b90dc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b90d4:	5d5b      	ldrb	r3, [r3, r5]
   b90d6:	7013      	strb	r3, [r2, #0]
}
   b90d8:	bd30      	pop	{r4, r5, pc}
   b90da:	bf00      	nop
   b90dc:	000c0c94 	.word	0x000c0c94

000b90e0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b90e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b90e4:	4606      	mov	r6, r0
   b90e6:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b90e8:	7800      	ldrb	r0, [r0, #0]
{
   b90ea:	460c      	mov	r4, r1
    CHECK(lock());
   b90ec:	f7ff ffbd 	bl	b906a <_ZN8SPIClass4lockEv.isra.0>
   b90f0:	2800      	cmp	r0, #0
   b90f2:	db1b      	blt.n	b912c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b90f4:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b90f6:	2214      	movs	r2, #20
   b90f8:	2100      	movs	r1, #0
   b90fa:	a809      	add	r0, sp, #36	; 0x24
   b90fc:	f004 fc5d 	bl	bd9ba <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b9100:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b9102:	2200      	movs	r2, #0
   b9104:	a909      	add	r1, sp, #36	; 0x24
   b9106:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b9108:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b910c:	f7ff fdb8 	bl	b8c80 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b9110:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b9114:	b113      	cbz	r3, b911c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b9116:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b911a:	b155      	cbz	r5, b9132 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b911c:	2700      	movs	r7, #0
   b911e:	46b9      	mov	r9, r7
   b9120:	46b8      	mov	r8, r7
   b9122:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b9124:	7923      	ldrb	r3, [r4, #4]
   b9126:	b15d      	cbz	r5, b9140 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b9128:	b1c3      	cbz	r3, b915c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b912a:	2000      	movs	r0, #0
}
   b912c:	b00f      	add	sp, #60	; 0x3c
   b912e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b9132:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b9136:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b913a:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b913e:	e7f1      	b.n	b9124 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b9140:	2b00      	cmp	r3, #0
   b9142:	d135      	bne.n	b91b0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b9144:	68a3      	ldr	r3, [r4, #8]
   b9146:	4543      	cmp	r3, r8
   b9148:	d108      	bne.n	b915c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b914a:	f88d 9020 	strb.w	r9, [sp, #32]
   b914e:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b9152:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b9156:	89a3      	ldrh	r3, [r4, #12]
   b9158:	429a      	cmp	r2, r3
   b915a:	d0e6      	beq.n	b912a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b915c:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b915e:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b9160:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b9164:	980a      	ldr	r0, [sp, #40]	; 0x28
   b9166:	ab04      	add	r3, sp, #16
   b9168:	f10d 020f 	add.w	r2, sp, #15
   b916c:	f7ff ffa2 	bl	b90b4 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b9170:	7921      	ldrb	r1, [r4, #4]
   b9172:	b985      	cbnz	r5, b9196 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b9174:	b989      	cbnz	r1, b919a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b9176:	68a3      	ldr	r3, [r4, #8]
   b9178:	4543      	cmp	r3, r8
   b917a:	d30e      	bcc.n	b919a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b917c:	f88d 9020 	strb.w	r9, [sp, #32]
   b9180:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b9184:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b9188:	89a3      	ldrh	r3, [r4, #12]
   b918a:	429a      	cmp	r2, r3
   b918c:	d105      	bne.n	b919a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b918e:	9b04      	ldr	r3, [sp, #16]
   b9190:	4543      	cmp	r3, r8
   b9192:	d102      	bne.n	b919a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b9194:	e7c9      	b.n	b912a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b9196:	2900      	cmp	r1, #0
   b9198:	d1f9      	bne.n	b918e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b919a:	2300      	movs	r3, #0
   b919c:	9301      	str	r3, [sp, #4]
   b919e:	7b63      	ldrb	r3, [r4, #13]
   b91a0:	9300      	str	r3, [sp, #0]
   b91a2:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b91a6:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b91a8:	7830      	ldrb	r0, [r6, #0]
   b91aa:	f7ff fd81 	bl	b8cb0 <hal_spi_set_settings>
   b91ae:	e7bc      	b.n	b912a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b91b0:	e9cd 5500 	strd	r5, r5, [sp]
   b91b4:	462b      	mov	r3, r5
   b91b6:	462a      	mov	r2, r5
   b91b8:	2101      	movs	r1, #1
   b91ba:	e7f5      	b.n	b91a8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b91bc <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b91bc:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b91be:	7800      	ldrb	r0, [r0, #0]
   b91c0:	f7ff fd46 	bl	b8c50 <hal_spi_transfer>
}
   b91c4:	b2c0      	uxtb	r0, r0
   b91c6:	bd08      	pop	{r3, pc}

000b91c8 <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   b91c8:	b530      	push	{r4, r5, lr}
   b91ca:	b087      	sub	sp, #28
   b91cc:	4604      	mov	r4, r0
   b91ce:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   b91d0:	9500      	str	r5, [sp, #0]
   b91d2:	7800      	ldrb	r0, [r0, #0]
   b91d4:	f7ff fd5c 	bl	b8c90 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   b91d8:	b93d      	cbnz	r5, b91ea <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   b91da:	7820      	ldrb	r0, [r4, #0]
   b91dc:	a902      	add	r1, sp, #8
   b91de:	f7ff fd5f 	bl	b8ca0 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   b91e2:	f89d 3014 	ldrb.w	r3, [sp, #20]
   b91e6:	07db      	lsls	r3, r3, #31
   b91e8:	d4f7      	bmi.n	b91da <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   b91ea:	b007      	add	sp, #28
   b91ec:	bd30      	pop	{r4, r5, pc}
	...

000b91f0 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b91f0:	4b05      	ldr	r3, [pc, #20]	; (b9208 <_GLOBAL__sub_I_System+0x18>)
   b91f2:	2202      	movs	r2, #2
   b91f4:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b91f6:	4b05      	ldr	r3, [pc, #20]	; (b920c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b91f8:	4a05      	ldr	r2, [pc, #20]	; (b9210 <_GLOBAL__sub_I_System+0x20>)
   b91fa:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b91fc:	2000      	movs	r0, #0
   b91fe:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b9202:	f7ff bdbd 	b.w	b8d80 <set_system_mode>
   b9206:	bf00      	nop
   b9208:	2003e668 	.word	0x2003e668
   b920c:	2003e65c 	.word	0x2003e65c
   b9210:	ffff0000 	.word	0xffff0000

000b9214 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b9214:	b510      	push	{r4, lr}
   b9216:	4604      	mov	r4, r0
{
	free(buffer);
   b9218:	6800      	ldr	r0, [r0, #0]
   b921a:	f7ff fe85 	bl	b8f28 <free>
}
   b921e:	4620      	mov	r0, r4
   b9220:	bd10      	pop	{r4, pc}

000b9222 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b9222:	b510      	push	{r4, lr}
   b9224:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b9226:	6800      	ldr	r0, [r0, #0]
   b9228:	b108      	cbz	r0, b922e <_ZN6String10invalidateEv+0xc>
   b922a:	f7ff fe7d 	bl	b8f28 <free>
	buffer = NULL;
   b922e:	2300      	movs	r3, #0
	capacity = len = 0;
   b9230:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b9234:	6023      	str	r3, [r4, #0]
}
   b9236:	bd10      	pop	{r4, pc}

000b9238 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b9238:	b538      	push	{r3, r4, r5, lr}
   b923a:	4604      	mov	r4, r0
   b923c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b923e:	6800      	ldr	r0, [r0, #0]
   b9240:	3101      	adds	r1, #1
   b9242:	f7ff fe79 	bl	b8f38 <realloc>
	if (newbuffer) {
   b9246:	b110      	cbz	r0, b924e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b9248:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b924c:	2001      	movs	r0, #1
	}
	return 0;
}
   b924e:	bd38      	pop	{r3, r4, r5, pc}

000b9250 <_ZN6String7reserveEj>:
{
   b9250:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b9252:	6803      	ldr	r3, [r0, #0]
{
   b9254:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b9256:	b123      	cbz	r3, b9262 <_ZN6String7reserveEj+0x12>
   b9258:	6843      	ldr	r3, [r0, #4]
   b925a:	428b      	cmp	r3, r1
   b925c:	d301      	bcc.n	b9262 <_ZN6String7reserveEj+0x12>
   b925e:	2001      	movs	r0, #1
}
   b9260:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b9262:	4620      	mov	r0, r4
   b9264:	f7ff ffe8 	bl	b9238 <_ZN6String12changeBufferEj>
   b9268:	2800      	cmp	r0, #0
   b926a:	d0f9      	beq.n	b9260 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b926c:	68a3      	ldr	r3, [r4, #8]
   b926e:	2b00      	cmp	r3, #0
   b9270:	d1f5      	bne.n	b925e <_ZN6String7reserveEj+0xe>
   b9272:	6822      	ldr	r2, [r4, #0]
   b9274:	7013      	strb	r3, [r2, #0]
   b9276:	e7f2      	b.n	b925e <_ZN6String7reserveEj+0xe>

000b9278 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b9278:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b927a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b927c:	4611      	mov	r1, r2
   b927e:	9201      	str	r2, [sp, #4]
{
   b9280:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b9282:	f7ff ffe5 	bl	b9250 <_ZN6String7reserveEj>
   b9286:	9a01      	ldr	r2, [sp, #4]
   b9288:	b928      	cbnz	r0, b9296 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b928a:	4620      	mov	r0, r4
   b928c:	f7ff ffc9 	bl	b9222 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b9290:	4620      	mov	r0, r4
   b9292:	b003      	add	sp, #12
   b9294:	bd30      	pop	{r4, r5, pc}
	len = length;
   b9296:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b9298:	4629      	mov	r1, r5
   b929a:	6820      	ldr	r0, [r4, #0]
   b929c:	f004 fb65 	bl	bd96a <memcpy>
	buffer[len] = 0;
   b92a0:	6822      	ldr	r2, [r4, #0]
   b92a2:	68a3      	ldr	r3, [r4, #8]
   b92a4:	2100      	movs	r1, #0
   b92a6:	54d1      	strb	r1, [r2, r3]
	return *this;
   b92a8:	e7f2      	b.n	b9290 <_ZN6String4copyEPKcj+0x18>

000b92aa <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b92aa:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b92ac:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b92ae:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b92b2:	4604      	mov	r4, r0
	len = 0;
   b92b4:	6083      	str	r3, [r0, #8]
	flags = 0;
   b92b6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b92b8:	b141      	cbz	r1, b92cc <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b92ba:	4608      	mov	r0, r1
   b92bc:	9101      	str	r1, [sp, #4]
   b92be:	f004 fbf2 	bl	bdaa6 <strlen>
   b92c2:	9901      	ldr	r1, [sp, #4]
   b92c4:	4602      	mov	r2, r0
   b92c6:	4620      	mov	r0, r4
   b92c8:	f7ff ffd6 	bl	b9278 <_ZN6String4copyEPKcj>
}
   b92cc:	4620      	mov	r0, r4
   b92ce:	b002      	add	sp, #8
   b92d0:	bd10      	pop	{r4, pc}

000b92d2 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   b92d2:	b538      	push	{r3, r4, r5, lr}
   b92d4:	4605      	mov	r5, r0
	if (buffer) {
   b92d6:	6800      	ldr	r0, [r0, #0]
{
   b92d8:	460c      	mov	r4, r1
	if (buffer) {
   b92da:	b168      	cbz	r0, b92f8 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   b92dc:	686a      	ldr	r2, [r5, #4]
   b92de:	688b      	ldr	r3, [r1, #8]
   b92e0:	429a      	cmp	r2, r3
   b92e2:	d307      	bcc.n	b92f4 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   b92e4:	6809      	ldr	r1, [r1, #0]
   b92e6:	f004 fbb8 	bl	bda5a <strcpy>
			len = rhs.len;
   b92ea:	68a3      	ldr	r3, [r4, #8]
   b92ec:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   b92ee:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   b92f0:	60a3      	str	r3, [r4, #8]
}
   b92f2:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   b92f4:	f7ff fe18 	bl	b8f28 <free>
	buffer = rhs.buffer;
   b92f8:	6823      	ldr	r3, [r4, #0]
   b92fa:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   b92fc:	6863      	ldr	r3, [r4, #4]
   b92fe:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   b9300:	68a3      	ldr	r3, [r4, #8]
   b9302:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   b9304:	2300      	movs	r3, #0
	rhs.capacity = 0;
   b9306:	e9c4 3300 	strd	r3, r3, [r4]
   b930a:	e7f1      	b.n	b92f0 <_ZN6String4moveERS_+0x1e>

000b930c <_ZN6StringC1EOS_>:
String::String(String &&rval)
   b930c:	b510      	push	{r4, lr}
	buffer = NULL;
   b930e:	2300      	movs	r3, #0
	capacity = 0;
   b9310:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   b9314:	4604      	mov	r4, r0
	len = 0;
   b9316:	6083      	str	r3, [r0, #8]
	flags = 0;
   b9318:	7303      	strb	r3, [r0, #12]
	move(rval);
   b931a:	f7ff ffda 	bl	b92d2 <_ZN6String4moveERS_>
}
   b931e:	4620      	mov	r0, r4
   b9320:	bd10      	pop	{r4, pc}

000b9322 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   b9322:	4288      	cmp	r0, r1
{
   b9324:	b510      	push	{r4, lr}
   b9326:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   b9328:	d005      	beq.n	b9336 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   b932a:	680b      	ldr	r3, [r1, #0]
   b932c:	b12b      	cbz	r3, b933a <_ZN6StringaSERKS_+0x18>
   b932e:	688a      	ldr	r2, [r1, #8]
   b9330:	4619      	mov	r1, r3
   b9332:	f7ff ffa1 	bl	b9278 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b9336:	4620      	mov	r0, r4
   b9338:	bd10      	pop	{r4, pc}
	else invalidate();
   b933a:	f7ff ff72 	bl	b9222 <_ZN6String10invalidateEv>
   b933e:	e7fa      	b.n	b9336 <_ZN6StringaSERKS_+0x14>

000b9340 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   b9340:	b510      	push	{r4, lr}
	buffer = NULL;
   b9342:	2300      	movs	r3, #0
String::String(const String &value)
   b9344:	4604      	mov	r4, r0
	capacity = 0;
   b9346:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   b934a:	6083      	str	r3, [r0, #8]
	flags = 0;
   b934c:	7303      	strb	r3, [r0, #12]
	*this = value;
   b934e:	f7ff ffe8 	bl	b9322 <_ZN6StringaSERKS_>
}
   b9352:	4620      	mov	r0, r4
   b9354:	bd10      	pop	{r4, pc}

000b9356 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b9356:	b513      	push	{r0, r1, r4, lr}
   b9358:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b935a:	b159      	cbz	r1, b9374 <_ZN6StringaSEPKc+0x1e>
   b935c:	4608      	mov	r0, r1
   b935e:	9101      	str	r1, [sp, #4]
   b9360:	f004 fba1 	bl	bdaa6 <strlen>
   b9364:	9901      	ldr	r1, [sp, #4]
   b9366:	4602      	mov	r2, r0
   b9368:	4620      	mov	r0, r4
   b936a:	f7ff ff85 	bl	b9278 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b936e:	4620      	mov	r0, r4
   b9370:	b002      	add	sp, #8
   b9372:	bd10      	pop	{r4, pc}
	else invalidate();
   b9374:	f7ff ff55 	bl	b9222 <_ZN6String10invalidateEv>
   b9378:	e7f9      	b.n	b936e <_ZN6StringaSEPKc+0x18>

000b937a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b937a:	b570      	push	{r4, r5, r6, lr}
   b937c:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b937e:	460e      	mov	r6, r1
   b9380:	b909      	cbnz	r1, b9386 <_ZN6String6concatEPKcj+0xc>
   b9382:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b9384:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b9386:	b16a      	cbz	r2, b93a4 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b9388:	6884      	ldr	r4, [r0, #8]
   b938a:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b938c:	4621      	mov	r1, r4
   b938e:	f7ff ff5f 	bl	b9250 <_ZN6String7reserveEj>
   b9392:	2800      	cmp	r0, #0
   b9394:	d0f5      	beq.n	b9382 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b9396:	6828      	ldr	r0, [r5, #0]
   b9398:	68ab      	ldr	r3, [r5, #8]
   b939a:	4631      	mov	r1, r6
   b939c:	4418      	add	r0, r3
   b939e:	f004 fb5c 	bl	bda5a <strcpy>
	len = newlen;
   b93a2:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b93a4:	2001      	movs	r0, #1
   b93a6:	e7ed      	b.n	b9384 <_ZN6String6concatEPKcj+0xa>

000b93a8 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   b93a8:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   b93aa:	2300      	movs	r3, #0
	buf[0] = c;
   b93ac:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   b93b0:	2201      	movs	r2, #1
   b93b2:	a901      	add	r1, sp, #4
	buf[1] = 0;
   b93b4:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   b93b8:	f7ff ffdf 	bl	b937a <_ZN6String6concatEPKcj>
}
   b93bc:	b003      	add	sp, #12
   b93be:	f85d fb04 	ldr.w	pc, [sp], #4

000b93c2 <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   b93c2:	6802      	ldr	r2, [r0, #0]
{
   b93c4:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   b93c6:	6809      	ldr	r1, [r1, #0]
   b93c8:	b162      	cbz	r2, b93e4 <_ZNK6String9compareToERKS_+0x22>
   b93ca:	b941      	cbnz	r1, b93de <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   b93cc:	6880      	ldr	r0, [r0, #8]
   b93ce:	b160      	cbz	r0, b93ea <_ZNK6String9compareToERKS_+0x28>
   b93d0:	7810      	ldrb	r0, [r2, #0]
   b93d2:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b93d4:	6898      	ldr	r0, [r3, #8]
   b93d6:	b140      	cbz	r0, b93ea <_ZNK6String9compareToERKS_+0x28>
   b93d8:	7809      	ldrb	r1, [r1, #0]
   b93da:	4248      	negs	r0, r1
   b93dc:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   b93de:	4610      	mov	r0, r2
   b93e0:	f004 bb31 	b.w	bda46 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   b93e4:	2900      	cmp	r1, #0
   b93e6:	d1f5      	bne.n	b93d4 <_ZNK6String9compareToERKS_+0x12>
		return 0;
   b93e8:	4608      	mov	r0, r1
}
   b93ea:	4770      	bx	lr

000b93ec <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   b93ec:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   b93ee:	6882      	ldr	r2, [r0, #8]
   b93f0:	688b      	ldr	r3, [r1, #8]
   b93f2:	429a      	cmp	r2, r3
   b93f4:	d105      	bne.n	b9402 <_ZNK6String6equalsERKS_+0x16>
   b93f6:	f7ff ffe4 	bl	b93c2 <_ZNK6String9compareToERKS_>
   b93fa:	fab0 f080 	clz	r0, r0
   b93fe:	0940      	lsrs	r0, r0, #5
}
   b9400:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   b9402:	2000      	movs	r0, #0
   b9404:	e7fc      	b.n	b9400 <_ZNK6String6equalsERKS_+0x14>

000b9406 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   b9406:	6883      	ldr	r3, [r0, #8]
   b9408:	428b      	cmp	r3, r1
   b940a:	d903      	bls.n	b9414 <_ZNK6StringixEj+0xe>
   b940c:	6800      	ldr	r0, [r0, #0]
   b940e:	b110      	cbz	r0, b9416 <_ZNK6StringixEj+0x10>
	return buffer[index];
   b9410:	5c40      	ldrb	r0, [r0, r1]
   b9412:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
   b9414:	2000      	movs	r0, #0
}
   b9416:	4770      	bx	lr

000b9418 <_ZNK6String6charAtEj>:
	return operator[](loc);
   b9418:	f7ff bff5 	b.w	b9406 <_ZNK6StringixEj>

000b941c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b941c:	4770      	bx	lr

000b941e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b941e:	4770      	bx	lr

000b9420 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b9420:	4770      	bx	lr

000b9422 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b9422:	4770      	bx	lr

000b9424 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b9424:	4b06      	ldr	r3, [pc, #24]	; (b9440 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b9426:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b9428:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b942a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b942e:	d005      	beq.n	b943c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b9430:	4608      	mov	r0, r1
   b9432:	f003 fbf5 	bl	bcc20 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b9436:	2800      	cmp	r0, #0
   b9438:	bf08      	it	eq
   b943a:	2400      	moveq	r4, #0
      }
   b943c:	4620      	mov	r0, r4
   b943e:	bd10      	pop	{r4, pc}
   b9440:	000c0f0c 	.word	0x000c0f0c

000b9444 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b9444:	4b06      	ldr	r3, [pc, #24]	; (b9460 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b9446:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b9448:	b510      	push	{r4, lr}
   b944a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b944e:	d005      	beq.n	b945c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b9450:	4608      	mov	r0, r1
   b9452:	f003 fbe5 	bl	bcc20 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b9456:	2800      	cmp	r0, #0
   b9458:	bf08      	it	eq
   b945a:	2400      	moveq	r4, #0
      }
   b945c:	4620      	mov	r0, r4
   b945e:	bd10      	pop	{r4, pc}
   b9460:	000c0f0c 	.word	0x000c0f0c

000b9464 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b9464:	4b06      	ldr	r3, [pc, #24]	; (b9480 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b9466:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b9468:	b510      	push	{r4, lr}
   b946a:	f100 040c 	add.w	r4, r0, #12
	    ||
   b946e:	d005      	beq.n	b947c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b9470:	4608      	mov	r0, r1
   b9472:	f003 fbd5 	bl	bcc20 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b9476:	2800      	cmp	r0, #0
   b9478:	bf08      	it	eq
   b947a:	2400      	moveq	r4, #0
      }
   b947c:	4620      	mov	r0, r4
   b947e:	bd10      	pop	{r4, pc}
   b9480:	000c0f0c 	.word	0x000c0f0c

000b9484 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b9484:	b510      	push	{r4, lr}
   b9486:	2168      	movs	r1, #104	; 0x68
   b9488:	4604      	mov	r4, r0
   b948a:	f7fa fe08 	bl	b409e <_ZdlPvj>
   b948e:	4620      	mov	r0, r4
   b9490:	bd10      	pop	{r4, pc}

000b9492 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b9492:	b510      	push	{r4, lr}
   b9494:	2128      	movs	r1, #40	; 0x28
   b9496:	4604      	mov	r4, r0
   b9498:	f7fa fe01 	bl	b409e <_ZdlPvj>
   b949c:	4620      	mov	r0, r4
   b949e:	bd10      	pop	{r4, pc}

000b94a0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b94a0:	b510      	push	{r4, lr}
   b94a2:	2130      	movs	r1, #48	; 0x30
   b94a4:	4604      	mov	r4, r0
   b94a6:	f7fa fdfa 	bl	b409e <_ZdlPvj>
   b94aa:	4620      	mov	r0, r4
   b94ac:	bd10      	pop	{r4, pc}

000b94ae <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   b94ae:	2168      	movs	r1, #104	; 0x68
   b94b0:	f7fa bdf5 	b.w	b409e <_ZdlPvj>

000b94b4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b94b4:	2128      	movs	r1, #40	; 0x28
   b94b6:	f7fa bdf2 	b.w	b409e <_ZdlPvj>

000b94ba <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b94ba:	2130      	movs	r1, #48	; 0x30
   b94bc:	f7fa bdef 	b.w	b409e <_ZdlPvj>

000b94c0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b94c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b94c2:	2500      	movs	r5, #0
   b94c4:	1cec      	adds	r4, r5, #3
   b94c6:	428c      	cmp	r4, r1
   b94c8:	d80d      	bhi.n	b94e6 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b94ca:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b94cc:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b94ce:	5d87      	ldrb	r7, [r0, r6]
   b94d0:	4297      	cmp	r7, r2
   b94d2:	d105      	bne.n	b94e0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b94d4:	4426      	add	r6, r4
   b94d6:	42b1      	cmp	r1, r6
   b94d8:	d305      	bcc.n	b94e6 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b94da:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b94dc:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b94de:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b94e0:	3401      	adds	r4, #1
   b94e2:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b94e4:	e7ee      	b.n	b94c4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b94e6:	2000      	movs	r0, #0
   b94e8:	e7f9      	b.n	b94de <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b94ec <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b94ec:	4a02      	ldr	r2, [pc, #8]	; (b94f8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b94ee:	4903      	ldr	r1, [pc, #12]	; (b94fc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b94f0:	200a      	movs	r0, #10
   b94f2:	f7ff bc2d 	b.w	b8d50 <panic_>
   b94f6:	bf00      	nop
   b94f8:	000b8889 	.word	0x000b8889
   b94fc:	000c0c9c 	.word	0x000c0c9c

000b9500 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b9500:	b430      	push	{r4, r5}
   b9502:	460d      	mov	r5, r1
   b9504:	4611      	mov	r1, r2
   b9506:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b9508:	6803      	ldr	r3, [r0, #0]
   b950a:	6809      	ldr	r1, [r1, #0]
   b950c:	6828      	ldr	r0, [r5, #0]
   b950e:	e9d3 4300 	ldrd	r4, r3, [r3]
   b9512:	46a4      	mov	ip, r4
      }
   b9514:	bc30      	pop	{r4, r5}
   b9516:	4760      	bx	ip

000b9518 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b9518:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b951a:	b538      	push	{r3, r4, r5, lr}
   b951c:	4604      	mov	r4, r0
	switch (__op)
   b951e:	d102      	bne.n	b9526 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b9520:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b9522:	6023      	str	r3, [r4, #0]
	}
   b9524:	e003      	b.n	b952e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b9526:	2a02      	cmp	r2, #2
   b9528:	d003      	beq.n	b9532 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b952a:	2a03      	cmp	r2, #3
   b952c:	d00d      	beq.n	b954a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b952e:	2000      	movs	r0, #0
   b9530:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b9532:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b9534:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b9536:	f7fa fdae 	bl	b4096 <_Znwj>
   b953a:	4603      	mov	r3, r0
   b953c:	2800      	cmp	r0, #0
   b953e:	d0f0      	beq.n	b9522 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b9540:	e895 0003 	ldmia.w	r5, {r0, r1}
   b9544:	e883 0003 	stmia.w	r3, {r0, r1}
   b9548:	e7eb      	b.n	b9522 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b954a:	6800      	ldr	r0, [r0, #0]
   b954c:	2800      	cmp	r0, #0
   b954e:	d0ee      	beq.n	b952e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b9550:	2108      	movs	r1, #8
   b9552:	f7fa fda4 	bl	b409e <_ZdlPvj>
   b9556:	e7ea      	b.n	b952e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b9558 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
   b9558:	b510      	push	{r4, lr}
	if (_M_manager)
   b955a:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b955c:	4604      	mov	r4, r0
	if (_M_manager)
   b955e:	b12b      	cbz	r3, b956c <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b9560:	2203      	movs	r2, #3
   b9562:	4601      	mov	r1, r0
   b9564:	4798      	blx	r3
	    _M_manager = nullptr;
   b9566:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b9568:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
   b956c:	bd10      	pop	{r4, pc}

000b956e <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
   b956e:	b510      	push	{r4, lr}
	if (_M_manager)
   b9570:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b9572:	4604      	mov	r4, r0
	if (_M_manager)
   b9574:	b12b      	cbz	r3, b9582 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b9576:	2203      	movs	r2, #3
   b9578:	4601      	mov	r1, r0
   b957a:	4798      	blx	r3
	    _M_manager = nullptr;
   b957c:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b957e:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
   b9582:	bd10      	pop	{r4, pc}

000b9584 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>:
class BleDiscoveryDelegator {
public:
    BleDiscoveryDelegator() = default;
    ~BleDiscoveryDelegator() = default;

    int discoverAllServices(BlePeerDevice& peer) {
   b9584:	b510      	push	{r4, lr}
        LOG(TRACE, "Start discovering services.");
   b9586:	2300      	movs	r3, #0
    int discoverAllServices(BlePeerDevice& peer) {
   b9588:	b08a      	sub	sp, #40	; 0x28
        LOG(TRACE, "Start discovering services.");
   b958a:	2220      	movs	r2, #32
   b958c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    int discoverAllServices(BlePeerDevice& peer) {
   b9590:	4604      	mov	r4, r0
        LOG(TRACE, "Start discovering services.");
   b9592:	4a08      	ldr	r2, [pc, #32]	; (b95b4 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x30>)
   b9594:	9200      	str	r2, [sp, #0]
   b9596:	4908      	ldr	r1, [pc, #32]	; (b95b8 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x34>)
   b9598:	aa02      	add	r2, sp, #8
   b959a:	2001      	movs	r0, #1
   b959c:	f7ff fbe0 	bl	b8d60 <log_message>
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   b95a0:	6820      	ldr	r0, [r4, #0]
   b95a2:	4906      	ldr	r1, [pc, #24]	; (b95bc <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x38>)
   b95a4:	8800      	ldrh	r0, [r0, #0]
   b95a6:	2300      	movs	r3, #0
   b95a8:	4622      	mov	r2, r4
    }
   b95aa:	b00a      	add	sp, #40	; 0x28
   b95ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   b95b0:	f7ff b9d0 	b.w	b8954 <hal_ble_gatt_client_discover_all_services>
   b95b4:	000c0cbe 	.word	0x000c0cbe
   b95b8:	000c0cb3 	.word	0x000c0cb3
   b95bc:	000bb12d 	.word	0x000bb12d

000b95c0 <_ZL12bytes2hexbufPKhjPc.isra.0>:
{
    *p++ = ascii_nibble_lower_case(nibble);
    return p;
}

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
   b95c0:	b510      	push	{r4, lr}
   b95c2:	3801      	subs	r0, #1
   b95c4:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
    {
        out = concat_nibble(out, (buf[i] >> 4));
   b95c8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   b95cc:	091b      	lsrs	r3, r3, #4
    char hex_digit = nibble + 48;
   b95ce:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b95d2:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b95d4:	bf88      	it	hi
   b95d6:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    *p++ = ascii_nibble(nibble);
   b95da:	f802 4b02 	strb.w	r4, [r2], #2
        out = concat_nibble(out, (buf[i] & 0xF));
   b95de:	7803      	ldrb	r3, [r0, #0]
   b95e0:	f003 030f 	and.w	r3, r3, #15
    char hex_digit = nibble + 48;
   b95e4:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b95e8:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b95ea:	bf88      	it	hi
   b95ec:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    for (i = 0; i < len; ++i)
   b95f0:	4291      	cmp	r1, r2
    *p++ = ascii_nibble(nibble);
   b95f2:	f802 4c01 	strb.w	r4, [r2, #-1]
    for (i = 0; i < len; ++i)
   b95f6:	d1e7      	bne.n	b95c8 <_ZL12bytes2hexbufPKhjPc.isra.0+0x8>
    }
    return result;
}
   b95f8:	bd10      	pop	{r4, pc}

000b95fa <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b95fa:	b510      	push	{r4, lr}
   b95fc:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b95fe:	3058      	adds	r0, #88	; 0x58
   b9600:	f7fa fee2 	bl	b43c8 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b9604:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b9608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b960c:	f7ff be02 	b.w	b9214 <_ZN6StringD1Ev>

000b9610 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>:
      operator=(const __shared_count& __r) noexcept
   b9610:	b538      	push	{r3, r4, r5, lr}
	if (__tmp != _M_pi)
   b9612:	6803      	ldr	r3, [r0, #0]
   b9614:	428b      	cmp	r3, r1
      operator=(const __shared_count& __r) noexcept
   b9616:	4605      	mov	r5, r0
   b9618:	460c      	mov	r4, r1
	if (__tmp != _M_pi)
   b961a:	d008      	beq.n	b962e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1e>
	    if (__tmp != 0)
   b961c:	b111      	cbz	r1, b9624 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x14>
    { ++_M_use_count; }
   b961e:	684b      	ldr	r3, [r1, #4]
   b9620:	3301      	adds	r3, #1
   b9622:	604b      	str	r3, [r1, #4]
	    if (_M_pi != 0)
   b9624:	6828      	ldr	r0, [r5, #0]
   b9626:	b108      	cbz	r0, b962c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1c>
	      _M_pi->_M_release();
   b9628:	f7fa ff0c 	bl	b4444 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b962c:	602c      	str	r4, [r5, #0]
      }
   b962e:	bd38      	pop	{r3, r4, r5, pc}

000b9630 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b9630:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b9634:	b2da      	uxtb	r2, r3
   b9636:	2a09      	cmp	r2, #9
   b9638:	d801      	bhi.n	b963e <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b963a:	4618      	mov	r0, r3
   b963c:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b963e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b9642:	2b05      	cmp	r3, #5
   b9644:	d801      	bhi.n	b964a <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b9646:	3857      	subs	r0, #87	; 0x57
   b9648:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b964a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b964e:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b9650:	bf94      	ite	ls
   b9652:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b9654:	f04f 30ff 	movhi.w	r0, #4294967295
}
   b9658:	4770      	bx	lr
	...

000b965c <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b965c:	b510      	push	{r4, lr}
            locked_(false) {
   b965e:	2300      	movs	r3, #0
   b9660:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b9662:	4b04      	ldr	r3, [pc, #16]	; (b9674 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b9664:	4604      	mov	r4, r0
   b9666:	6818      	ldr	r0, [r3, #0]
   b9668:	f7ff fa2a 	bl	b8ac0 <os_mutex_recursive_lock>
        locked_ = true;
   b966c:	2301      	movs	r3, #1
   b966e:	7023      	strb	r3, [r4, #0]
    }
   b9670:	4620      	mov	r0, r4
   b9672:	bd10      	pop	{r4, pc}
   b9674:	2003e670 	.word	0x2003e670

000b9678 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b9678:	b510      	push	{r4, lr}
        if (locked_) {
   b967a:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b967c:	4604      	mov	r4, r0
        if (locked_) {
   b967e:	b11b      	cbz	r3, b9688 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b9680:	4b02      	ldr	r3, [pc, #8]	; (b968c <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b9682:	6818      	ldr	r0, [r3, #0]
   b9684:	f7ff fa24 	bl	b8ad0 <os_mutex_recursive_unlock>
    }
   b9688:	4620      	mov	r0, r4
   b968a:	bd10      	pop	{r4, pc}
   b968c:	2003e670 	.word	0x2003e670

000b9690 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b9690:	b082      	sub	sp, #8
   b9692:	4603      	mov	r3, r0
    address_ = addr;
   b9694:	6808      	ldr	r0, [r1, #0]
   b9696:	6849      	ldr	r1, [r1, #4]
   b9698:	466a      	mov	r2, sp
   b969a:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b969c:	466a      	mov	r2, sp
   b969e:	ca03      	ldmia	r2!, {r0, r1}
   b96a0:	6018      	str	r0, [r3, #0]
}
   b96a2:	4618      	mov	r0, r3
    address_ = addr.address_;
   b96a4:	6059      	str	r1, [r3, #4]
}
   b96a6:	b002      	add	sp, #8
   b96a8:	4770      	bx	lr

000b96aa <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b96aa:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b96ac:	7982      	ldrb	r2, [r0, #6]
   b96ae:	798b      	ldrb	r3, [r1, #6]
   b96b0:	429a      	cmp	r2, r3
   b96b2:	d106      	bne.n	b96c2 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b96b4:	2206      	movs	r2, #6
   b96b6:	f004 f948 	bl	bd94a <memcmp>
   b96ba:	fab0 f080 	clz	r0, r0
   b96be:	0940      	lsrs	r0, r0, #5
}
   b96c0:	bd08      	pop	{r3, pc}
    return false;
   b96c2:	2000      	movs	r0, #0
   b96c4:	e7fc      	b.n	b96c0 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b96c6 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b96c6:	f04f 33ff 	mov.w	r3, #4294967295
   b96ca:	6003      	str	r3, [r0, #0]
   b96cc:	8083      	strh	r3, [r0, #4]
}
   b96ce:	2000      	movs	r0, #0
   b96d0:	4770      	bx	lr

000b96d2 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b96d2:	b508      	push	{r3, lr}
   b96d4:	4602      	mov	r2, r0
        : address_{} {
   b96d6:	2100      	movs	r1, #0
   b96d8:	6001      	str	r1, [r0, #0]
   b96da:	6041      	str	r1, [r0, #4]
    clear();
   b96dc:	f7ff fff3 	bl	b96c6 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b96e0:	7191      	strb	r1, [r2, #6]
}
   b96e2:	4610      	mov	r0, r2
   b96e4:	bd08      	pop	{r3, pc}
	...

000b96e8 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b96e8:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b96ea:	2301      	movs	r3, #1
   b96ec:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b96ee:	4b05      	ldr	r3, [pc, #20]	; (b9704 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b96f0:	4602      	mov	r2, r0
   b96f2:	f103 0110 	add.w	r1, r3, #16
   b96f6:	f853 4b04 	ldr.w	r4, [r3], #4
   b96fa:	f842 4b04 	str.w	r4, [r2], #4
   b96fe:	428b      	cmp	r3, r1
   b9700:	d1f9      	bne.n	b96f6 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b9702:	bd10      	pop	{r4, pc}
   b9704:	000c0f1a 	.word	0x000c0f1a

000b9708 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>:
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   b9708:	7c0b      	ldrb	r3, [r1, #16]
   b970a:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
   b970e:	b530      	push	{r4, r5, lr}
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   b9710:	d10d      	bne.n	b972e <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x26>
        type_ = BleUuidType::SHORT;
   b9712:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b9714:	4b0c      	ldr	r3, [pc, #48]	; (b9748 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x40>)
   b9716:	4602      	mov	r2, r0
   b9718:	f103 0410 	add.w	r4, r3, #16
   b971c:	f853 5b04 	ldr.w	r5, [r3], #4
   b9720:	f842 5b04 	str.w	r5, [r2], #4
   b9724:	42a3      	cmp	r3, r4
   b9726:	d1f9      	bne.n	b971c <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x14>
        uuid128_[UUID16_LO] = (uint8_t)uuid.uuid16;
   b9728:	880b      	ldrh	r3, [r1, #0]
   b972a:	8183      	strh	r3, [r0, #12]
}
   b972c:	bd30      	pop	{r4, r5, pc}
        type_ = BleUuidType::LONG;
   b972e:	2301      	movs	r3, #1
   b9730:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
   b9732:	f101 0210 	add.w	r2, r1, #16
   b9736:	4603      	mov	r3, r0
   b9738:	f851 4b04 	ldr.w	r4, [r1], #4
   b973c:	f843 4b04 	str.w	r4, [r3], #4
   b9740:	4291      	cmp	r1, r2
   b9742:	d1f9      	bne.n	b9738 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x30>
   b9744:	e7f2      	b.n	b972c <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x24>
   b9746:	bf00      	nop
   b9748:	000c0f1a 	.word	0x000c0f1a

000b974c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b974c:	b510      	push	{r4, lr}
    if (uuid128) {
   b974e:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b9750:	4604      	mov	r4, r0
    if (uuid128) {
   b9752:	b1b1      	cbz	r1, b9782 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b9754:	2a01      	cmp	r2, #1
   b9756:	f101 0210 	add.w	r2, r1, #16
   b975a:	d10a      	bne.n	b9772 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b975c:	4601      	mov	r1, r0
   b975e:	f853 0b04 	ldr.w	r0, [r3], #4
   b9762:	f841 0b04 	str.w	r0, [r1], #4
   b9766:	4293      	cmp	r3, r2
   b9768:	d1f9      	bne.n	b975e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b976a:	2301      	movs	r3, #1
   b976c:	6123      	str	r3, [r4, #16]
}
   b976e:	4620      	mov	r0, r4
   b9770:	bd10      	pop	{r4, pc}
   b9772:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b9774:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b9778:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b977c:	429a      	cmp	r2, r3
   b977e:	d1f9      	bne.n	b9774 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b9780:	e7f3      	b.n	b976a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b9782:	2210      	movs	r2, #16
   b9784:	f004 f919 	bl	bd9ba <memset>
   b9788:	e7f1      	b.n	b976e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b978a <_ZN8particle7BleUuidC1Et>:
BleUuid::BleUuid(uint16_t uuid16)
   b978a:	b538      	push	{r3, r4, r5, lr}
   b978c:	4604      	mov	r4, r0
   b978e:	460d      	mov	r5, r1
        : BleUuid() {
   b9790:	f7ff ffaa 	bl	b96e8 <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   b9794:	2300      	movs	r3, #0
   b9796:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b9798:	81a5      	strh	r5, [r4, #12]
}
   b979a:	4620      	mov	r0, r4
   b979c:	bd38      	pop	{r3, r4, r5, pc}

000b979e <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b979e:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b97a0:	6902      	ldr	r2, [r0, #16]
   b97a2:	690b      	ldr	r3, [r1, #16]
   b97a4:	429a      	cmp	r2, r3
   b97a6:	d106      	bne.n	b97b6 <_ZNK8particle7BleUuideqERKS0_+0x18>
   b97a8:	2210      	movs	r2, #16
   b97aa:	f004 f8ce 	bl	bd94a <memcmp>
   b97ae:	fab0 f080 	clz	r0, r0
   b97b2:	0940      	lsrs	r0, r0, #5
}
   b97b4:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b97b6:	2000      	movs	r0, #0
   b97b8:	e7fc      	b.n	b97b4 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b97bc <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b97bc:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b97be:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b97c2:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b97c4:	4b34      	ldr	r3, [pc, #208]	; (b9898 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b97c6:	460c      	mov	r4, r1
   b97c8:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b97ca:	4602      	mov	r2, r0
   b97cc:	f103 0110 	add.w	r1, r3, #16
   b97d0:	f853 0b04 	ldr.w	r0, [r3], #4
   b97d4:	f842 0b04 	str.w	r0, [r2], #4
   b97d8:	428b      	cmp	r3, r1
   b97da:	d1f9      	bne.n	b97d0 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b97dc:	b344      	cbz	r4, b9830 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b97de:	2124      	movs	r1, #36	; 0x24
   b97e0:	4620      	mov	r0, r4
   b97e2:	f004 f98f 	bl	bdb04 <strnlen>
   b97e6:	2804      	cmp	r0, #4
   b97e8:	f04f 0500 	mov.w	r5, #0
   b97ec:	d123      	bne.n	b9836 <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b97ee:	f8ad 5004 	strh.w	r5, [sp, #4]
   b97f2:	af01      	add	r7, sp, #4
   b97f4:	1ca5      	adds	r5, r4, #2
   b97f6:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b97f8:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b97fc:	f7ff ff18 	bl	b9630 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b9800:	f1b0 0800 	subs.w	r8, r0, #0
   b9804:	db12      	blt.n	b982c <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b9806:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b980a:	f7ff ff11 	bl	b9630 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b980e:	2800      	cmp	r0, #0
   b9810:	db0c      	blt.n	b982c <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b9812:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b9814:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b9818:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b981a:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b981e:	d1eb      	bne.n	b97f8 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b9820:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b9824:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b9826:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b982a:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b982c:	2300      	movs	r3, #0
   b982e:	6133      	str	r3, [r6, #16]
}
   b9830:	b002      	add	sp, #8
   b9832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b9836:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b983a:	2124      	movs	r1, #36	; 0x24
   b983c:	4620      	mov	r0, r4
   b983e:	f004 f961 	bl	bdb04 <strnlen>
   b9842:	42a8      	cmp	r0, r5
   b9844:	d807      	bhi.n	b9856 <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b9846:	4642      	mov	r2, r8
   b9848:	2100      	movs	r1, #0
   b984a:	4630      	mov	r0, r6
}
   b984c:	b002      	add	sp, #8
   b984e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b9852:	f004 b8b2 	b.w	bd9ba <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b9856:	f1b8 0f00 	cmp.w	r8, #0
   b985a:	d0e9      	beq.n	b9830 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b985c:	5d60      	ldrb	r0, [r4, r5]
   b985e:	f7ff fee7 	bl	b9630 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b9862:	0603      	lsls	r3, r0, #24
   b9864:	d415      	bmi.n	b9892 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b9866:	0100      	lsls	r0, r0, #4
   b9868:	f108 38ff 	add.w	r8, r8, #4294967295
   b986c:	b2c7      	uxtb	r7, r0
   b986e:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b9872:	2124      	movs	r1, #36	; 0x24
   b9874:	4620      	mov	r0, r4
   b9876:	f004 f945 	bl	bdb04 <strnlen>
   b987a:	3501      	adds	r5, #1
   b987c:	42a8      	cmp	r0, r5
   b987e:	d908      	bls.n	b9892 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b9880:	5d60      	ldrb	r0, [r4, r5]
   b9882:	f7ff fed5 	bl	b9630 <_ZN8particle11hexToNibbleEc>
   b9886:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b9888:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b988a:	bfa4      	itt	ge
   b988c:	4338      	orrge	r0, r7
   b988e:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b9892:	3501      	adds	r5, #1
   b9894:	e7d1      	b.n	b983a <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b9896:	bf00      	nop
   b9898:	000c0f1a 	.word	0x000c0f1a

000b989c <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b989c:	b513      	push	{r0, r1, r4, lr}
   b989e:	4604      	mov	r4, r0
   b98a0:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b98a2:	f7ff ff21 	bl	b96e8 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b98a6:	4620      	mov	r0, r4
   b98a8:	9901      	ldr	r1, [sp, #4]
   b98aa:	f7ff ff87 	bl	b97bc <_ZN8particle7BleUuid9constructEPKc>
}
   b98ae:	4620      	mov	r0, r4
   b98b0:	b002      	add	sp, #8
   b98b2:	bd10      	pop	{r4, pc}

000b98b4 <_ZNK8particle7BleUuid11toBigEndianEPh>:
void BleUuid::toBigEndian(uint8_t buf[BLE_SIG_UUID_128BIT_LEN]) const {
   b98b4:	b510      	push	{r4, lr}
   b98b6:	f100 030f 	add.w	r3, r0, #15
   b98ba:	3901      	subs	r1, #1
        buf[i] = uuid128_[j];
   b98bc:	781c      	ldrb	r4, [r3, #0]
   b98be:	f801 4f01 	strb.w	r4, [r1, #1]!
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b98c2:	4283      	cmp	r3, r0
   b98c4:	f103 33ff 	add.w	r3, r3, #4294967295
   b98c8:	d1f8      	bne.n	b98bc <_ZNK8particle7BleUuid11toBigEndianEPh+0x8>
}
   b98ca:	bd10      	pop	{r4, pc}

000b98cc <_ZNK8particle7BleUuid8toStringEPcjb>:
size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
   b98cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b98d0:	461f      	mov	r7, r3
   b98d2:	b08e      	sub	sp, #56	; 0x38
    if (!buf || len == 0) {
   b98d4:	460d      	mov	r5, r1
   b98d6:	2900      	cmp	r1, #0
   b98d8:	d05b      	beq.n	b9992 <_ZNK8particle7BleUuid8toStringEPcjb+0xc6>
   b98da:	b1da      	cbz	r2, b9914 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
    if (type() == BleUuidType::SHORT) {
   b98dc:	f8d0 8010 	ldr.w	r8, [r0, #16]
        len = std::min(len - 1, sizeof(cStr));
   b98e0:	1e54      	subs	r4, r2, #1
    if (type() == BleUuidType::SHORT) {
   b98e2:	f1b8 0f00 	cmp.w	r8, #0
   b98e6:	d119      	bne.n	b991c <_ZNK8particle7BleUuid8toStringEPcjb+0x50>
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b98e8:	8983      	ldrh	r3, [r0, #12]
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
   b98ea:	f8cd 8014 	str.w	r8, [sp, #20]
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b98ee:	ba5b      	rev16	r3, r3
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   b98f0:	aa05      	add	r2, sp, #20
   b98f2:	2102      	movs	r1, #2
   b98f4:	a801      	add	r0, sp, #4
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b98f6:	f8ad 3004 	strh.w	r3, [sp, #4]
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   b98fa:	f7ff fe61 	bl	b95c0 <_ZL12bytes2hexbufPKhjPc.isra.0>
        len = std::min(len - 1, sizeof(cStr));
   b98fe:	2c04      	cmp	r4, #4
   b9900:	bf28      	it	cs
   b9902:	2404      	movcs	r4, #4
        memcpy(buf, cStr, len);
   b9904:	4622      	mov	r2, r4
   b9906:	a905      	add	r1, sp, #20
   b9908:	4628      	mov	r0, r5
   b990a:	f004 f82e 	bl	bd96a <memcpy>
        buf[len++] = '\0';
   b990e:	f805 8004 	strb.w	r8, [r5, r4]
   b9912:	1c62      	adds	r2, r4, #1
}
   b9914:	4610      	mov	r0, r2
   b9916:	b00e      	add	sp, #56	; 0x38
   b9918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    toBigEndian(temp);
   b991c:	a901      	add	r1, sp, #4
   b991e:	f7ff ffc9 	bl	b98b4 <_ZNK8particle7BleUuid11toBigEndianEPh>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   b9922:	aa05      	add	r2, sp, #20
    if (stripped) {
   b9924:	b17f      	cbz	r7, b9946 <_ZNK8particle7BleUuid8toStringEPcjb+0x7a>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   b9926:	2110      	movs	r1, #16
   b9928:	a801      	add	r0, sp, #4
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   b992a:	f7ff fe49 	bl	b95c0 <_ZL12bytes2hexbufPKhjPc.isra.0>
    len = std::min(len - 1, sizeof(cStr));
   b992e:	2c24      	cmp	r4, #36	; 0x24
   b9930:	bf28      	it	cs
   b9932:	2424      	movcs	r4, #36	; 0x24
    memcpy(buf, cStr, len);
   b9934:	4622      	mov	r2, r4
   b9936:	a905      	add	r1, sp, #20
   b9938:	4628      	mov	r0, r5
   b993a:	f004 f816 	bl	bd96a <memcpy>
    buf[len++] = '\0';
   b993e:	2300      	movs	r3, #0
   b9940:	552b      	strb	r3, [r5, r4]
   b9942:	1c62      	adds	r2, r4, #1
    return len;
   b9944:	e7e6      	b.n	b9914 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
   b9946:	2104      	movs	r1, #4
   b9948:	eb0d 0001 	add.w	r0, sp, r1
   b994c:	f7ff fe38 	bl	b95c0 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2] = '-';
   b9950:	262d      	movs	r6, #45	; 0x2d
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   b9952:	f10d 021d 	add.w	r2, sp, #29
   b9956:	2102      	movs	r1, #2
   b9958:	a802      	add	r0, sp, #8
        cStr[idx * 2] = '-';
   b995a:	f88d 601c 	strb.w	r6, [sp, #28]
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   b995e:	f7ff fe2f 	bl	b95c0 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   b9962:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   b9966:	2102      	movs	r1, #2
   b9968:	f10d 000a 	add.w	r0, sp, #10
        cStr[idx * 2 + 1] = '-';
   b996c:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   b9970:	f7ff fe26 	bl	b95c0 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   b9974:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   b9978:	2102      	movs	r1, #2
   b997a:	a803      	add	r0, sp, #12
        cStr[idx * 2 + 2] = '-';
   b997c:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   b9980:	f7ff fe1e 	bl	b95c0 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2 + 3] = '-';
   b9984:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   b9988:	aa0b      	add	r2, sp, #44	; 0x2c
   b998a:	2106      	movs	r1, #6
   b998c:	f10d 000e 	add.w	r0, sp, #14
   b9990:	e7cb      	b.n	b992a <_ZNK8particle7BleUuid8toStringEPcjb+0x5e>
        return 0;
   b9992:	460a      	mov	r2, r1
   b9994:	e7be      	b.n	b9914 <_ZNK8particle7BleUuid8toStringEPcjb+0x48>

000b9996 <_ZNK8particle7BleUuid8toStringEb>:
String BleUuid::toString(bool stripped) const {
   b9996:	b510      	push	{r4, lr}
   b9998:	b08a      	sub	sp, #40	; 0x28
   b999a:	4604      	mov	r4, r0
    toString(cStr, sizeof(cStr));
   b999c:	2300      	movs	r3, #0
   b999e:	2225      	movs	r2, #37	; 0x25
String BleUuid::toString(bool stripped) const {
   b99a0:	4608      	mov	r0, r1
    toString(cStr, sizeof(cStr));
   b99a2:	4669      	mov	r1, sp
   b99a4:	f7ff ff92 	bl	b98cc <_ZNK8particle7BleUuid8toStringEPcjb>
    return String(cStr);
   b99a8:	4669      	mov	r1, sp
   b99aa:	4620      	mov	r0, r4
   b99ac:	f7ff fc7d 	bl	b92aa <_ZN6StringC1EPK19__FlashStringHelper>
}
   b99b0:	4620      	mov	r0, r4
   b99b2:	b00a      	add	sp, #40	; 0x28
   b99b4:	bd10      	pop	{r4, pc}

000b99b6 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   b99b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b99b8:	4605      	mov	r5, r0
   b99ba:	4616      	mov	r6, r2
   b99bc:	461f      	mov	r7, r3
   b99be:	460a      	mov	r2, r1
   b99c0:	ab01      	add	r3, sp, #4
   b99c2:	e9d0 0100 	ldrd	r0, r1, [r0]
   b99c6:	f7ff fd7b 	bl	b94c0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (adsLen > 0) {
   b99ca:	f030 0402 	bics.w	r4, r0, #2
   b99ce:	d00c      	beq.n	b99ea <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
            adsLen -= 2;
   b99d0:	1e84      	subs	r4, r0, #2
   b99d2:	42bc      	cmp	r4, r7
   b99d4:	bf28      	it	cs
   b99d6:	463c      	movcs	r4, r7
            if (buf != nullptr) {
   b99d8:	b13e      	cbz	r6, b99ea <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
                memcpy(buf, &selfData_[offset + 2], len);
   b99da:	9901      	ldr	r1, [sp, #4]
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::operator[](int i) const {
    return data_[i];
   b99dc:	682b      	ldr	r3, [r5, #0]
   b99de:	3102      	adds	r1, #2
   b99e0:	4622      	mov	r2, r4
   b99e2:	4419      	add	r1, r3
   b99e4:	4630      	mov	r0, r6
   b99e6:	f003 ffc0 	bl	bd96a <memcpy>
}
   b99ea:	4620      	mov	r0, r4
   b99ec:	b003      	add	sp, #12
   b99ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b99f0 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>:
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b99f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b99f2:	4613      	mov	r3, r2
   b99f4:	460c      	mov	r4, r1
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b99f6:	9201      	str	r2, [sp, #4]
   b99f8:	460a      	mov	r2, r1
   b99fa:	2108      	movs	r1, #8
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b99fc:	4605      	mov	r5, r0
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b99fe:	f7ff ffda 	bl	b99b6 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (nameLen > 0) {
   b9a02:	b940      	cbnz	r0, b9a16 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj+0x26>
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b9a04:	9b01      	ldr	r3, [sp, #4]
   b9a06:	4622      	mov	r2, r4
   b9a08:	2109      	movs	r1, #9
   b9a0a:	4628      	mov	r0, r5
}
   b9a0c:	b003      	add	sp, #12
   b9a0e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b9a12:	f7ff bfd0 	b.w	b99b6 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
}
   b9a16:	b003      	add	sp, #12
   b9a18:	bd30      	pop	{r4, r5, pc}
	...

000b9a1c <_ZNK8particle18BleAdvertisingData10deviceNameEv>:
String BleAdvertisingData::deviceName() const {
   b9a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9a1e:	460c      	mov	r4, r1
   b9a20:	b089      	sub	sp, #36	; 0x24
    String name;
   b9a22:	490c      	ldr	r1, [pc, #48]	; (b9a54 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x38>)
String BleAdvertisingData::deviceName() const {
   b9a24:	4605      	mov	r5, r0
    String name;
   b9a26:	f7ff fc40 	bl	b92aa <_ZN6StringC1EPK19__FlashStringHelper>
    size_t len = deviceName(buf, sizeof(buf));
   b9a2a:	221f      	movs	r2, #31
   b9a2c:	4669      	mov	r1, sp
   b9a2e:	4620      	mov	r0, r4
   b9a30:	f7ff ffde 	bl	b99f0 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>
    if (len > 0) {
   b9a34:	4606      	mov	r6, r0
   b9a36:	b150      	cbz	r0, b9a4e <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
   b9a38:	466c      	mov	r4, sp
        for (size_t i = 0; i < len; i++) {
   b9a3a:	2700      	movs	r7, #0
            if (!name.concat(buf[i])) {
   b9a3c:	f814 1b01 	ldrb.w	r1, [r4], #1
   b9a40:	4628      	mov	r0, r5
   b9a42:	f7ff fcb1 	bl	b93a8 <_ZN6String6concatEc>
   b9a46:	b110      	cbz	r0, b9a4e <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
        for (size_t i = 0; i < len; i++) {
   b9a48:	3701      	adds	r7, #1
   b9a4a:	42be      	cmp	r6, r7
   b9a4c:	d1f6      	bne.n	b9a3c <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x20>
}
   b9a4e:	4628      	mov	r0, r5
   b9a50:	b009      	add	sp, #36	; 0x24
   b9a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b9a54:	000bff2b 	.word	0x000bff2b

000b9a58 <_ZNK8particle18BleAdvertisingData10customDataEPhj>:
size_t BleAdvertisingData::customData(uint8_t* buf, size_t len) const {
   b9a58:	4613      	mov	r3, r2
    return get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len);
   b9a5a:	460a      	mov	r2, r1
   b9a5c:	21ff      	movs	r1, #255	; 0xff
   b9a5e:	f7ff bfaa 	b.w	b99b6 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>

000b9a62 <_ZNK8particle18BleAdvertisingData10appearanceEv>:
ble_sig_appearance_t BleAdvertisingData::appearance() const {
   b9a62:	b507      	push	{r0, r1, r2, lr}
    size_t len = get(BleAdvertisingDataType::APPEARANCE, buf, sizeof(buf));
   b9a64:	2302      	movs	r3, #2
   b9a66:	aa01      	add	r2, sp, #4
   b9a68:	2119      	movs	r1, #25
   b9a6a:	f7ff ffa4 	bl	b99b6 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (len > 0) {
   b9a6e:	b108      	cbz	r0, b9a74 <_ZNK8particle18BleAdvertisingData10appearanceEv+0x12>
        uint16_t temp = (uint16_t)buf[1] << 8 | buf[0];
   b9a70:	f8bd 0004 	ldrh.w	r0, [sp, #4]
}
   b9a74:	b003      	add	sp, #12
   b9a76:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b9a7c <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b9a7c:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b9a7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b9a82:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b9a84:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b9a86:	8043      	strh	r3, [r0, #2]
   b9a88:	220e      	movs	r2, #14
   b9a8a:	4629      	mov	r1, r5
   b9a8c:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b9a8e:	7105      	strb	r5, [r0, #4]
   b9a90:	3006      	adds	r0, #6
   b9a92:	f003 ff92 	bl	bd9ba <memset>
   b9a96:	f104 0014 	add.w	r0, r4, #20
   b9a9a:	f7ff fe25 	bl	b96e8 <_ZN8particle7BleUuidC1Ev>
   b9a9e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b9aa2:	f7ff fe21 	bl	b96e8 <_ZN8particle7BleUuidC1Ev>
   b9aa6:	4904      	ldr	r1, [pc, #16]	; (b9ab8 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b9aa8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b9aac:	f7ff fbfd 	bl	b92aa <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b9ab0:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b9ab2:	4620      	mov	r0, r4
   b9ab4:	bd38      	pop	{r3, r4, r5, pc}
   b9ab6:	bf00      	nop
   b9ab8:	000bff2b 	.word	0x000bff2b

000b9abc <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>:
    bool hasCharacteristic(const BleCharacteristic& characteristic) {
   b9abc:	b538      	push	{r3, r4, r5, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b9abe:	680d      	ldr	r5, [r1, #0]
   b9ac0:	4604      	mov	r4, r0
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   b9ac2:	4601      	mov	r1, r0
   b9ac4:	f105 0028 	add.w	r0, r5, #40	; 0x28
   b9ac8:	f7ff fe69 	bl	b979e <_ZNK8particle7BleUuideqERKS0_>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   b9acc:	b140      	cbz	r0, b9ae0 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>
   b9ace:	89ab      	ldrh	r3, [r5, #12]
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   b9ad0:	8aa2      	ldrh	r2, [r4, #20]
   b9ad2:	429a      	cmp	r2, r3
   b9ad4:	d805      	bhi.n	b9ae2 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x26>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   b9ad6:	8ae0      	ldrh	r0, [r4, #22]
   b9ad8:	4298      	cmp	r0, r3
   b9ada:	bf34      	ite	cc
   b9adc:	2000      	movcc	r0, #0
   b9ade:	2001      	movcs	r0, #1
    }
   b9ae0:	bd38      	pop	{r3, r4, r5, pc}
        return false;
   b9ae2:	2000      	movs	r0, #0
   b9ae4:	e7fc      	b.n	b9ae0 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>

000b9ae6 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b9ae6:	b510      	push	{r4, lr}
    return data_ + size_;
   b9ae8:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b9aec:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b9af0:	4293      	cmp	r3, r2
   b9af2:	4618      	mov	r0, r3
   b9af4:	d006      	beq.n	b9b04 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b9af6:	6804      	ldr	r4, [r0, #0]
   b9af8:	8824      	ldrh	r4, [r4, #0]
   b9afa:	428c      	cmp	r4, r1
   b9afc:	f103 0308 	add.w	r3, r3, #8
   b9b00:	d1f6      	bne.n	b9af0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b9b02:	bd10      	pop	{r4, pc}
        return nullptr;
   b9b04:	2000      	movs	r0, #0
   b9b06:	e7fc      	b.n	b9b02 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>

000b9b08 <_ZN8particle17BleCharacteristicC1Ev>:

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b9b08:	2300      	movs	r3, #0
BleCharacteristic::BleCharacteristic()
   b9b0a:	b570      	push	{r4, r5, r6, lr}
   b9b0c:	6003      	str	r3, [r0, #0]
   b9b0e:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b9b10:	2068      	movs	r0, #104	; 0x68
   b9b12:	f7fa fac0 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b9b16:	1e04      	subs	r4, r0, #0
   b9b18:	f104 060c 	add.w	r6, r4, #12
   b9b1c:	d007      	beq.n	b9b2e <_ZN8particle17BleCharacteristicC1Ev+0x26>
      : _M_use_count(1), _M_weak_count(1) { }
   b9b1e:	2301      	movs	r3, #1
   b9b20:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   b9b24:	4b04      	ldr	r3, [pc, #16]	; (b9b38 <_ZN8particle17BleCharacteristicC1Ev+0x30>)
   b9b26:	6023      	str	r3, [r4, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b9b28:	4630      	mov	r0, r6
   b9b2a:	f7ff ffa7 	bl	b9a7c <_ZN8particle21BleCharacteristicImplC1Ev>
	  __p = __pi->_M_ptr();
   b9b2e:	e9c5 6400 	strd	r6, r4, [r5]
}
   b9b32:	4628      	mov	r0, r5
   b9b34:	bd70      	pop	{r4, r5, r6, pc}
   b9b36:	bf00      	nop
   b9b38:	000c0ec0 	.word	0x000c0ec0

000b9b3c <_ZNK8particle17BleCharacteristic4UUIDEv>:
BleUuid BleCharacteristic::UUID() const {
   b9b3c:	b570      	push	{r4, r5, r6, lr}
    return impl()->charUUID();
   b9b3e:	680c      	ldr	r4, [r1, #0]
   b9b40:	3414      	adds	r4, #20
BleUuid BleCharacteristic::UUID() const {
   b9b42:	4606      	mov	r6, r0
    return impl()->charUUID();
   b9b44:	4605      	mov	r5, r0
   b9b46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b9b48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b9b4a:	6823      	ldr	r3, [r4, #0]
   b9b4c:	602b      	str	r3, [r5, #0]
}
   b9b4e:	4630      	mov	r0, r6
   b9b50:	bd70      	pop	{r4, r5, r6, pc}
	...

000b9b54 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b9b54:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9b56:	4606      	mov	r6, r0
   b9b58:	b085      	sub	sp, #20
   b9b5a:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b9b5c:	460d      	mov	r5, r1
   b9b5e:	2900      	cmp	r1, #0
   b9b60:	d050      	beq.n	b9c04 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b9b62:	2a00      	cmp	r2, #0
   b9b64:	d04e      	beq.n	b9c04 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
      { return _M_ptr; }
   b9b66:	6804      	ldr	r4, [r0, #0]
    if (impl()->isLocal()) {
   b9b68:	7823      	ldrb	r3, [r4, #0]
   b9b6a:	2af4      	cmp	r2, #244	; 0xf4
   b9b6c:	bf28      	it	cs
   b9b6e:	22f4      	movcs	r2, #244	; 0xf4
   b9b70:	b343      	cbz	r3, b9bc4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b9b72:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b9b74:	0798      	lsls	r0, r3, #30
   b9b76:	d509      	bpl.n	b9b8c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b9b78:	89a0      	ldrh	r0, [r4, #12]
   b9b7a:	9203      	str	r2, [sp, #12]
   b9b7c:	2300      	movs	r3, #0
   b9b7e:	f7fe fedf 	bl	b8940 <hal_ble_gatt_server_set_characteristic_value>
   b9b82:	2800      	cmp	r0, #0
   b9b84:	9a03      	ldr	r2, [sp, #12]
   b9b86:	da03      	bge.n	b9b90 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
}
   b9b88:	b005      	add	sp, #20
   b9b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b9b8c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b9b90:	6834      	ldr	r4, [r6, #0]
   b9b92:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b9b94:	06d9      	lsls	r1, r3, #27
   b9b96:	d509      	bpl.n	b9bac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b9b98:	2f01      	cmp	r7, #1
   b9b9a:	d007      	beq.n	b9bac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b9b9c:	89a0      	ldrh	r0, [r4, #12]
   b9b9e:	2300      	movs	r3, #0
   b9ba0:	4629      	mov	r1, r5
}
   b9ba2:	b005      	add	sp, #20
   b9ba4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b9ba8:	f7fe bf2e 	b.w	b8a08 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b9bac:	069b      	lsls	r3, r3, #26
   b9bae:	d5eb      	bpl.n	b9b88 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b9bb0:	2f02      	cmp	r7, #2
   b9bb2:	d0e9      	beq.n	b9b88 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b9bb4:	89a0      	ldrh	r0, [r4, #12]
   b9bb6:	2300      	movs	r3, #0
   b9bb8:	4629      	mov	r1, r5
}
   b9bba:	b005      	add	sp, #20
   b9bbc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b9bc0:	f7fe bf2c 	b.w	b8a1c <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b9bc4:	8860      	ldrh	r0, [r4, #2]
   b9bc6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b9bca:	4288      	cmp	r0, r1
   b9bcc:	d01c      	beq.n	b9c08 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b9bce:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b9bd0:	074e      	lsls	r6, r1, #29
   b9bd2:	d501      	bpl.n	b9bd8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b9bd4:	2f01      	cmp	r7, #1
   b9bd6:	d104      	bne.n	b9be2 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b9bd8:	070b      	lsls	r3, r1, #28
   b9bda:	d409      	bmi.n	b9bf0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b9bdc:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b9be0:	e7d2      	b.n	b9b88 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b9be2:	89a1      	ldrh	r1, [r4, #12]
   b9be4:	9300      	str	r3, [sp, #0]
   b9be6:	4613      	mov	r3, r2
   b9be8:	462a      	mov	r2, r5
   b9bea:	f7fe fed1 	bl	b8990 <hal_ble_gatt_client_write_without_response>
   b9bee:	e7cb      	b.n	b9b88 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b9bf0:	2f02      	cmp	r7, #2
   b9bf2:	d0f3      	beq.n	b9bdc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b9bf4:	2300      	movs	r3, #0
   b9bf6:	89a1      	ldrh	r1, [r4, #12]
   b9bf8:	9300      	str	r3, [sp, #0]
   b9bfa:	4613      	mov	r3, r2
   b9bfc:	462a      	mov	r2, r5
   b9bfe:	f7fe febd 	bl	b897c <hal_ble_gatt_client_write_with_response>
   b9c02:	e7c1      	b.n	b9b88 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b9c04:	4802      	ldr	r0, [pc, #8]	; (b9c10 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b9c06:	e7bf      	b.n	b9b88 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b9c08:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b9c0c:	e7bc      	b.n	b9b88 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b9c0e:	bf00      	nop
   b9c10:	fffffef2 	.word	0xfffffef2

000b9c14 <_ZNK8particle17BleCharacteristic9subscribeEb>:
int BleCharacteristic::subscribe(bool enable) const {
   b9c14:	b510      	push	{r4, lr}
   b9c16:	6803      	ldr	r3, [r0, #0]
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b9c18:	781a      	ldrb	r2, [r3, #0]
int BleCharacteristic::subscribe(bool enable) const {
   b9c1a:	b086      	sub	sp, #24
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b9c1c:	bb52      	cbnz	r2, b9c74 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
   b9c1e:	885c      	ldrh	r4, [r3, #2]
   b9c20:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b9c24:	4284      	cmp	r4, r0
   b9c26:	d025      	beq.n	b9c74 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   b9c28:	8a18      	ldrh	r0, [r3, #16]
   b9c2a:	b330      	cbz	r0, b9c7a <_ZNK8particle17BleCharacteristic9subscribeEb+0x66>
    hal_ble_cccd_config_t config = {};
   b9c2c:	e9cd 2203 	strd	r2, r2, [sp, #12]
   b9c30:	9205      	str	r2, [sp, #20]
    config.version = BLE_API_VERSION;
   b9c32:	4a13      	ldr	r2, [pc, #76]	; (b9c80 <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>)
   b9c34:	9200      	str	r2, [sp, #0]
    config.callback = impl()->onBleCharEvents;
   b9c36:	4a13      	ldr	r2, [pc, #76]	; (b9c84 <_ZNK8particle17BleCharacteristic9subscribeEb+0x70>)
    config.context = impl();
   b9c38:	e9cd 2301 	strd	r2, r3, [sp, #4]
    config.conn_handle = impl()->connHandle();
   b9c3c:	885a      	ldrh	r2, [r3, #2]
   b9c3e:	f8ad 200c 	strh.w	r2, [sp, #12]
    config.cccd_handle = impl()->attrHandles().cccd_handle;
   b9c42:	8a1a      	ldrh	r2, [r3, #16]
   b9c44:	f8ad 200e 	strh.w	r2, [sp, #14]
    config.value_handle = impl()->attrHandles().value_handle;
   b9c48:	899a      	ldrh	r2, [r3, #12]
   b9c4a:	f8ad 2010 	strh.w	r2, [sp, #16]
    if (enable) {
   b9c4e:	b159      	cbz	r1, b9c68 <_ZNK8particle17BleCharacteristic9subscribeEb+0x54>
   b9c50:	791a      	ldrb	r2, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE)) {
   b9c52:	0692      	lsls	r2, r2, #26
            config.cccd_value = BLE_SIG_CCCD_VAL_INDICATION;
   b9c54:	bf44      	itt	mi
   b9c56:	2202      	movmi	r2, #2
   b9c58:	9205      	strmi	r2, [sp, #20]
   b9c5a:	791b      	ldrb	r3, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
   b9c5c:	06db      	lsls	r3, r3, #27
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
   b9c5e:	bf42      	ittt	mi
   b9c60:	9b05      	ldrmi	r3, [sp, #20]
   b9c62:	f043 0301 	orrmi.w	r3, r3, #1
   b9c66:	9305      	strmi	r3, [sp, #20]
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
   b9c68:	2100      	movs	r1, #0
   b9c6a:	4668      	mov	r0, sp
   b9c6c:	f7fe fec2 	bl	b89f4 <hal_ble_gatt_client_configure_cccd>
}
   b9c70:	b006      	add	sp, #24
   b9c72:	bd10      	pop	{r4, pc}
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b9c74:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b9c78:	e7fa      	b.n	b9c70 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   b9c7a:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b9c7e:	e7f7      	b.n	b9c70 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
   b9c80:	00180003 	.word	0x00180003
   b9c84:	000b9e59 	.word	0x000b9e59

000b9c88 <_ZN8particle10BleServiceC1Ev>:
BleService::BleService()
   b9c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b9c8a:	2600      	movs	r6, #0
   b9c8c:	6006      	str	r6, [r0, #0]
   b9c8e:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b9c90:	2028      	movs	r0, #40	; 0x28
   b9c92:	f7fa fa00 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b9c96:	1e04      	subs	r4, r0, #0
   b9c98:	f104 070c 	add.w	r7, r4, #12
   b9c9c:	d00a      	beq.n	b9cb4 <_ZN8particle10BleServiceC1Ev+0x2c>
      : _M_use_count(1), _M_weak_count(1) { }
   b9c9e:	2301      	movs	r3, #1
   b9ca0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   b9ca4:	4b05      	ldr	r3, [pc, #20]	; (b9cbc <_ZN8particle10BleServiceC1Ev+0x34>)
   b9ca6:	6023      	str	r3, [r4, #0]
              characteristicsDiscovered_(false) {
   b9ca8:	4638      	mov	r0, r7
   b9caa:	f7ff fd1d 	bl	b96e8 <_ZN8particle7BleUuidC1Ev>
   b9cae:	6226      	str	r6, [r4, #32]
   b9cb0:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
	  __p = __pi->_M_ptr();
   b9cb4:	e9c5 7400 	strd	r7, r4, [r5]
}
   b9cb8:	4628      	mov	r0, r5
   b9cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b9cbc:	000c0edc 	.word	0x000c0edc

000b9cc0 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b9cc0:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b9cc2:	2500      	movs	r5, #0
   b9cc4:	6005      	str	r5, [r0, #0]
   b9cc6:	4606      	mov	r6, r0
   b9cc8:	2030      	movs	r0, #48	; 0x30
   b9cca:	f7fa f9e4 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b9cce:	4604      	mov	r4, r0
   b9cd0:	b188      	cbz	r0, b9cf6 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b9cd2:	2301      	movs	r3, #1
   b9cd4:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b9cd8:	4b09      	ldr	r3, [pc, #36]	; (b9d00 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b9cda:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b9cdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b9ce0:	8183      	strh	r3, [r0, #12]
   b9ce2:	300e      	adds	r0, #14
   b9ce4:	f7ff fcf5 	bl	b96d2 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b9ce8:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b9cec:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b9cf0:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b9cf4:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b9cf6:	6074      	str	r4, [r6, #4]
   b9cf8:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b9cfa:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b9cfc:	4630      	mov	r0, r6
   b9cfe:	bd70      	pop	{r4, r5, r6, pc}
   b9d00:	000c0ef8 	.word	0x000c0ef8

000b9d04 <_ZNK8particle13BlePeerDevice9connectedEv>:
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    }
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
   b9d04:	b513      	push	{r0, r1, r4, lr}
   b9d06:	4604      	mov	r4, r0
    WiringBleLock lk;
   b9d08:	a801      	add	r0, sp, #4
   b9d0a:	f7ff fca7 	bl	b965c <_ZN8particle3ble13WiringBleLockC1Ev>
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b9d0e:	6823      	ldr	r3, [r4, #0]
   b9d10:	881c      	ldrh	r4, [r3, #0]
   b9d12:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b9d16:	1ae4      	subs	r4, r4, r3
    WiringBleLock lk;
   b9d18:	a801      	add	r0, sp, #4
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b9d1a:	bf18      	it	ne
   b9d1c:	2401      	movne	r4, #1
    WiringBleLock lk;
   b9d1e:	f7ff fcab 	bl	b9678 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b9d22:	4620      	mov	r0, r4
   b9d24:	b002      	add	sp, #8
   b9d26:	bd10      	pop	{r4, pc}

000b9d28 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>:

void BlePeerDevice::bind(const BleAddress& address) const {
   b9d28:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9d2a:	4605      	mov	r5, r0
   b9d2c:	460c      	mov	r4, r1
    WiringBleLock lk;
   b9d2e:	a801      	add	r0, sp, #4
   b9d30:	f7ff fc94 	bl	b965c <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b9d34:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b9d36:	6823      	ldr	r3, [r4, #0]
   b9d38:	f8c2 3002 	str.w	r3, [r2, #2]
   b9d3c:	6863      	ldr	r3, [r4, #4]
   b9d3e:	f8c2 3006 	str.w	r3, [r2, #6]
    WiringBleLock lk;
   b9d42:	a801      	add	r0, sp, #4
   b9d44:	f7ff fc98 	bl	b9678 <_ZN8particle3ble13WiringBleLockD1Ev>
    impl()->address() = address;
}
   b9d48:	b003      	add	sp, #12
   b9d4a:	bd30      	pop	{r4, r5, pc}

000b9d4c <_ZNK8particle13BlePeerDevice7addressEv>:

BleAddress BlePeerDevice::address() const {
   b9d4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9d4e:	460d      	mov	r5, r1
   b9d50:	4604      	mov	r4, r0
    WiringBleLock lk;
   b9d52:	a801      	add	r0, sp, #4
   b9d54:	f7ff fc82 	bl	b965c <_ZN8particle3ble13WiringBleLockC1Ev>
   b9d58:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b9d5a:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b9d5e:	6023      	str	r3, [r4, #0]
   b9d60:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b9d64:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b9d66:	a801      	add	r0, sp, #4
   b9d68:	f7ff fc86 	bl	b9678 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b9d6c:	4620      	mov	r0, r4
   b9d6e:	b003      	add	sp, #12
   b9d70:	bd30      	pop	{r4, r5, pc}

000b9d72 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b9d72:	b530      	push	{r4, r5, lr}
   b9d74:	4605      	mov	r5, r0
   b9d76:	b087      	sub	sp, #28
   b9d78:	460c      	mov	r4, r1
    WiringBleLock lk;
   b9d7a:	a801      	add	r0, sp, #4
   b9d7c:	f7ff fc6e 	bl	b965c <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b9d80:	682a      	ldr	r2, [r5, #0]
   b9d82:	6823      	ldr	r3, [r4, #0]
   b9d84:	8812      	ldrh	r2, [r2, #0]
   b9d86:	881b      	ldrh	r3, [r3, #0]
   b9d88:	429a      	cmp	r2, r3
   b9d8a:	d10d      	bne.n	b9da8 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b9d8c:	4629      	mov	r1, r5
   b9d8e:	a802      	add	r0, sp, #8
   b9d90:	f7ff ffdc 	bl	b9d4c <_ZNK8particle13BlePeerDevice7addressEv>
   b9d94:	4621      	mov	r1, r4
   b9d96:	a804      	add	r0, sp, #16
   b9d98:	f7ff ffd8 	bl	b9d4c <_ZNK8particle13BlePeerDevice7addressEv>
   b9d9c:	a904      	add	r1, sp, #16
   b9d9e:	a802      	add	r0, sp, #8
   b9da0:	f7ff fc83 	bl	b96aa <_ZNK8particle10BleAddresseqERKS0_>
   b9da4:	4604      	mov	r4, r0
   b9da6:	b900      	cbnz	r0, b9daa <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b9da8:	2400      	movs	r4, #0
    WiringBleLock lk;
   b9daa:	a801      	add	r0, sp, #4
   b9dac:	f7ff fc64 	bl	b9678 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b9db0:	4620      	mov	r0, r4
   b9db2:	b007      	add	sp, #28
   b9db4:	bd30      	pop	{r4, r5, pc}
	...

000b9db8 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b9db8:	b510      	push	{r4, lr}
   b9dba:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b9dbc:	2064      	movs	r0, #100	; 0x64
   b9dbe:	f7fa f96a 	bl	b4096 <_Znwj>
   b9dc2:	b168      	cbz	r0, b9de0 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b9dc4:	2300      	movs	r3, #0
   b9dc6:	e9c0 3300 	strd	r3, r3, [r0]
   b9dca:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b9dce:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b9dd2:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b9dd6:	6203      	str	r3, [r0, #32]
   b9dd8:	62c3      	str	r3, [r0, #44]	; 0x2c
   b9dda:	63c3      	str	r3, [r0, #60]	; 0x3c
   b9ddc:	64c3      	str	r3, [r0, #76]	; 0x4c
   b9dde:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b9de0:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b9de2:	b920      	cbnz	r0, b9dee <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b9de4:	4a0a      	ldr	r2, [pc, #40]	; (b9e10 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b9de6:	490b      	ldr	r1, [pc, #44]	; (b9e14 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b9de8:	200a      	movs	r0, #10
   b9dea:	f7fe ffb1 	bl	b8d50 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b9dee:	2000      	movs	r0, #0
   b9df0:	f7fe fd72 	bl	b88d8 <hal_ble_stack_init>
   b9df4:	b120      	cbz	r0, b9e00 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b9df6:	4a06      	ldr	r2, [pc, #24]	; (b9e10 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b9df8:	4907      	ldr	r1, [pc, #28]	; (b9e18 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b9dfa:	200a      	movs	r0, #10
   b9dfc:	f7fe ffa8 	bl	b8d50 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b9e00:	6821      	ldr	r1, [r4, #0]
   b9e02:	4806      	ldr	r0, [pc, #24]	; (b9e1c <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b9e04:	2200      	movs	r2, #0
   b9e06:	f7fe fdeb 	bl	b89e0 <hal_ble_set_callback_on_periph_link_events>
}
   b9e0a:	4620      	mov	r0, r4
   b9e0c:	bd10      	pop	{r4, pc}
   b9e0e:	bf00      	nop
   b9e10:	000b8889 	.word	0x000b8889
   b9e14:	000c0c9c 	.word	0x000c0c9c
   b9e18:	000c0cda 	.word	0x000c0cda
   b9e1c:	000ba85d 	.word	0x000ba85d

000b9e20 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b9e20:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b9e22:	4c0a      	ldr	r4, [pc, #40]	; (b9e4c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b9e24:	7823      	ldrb	r3, [r4, #0]
   b9e26:	f3bf 8f5b 	dmb	ish
   b9e2a:	07db      	lsls	r3, r3, #31
   b9e2c:	d40c      	bmi.n	b9e48 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b9e2e:	4620      	mov	r0, r4
   b9e30:	f7fa f944 	bl	b40bc <__cxa_guard_acquire>
   b9e34:	b140      	cbz	r0, b9e48 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b9e36:	4806      	ldr	r0, [pc, #24]	; (b9e50 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b9e38:	f7ff ffbe 	bl	b9db8 <_ZN8particle14BleLocalDeviceC1Ev>
   b9e3c:	4620      	mov	r0, r4
   b9e3e:	f7fa f942 	bl	b40c6 <__cxa_guard_release>
   b9e42:	4804      	ldr	r0, [pc, #16]	; (b9e54 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b9e44:	f003 fd74 	bl	bd930 <atexit>
    return instance;
}
   b9e48:	4801      	ldr	r0, [pc, #4]	; (b9e50 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b9e4a:	bd10      	pop	{r4, pc}
   b9e4c:	2003e66c 	.word	0x2003e66c
   b9e50:	2003e674 	.word	0x2003e674
   b9e54:	000ba161 	.word	0x000ba161

000b9e58 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b9e58:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b9e5a:	6803      	ldr	r3, [r0, #0]
   b9e5c:	3b09      	subs	r3, #9
   b9e5e:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b9e60:	b08d      	sub	sp, #52	; 0x34
   b9e62:	4604      	mov	r4, r0
   b9e64:	460d      	mov	r5, r1
    switch (event->type) {
   b9e66:	d811      	bhi.n	b9e8c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b9e68:	f7ff ffda 	bl	b9e20 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b9e6c:	88a1      	ldrh	r1, [r4, #4]
   b9e6e:	6800      	ldr	r0, [r0, #0]
   b9e70:	f7ff fe39 	bl	b9ae6 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b9e74:	4603      	mov	r3, r0
   b9e76:	b958      	cbnz	r0, b9e90 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b9e78:	2220      	movs	r2, #32
   b9e7a:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b9e7e:	4a0b      	ldr	r2, [pc, #44]	; (b9eac <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b9e80:	9200      	str	r2, [sp, #0]
   b9e82:	490b      	ldr	r1, [pc, #44]	; (b9eb0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b9e84:	aa04      	add	r2, sp, #16
   b9e86:	2032      	movs	r0, #50	; 0x32
   b9e88:	f7fe ff6a 	bl	b8d60 <log_message>
}
   b9e8c:	b00d      	add	sp, #52	; 0x34
   b9e8e:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b9e90:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b9e92:	2a00      	cmp	r2, #0
   b9e94:	d0fa      	beq.n	b9e8c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b9e96:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b9e9a:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b9e9e:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b9ea2:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b9ea4:	aa04      	add	r2, sp, #16
   b9ea6:	a903      	add	r1, sp, #12
   b9ea8:	47a0      	blx	r4
}
   b9eaa:	e7ef      	b.n	b9e8c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b9eac:	000c0d1c 	.word	0x000c0d1c
   b9eb0:	000c0cb3 	.word	0x000c0cb3

000b9eb4 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b9eb4:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b9eb6:	2000      	movs	r0, #0
   b9eb8:	f7fe fd0e 	bl	b88d8 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b9ebc:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b9ec0:	bd08      	pop	{r3, pc}
	...

000b9ec4 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>:
        scanResultCallbackRef_ = callback ? std::bind(callback, _1, context) : (BleOnScanResultStdFunction)nullptr;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
   b9ec4:	b570      	push	{r4, r5, r6, lr}
   b9ec6:	4604      	mov	r4, r0
        scanResultCallback_ = nullptr;
   b9ec8:	3018      	adds	r0, #24
    int start(BleScanResult* results, size_t resultCount) {
   b9eca:	460e      	mov	r6, r1
   b9ecc:	4615      	mov	r5, r2
        scanResultCallback_ = nullptr;
   b9ece:	f7ff fb43 	bl	b9558 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>
        scanResultCallbackRef_ = nullptr;
   b9ed2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b9ed6:	f7ff fb4a 	bl	b956e <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>
        resultsPtr_ = results;
        targetCount_ = resultCount;
   b9eda:	e9c4 6503 	strd	r6, r5, [r4, #12]
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   b9ede:	2200      	movs	r2, #0
   b9ee0:	4621      	mov	r1, r4
   b9ee2:	4803      	ldr	r0, [pc, #12]	; (b9ef0 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj+0x2c>)
   b9ee4:	f7fe fd10 	bl	b8908 <hal_ble_gap_start_scan>
   b9ee8:	2800      	cmp	r0, #0
        return foundCount_;
   b9eea:	bfa8      	it	ge
   b9eec:	6960      	ldrge	r0, [r4, #20]
    }
   b9eee:	bd70      	pop	{r4, r5, r6, pc}
   b9ef0:	000bb869 	.word	0x000bb869

000b9ef4 <_ZN8particle13BleScanResultD1Ev>:
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   b9ef4:	b510      	push	{r4, lr}
   b9ef6:	4604      	mov	r4, r0
    ::free(ptr);
   b9ef8:	6940      	ldr	r0, [r0, #20]
   b9efa:	f7ff f815 	bl	b8f28 <free>
   b9efe:	68a0      	ldr	r0, [r4, #8]
   b9f00:	f7ff f812 	bl	b8f28 <free>
   b9f04:	4620      	mov	r0, r4
   b9f06:	bd10      	pop	{r4, pc}

000b9f08 <_ZN8particle16BleScanDelegatorC1Ev>:
        capacity_(0) {
   b9f08:	2200      	movs	r2, #0
public:
    BleScanFilter()
            : minRssi_(BLE_RSSI_INVALID),
              maxRssi_(BLE_RSSI_INVALID),
              customData_(nullptr),
              customDataLen_(0) {
   b9f0a:	f647 717f 	movw	r1, #32639	; 0x7f7f
   b9f0e:	e9c0 2200 	strd	r2, r2, [r0]
              scanResultCallbackRef_(nullptr) {
   b9f12:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b9f16:	e9c0 2204 	strd	r2, r2, [r0, #16]
   b9f1a:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
   b9f1e:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
   b9f22:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
   b9f26:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
   b9f2a:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
   b9f2e:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
   b9f32:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
    _Function_base() : _M_manager(nullptr) { }
   b9f36:	6202      	str	r2, [r0, #32]
   b9f38:	6302      	str	r2, [r0, #48]	; 0x30
   b9f3a:	f8a0 1068 	strh.w	r1, [r0, #104]	; 0x68
    }
   b9f3e:	4770      	bx	lr

000b9f40 <_ZNK8particle14BleLocalDevice14setScanTimeoutEt>:
    std::function<void(const BleScanResult*)> scanResultCallback_;
    BleOnScanResultStdFunction scanResultCallbackRef_;
    BleScanFilter filter_;
};

int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
   b9f40:	b530      	push	{r4, r5, lr}
   b9f42:	b085      	sub	sp, #20
    hal_ble_scan_params_t scanParams = {};
   b9f44:	2400      	movs	r4, #0
    scanParams.size = sizeof(hal_ble_scan_params_t);
   b9f46:	2310      	movs	r3, #16
int BleLocalDevice::setScanTimeout(uint16_t timeout) const {
   b9f48:	460d      	mov	r5, r1
    scanParams.size = sizeof(hal_ble_scan_params_t);
   b9f4a:	f8ad 3002 	strh.w	r3, [sp, #2]
    scanParams.version = BLE_API_VERSION;
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   b9f4e:	4621      	mov	r1, r4
    scanParams.version = BLE_API_VERSION;
   b9f50:	2303      	movs	r3, #3
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   b9f52:	4668      	mov	r0, sp
    scanParams.version = BLE_API_VERSION;
   b9f54:	f8ad 3000 	strh.w	r3, [sp]
    hal_ble_scan_params_t scanParams = {};
   b9f58:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b9f5c:	9403      	str	r4, [sp, #12]
    hal_ble_gap_get_scan_parameters(&scanParams, nullptr);
   b9f5e:	f7fe fccb 	bl	b88f8 <hal_ble_gap_get_scan_parameters>
    scanParams.timeout = timeout;
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
   b9f62:	4621      	mov	r1, r4
   b9f64:	4668      	mov	r0, sp
    scanParams.timeout = timeout;
   b9f66:	f8ad 5008 	strh.w	r5, [sp, #8]
    return hal_ble_gap_set_scan_parameters(&scanParams, nullptr);
   b9f6a:	f7fe fcbd 	bl	b88e8 <hal_ble_gap_set_scan_parameters>
}
   b9f6e:	b005      	add	sp, #20
   b9f70:	bd30      	pop	{r4, r5, pc}

000b9f72 <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   b9f72:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   b9f74:	69d8      	ldr	r0, [r3, #28]
}
   b9f76:	2800      	cmp	r0, #0
   b9f78:	bfd4      	ite	le
   b9f7a:	2000      	movle	r0, #0
   b9f7c:	2001      	movgt	r0, #1
   b9f7e:	4770      	bx	lr

000b9f80 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b9f80:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b9f82:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b9f86:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b9f88:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b9f8c:	42ae      	cmp	r6, r5
   b9f8e:	d004      	beq.n	b9f9a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b9f90:	4628      	mov	r0, r5
   b9f92:	f7ff f93f 	bl	b9214 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b9f96:	3510      	adds	r5, #16
   b9f98:	e7f8      	b.n	b9f8c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b9f9a:	6820      	ldr	r0, [r4, #0]
   b9f9c:	f7fe ffc4 	bl	b8f28 <free>
}
   b9fa0:	4620      	mov	r0, r4
   b9fa2:	bd70      	pop	{r4, r5, r6, pc}

000b9fa4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b9fa4:	b510      	push	{r4, lr}
   b9fa6:	4604      	mov	r4, r0
    ::free(ptr);
   b9fa8:	6800      	ldr	r0, [r0, #0]
   b9faa:	f7fe ffbd 	bl	b8f28 <free>
}
   b9fae:	4620      	mov	r0, r4
   b9fb0:	bd10      	pop	{r4, pc}

000b9fb2 <_ZN8particle16BleScanDelegatorD1Ev>:
    ~BleScanDelegator() = default;
   b9fb2:	b570      	push	{r4, r5, r6, lr}
   b9fb4:	4604      	mov	r4, r0
    ::free(ptr);
   b9fb6:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   b9fb8:	f7fe ffb6 	bl	b8f28 <free>
   b9fbc:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b9fbe:	f7fe ffb3 	bl	b8f28 <free>
    }
    ~BleScanFilter() = default;
   b9fc2:	f104 0538 	add.w	r5, r4, #56	; 0x38
   b9fc6:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b9fca:	f7ff ffeb 	bl	b9fa4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
   b9fce:	4628      	mov	r0, r5
   b9fd0:	f7ff ffd6 	bl	b9f80 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    class function<_Res(_ArgTypes...)>
   b9fd4:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b9fd8:	f7fa f9f6 	bl	b43c8 <_ZNSt14_Function_baseD1Ev>
   b9fdc:	f104 0018 	add.w	r0, r4, #24
   b9fe0:	f7fa f9f2 	bl	b43c8 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b9fe4:	e9d4 5300 	ldrd	r5, r3, [r4]
   b9fe8:	2624      	movs	r6, #36	; 0x24
   b9fea:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b9fee:	42ae      	cmp	r6, r5
   b9ff0:	d004      	beq.n	b9ffc <_ZN8particle16BleScanDelegatorD1Ev+0x4a>
            p->~T();
   b9ff2:	4628      	mov	r0, r5
   b9ff4:	f7ff ff7e 	bl	b9ef4 <_ZN8particle13BleScanResultD1Ev>
        for (; p != end; ++p) {
   b9ff8:	3524      	adds	r5, #36	; 0x24
   b9ffa:	e7f8      	b.n	b9fee <_ZN8particle16BleScanDelegatorD1Ev+0x3c>
    ::free(ptr);
   b9ffc:	6820      	ldr	r0, [r4, #0]
   b9ffe:	f7fe ff93 	bl	b8f28 <free>
   ba002:	4620      	mov	r0, r4
   ba004:	bd70      	pop	{r4, r5, r6, pc}
	...

000ba008 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>:
int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   ba008:	b530      	push	{r4, r5, lr}
   ba00a:	4615      	mov	r5, r2
   ba00c:	b09f      	sub	sp, #124	; 0x7c
    if (results == nullptr || resultCount == 0) {
   ba00e:	460c      	mov	r4, r1
   ba010:	b179      	cbz	r1, ba032 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
   ba012:	b172      	cbz	r2, ba032 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
    BleScanDelegator scanner;
   ba014:	a801      	add	r0, sp, #4
   ba016:	f7ff ff77 	bl	b9f08 <_ZN8particle16BleScanDelegatorC1Ev>
    return scanner.start(results, resultCount);
   ba01a:	4621      	mov	r1, r4
   ba01c:	462a      	mov	r2, r5
   ba01e:	a801      	add	r0, sp, #4
   ba020:	f7ff ff50 	bl	b9ec4 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>
   ba024:	4604      	mov	r4, r0
    BleScanDelegator scanner;
   ba026:	a801      	add	r0, sp, #4
   ba028:	f7ff ffc3 	bl	b9fb2 <_ZN8particle16BleScanDelegatorD1Ev>
}
   ba02c:	4620      	mov	r0, r4
   ba02e:	b01f      	add	sp, #124	; 0x7c
   ba030:	bd30      	pop	{r4, r5, pc}
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   ba032:	4c01      	ldr	r4, [pc, #4]	; (ba038 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x30>)
   ba034:	e7fa      	b.n	ba02c <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x24>
   ba036:	bf00      	nop
   ba038:	fffffef2 	.word	0xfffffef2

000ba03c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   ba03c:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   ba03e:	1e14      	subs	r4, r2, #0
   ba040:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   ba042:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   ba044:	db02      	blt.n	ba04c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   ba046:	1862      	adds	r2, r4, r1
   ba048:	429a      	cmp	r2, r3
   ba04a:	dd00      	ble.n	ba04e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   ba04c:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   ba04e:	682a      	ldr	r2, [r5, #0]
   ba050:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   ba052:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   ba054:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   ba056:	1a52      	subs	r2, r2, r1
   ba058:	f003 fc95 	bl	bd986 <memmove>
    size_ -= n;
   ba05c:	686a      	ldr	r2, [r5, #4]
   ba05e:	1b12      	subs	r2, r2, r4
   ba060:	606a      	str	r2, [r5, #4]
}
   ba062:	bd38      	pop	{r3, r4, r5, pc}

000ba064 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   ba064:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   ba066:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   ba068:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   ba06a:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba06c:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   ba06e:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba070:	f7fa f811 	bl	b4096 <_Znwj>
   ba074:	b118      	cbz	r0, ba07e <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   ba076:	682b      	ldr	r3, [r5, #0]
   ba078:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   ba07a:	686b      	ldr	r3, [r5, #4]
   ba07c:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   ba07e:	4b03      	ldr	r3, [pc, #12]	; (ba08c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   ba080:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   ba082:	4b03      	ldr	r3, [pc, #12]	; (ba090 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba084:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   ba086:	60a3      	str	r3, [r4, #8]
      }
   ba088:	4620      	mov	r0, r4
   ba08a:	bd38      	pop	{r3, r4, r5, pc}
   ba08c:	000b9501 	.word	0x000b9501
   ba090:	000b9519 	.word	0x000b9519

000ba094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   ba094:	680b      	ldr	r3, [r1, #0]
   ba096:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   ba098:	b113      	cbz	r3, ba0a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   ba09a:	685a      	ldr	r2, [r3, #4]
   ba09c:	3201      	adds	r2, #1
   ba09e:	605a      	str	r2, [r3, #4]
      }
   ba0a0:	4770      	bx	lr

000ba0a2 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   ba0a2:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   ba0a4:	f851 3b04 	ldr.w	r3, [r1], #4
   ba0a8:	4604      	mov	r4, r0
   ba0aa:	f840 3b04 	str.w	r3, [r0], #4
   ba0ae:	f7ff fff1 	bl	ba094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   ba0b2:	6823      	ldr	r3, [r4, #0]
   ba0b4:	b90b      	cbnz	r3, ba0ba <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   ba0b6:	f7ff fa19 	bl	b94ec <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   ba0ba:	4620      	mov	r0, r4
   ba0bc:	bd10      	pop	{r4, pc}

000ba0be <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   ba0be:	b510      	push	{r4, lr}
   ba0c0:	f851 3b04 	ldr.w	r3, [r1], #4
   ba0c4:	4604      	mov	r4, r0
   ba0c6:	f840 3b04 	str.w	r3, [r0], #4
   ba0ca:	f7ff ffe3 	bl	ba094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   ba0ce:	4620      	mov	r0, r4
   ba0d0:	bd10      	pop	{r4, pc}

000ba0d2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   ba0d2:	b510      	push	{r4, lr}
   ba0d4:	f851 3b04 	ldr.w	r3, [r1], #4
   ba0d8:	4604      	mov	r4, r0
   ba0da:	f840 3b04 	str.w	r3, [r0], #4
   ba0de:	f7ff ffd9 	bl	ba094 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   ba0e2:	4620      	mov	r0, r4
   ba0e4:	bd10      	pop	{r4, pc}

000ba0e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   ba0e6:	b510      	push	{r4, lr}
   ba0e8:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   ba0ea:	6800      	ldr	r0, [r0, #0]
   ba0ec:	b108      	cbz	r0, ba0f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   ba0ee:	f7fa f9a9 	bl	b4444 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   ba0f2:	4620      	mov	r0, r4
   ba0f4:	bd10      	pop	{r4, pc}

000ba0f6 <_ZN8particle13BlePeerDeviceD1Ev>:
BlePeerDevice::~BlePeerDevice() {
   ba0f6:	b510      	push	{r4, lr}
   ba0f8:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   ba0fa:	3004      	adds	r0, #4
   ba0fc:	f7ff fff3 	bl	ba0e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   ba100:	4620      	mov	r0, r4
   ba102:	bd10      	pop	{r4, pc}

000ba104 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   ba104:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   ba106:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   ba10a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   ba10c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   ba110:	42ae      	cmp	r6, r5
   ba112:	d004      	beq.n	ba11e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   ba114:	1d28      	adds	r0, r5, #4
   ba116:	f7ff ffe6 	bl	ba0e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba11a:	3508      	adds	r5, #8
   ba11c:	e7f8      	b.n	ba110 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   ba11e:	6820      	ldr	r0, [r4, #0]
   ba120:	f7fe ff02 	bl	b8f28 <free>
}
   ba124:	4620      	mov	r0, r4
   ba126:	bd70      	pop	{r4, r5, r6, pc}

000ba128 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   ba128:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   ba12a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   ba12e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   ba130:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   ba134:	42ae      	cmp	r6, r5
   ba136:	d004      	beq.n	ba142 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   ba138:	1d28      	adds	r0, r5, #4
   ba13a:	f7ff ffd4 	bl	ba0e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba13e:	3508      	adds	r5, #8
   ba140:	e7f8      	b.n	ba134 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   ba142:	6820      	ldr	r0, [r4, #0]
   ba144:	f7fe fef0 	bl	b8f28 <free>
}
   ba148:	4620      	mov	r0, r4
   ba14a:	bd70      	pop	{r4, r5, r6, pc}

000ba14c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   ba14c:	b510      	push	{r4, lr}
   ba14e:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   ba150:	3024      	adds	r0, #36	; 0x24
   ba152:	f7ff ffe9 	bl	ba128 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   ba156:	f104 0018 	add.w	r0, r4, #24
   ba15a:	f7ff ffd3 	bl	ba104 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   ba15e:	bd10      	pop	{r4, pc}

000ba160 <__tcf_0>:
    static BleLocalDevice instance;
   ba160:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   ba162:	4b17      	ldr	r3, [pc, #92]	; (ba1c0 <__tcf_0+0x60>)
   ba164:	681c      	ldr	r4, [r3, #0]
   ba166:	b354      	cbz	r4, ba1be <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   ba168:	f104 0054 	add.w	r0, r4, #84	; 0x54
   ba16c:	f7fa f92c 	bl	b43c8 <_ZNSt14_Function_baseD1Ev>
   ba170:	f104 0044 	add.w	r0, r4, #68	; 0x44
   ba174:	f7fa f928 	bl	b43c8 <_ZNSt14_Function_baseD1Ev>
   ba178:	f104 0034 	add.w	r0, r4, #52	; 0x34
   ba17c:	f7fa f924 	bl	b43c8 <_ZNSt14_Function_baseD1Ev>
   ba180:	f104 0024 	add.w	r0, r4, #36	; 0x24
   ba184:	f7fa f920 	bl	b43c8 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   ba188:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   ba18c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   ba190:	42ae      	cmp	r6, r5
   ba192:	d004      	beq.n	ba19e <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   ba194:	1d28      	adds	r0, r5, #4
   ba196:	f7ff ffa6 	bl	ba0e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba19a:	3508      	adds	r5, #8
   ba19c:	e7f8      	b.n	ba190 <__tcf_0+0x30>
    ::free(ptr);
   ba19e:	69a0      	ldr	r0, [r4, #24]
   ba1a0:	f7fe fec2 	bl	b8f28 <free>
    ~BleLocalDeviceImpl() = default;
   ba1a4:	f104 000c 	add.w	r0, r4, #12
   ba1a8:	f7ff ffbe 	bl	ba128 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   ba1ac:	4620      	mov	r0, r4
   ba1ae:	f7ff ffa9 	bl	ba104 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   ba1b2:	4620      	mov	r0, r4
   ba1b4:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   ba1b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   ba1ba:	f7f9 bf70 	b.w	b409e <_ZdlPvj>
   ba1be:	bd70      	pop	{r4, r5, r6, pc}
   ba1c0:	2003e674 	.word	0x2003e674

000ba1c4 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   ba1c4:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   ba1c6:	b510      	push	{r4, lr}
      if (_M_empty())
   ba1c8:	b90a      	cbnz	r2, ba1ce <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   ba1ca:	f002 fd25 	bl	bcc18 <_ZSt25__throw_bad_function_callv>
    }
   ba1ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   ba1d2:	68c3      	ldr	r3, [r0, #12]
   ba1d4:	4718      	bx	r3

000ba1d6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba1d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        capacity_(0) {
   ba1da:	2300      	movs	r3, #0
   ba1dc:	e9c0 3300 	strd	r3, r3, [r0]
   ba1e0:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   ba1e2:	f8d1 8004 	ldr.w	r8, [r1, #4]
   ba1e6:	4598      	cmp	r8, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba1e8:	4605      	mov	r5, r0
   ba1ea:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   ba1ec:	dd4a      	ble.n	ba284 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
    return ::malloc(size);
   ba1ee:	ea4f 1008 	mov.w	r0, r8, lsl #4
   ba1f2:	f7fe fe91 	bl	b8f18 <malloc>
            if (!d) {
   ba1f6:	4606      	mov	r6, r0
   ba1f8:	2800      	cmp	r0, #0
   ba1fa:	d043      	beq.n	ba284 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
            move(d, data_, data_ + size_);
   ba1fc:	e9d5 4100 	ldrd	r4, r1, [r5]
        if (dest > p && dest < end) {
   ba200:	42a0      	cmp	r0, r4
            move(d, data_, data_ + size_);
   ba202:	eb04 1a01 	add.w	sl, r4, r1, lsl #4
        if (dest > p && dest < end) {
   ba206:	d916      	bls.n	ba236 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x60>
   ba208:	4550      	cmp	r0, sl
   ba20a:	d215      	bcs.n	ba238 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x62>
            --end;
   ba20c:	f1aa 0a10 	sub.w	sl, sl, #16
            dest += end - p - 1;
   ba210:	f1a4 0910 	sub.w	r9, r4, #16
   ba214:	ebaa 0404 	sub.w	r4, sl, r4
   ba218:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   ba21a:	45d1      	cmp	r9, sl
   ba21c:	d01d      	beq.n	ba25a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*end));
   ba21e:	b11c      	cbz	r4, ba228 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x52>
   ba220:	4651      	mov	r1, sl
   ba222:	4620      	mov	r0, r4
   ba224:	f7ff f872 	bl	b930c <_ZN6StringC1EOS_>
                end->~T();
   ba228:	4650      	mov	r0, sl
   ba22a:	f7fe fff3 	bl	b9214 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   ba22e:	f1aa 0a10 	sub.w	sl, sl, #16
   ba232:	3c10      	subs	r4, #16
   ba234:	e7f1      	b.n	ba21a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x44>
        } else if (dest != p) {
   ba236:	d010      	beq.n	ba25a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
   ba238:	46b1      	mov	r9, r6
            for (; p != end; ++p, ++dest) {
   ba23a:	45a2      	cmp	sl, r4
   ba23c:	d00d      	beq.n	ba25a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*p));
   ba23e:	f1b9 0f00 	cmp.w	r9, #0
   ba242:	d003      	beq.n	ba24c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x76>
   ba244:	4621      	mov	r1, r4
   ba246:	4648      	mov	r0, r9
   ba248:	f7ff f860 	bl	b930c <_ZN6StringC1EOS_>
                p->~T();
   ba24c:	4620      	mov	r0, r4
   ba24e:	f7fe ffe1 	bl	b9214 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   ba252:	3410      	adds	r4, #16
   ba254:	f109 0910 	add.w	r9, r9, #16
   ba258:	e7ef      	b.n	ba23a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x64>
    ::free(ptr);
   ba25a:	6828      	ldr	r0, [r5, #0]
   ba25c:	f7fe fe64 	bl	b8f28 <free>
        capacity_ = n;
   ba260:	f8c5 8008 	str.w	r8, [r5, #8]
        data_ = d;
   ba264:	602e      	str	r6, [r5, #0]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   ba266:	e9d7 4300 	ldrd	r4, r3, [r7]
   ba26a:	eb04 1803 	add.w	r8, r4, r3, lsl #4
        for (; it != end; ++it, ++dest) {
   ba26e:	45a0      	cmp	r8, r4
   ba270:	d006      	beq.n	ba280 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xaa>
            new(dest) T(*it);
   ba272:	4621      	mov	r1, r4
   ba274:	4630      	mov	r0, r6
   ba276:	f7ff f863 	bl	b9340 <_ZN6StringC1ERKS_>
        for (; it != end; ++it, ++dest) {
   ba27a:	3410      	adds	r4, #16
   ba27c:	3610      	adds	r6, #16
   ba27e:	e7f6      	b.n	ba26e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x98>
        size_ = vector.size_;
   ba280:	687b      	ldr	r3, [r7, #4]
   ba282:	606b      	str	r3, [r5, #4]
}
   ba284:	4628      	mov	r0, r5
   ba286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000ba28a <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>:
    bool filterByDeviceName(const BleScanResult& result) {
   ba28a:	b530      	push	{r4, r5, lr}
   ba28c:	b08d      	sub	sp, #52	; 0x34
   ba28e:	460c      	mov	r4, r1
        auto filterDeviceNames = filter_.deviceNames();
   ba290:	f100 0138 	add.w	r1, r0, #56	; 0x38
   ba294:	a801      	add	r0, sp, #4
   ba296:	f7ff ff9e 	bl	ba1d6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterDeviceNames.size() > 0) {
   ba29a:	9b02      	ldr	r3, [sp, #8]
   ba29c:	2b00      	cmp	r3, #0
   ba29e:	dd2f      	ble.n	ba300 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x76>
            String srName = result.scanResponse().deviceName();
   ba2a0:	f104 0114 	add.w	r1, r4, #20
   ba2a4:	a804      	add	r0, sp, #16
   ba2a6:	f7ff fbb9 	bl	b9a1c <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            String advName = result.advertisingData().deviceName();
   ba2aa:	f104 0108 	add.w	r1, r4, #8
   ba2ae:	a808      	add	r0, sp, #32
   ba2b0:	f7ff fbb4 	bl	b9a1c <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            if (srName.length() == 0 && advName.length() == 0) {
   ba2b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   ba2b6:	9b06      	ldr	r3, [sp, #24]
   ba2b8:	4313      	orrs	r3, r2
   ba2ba:	d01f      	beq.n	ba2fc <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
    return data_ + size_;
   ba2bc:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
   ba2c0:	eb04 1505 	add.w	r5, r4, r5, lsl #4
            for (const auto& name : filterDeviceNames) {
   ba2c4:	42ac      	cmp	r4, r5
   ba2c6:	d019      	beq.n	ba2fc <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   ba2c8:	a904      	add	r1, sp, #16
   ba2ca:	4620      	mov	r0, r4
   ba2cc:	f7ff f88e 	bl	b93ec <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   ba2d0:	b160      	cbz	r0, ba2ec <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x62>
                    return true;
   ba2d2:	2401      	movs	r4, #1
            String advName = result.advertisingData().deviceName();
   ba2d4:	a808      	add	r0, sp, #32
   ba2d6:	f7fe ff9d 	bl	b9214 <_ZN6StringD1Ev>
            String srName = result.scanResponse().deviceName();
   ba2da:	a804      	add	r0, sp, #16
   ba2dc:	f7fe ff9a 	bl	b9214 <_ZN6StringD1Ev>
        auto filterDeviceNames = filter_.deviceNames();
   ba2e0:	a801      	add	r0, sp, #4
   ba2e2:	f7ff fe4d 	bl	b9f80 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
   ba2e6:	4620      	mov	r0, r4
   ba2e8:	b00d      	add	sp, #52	; 0x34
   ba2ea:	bd30      	pop	{r4, r5, pc}
   ba2ec:	4620      	mov	r0, r4
   ba2ee:	a908      	add	r1, sp, #32
   ba2f0:	f7ff f87c 	bl	b93ec <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   ba2f4:	3410      	adds	r4, #16
   ba2f6:	2800      	cmp	r0, #0
   ba2f8:	d0e4      	beq.n	ba2c4 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x3a>
   ba2fa:	e7ea      	b.n	ba2d2 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x48>
                return false;
   ba2fc:	2400      	movs	r4, #0
   ba2fe:	e7e9      	b.n	ba2d4 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x4a>
        return true;
   ba300:	2401      	movs	r4, #1
   ba302:	e7ed      	b.n	ba2e0 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x56>

000ba304 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        capacity_(0) {
   ba306:	2300      	movs	r3, #0
   ba308:	e9c0 3300 	strd	r3, r3, [r0]
   ba30c:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   ba30e:	684f      	ldr	r7, [r1, #4]
   ba310:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba312:	4605      	mov	r5, r0
   ba314:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   ba316:	dd3e      	ble.n	ba396 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
    return ::malloc(size);
   ba318:	00f8      	lsls	r0, r7, #3
   ba31a:	f7fe fdfd 	bl	b8f18 <malloc>
            if (!d) {
   ba31e:	4604      	mov	r4, r0
   ba320:	b3c8      	cbz	r0, ba396 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
            move(d, data_, data_ + size_);
   ba322:	e9d5 0300 	ldrd	r0, r3, [r5]
        if (dest > p && dest < end) {
   ba326:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
   ba328:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
        if (dest > p && dest < end) {
   ba32c:	d910      	bls.n	ba350 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   ba32e:	429c      	cmp	r4, r3
   ba330:	d20f      	bcs.n	ba352 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4e>
            --end;
   ba332:	3b08      	subs	r3, #8
            dest += end - p - 1;
   ba334:	1a1a      	subs	r2, r3, r0
   ba336:	f1a0 0c08 	sub.w	ip, r0, #8
   ba33a:	4422      	add	r2, r4
            for (; end != p; --end, --dest) {
   ba33c:	459c      	cmp	ip, r3
   ba33e:	d018      	beq.n	ba372 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*end));
   ba340:	b11a      	cbz	r2, ba34a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x46>
    address_ = addr.address_;
   ba342:	6819      	ldr	r1, [r3, #0]
   ba344:	6011      	str	r1, [r2, #0]
   ba346:	6859      	ldr	r1, [r3, #4]
   ba348:	6051      	str	r1, [r2, #4]
            for (; end != p; --end, --dest) {
   ba34a:	3b08      	subs	r3, #8
   ba34c:	3a08      	subs	r2, #8
   ba34e:	e7f5      	b.n	ba33c <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x38>
        } else if (dest != p) {
   ba350:	d00f      	beq.n	ba372 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
   ba352:	4601      	mov	r1, r0
   ba354:	4622      	mov	r2, r4
            for (; p != end; ++p, ++dest) {
   ba356:	428b      	cmp	r3, r1
   ba358:	d00b      	beq.n	ba372 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*p));
   ba35a:	b13a      	cbz	r2, ba36c <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x68>
   ba35c:	f8d1 c000 	ldr.w	ip, [r1]
   ba360:	f8c2 c000 	str.w	ip, [r2]
   ba364:	f8d1 c004 	ldr.w	ip, [r1, #4]
   ba368:	f8c2 c004 	str.w	ip, [r2, #4]
            for (; p != end; ++p, ++dest) {
   ba36c:	3108      	adds	r1, #8
   ba36e:	3208      	adds	r2, #8
   ba370:	e7f1      	b.n	ba356 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x52>
    ::free(ptr);
   ba372:	f7fe fdd9 	bl	b8f28 <free>
        data_ = d;
   ba376:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   ba378:	60af      	str	r7, [r5, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   ba37a:	e9d6 3100 	ldrd	r3, r1, [r6]
   ba37e:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
        for (; it != end; ++it, ++dest) {
   ba382:	4298      	cmp	r0, r3
   ba384:	d006      	beq.n	ba394 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x90>
   ba386:	681a      	ldr	r2, [r3, #0]
   ba388:	6022      	str	r2, [r4, #0]
   ba38a:	685a      	ldr	r2, [r3, #4]
   ba38c:	6062      	str	r2, [r4, #4]
   ba38e:	3308      	adds	r3, #8
   ba390:	3408      	adds	r4, #8
   ba392:	e7f6      	b.n	ba382 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x7e>
        size_ = vector.size_;
   ba394:	6069      	str	r1, [r5, #4]
}
   ba396:	4628      	mov	r0, r5
   ba398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba39a <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba39a:	b570      	push	{r4, r5, r6, lr}
   ba39c:	4604      	mov	r4, r0
        capacity_(0) {
   ba39e:	2000      	movs	r0, #0
   ba3a0:	e9c4 0000 	strd	r0, r0, [r4]
   ba3a4:	60a0      	str	r0, [r4, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   ba3a6:	684e      	ldr	r6, [r1, #4]
   ba3a8:	4286      	cmp	r6, r0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba3aa:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   ba3ac:	dd12      	ble.n	ba3d4 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
    return ::realloc(ptr, size);
   ba3ae:	0071      	lsls	r1, r6, #1
   ba3b0:	f7fe fdc2 	bl	b8f38 <realloc>
            if (!d) {
   ba3b4:	b170      	cbz	r0, ba3d4 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
        data_ = d;
   ba3b6:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   ba3b8:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   ba3ba:	e9d5 3200 	ldrd	r3, r2, [r5]
   ba3be:	eb03 0242 	add.w	r2, r3, r2, lsl #1
        for (; it != end; ++it, ++dest) {
   ba3c2:	429a      	cmp	r2, r3
   ba3c4:	d004      	beq.n	ba3d0 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x36>
            new(dest) T(*it);
   ba3c6:	f833 1b02 	ldrh.w	r1, [r3], #2
   ba3ca:	f820 1b02 	strh.w	r1, [r0], #2
        for (; it != end; ++it, ++dest) {
   ba3ce:	e7f8      	b.n	ba3c2 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x28>
        size_ = vector.size_;
   ba3d0:	686b      	ldr	r3, [r5, #4]
   ba3d2:	6063      	str	r3, [r4, #4]
}
   ba3d4:	4620      	mov	r0, r4
   ba3d6:	bd70      	pop	{r4, r5, r6, pc}

000ba3d8 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>:
            func_(std::move(guard.func_)),
            dismissed_(guard.dismissed_) {
        guard.dismissed_ = true;
    }

    ~NamedScopeGuard() {
   ba3d8:	b510      	push	{r4, lr}
        if (!dismissed_) {
   ba3da:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   ba3dc:	4604      	mov	r4, r0
        if (!dismissed_) {
   ba3de:	b923      	cbnz	r3, ba3ea <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
                SCOPE_GUARD({
   ba3e0:	6803      	ldr	r3, [r0, #0]
   ba3e2:	6818      	ldr	r0, [r3, #0]
   ba3e4:	b108      	cbz	r0, ba3ea <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
   ba3e6:	f7fe fd9f 	bl	b8f28 <free>
            func_();
        }
    }
   ba3ea:	4620      	mov	r0, r4
   ba3ec:	bd10      	pop	{r4, pc}

000ba3ee <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>:
    ~NamedScopeGuard() {
   ba3ee:	b510      	push	{r4, lr}
        if (!dismissed_) {
   ba3f0:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   ba3f2:	4604      	mov	r4, r0
        if (!dismissed_) {
   ba3f4:	b923      	cbnz	r3, ba400 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
                SCOPE_GUARD({
   ba3f6:	6803      	ldr	r3, [r0, #0]
   ba3f8:	6818      	ldr	r0, [r3, #0]
   ba3fa:	b108      	cbz	r0, ba400 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
   ba3fc:	f7fe fd94 	bl	b8f28 <free>
    }
   ba400:	4620      	mov	r0, r4
   ba402:	bd10      	pop	{r4, pc}

000ba404 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>:
    bool filterByCustomData(const BleScanResult& result) {
   ba404:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        customDataLen_ = len;
        return *this;
    }
    const uint8_t* customData(size_t* len) const {
        *len = customDataLen_;
        return customData_;
   ba408:	f8d0 806c 	ldr.w	r8, [r0, #108]	; 0x6c
   ba40c:	b08f      	sub	sp, #60	; 0x3c
   ba40e:	460f      	mov	r7, r1
        if (filterCustomData != nullptr && filterCustomDatalen > 0) {
   ba410:	f1b8 0f00 	cmp.w	r8, #0
   ba414:	d072      	beq.n	ba4fc <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        *len = customDataLen_;
   ba416:	6f05      	ldr	r5, [r0, #112]	; 0x70
   ba418:	2d00      	cmp	r5, #0
   ba41a:	d06f      	beq.n	ba4fc <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        return scanResponse_;
   ba41c:	f101 0914 	add.w	r9, r1, #20
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   ba420:	231f      	movs	r3, #31
   ba422:	2200      	movs	r2, #0
   ba424:	21ff      	movs	r1, #255	; 0xff
   ba426:	4648      	mov	r0, r9
   ba428:	f7ff fac5 	bl	b99b6 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
        return advertisingData_;
   ba42c:	3708      	adds	r7, #8
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   ba42e:	23ff      	movs	r3, #255	; 0xff
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   ba430:	4604      	mov	r4, r0
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   ba432:	2200      	movs	r2, #0
   ba434:	4619      	mov	r1, r3
   ba436:	4638      	mov	r0, r7
   ba438:	f7ff fabd 	bl	b99b6 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   ba43c:	42ac      	cmp	r4, r5
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   ba43e:	4606      	mov	r6, r0
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   ba440:	d006      	beq.n	ba450 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x4c>
   ba442:	42ae      	cmp	r6, r5
   ba444:	d030      	beq.n	ba4a8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa4>
                return false;
   ba446:	2400      	movs	r4, #0
    }
   ba448:	4620      	mov	r0, r4
   ba44a:	b00f      	add	sp, #60	; 0x3c
   ba44c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                uint8_t* buf = (uint8_t*)malloc(srLen);
   ba450:	4620      	mov	r0, r4
   ba452:	f7fe fd61 	bl	b8f18 <malloc>
            dismissed_(false) {
   ba456:	ab03      	add	r3, sp, #12
   ba458:	9304      	str	r3, [sp, #16]
   ba45a:	2300      	movs	r3, #0
   ba45c:	4604      	mov	r4, r0
   ba45e:	9003      	str	r0, [sp, #12]
   ba460:	f88d 3014 	strb.w	r3, [sp, #20]
                if (!buf) {
   ba464:	b970      	cbnz	r0, ba484 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x80>
                    LOG(ERROR, "Failed to allocate memory!");
   ba466:	2320      	movs	r3, #32
   ba468:	e9cd 3006 	strd	r3, r0, [sp, #24]
   ba46c:	4b24      	ldr	r3, [pc, #144]	; (ba500 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   ba46e:	9300      	str	r3, [sp, #0]
   ba470:	4924      	ldr	r1, [pc, #144]	; (ba504 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   ba472:	4603      	mov	r3, r0
   ba474:	aa06      	add	r2, sp, #24
   ba476:	2032      	movs	r0, #50	; 0x32
   ba478:	f7fe fc72 	bl	b8d60 <log_message>
                    return false;
   ba47c:	a804      	add	r0, sp, #16
   ba47e:	f7ff ffab 	bl	ba3d8 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
   ba482:	e7e1      	b.n	ba448 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, srLen);
   ba484:	4602      	mov	r2, r0
   ba486:	21ff      	movs	r1, #255	; 0xff
   ba488:	462b      	mov	r3, r5
   ba48a:	4648      	mov	r0, r9
   ba48c:	f7ff fa93 	bl	b99b6 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, srLen)) {
   ba490:	9803      	ldr	r0, [sp, #12]
   ba492:	462a      	mov	r2, r5
   ba494:	4641      	mov	r1, r8
   ba496:	f003 fa58 	bl	bd94a <memcmp>
   ba49a:	b118      	cbz	r0, ba4a4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa0>
                SCOPE_GUARD({
   ba49c:	a804      	add	r0, sp, #16
   ba49e:	f7ff ff9b 	bl	ba3d8 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
            if (advLen == filterCustomDatalen) {
   ba4a2:	e7ce      	b.n	ba442 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x3e>
                    return true;
   ba4a4:	2401      	movs	r4, #1
   ba4a6:	e7e9      	b.n	ba47c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x78>
                uint8_t* buf = (uint8_t*)malloc(advLen);
   ba4a8:	4628      	mov	r0, r5
   ba4aa:	f7fe fd35 	bl	b8f18 <malloc>
   ba4ae:	2400      	movs	r4, #0
   ba4b0:	ab03      	add	r3, sp, #12
   ba4b2:	4606      	mov	r6, r0
   ba4b4:	9003      	str	r0, [sp, #12]
   ba4b6:	9304      	str	r3, [sp, #16]
   ba4b8:	f88d 4014 	strb.w	r4, [sp, #20]
                if (!buf) {
   ba4bc:	b978      	cbnz	r0, ba4de <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xda>
                    LOG(ERROR, "Failed to allocate memory!");
   ba4be:	2320      	movs	r3, #32
   ba4c0:	e9cd 3006 	strd	r3, r0, [sp, #24]
   ba4c4:	4b0e      	ldr	r3, [pc, #56]	; (ba500 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   ba4c6:	9300      	str	r3, [sp, #0]
   ba4c8:	490e      	ldr	r1, [pc, #56]	; (ba504 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   ba4ca:	4603      	mov	r3, r0
   ba4cc:	aa06      	add	r2, sp, #24
   ba4ce:	2032      	movs	r0, #50	; 0x32
   ba4d0:	f7fe fc46 	bl	b8d60 <log_message>
                    return false;
   ba4d4:	4634      	mov	r4, r6
   ba4d6:	a804      	add	r0, sp, #16
   ba4d8:	f7ff ff89 	bl	ba3ee <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>
   ba4dc:	e7b4      	b.n	ba448 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, advLen);
   ba4de:	4602      	mov	r2, r0
   ba4e0:	21ff      	movs	r1, #255	; 0xff
   ba4e2:	462b      	mov	r3, r5
   ba4e4:	4638      	mov	r0, r7
   ba4e6:	f7ff fa66 	bl	b99b6 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, advLen)) {
   ba4ea:	9803      	ldr	r0, [sp, #12]
   ba4ec:	462a      	mov	r2, r5
   ba4ee:	4641      	mov	r1, r8
   ba4f0:	f003 fa2b 	bl	bd94a <memcmp>
   ba4f4:	2800      	cmp	r0, #0
   ba4f6:	d1ee      	bne.n	ba4d6 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
                    return true;
   ba4f8:	2401      	movs	r4, #1
   ba4fa:	e7ec      	b.n	ba4d6 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
        return true;
   ba4fc:	2401      	movs	r4, #1
   ba4fe:	e7a3      	b.n	ba448 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
   ba500:	000c0d34 	.word	0x000c0d34
   ba504:	000c0cb3 	.word	0x000c0cb3

000ba508 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   ba508:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   ba50a:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   ba50c:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   ba50e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   ba510:	dd03      	ble.n	ba51a <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   ba512:	f7fe fd11 	bl	b8f38 <realloc>
            if (!d) {
   ba516:	b918      	cbnz	r0, ba520 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   ba518:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   ba51a:	f7fe fd05 	bl	b8f28 <free>
        T* d = nullptr;
   ba51e:	2000      	movs	r0, #0
        data_ = d;
   ba520:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   ba522:	60a5      	str	r5, [r4, #8]
        return true;
   ba524:	2001      	movs	r0, #1
   ba526:	e7f7      	b.n	ba518 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000ba528 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   ba528:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   ba52a:	6883      	ldr	r3, [r0, #8]
   ba52c:	428b      	cmp	r3, r1
   ba52e:	da02      	bge.n	ba536 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   ba530:	f7ff ffea 	bl	ba508 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   ba534:	bd08      	pop	{r3, pc}
    return true;
   ba536:	2001      	movs	r0, #1
   ba538:	e7fc      	b.n	ba534 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000ba53a <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba53a:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   ba53c:	2300      	movs	r3, #0
   ba53e:	e9c0 3300 	strd	r3, r3, [r0]
   ba542:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba544:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   ba546:	6849      	ldr	r1, [r1, #4]
   ba548:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   ba54a:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   ba54c:	dd10      	ble.n	ba570 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
   ba54e:	f7ff ffdb 	bl	ba508 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   ba552:	b168      	cbz	r0, ba570 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   ba554:	e9d5 3100 	ldrd	r3, r1, [r5]
   ba558:	6822      	ldr	r2, [r4, #0]
   ba55a:	4419      	add	r1, r3
        for (; it != end; ++it, ++dest) {
   ba55c:	4299      	cmp	r1, r3
   ba55e:	d005      	beq.n	ba56c <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x32>
            new(dest) T(*it);
   ba560:	b10a      	cbz	r2, ba566 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x2c>
   ba562:	7818      	ldrb	r0, [r3, #0]
   ba564:	7010      	strb	r0, [r2, #0]
        for (; it != end; ++it, ++dest) {
   ba566:	3301      	adds	r3, #1
   ba568:	3201      	adds	r2, #1
   ba56a:	e7f7      	b.n	ba55c <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x22>
        size_ = vector.size_;
   ba56c:	686b      	ldr	r3, [r5, #4]
   ba56e:	6063      	str	r3, [r4, #4]
}
   ba570:	4620      	mov	r0, r4
   ba572:	bd38      	pop	{r3, r4, r5, pc}

000ba574 <_ZN8particle13BleScanResultC1EOS0_>:
class BleScanResult {
   ba574:	b538      	push	{r3, r4, r5, lr}
    address_ = addr.address_;
   ba576:	680b      	ldr	r3, [r1, #0]
   ba578:	6003      	str	r3, [r0, #0]
   ba57a:	684b      	ldr	r3, [r1, #4]
   ba57c:	6043      	str	r3, [r0, #4]
   ba57e:	4604      	mov	r4, r0
   ba580:	460d      	mov	r5, r1
class BleAdvertisingData {
   ba582:	3008      	adds	r0, #8
   ba584:	3108      	adds	r1, #8
   ba586:	f7ff ffd8 	bl	ba53a <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   ba58a:	f105 0114 	add.w	r1, r5, #20
   ba58e:	f104 0014 	add.w	r0, r4, #20
   ba592:	f7ff ffd2 	bl	ba53a <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   ba596:	f895 3020 	ldrb.w	r3, [r5, #32]
   ba59a:	f884 3020 	strb.w	r3, [r4, #32]
   ba59e:	4620      	mov	r0, r4
   ba5a0:	bd38      	pop	{r3, r4, r5, pc}

000ba5a2 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>:
class BleAdvertisingData {
   ba5a2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   ba5a4:	4604      	mov	r4, r0
   ba5a6:	a801      	add	r0, sp, #4
   ba5a8:	f7ff ffc7 	bl	ba53a <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
      __a = _GLIBCXX_MOVE(__b);
   ba5ac:	9b01      	ldr	r3, [sp, #4]
   ba5ae:	9a02      	ldr	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba5b0:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   ba5b2:	6023      	str	r3, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba5b4:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   ba5b6:	6062      	str	r2, [r4, #4]
   ba5b8:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   ba5ba:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba5bc:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   ba5be:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ba5c0:	9001      	str	r0, [sp, #4]
   ba5c2:	9303      	str	r3, [sp, #12]
    ::free(ptr);
   ba5c4:	f7fe fcb0 	bl	b8f28 <free>
   ba5c8:	b004      	add	sp, #16
   ba5ca:	bd10      	pop	{r4, pc}

000ba5cc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   ba5cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba5d0:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   ba5d2:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   ba5d4:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   ba5d6:	4419      	add	r1, r3
   ba5d8:	6883      	ldr	r3, [r0, #8]
   ba5da:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   ba5dc:	4604      	mov	r4, r0
   ba5de:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   ba5e0:	dc12      	bgt.n	ba608 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   ba5e2:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   ba5e4:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   ba5e6:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   ba5e8:	1bd2      	subs	r2, r2, r7
   ba5ea:	4631      	mov	r1, r6
   ba5ec:	1970      	adds	r0, r6, r5
   ba5ee:	f003 f9ca 	bl	bd986 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   ba5f2:	462a      	mov	r2, r5
   ba5f4:	4641      	mov	r1, r8
   ba5f6:	4630      	mov	r0, r6
   ba5f8:	f003 f9b7 	bl	bd96a <memcpy>
    size_ += n;
   ba5fc:	6863      	ldr	r3, [r4, #4]
   ba5fe:	442b      	add	r3, r5
   ba600:	6063      	str	r3, [r4, #4]
    return true;
   ba602:	2001      	movs	r0, #1
}
   ba604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   ba608:	f7ff ff7e 	bl	ba508 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   ba60c:	2800      	cmp	r0, #0
   ba60e:	d1e8      	bne.n	ba5e2 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   ba610:	e7f8      	b.n	ba604 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000ba612 <_ZN8particle18BleAdvertisingData3setEPKhj>:
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   ba612:	4613      	mov	r3, r2
    if (buf == nullptr || len == 0) {
   ba614:	460a      	mov	r2, r1
   ba616:	2100      	movs	r1, #0
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   ba618:	b510      	push	{r4, lr}
   ba61a:	4604      	mov	r4, r0
    size_ = 0;
   ba61c:	6041      	str	r1, [r0, #4]
    if (buf == nullptr || len == 0) {
   ba61e:	b102      	cbz	r2, ba622 <_ZN8particle18BleAdvertisingData3setEPKhj+0x10>
   ba620:	b90b      	cbnz	r3, ba626 <_ZN8particle18BleAdvertisingData3setEPKhj+0x14>
        return selfData_.size();
   ba622:	2000      	movs	r0, #0
}
   ba624:	bd10      	pop	{r4, pc}
    return insert(size_, values, n);
   ba626:	2bff      	cmp	r3, #255	; 0xff
   ba628:	bf28      	it	cs
   ba62a:	23ff      	movcs	r3, #255	; 0xff
   ba62c:	f7ff ffce 	bl	ba5cc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
    CHECK_TRUE(selfData_.append(buf, len), 0);
   ba630:	2800      	cmp	r0, #0
   ba632:	d0f7      	beq.n	ba624 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>
    return selfData_.size();
   ba634:	6860      	ldr	r0, [r4, #4]
   ba636:	e7f5      	b.n	ba624 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>

000ba638 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   ba638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba63a:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba63c:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   ba640:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   ba642:	4604      	mov	r4, r0
   ba644:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba646:	da0b      	bge.n	ba660 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   ba648:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   ba64a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   ba64c:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   ba64e:	1b52      	subs	r2, r2, r5
   ba650:	1c48      	adds	r0, r1, #1
   ba652:	f003 f998 	bl	bd986 <memmove>
    new(p) T(std::move(value));
   ba656:	557e      	strb	r6, [r7, r5]
    ++size_;
   ba658:	6863      	ldr	r3, [r4, #4]
   ba65a:	3301      	adds	r3, #1
   ba65c:	6063      	str	r3, [r4, #4]
}
   ba65e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba660:	3101      	adds	r1, #1
   ba662:	f7ff ff51 	bl	ba508 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   ba666:	2800      	cmp	r0, #0
   ba668:	d1ee      	bne.n	ba648 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   ba66a:	e7f8      	b.n	ba65e <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000ba66c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   ba66c:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   ba66e:	6841      	ldr	r1, [r0, #4]
   ba670:	f7ff bfe2 	b.w	ba638 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000ba674 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   ba674:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   ba678:	4604      	mov	r4, r0
   ba67a:	461d      	mov	r5, r3
   ba67c:	460f      	mov	r7, r1
   ba67e:	ab01      	add	r3, sp, #4
   ba680:	4690      	mov	r8, r2
   ba682:	460a      	mov	r2, r1
   ba684:	e9d0 0100 	ldrd	r0, r1, [r0]
   ba688:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   ba68c:	f7fe ff18 	bl	b94c0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   ba690:	1cae      	adds	r6, r5, #2
   ba692:	6863      	ldr	r3, [r4, #4]
   ba694:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   ba696:	f1b9 0f00 	cmp.w	r9, #0
   ba69a:	d126      	bne.n	ba6ea <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   ba69c:	b328      	cbz	r0, ba6ea <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   ba69e:	4433      	add	r3, r6
   ba6a0:	1a1b      	subs	r3, r3, r0
   ba6a2:	2bff      	cmp	r3, #255	; 0xff
   ba6a4:	d809      	bhi.n	ba6ba <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   ba6a6:	9901      	ldr	r1, [sp, #4]
   ba6a8:	4620      	mov	r0, r4
   ba6aa:	f7ff fcc7 	bl	ba03c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   ba6ae:	6861      	ldr	r1, [r4, #4]
   ba6b0:	4620      	mov	r0, r4
   ba6b2:	4431      	add	r1, r6
   ba6b4:	f7ff ff38 	bl	ba528 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   ba6b8:	b918      	cbnz	r0, ba6c2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   ba6ba:	6860      	ldr	r0, [r4, #4]
}
   ba6bc:	b003      	add	sp, #12
   ba6be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   ba6c2:	1c6a      	adds	r2, r5, #1
   ba6c4:	9901      	ldr	r1, [sp, #4]
   ba6c6:	b2d2      	uxtb	r2, r2
   ba6c8:	4620      	mov	r0, r4
   ba6ca:	f7ff ffb5 	bl	ba638 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   ba6ce:	9901      	ldr	r1, [sp, #4]
   ba6d0:	463a      	mov	r2, r7
   ba6d2:	3101      	adds	r1, #1
   ba6d4:	4620      	mov	r0, r4
   ba6d6:	f7ff ffaf 	bl	ba638 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   ba6da:	9901      	ldr	r1, [sp, #4]
   ba6dc:	462b      	mov	r3, r5
   ba6de:	4642      	mov	r2, r8
   ba6e0:	3102      	adds	r1, #2
    return insert(size_, values, n);
   ba6e2:	4620      	mov	r0, r4
   ba6e4:	f7ff ff72 	bl	ba5cc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   ba6e8:	e7e7      	b.n	ba6ba <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   ba6ea:	18f1      	adds	r1, r6, r3
   ba6ec:	29ff      	cmp	r1, #255	; 0xff
   ba6ee:	d8e4      	bhi.n	ba6ba <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   ba6f0:	4620      	mov	r0, r4
   ba6f2:	f7ff ff19 	bl	ba528 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   ba6f6:	2800      	cmp	r0, #0
   ba6f8:	d0df      	beq.n	ba6ba <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   ba6fa:	1c69      	adds	r1, r5, #1
   ba6fc:	b2c9      	uxtb	r1, r1
   ba6fe:	4620      	mov	r0, r4
   ba700:	f7ff ffb4 	bl	ba66c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   ba704:	4639      	mov	r1, r7
   ba706:	4620      	mov	r0, r4
   ba708:	f7ff ffb0 	bl	ba66c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   ba70c:	6861      	ldr	r1, [r4, #4]
   ba70e:	462b      	mov	r3, r5
   ba710:	4642      	mov	r2, r8
   ba712:	e7e6      	b.n	ba6e2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000ba714 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   ba714:	b430      	push	{r4, r5}
   ba716:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   ba71a:	b11a      	cbz	r2, ba724 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   ba71c:	9502      	str	r5, [sp, #8]
}
   ba71e:	bc30      	pop	{r4, r5}
   ba720:	f7ff bfa8 	b.w	ba674 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   ba724:	6840      	ldr	r0, [r0, #4]
}
   ba726:	bc30      	pop	{r4, r5}
   ba728:	4770      	bx	lr

000ba72a <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   ba72a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   ba72c:	2300      	movs	r3, #0
   ba72e:	e9c0 3300 	strd	r3, r3, [r0]
   ba732:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   ba734:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   ba736:	9300      	str	r3, [sp, #0]
   ba738:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   ba73a:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   ba73e:	4619      	mov	r1, r3
   ba740:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   ba744:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   ba746:	f7ff ffe5 	bl	ba714 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   ba74a:	4620      	mov	r0, r4
   ba74c:	b004      	add	sp, #16
   ba74e:	bd10      	pop	{r4, pc}

000ba750 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   ba750:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   ba752:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba754:	4604      	mov	r4, r0
   ba756:	460d      	mov	r5, r1
   ba758:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   ba75a:	d914      	bls.n	ba786 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   ba75c:	4290      	cmp	r0, r2
   ba75e:	d213      	bcs.n	ba788 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   ba760:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   ba764:	1a75      	subs	r5, r6, r1
   ba766:	f1a1 0708 	sub.w	r7, r1, #8
   ba76a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   ba76c:	42b7      	cmp	r7, r6
   ba76e:	d018      	beq.n	ba7a2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   ba770:	b11c      	cbz	r4, ba77a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   ba772:	4631      	mov	r1, r6
   ba774:	4620      	mov	r0, r4
   ba776:	f7ff fcac 	bl	ba0d2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   ba77a:	1d30      	adds	r0, r6, #4
   ba77c:	f7ff fcb3 	bl	ba0e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   ba780:	3e08      	subs	r6, #8
   ba782:	3c08      	subs	r4, #8
   ba784:	e7f2      	b.n	ba76c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   ba786:	d00c      	beq.n	ba7a2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   ba788:	42b5      	cmp	r5, r6
   ba78a:	d00a      	beq.n	ba7a2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   ba78c:	b11c      	cbz	r4, ba796 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   ba78e:	4629      	mov	r1, r5
   ba790:	4620      	mov	r0, r4
   ba792:	f7ff fc9e 	bl	ba0d2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   ba796:	1d28      	adds	r0, r5, #4
   ba798:	f7ff fca5 	bl	ba0e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   ba79c:	3508      	adds	r5, #8
   ba79e:	3408      	adds	r4, #8
   ba7a0:	e7f2      	b.n	ba788 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   ba7a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba7a4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   ba7a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   ba7a6:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   ba7a8:	6846      	ldr	r6, [r0, #4]
   ba7aa:	4668      	mov	r0, sp
   ba7ac:	f7ff fc91 	bl	ba0d2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   ba7b0:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   ba7b4:	429f      	cmp	r7, r3
   ba7b6:	db12      	blt.n	ba7de <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   ba7b8:	3701      	adds	r7, #1
        if (n > 0) {
   ba7ba:	2f00      	cmp	r7, #0
   ba7bc:	dd29      	ble.n	ba812 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   ba7be:	00f8      	lsls	r0, r7, #3
   ba7c0:	f7fe fbaa 	bl	b8f18 <malloc>
            if (!d) {
   ba7c4:	4605      	mov	r5, r0
   ba7c6:	b1f0      	cbz	r0, ba806 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   ba7c8:	e9d4 1200 	ldrd	r1, r2, [r4]
   ba7cc:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   ba7d0:	f7ff ffbe 	bl	ba750 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   ba7d4:	6820      	ldr	r0, [r4, #0]
   ba7d6:	f7fe fba7 	bl	b8f28 <free>
        data_ = d;
   ba7da:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   ba7dc:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   ba7de:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   ba7e0:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   ba7e2:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   ba7e6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   ba7ea:	4631      	mov	r1, r6
   ba7ec:	f106 0008 	add.w	r0, r6, #8
   ba7f0:	f7ff ffae 	bl	ba750 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   ba7f4:	b11e      	cbz	r6, ba7fe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   ba7f6:	4669      	mov	r1, sp
   ba7f8:	4630      	mov	r0, r6
   ba7fa:	f7ff fc6a 	bl	ba0d2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   ba7fe:	6863      	ldr	r3, [r4, #4]
   ba800:	3301      	adds	r3, #1
   ba802:	6063      	str	r3, [r4, #4]
    return true;
   ba804:	2501      	movs	r5, #1
   ba806:	a801      	add	r0, sp, #4
   ba808:	f7ff fc6d 	bl	ba0e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   ba80c:	4628      	mov	r0, r5
   ba80e:	b003      	add	sp, #12
   ba810:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   ba812:	2500      	movs	r5, #0
   ba814:	e7de      	b.n	ba7d4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000ba816 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   ba816:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   ba818:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   ba81c:	4605      	mov	r5, r0
   ba81e:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   ba820:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   ba824:	42a6      	cmp	r6, r4
   ba826:	d005      	beq.n	ba834 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   ba828:	4639      	mov	r1, r7
   ba82a:	4620      	mov	r0, r4
   ba82c:	f7ff faa1 	bl	b9d72 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   ba830:	b108      	cbz	r0, ba836 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   ba832:	b914      	cbnz	r4, ba83a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   ba834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   ba836:	3408      	adds	r4, #8
   ba838:	e7f4      	b.n	ba824 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   ba83a:	1d20      	adds	r0, r4, #4
   ba83c:	f7ff fc53 	bl	ba0e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   ba840:	e9d5 3200 	ldrd	r3, r2, [r5]
   ba844:	f104 0108 	add.w	r1, r4, #8
   ba848:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   ba84c:	4620      	mov	r0, r4
   ba84e:	f7ff ff7f 	bl	ba750 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   ba852:	686b      	ldr	r3, [r5, #4]
   ba854:	3b01      	subs	r3, #1
   ba856:	606b      	str	r3, [r5, #4]
    return true;
   ba858:	e7ec      	b.n	ba834 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000ba85c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   ba85c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba860:	4605      	mov	r5, r0
   ba862:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   ba864:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   ba866:	460c      	mov	r4, r1
        WiringBleLock lk;
   ba868:	f7fe fef8 	bl	b965c <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   ba86c:	682e      	ldr	r6, [r5, #0]
   ba86e:	1ef3      	subs	r3, r6, #3
   ba870:	2b0d      	cmp	r3, #13
   ba872:	d83c      	bhi.n	ba8ee <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   ba874:	e8df f013 	tbh	[pc, r3, lsl #1]
   ba878:	0053000e 	.word	0x0053000e
   ba87c:	00d1003b 	.word	0x00d1003b
   ba880:	003b003b 	.word	0x003b003b
   ba884:	003b003b 	.word	0x003b003b
   ba888:	009b003b 	.word	0x009b003b
   ba88c:	009b009b 	.word	0x009b009b
   ba890:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   ba894:	a804      	add	r0, sp, #16
   ba896:	f7ff fa13 	bl	b9cc0 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   ba89a:	9b04      	ldr	r3, [sp, #16]
   ba89c:	89aa      	ldrh	r2, [r5, #12]
   ba89e:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   ba8a0:	6869      	ldr	r1, [r5, #4]
   ba8a2:	9804      	ldr	r0, [sp, #16]
   ba8a4:	3108      	adds	r1, #8
   ba8a6:	3002      	adds	r0, #2
   ba8a8:	f7fe fef2 	bl	b9690 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   ba8ac:	a904      	add	r1, sp, #16
   ba8ae:	a806      	add	r0, sp, #24
   ba8b0:	f7ff fc0f 	bl	ba0d2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   ba8b4:	a906      	add	r1, sp, #24
   ba8b6:	f104 0018 	add.w	r0, r4, #24
   ba8ba:	f7ff ff73 	bl	ba7a4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   ba8be:	4605      	mov	r5, r0
   ba8c0:	a807      	add	r0, sp, #28
   ba8c2:	f7ff fc10 	bl	ba0e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba8c6:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   ba8c8:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   ba8ca:	b9b5      	cbnz	r5, ba8fa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   ba8cc:	4b5d      	ldr	r3, [pc, #372]	; (baa44 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   ba8ce:	495e      	ldr	r1, [pc, #376]	; (baa48 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   ba8d0:	9300      	str	r3, [sp, #0]
   ba8d2:	2032      	movs	r0, #50	; 0x32
   ba8d4:	462b      	mov	r3, r5
   ba8d6:	aa06      	add	r2, sp, #24
   ba8d8:	9507      	str	r5, [sp, #28]
   ba8da:	f7fe fa41 	bl	b8d60 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   ba8de:	9b04      	ldr	r3, [sp, #16]
   ba8e0:	4629      	mov	r1, r5
   ba8e2:	8818      	ldrh	r0, [r3, #0]
   ba8e4:	f7fe f822 	bl	b892c <hal_ble_gap_disconnect>
   ba8e8:	a805      	add	r0, sp, #20
   ba8ea:	f7ff fbfc 	bl	ba0e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   ba8ee:	a803      	add	r0, sp, #12
   ba8f0:	f7fe fec2 	bl	b9678 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   ba8f4:	b00e      	add	sp, #56	; 0x38
   ba8f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   ba8fa:	4a54      	ldr	r2, [pc, #336]	; (baa4c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   ba8fc:	9200      	str	r2, [sp, #0]
   ba8fe:	2300      	movs	r3, #0
   ba900:	4951      	ldr	r1, [pc, #324]	; (baa48 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   ba902:	9307      	str	r3, [sp, #28]
   ba904:	aa06      	add	r2, sp, #24
   ba906:	2001      	movs	r0, #1
   ba908:	f7fe fa2a 	bl	b8d60 <log_message>
                if (impl->connectedCallback_) {
   ba90c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   ba90e:	2b00      	cmp	r3, #0
   ba910:	d0ea      	beq.n	ba8e8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   ba912:	a904      	add	r1, sp, #16
   ba914:	f104 0024 	add.w	r0, r4, #36	; 0x24
   ba918:	f7ff fc54 	bl	ba1c4 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   ba91c:	e7e4      	b.n	ba8e8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   ba91e:	89a9      	ldrh	r1, [r5, #12]
   ba920:	4620      	mov	r0, r4
   ba922:	f7ff f8e0 	bl	b9ae6 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   ba926:	4606      	mov	r6, r0
   ba928:	2800      	cmp	r0, #0
   ba92a:	d0e0      	beq.n	ba8ee <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   ba92c:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   ba92e:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   ba932:	f64f 71ff 	movw	r1, #65535	; 0xffff
   ba936:	8029      	strh	r1, [r5, #0]
   ba938:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   ba93c:	429a      	cmp	r2, r3
   ba93e:	d003      	beq.n	ba948 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   ba940:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   ba944:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   ba946:	e7f9      	b.n	ba93c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   ba948:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   ba94c:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   ba950:	45b8      	cmp	r8, r7
   ba952:	d004      	beq.n	ba95e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   ba954:	1d38      	adds	r0, r7, #4
   ba956:	f7ff fbc6 	bl	ba0e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba95a:	3708      	adds	r7, #8
   ba95c:	e7f8      	b.n	ba950 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   ba95e:	2300      	movs	r3, #0
   ba960:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   ba962:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   ba966:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   ba96a:	45b8      	cmp	r8, r7
   ba96c:	d004      	beq.n	ba978 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   ba96e:	1d38      	adds	r0, r7, #4
   ba970:	f7ff fbb9 	bl	ba0e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   ba974:	3708      	adds	r7, #8
   ba976:	e7f8      	b.n	ba96a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   ba978:	2300      	movs	r3, #0
   ba97a:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   ba97c:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   ba97e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   ba980:	b123      	cbz	r3, ba98c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   ba982:	4631      	mov	r1, r6
   ba984:	f104 0034 	add.w	r0, r4, #52	; 0x34
   ba988:	f7ff fc1c 	bl	ba1c4 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   ba98c:	2300      	movs	r3, #0
   ba98e:	2220      	movs	r2, #32
   ba990:	e9cd 2306 	strd	r2, r3, [sp, #24]
   ba994:	4a2e      	ldr	r2, [pc, #184]	; (baa50 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   ba996:	9200      	str	r2, [sp, #0]
   ba998:	492b      	ldr	r1, [pc, #172]	; (baa48 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   ba99a:	aa06      	add	r2, sp, #24
   ba99c:	2001      	movs	r0, #1
   ba99e:	f7fe f9df 	bl	b8d60 <log_message>
                    impl->peers_.removeOne(*peer);
   ba9a2:	4631      	mov	r1, r6
   ba9a4:	f104 0018 	add.w	r0, r4, #24
   ba9a8:	f7ff ff35 	bl	ba816 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   ba9ac:	e79f      	b.n	ba8ee <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   ba9ae:	89a9      	ldrh	r1, [r5, #12]
   ba9b0:	4620      	mov	r0, r4
   ba9b2:	f7ff f898 	bl	b9ae6 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   ba9b6:	2800      	cmp	r0, #0
   ba9b8:	d099      	beq.n	ba8ee <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   ba9ba:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   ba9bc:	2b00      	cmp	r3, #0
   ba9be:	d096      	beq.n	ba8ee <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   ba9c0:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   ba9c2:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   ba9c4:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   ba9c8:	d001      	beq.n	ba9ce <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   ba9ca:	2e10      	cmp	r6, #16
   ba9cc:	d117      	bne.n	ba9fe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   ba9ce:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   ba9d0:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   ba9d2:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   ba9d4:	2506      	movs	r5, #6
                        };
   ba9d6:	f88d 3015 	strb.w	r3, [sp, #21]
   ba9da:	9104      	str	r1, [sp, #16]
   ba9dc:	f88d 2014 	strb.w	r2, [sp, #20]
   ba9e0:	9006      	str	r0, [sp, #24]
   ba9e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   ba9e6:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   ba9e8:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   ba9ec:	9508      	str	r5, [sp, #32]
   ba9ee:	e883 0003 	stmia.w	r3, {r0, r1}
   ba9f2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   ba9f4:	a906      	add	r1, sp, #24
   ba9f6:	f104 0044 	add.w	r0, r4, #68	; 0x44
   ba9fa:	4798      	blx	r3
   ba9fc:	e777      	b.n	ba8ee <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   ba9fe:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   baa00:	bf01      	itttt	eq
   baa02:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   baa04:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   baa06:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   baa0a:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   baa0c:	bf0f      	iteee	eq
   baa0e:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   baa12:	461a      	movne	r2, r3
   baa14:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   baa16:	461d      	movne	r5, r3
   baa18:	e7dd      	b.n	ba9d6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   baa1a:	89a9      	ldrh	r1, [r5, #12]
   baa1c:	4620      	mov	r0, r4
   baa1e:	f7ff f862 	bl	b9ae6 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   baa22:	4601      	mov	r1, r0
   baa24:	2800      	cmp	r0, #0
   baa26:	f43f af62 	beq.w	ba8ee <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   baa2a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   baa2c:	2b00      	cmp	r3, #0
   baa2e:	f43f af5e 	beq.w	ba8ee <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   baa32:	686b      	ldr	r3, [r5, #4]
   baa34:	9306      	str	r3, [sp, #24]
   baa36:	aa06      	add	r2, sp, #24
   baa38:	6e23      	ldr	r3, [r4, #96]	; 0x60
   baa3a:	f104 0054 	add.w	r0, r4, #84	; 0x54
   baa3e:	4798      	blx	r3
   baa40:	e755      	b.n	ba8ee <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   baa42:	bf00      	nop
   baa44:	000c0d4f 	.word	0x000c0d4f
   baa48:	000c0cb3 	.word	0x000c0cb3
   baa4c:	000c0d75 	.word	0x000c0d75
   baa50:	000c0d92 	.word	0x000c0d92

000baa54 <_ZNK8particle14BleLocalDevice10disconnectEv>:

void BleLocalDevice::onPairingEvent(const BleOnPairingEventStdFunction& callback) const {
    impl()->onPairingEvent(callback);
}

int BleLocalDevice::disconnect() const {
   baa54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   baa58:	4607      	mov	r7, r0
   baa5a:	b08b      	sub	sp, #44	; 0x2c
    WiringBleLock lk;
   baa5c:	4668      	mov	r0, sp
   baa5e:	f7fe fdfd 	bl	b965c <_ZN8particle3ble13WiringBleLockC1Ev>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   baa62:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
   baa64:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
   baa68:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
    for (auto& p : impl()->peers()) {
   baa6c:	42ac      	cmp	r4, r5
   baa6e:	d035      	beq.n	baadc <_ZNK8particle14BleLocalDevice10disconnectEv+0x88>
        hal_ble_conn_info_t connInfo = {};
   baa70:	2224      	movs	r2, #36	; 0x24
   baa72:	2100      	movs	r1, #0
   baa74:	a801      	add	r0, sp, #4
   baa76:	f002 ffa0 	bl	bd9ba <memset>
        if (hal_ble_gap_get_connection_info(p.impl()->connHandle(), &connInfo, nullptr) != SYSTEM_ERROR_NONE) {
   baa7a:	6823      	ldr	r3, [r4, #0]
   baa7c:	2200      	movs	r2, #0
   baa7e:	8818      	ldrh	r0, [r3, #0]
   baa80:	a901      	add	r1, sp, #4
   baa82:	f7fd ffa3 	bl	b89cc <hal_ble_gap_get_connection_info>
   baa86:	4606      	mov	r6, r0
   baa88:	b108      	cbz	r0, baa8e <_ZNK8particle14BleLocalDevice10disconnectEv+0x3a>
    for (auto& p : impl()->peers()) {
   baa8a:	3408      	adds	r4, #8
   baa8c:	e7ee      	b.n	baa6c <_ZNK8particle14BleLocalDevice10disconnectEv+0x18>
            continue;
        }
        if (connInfo.role == BLE_ROLE_PERIPHERAL) {
   baa8e:	f89d 8008 	ldrb.w	r8, [sp, #8]
   baa92:	f1b8 0f01 	cmp.w	r8, #1
   baa96:	d1f8      	bne.n	baa8a <_ZNK8particle14BleLocalDevice10disconnectEv+0x36>
   baa98:	f8df 9048 	ldr.w	r9, [pc, #72]	; baae4 <_ZNK8particle14BleLocalDevice10disconnectEv+0x90>
   baa9c:	f8d9 0000 	ldr.w	r0, [r9]
   baaa0:	f7fe f816 	bl	b8ad0 <os_mutex_recursive_unlock>
        locked_ = false;
   baaa4:	f88d 6000 	strb.w	r6, [sp]
            lk.unlock(); // To allow HAL BLE thread to invoke wiring callback
            CHECK(hal_ble_gap_disconnect(p.impl()->connHandle(), nullptr));
   baaa8:	6823      	ldr	r3, [r4, #0]
   baaaa:	4631      	mov	r1, r6
   baaac:	8818      	ldrh	r0, [r3, #0]
   baaae:	f7fd ff3d 	bl	b892c <hal_ble_gap_disconnect>
   baab2:	1e05      	subs	r5, r0, #0
   baab4:	db0b      	blt.n	baace <_ZNK8particle14BleLocalDevice10disconnectEv+0x7a>
    void lock() { os_mutex_recursive_lock(handle_); }
   baab6:	f8d9 0000 	ldr.w	r0, [r9]
   baaba:	f7fe f801 	bl	b8ac0 <os_mutex_recursive_lock>
        return peers_;
   baabe:	6838      	ldr	r0, [r7, #0]
        locked_ = true;
   baac0:	f88d 8000 	strb.w	r8, [sp]
            lk.lock();
            impl()->peers().removeOne(p);
   baac4:	4621      	mov	r1, r4
   baac6:	3018      	adds	r0, #24
   baac8:	f7ff fea5 	bl	ba816 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
            return SYSTEM_ERROR_NONE;
   baacc:	4635      	mov	r5, r6
    WiringBleLock lk;
   baace:	4668      	mov	r0, sp
   baad0:	f7fe fdd2 	bl	b9678 <_ZN8particle3ble13WiringBleLockD1Ev>
        }
    }
    return SYSTEM_ERROR_NOT_FOUND;
}
   baad4:	4628      	mov	r0, r5
   baad6:	b00b      	add	sp, #44	; 0x2c
   baad8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return SYSTEM_ERROR_NOT_FOUND;
   baadc:	f06f 05a9 	mvn.w	r5, #169	; 0xa9
   baae0:	e7f5      	b.n	baace <_ZNK8particle14BleLocalDevice10disconnectEv+0x7a>
   baae2:	bf00      	nop
   baae4:	2003e670 	.word	0x2003e670

000baae8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   baae8:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   baaea:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   baaec:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   baaee:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   baaf0:	dd05      	ble.n	baafe <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
    return ::realloc(ptr, size);
   baaf2:	2114      	movs	r1, #20
   baaf4:	4369      	muls	r1, r5
   baaf6:	f7fe fa1f 	bl	b8f38 <realloc>
            if (!d) {
   baafa:	b918      	cbnz	r0, bab04 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1c>
    }
   baafc:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   baafe:	f7fe fa13 	bl	b8f28 <free>
        T* d = nullptr;
   bab02:	2000      	movs	r0, #0
        data_ = d;
   bab04:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   bab06:	60a5      	str	r5, [r4, #8]
        return true;
   bab08:	2001      	movs	r0, #1
   bab0a:	e7f7      	b.n	baafc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x14>

000bab0c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bab0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        capacity_(0) {
   bab10:	2400      	movs	r4, #0
   bab12:	e9c0 4400 	strd	r4, r4, [r0]
   bab16:	6084      	str	r4, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bab18:	4688      	mov	r8, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bab1a:	6849      	ldr	r1, [r1, #4]
   bab1c:	42a1      	cmp	r1, r4
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bab1e:	4607      	mov	r7, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bab20:	dd1a      	ble.n	bab58 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   bab22:	f7ff ffe1 	bl	baae8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bab26:	b1b8      	cbz	r0, bab58 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   bab28:	e9d8 9300 	ldrd	r9, r3, [r8]
   bab2c:	f04f 0c14 	mov.w	ip, #20
   bab30:	f8d7 e000 	ldr.w	lr, [r7]
   bab34:	fb0c 9c03 	mla	ip, ip, r3, r9
        for (; it != end; ++it, ++dest) {
   bab38:	eb09 0504 	add.w	r5, r9, r4
   bab3c:	45ac      	cmp	ip, r5
   bab3e:	d008      	beq.n	bab52 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x46>
            new(dest) T(*it);
   bab40:	eb1e 0604 	adds.w	r6, lr, r4
   bab44:	bf1f      	itttt	ne
   bab46:	cd0f      	ldmiane	r5!, {r0, r1, r2, r3}
   bab48:	c60f      	stmiane	r6!, {r0, r1, r2, r3}
   bab4a:	682b      	ldrne	r3, [r5, #0]
   bab4c:	6033      	strne	r3, [r6, #0]
        for (; it != end; ++it, ++dest) {
   bab4e:	3414      	adds	r4, #20
   bab50:	e7f2      	b.n	bab38 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x2c>
        size_ = vector.size_;
   bab52:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bab56:	607b      	str	r3, [r7, #4]
}
   bab58:	4638      	mov	r0, r7
   bab5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000bab5e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   bab5e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return insert(i, vector.data_, vector.size_);
   bab62:	e9d1 8700 	ldrd	r8, r7, [r1]
    return insert(size_, vector);
   bab66:	6845      	ldr	r5, [r0, #4]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bab68:	6883      	ldr	r3, [r0, #8]
   bab6a:	19e9      	adds	r1, r5, r7
   bab6c:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   bab6e:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   bab70:	dc17      	bgt.n	baba2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x44>
    T* const p = data_ + i;
   bab72:	2314      	movs	r3, #20
   bab74:	6826      	ldr	r6, [r4, #0]
    move(p + n, p, data_ + size_);
   bab76:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bab78:	435d      	muls	r5, r3
    move(p + n, p, data_ + size_);
   bab7a:	fb03 f907 	mul.w	r9, r3, r7
   bab7e:	435a      	muls	r2, r3
    T* const p = data_ + i;
   bab80:	442e      	add	r6, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   bab82:	1b52      	subs	r2, r2, r5
   bab84:	4631      	mov	r1, r6
   bab86:	eb06 0009 	add.w	r0, r6, r9
   bab8a:	f002 fefc 	bl	bd986 <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   bab8e:	464a      	mov	r2, r9
   bab90:	4641      	mov	r1, r8
   bab92:	4630      	mov	r0, r6
   bab94:	f002 fee9 	bl	bd96a <memcpy>
    size_ += n;
   bab98:	6863      	ldr	r3, [r4, #4]
   bab9a:	443b      	add	r3, r7
   bab9c:	6063      	str	r3, [r4, #4]
}
   bab9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   baba2:	f7ff ffa1 	bl	baae8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   baba6:	2800      	cmp	r0, #0
   baba8:	d1e3      	bne.n	bab72 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x14>
   babaa:	e7f8      	b.n	bab9e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x40>

000babac <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   babac:	b082      	sub	sp, #8
   babae:	b570      	push	{r4, r5, r6, lr}
   babb0:	460c      	mov	r4, r1
   babb2:	a904      	add	r1, sp, #16
   babb4:	e881 000c 	stmia.w	r1, {r2, r3}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   babb8:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   babbc:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   babbe:	4605      	mov	r5, r0
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   babc0:	da17      	bge.n	babf2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x46>
    T* const p = data_ + i;
   babc2:	2314      	movs	r3, #20
   babc4:	fb03 f104 	mul.w	r1, r3, r4
    move(p + 1, p, data_ + size_);
   babc8:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   babca:	682c      	ldr	r4, [r5, #0]
    move(p + 1, p, data_ + size_);
   babcc:	435a      	muls	r2, r3
    T* const p = data_ + i;
   babce:	440c      	add	r4, r1
        ::memmove(dest, p, (end - p) * sizeof(T));
   babd0:	1a52      	subs	r2, r2, r1
   babd2:	18e0      	adds	r0, r4, r3
   babd4:	4621      	mov	r1, r4
    new(p) T(std::move(value));
   babd6:	ae04      	add	r6, sp, #16
        ::memmove(dest, p, (end - p) * sizeof(T));
   babd8:	f002 fed5 	bl	bd986 <memmove>
    new(p) T(std::move(value));
   babdc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   babde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   babe0:	6833      	ldr	r3, [r6, #0]
   babe2:	6023      	str	r3, [r4, #0]
    ++size_;
   babe4:	686b      	ldr	r3, [r5, #4]
   babe6:	3301      	adds	r3, #1
   babe8:	606b      	str	r3, [r5, #4]
}
   babea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   babee:	b002      	add	sp, #8
   babf0:	4770      	bx	lr
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   babf2:	3101      	adds	r1, #1
   babf4:	f7ff ff78 	bl	baae8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   babf8:	2800      	cmp	r0, #0
   babfa:	d1e2      	bne.n	babc2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x16>
   babfc:	e7f5      	b.n	babea <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x3e>

000babfe <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>:
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   babfe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        capacity_(0) {
   bac02:	2400      	movs	r4, #0
   bac04:	b093      	sub	sp, #76	; 0x4c
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   bac06:	1e93      	subs	r3, r2, #2
   bac08:	e9c0 4400 	strd	r4, r4, [r0]
   bac0c:	b2db      	uxtb	r3, r3
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   bac0e:	4605      	mov	r5, r0
   bac10:	460f      	mov	r7, r1
   bac12:	4690      	mov	r8, r2
   bac14:	6084      	str	r4, [r0, #8]
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   bac16:	9305      	str	r3, [sp, #20]
    return size_;
   bac18:	6879      	ldr	r1, [r7, #4]
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   bac1a:	428c      	cmp	r4, r1
   bac1c:	da72      	bge.n	bad04 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
    return data_[i];
   bac1e:	6838      	ldr	r0, [r7, #0]
   bac20:	ab07      	add	r3, sp, #28
   bac22:	4642      	mov	r2, r8
   bac24:	1b09      	subs	r1, r1, r4
   bac26:	4420      	add	r0, r4
   bac28:	f7fe fc4a 	bl	b94c0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
        if (adsLen > 0) {
   bac2c:	4606      	mov	r6, r0
   bac2e:	2800      	cmp	r0, #0
   bac30:	d068      	beq.n	bad04 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   bac32:	9b05      	ldr	r3, [sp, #20]
   bac34:	2b01      	cmp	r3, #1
   bac36:	d82f      	bhi.n	bac98 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x9a>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   bac38:	f1a0 0b02 	sub.w	fp, r0, #2
   bac3c:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
   bac40:	f04f 0900 	mov.w	r9, #0
    return insert(size_, std::move(value));
   bac44:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   bac48:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   bac4a:	45cb      	cmp	fp, r9
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   bac4c:	4423      	add	r3, r4
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   bac4e:	d055      	beq.n	bacfc <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
    return data_[i];
   bac50:	683a      	ldr	r2, [r7, #0]
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   bac52:	eb03 0349 	add.w	r3, r3, r9, lsl #1
   bac56:	4413      	add	r3, r2
   bac58:	a808      	add	r0, sp, #32
   bac5a:	78d9      	ldrb	r1, [r3, #3]
   bac5c:	789b      	ldrb	r3, [r3, #2]
   bac5e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   bac62:	f7fe fd92 	bl	b978a <_ZN8particle7BleUuidC1Et>
                    uuids.append(uuid);
   bac66:	f10d 0e20 	add.w	lr, sp, #32
   bac6a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   bac6e:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   bac72:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   bac76:	f8de 3000 	ldr.w	r3, [lr]
   bac7a:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   bac7e:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   bac82:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   bac86:	ab0d      	add	r3, sp, #52	; 0x34
   bac88:	cb0c      	ldmia	r3, {r2, r3}
   bac8a:	6869      	ldr	r1, [r5, #4]
   bac8c:	4628      	mov	r0, r5
   bac8e:	f7ff ff8d 	bl	babac <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   bac92:	f109 0901 	add.w	r9, r9, #1
   bac96:	e7d7      	b.n	bac48 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x4a>
            } else if (type == BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE) {
   bac98:	f1a8 0306 	sub.w	r3, r8, #6
   bac9c:	2b01      	cmp	r3, #1
   bac9e:	d82d      	bhi.n	bacfc <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   baca0:	f1a0 0b02 	sub.w	fp, r0, #2
   baca4:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
   baca8:	f04f 0900 	mov.w	r9, #0
   bacac:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
   bacb0:	45cb      	cmp	fp, r9
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   bacb2:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   bacb4:	d022      	beq.n	bacfc <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   bacb6:	3302      	adds	r3, #2
    return data_[i];
   bacb8:	6839      	ldr	r1, [r7, #0]
   bacba:	4423      	add	r3, r4
   bacbc:	eb03 1309 	add.w	r3, r3, r9, lsl #4
   bacc0:	2201      	movs	r2, #1
   bacc2:	4419      	add	r1, r3
   bacc4:	a808      	add	r0, sp, #32
   bacc6:	f7fe fd41 	bl	b974c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
                    uuids.append(uuid);
   bacca:	f10d 0e20 	add.w	lr, sp, #32
   bacce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   bacd2:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   bacd6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   bacda:	f8de 3000 	ldr.w	r3, [lr]
   bacde:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   bace2:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   bace6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   bacea:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   bacee:	6869      	ldr	r1, [r5, #4]
   bacf0:	4628      	mov	r0, r5
   bacf2:	f7ff ff5b 	bl	babac <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   bacf6:	f109 0901 	add.w	r9, r9, #1
   bacfa:	e7d9      	b.n	bacb0 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xb2>
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   bacfc:	9b07      	ldr	r3, [sp, #28]
   bacfe:	441c      	add	r4, r3
   bad00:	4434      	add	r4, r6
   bad02:	e789      	b.n	bac18 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x1a>
}
   bad04:	4628      	mov	r0, r5
   bad06:	b013      	add	sp, #76	; 0x4c
   bad08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bad0c <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>:
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   bad0c:	b530      	push	{r4, r5, lr}
        capacity_(0) {
   bad0e:	2300      	movs	r3, #0
   bad10:	b085      	sub	sp, #20
   bad12:	e9c0 3300 	strd	r3, r3, [r0]
   bad16:	6083      	str	r3, [r0, #8]
   bad18:	4604      	mov	r4, r0
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   bad1a:	2202      	movs	r2, #2
   bad1c:	a801      	add	r0, sp, #4
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   bad1e:	460d      	mov	r5, r1
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   bad20:	f7ff ff6d 	bl	babfe <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   bad24:	a901      	add	r1, sp, #4
   bad26:	4620      	mov	r0, r4
   bad28:	f7ff ff19 	bl	bab5e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   bad2c:	a801      	add	r0, sp, #4
   bad2e:	f7ff f939 	bl	b9fa4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   bad32:	2202      	movs	r2, #2
   bad34:	4629      	mov	r1, r5
   bad36:	a801      	add	r0, sp, #4
   bad38:	f7ff ff61 	bl	babfe <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   bad3c:	a901      	add	r1, sp, #4
   bad3e:	4620      	mov	r0, r4
   bad40:	f7ff ff0d 	bl	bab5e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   bad44:	a801      	add	r0, sp, #4
   bad46:	f7ff f92d 	bl	b9fa4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE));
   bad4a:	2203      	movs	r2, #3
   bad4c:	4629      	mov	r1, r5
   bad4e:	a801      	add	r0, sp, #4
   bad50:	f7ff ff55 	bl	babfe <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   bad54:	a901      	add	r1, sp, #4
   bad56:	4620      	mov	r0, r4
   bad58:	f7ff ff01 	bl	bab5e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   bad5c:	a801      	add	r0, sp, #4
   bad5e:	f7ff f921 	bl	b9fa4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE));
   bad62:	2206      	movs	r2, #6
   bad64:	4629      	mov	r1, r5
   bad66:	a801      	add	r0, sp, #4
   bad68:	f7ff ff49 	bl	babfe <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   bad6c:	a901      	add	r1, sp, #4
   bad6e:	4620      	mov	r0, r4
   bad70:	f7ff fef5 	bl	bab5e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   bad74:	a801      	add	r0, sp, #4
   bad76:	f7ff f915 	bl	b9fa4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE));
   bad7a:	2207      	movs	r2, #7
   bad7c:	4629      	mov	r1, r5
   bad7e:	a801      	add	r0, sp, #4
   bad80:	f7ff ff3d 	bl	babfe <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   bad84:	a901      	add	r1, sp, #4
   bad86:	4620      	mov	r0, r4
   bad88:	f7ff fee9 	bl	bab5e <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   bad8c:	a801      	add	r0, sp, #4
   bad8e:	f7ff f909 	bl	b9fa4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   bad92:	4620      	mov	r0, r4
   bad94:	b005      	add	sp, #20
   bad96:	bd30      	pop	{r4, r5, pc}

000bad98 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>:
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   bad98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bad9c:	b085      	sub	sp, #20
   bad9e:	4688      	mov	r8, r1
    const Vector<BleUuid>& foundUuids = serviceUUID();
   bada0:	4601      	mov	r1, r0
   bada2:	a801      	add	r0, sp, #4
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   bada4:	4691      	mov	r9, r2
    const Vector<BleUuid>& foundUuids = serviceUUID();
   bada6:	f7ff ffb1 	bl	bad0c <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return data_;
   badaa:	9e01      	ldr	r6, [sp, #4]
    return data_ + size_;
   badac:	9b02      	ldr	r3, [sp, #8]
   badae:	f04f 0e14 	mov.w	lr, #20
   badb2:	fb0e 6c03 	mla	ip, lr, r3, r6
   badb6:	2700      	movs	r7, #0
    for (const auto& uuid : foundUuids) {
   badb8:	45b4      	cmp	ip, r6
   badba:	d00d      	beq.n	badd8 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        if (found >= count) {
   badbc:	45b9      	cmp	r9, r7
   badbe:	f106 0614 	add.w	r6, r6, #20
   badc2:	d009      	beq.n	badd8 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        uuids[found++] = uuid;
   badc4:	f1a6 0514 	sub.w	r5, r6, #20
   badc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   badca:	fb0e 8407 	mla	r4, lr, r7, r8
   badce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   badd0:	682b      	ldr	r3, [r5, #0]
   badd2:	6023      	str	r3, [r4, #0]
    for (const auto& uuid : foundUuids) {
   badd4:	3701      	adds	r7, #1
   badd6:	e7ef      	b.n	badb8 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x20>
    const Vector<BleUuid>& foundUuids = serviceUUID();
   badd8:	a801      	add	r0, sp, #4
   badda:	f7ff f8e3 	bl	b9fa4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   badde:	4638      	mov	r0, r7
   bade0:	b005      	add	sp, #20
   bade2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000bade6 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>:
    bool filterByServiceUUID(const BleScanResult& result) {
   bade6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   badea:	b08b      	sub	sp, #44	; 0x2c
   badec:	460c      	mov	r4, r1
        auto filterServiceUuids = filter_.serviceUUIDs();
   badee:	f100 0144 	add.w	r1, r0, #68	; 0x44
   badf2:	a801      	add	r0, sp, #4
   badf4:	f7ff fe8a 	bl	bab0c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>
        if (filterServiceUuids.size() > 0) {
   badf8:	9b02      	ldr	r3, [sp, #8]
   badfa:	2b00      	cmp	r3, #0
   badfc:	dd4a      	ble.n	bae94 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xae>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   badfe:	f104 0114 	add.w	r1, r4, #20
   bae02:	a804      	add	r0, sp, #16
   bae04:	f7ff ff82 	bl	bad0c <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   bae08:	f104 0108 	add.w	r1, r4, #8
   bae0c:	a807      	add	r0, sp, #28
   bae0e:	f7ff ff7d 	bl	bad0c <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return size_;
   bae12:	9d05      	ldr	r5, [sp, #20]
   bae14:	9e08      	ldr	r6, [sp, #32]
            if (srUuids.size() <= 0 && advUuids.size() <= 0) {
   bae16:	2d00      	cmp	r5, #0
   bae18:	dc01      	bgt.n	bae1e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x38>
   bae1a:	2e00      	cmp	r6, #0
   bae1c:	dd38      	ble.n	bae90 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
    return data_;
   bae1e:	9a01      	ldr	r2, [sp, #4]
    return data_ + size_;
   bae20:	9f02      	ldr	r7, [sp, #8]
    return data_;
   bae22:	f8dd 8010 	ldr.w	r8, [sp, #16]
   bae26:	f8dd 901c 	ldr.w	r9, [sp, #28]
    return data_ + size_;
   bae2a:	2314      	movs	r3, #20
   bae2c:	fb03 2707 	mla	r7, r3, r7, r2
    return data_ + size_;
   bae30:	fb03 8505 	mla	r5, r3, r5, r8
   bae34:	fb03 9606 	mla	r6, r3, r6, r9
   bae38:	4692      	mov	sl, r2
            for (const auto& uuid : filterServiceUuids) {
   bae3a:	45ba      	cmp	sl, r7
   bae3c:	d028      	beq.n	bae90 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
const T* spark::Vector<T, AllocatorT>::end() const {
   bae3e:	46c3      	mov	fp, r8
                for (const auto& found : srUuids) {
   bae40:	45ab      	cmp	fp, r5
   bae42:	d015      	beq.n	bae70 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8a>
                    if (uuid == found) {
   bae44:	4659      	mov	r1, fp
   bae46:	4650      	mov	r0, sl
   bae48:	f7fe fca9 	bl	b979e <_ZNK8particle7BleUuideqERKS0_>
   bae4c:	f10b 0b14 	add.w	fp, fp, #20
   bae50:	4604      	mov	r4, r0
   bae52:	2800      	cmp	r0, #0
   bae54:	d0f4      	beq.n	bae40 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x5a>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   bae56:	a807      	add	r0, sp, #28
   bae58:	f7ff f8a4 	bl	b9fa4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   bae5c:	a804      	add	r0, sp, #16
   bae5e:	f7ff f8a1 	bl	b9fa4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
        auto filterServiceUuids = filter_.serviceUUIDs();
   bae62:	a801      	add	r0, sp, #4
   bae64:	f7ff f89e 	bl	b9fa4 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    }
   bae68:	4620      	mov	r0, r4
   bae6a:	b00b      	add	sp, #44	; 0x2c
   bae6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bae70:	46cb      	mov	fp, r9
                for (const auto& found : advUuids) {
   bae72:	45b3      	cmp	fp, r6
   bae74:	d009      	beq.n	bae8a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xa4>
                    if (uuid == found) {
   bae76:	4659      	mov	r1, fp
   bae78:	4650      	mov	r0, sl
   bae7a:	f7fe fc90 	bl	b979e <_ZNK8particle7BleUuideqERKS0_>
   bae7e:	f10b 0b14 	add.w	fp, fp, #20
   bae82:	4604      	mov	r4, r0
   bae84:	2800      	cmp	r0, #0
   bae86:	d0f4      	beq.n	bae72 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8c>
   bae88:	e7e5      	b.n	bae56 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
            for (const auto& uuid : filterServiceUuids) {
   bae8a:	f10a 0a14 	add.w	sl, sl, #20
   bae8e:	e7d4      	b.n	bae3a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x54>
                return false;
   bae90:	2400      	movs	r4, #0
   bae92:	e7e0      	b.n	bae56 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
        return true;
   bae94:	2401      	movs	r4, #1
   bae96:	e7e4      	b.n	bae62 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x7c>

000bae98 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   bae98:	b513      	push	{r0, r1, r4, lr}
   bae9a:	460b      	mov	r3, r1
   bae9c:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bae9e:	e9d0 0100 	ldrd	r0, r1, [r0]
   baea2:	466c      	mov	r4, sp
   baea4:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   baea8:	e893 0003 	ldmia.w	r3, {r0, r1}
   baeac:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   baeb0:	e894 0003 	ldmia.w	r4, {r0, r1}
   baeb4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   baeb8:	b002      	add	sp, #8
   baeba:	bd10      	pop	{r4, pc}

000baebc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   baebc:	b538      	push	{r3, r4, r5, lr}
   baebe:	4605      	mov	r5, r0
   baec0:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   baec2:	f7ff ffe9 	bl	bae98 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   baec6:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   baec8:	68a2      	ldr	r2, [r4, #8]
   baeca:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   baecc:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   baece:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   baed0:	68e2      	ldr	r2, [r4, #12]
   baed2:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   baed4:	60e3      	str	r3, [r4, #12]
      }
   baed6:	bd38      	pop	{r3, r4, r5, pc}

000baed8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>:
      operator=(const function& __x)
   baed8:	b530      	push	{r4, r5, lr}
   baeda:	b085      	sub	sp, #20
    _Function_base() : _M_manager(nullptr) { }
   baedc:	2300      	movs	r3, #0
   baede:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   baee0:	688b      	ldr	r3, [r1, #8]
      operator=(const function& __x)
   baee2:	4605      	mov	r5, r0
   baee4:	460c      	mov	r4, r1
      if (static_cast<bool>(__x))
   baee6:	b133      	cbz	r3, baef6 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0+0x1e>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   baee8:	2202      	movs	r2, #2
   baeea:	4668      	mov	r0, sp
   baeec:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   baeee:	68e3      	ldr	r3, [r4, #12]
   baef0:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   baef2:	68a3      	ldr	r3, [r4, #8]
   baef4:	9302      	str	r3, [sp, #8]
	function(__x).swap(*this);
   baef6:	4629      	mov	r1, r5
   baef8:	4668      	mov	r0, sp
   baefa:	f7ff ffdf 	bl	baebc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   baefe:	4668      	mov	r0, sp
   baf00:	f7f9 fa62 	bl	b43c8 <_ZNSt14_Function_baseD1Ev>
      }
   baf04:	b005      	add	sp, #20
   baf06:	bd30      	pop	{r4, r5, pc}

000baf08 <_ZN8particle17BleCharacteristicaSERKS0_>:
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   baf08:	b538      	push	{r3, r4, r5, lr}
   baf0a:	460d      	mov	r5, r1
      { return _M_ptr; }
   baf0c:	6801      	ldr	r1, [r0, #0]
        if (charImpl.dataReceivedCallback_) {
   baf0e:	6d4b      	ldr	r3, [r1, #84]	; 0x54
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   baf10:	4604      	mov	r4, r0
        if (charImpl.dataReceivedCallback_) {
   baf12:	b123      	cbz	r3, baf1e <_ZN8particle17BleCharacteristicaSERKS0_+0x16>
            dataReceivedCallback_ = charImpl.dataReceivedCallback_;
   baf14:	6828      	ldr	r0, [r5, #0]
   baf16:	314c      	adds	r1, #76	; 0x4c
   baf18:	304c      	adds	r0, #76	; 0x4c
   baf1a:	f7ff ffdd 	bl	baed8 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   baf1e:	4620      	mov	r0, r4
   baf20:	682b      	ldr	r3, [r5, #0]
   baf22:	f840 3b04 	str.w	r3, [r0], #4
   baf26:	6869      	ldr	r1, [r5, #4]
   baf28:	f7fe fb72 	bl	b9610 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
}
   baf2c:	4620      	mov	r0, r4
   baf2e:	bd38      	pop	{r3, r4, r5, pc}

000baf30 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>:
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   baf30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   baf34:	4604      	mov	r4, r0
   baf36:	b087      	sub	sp, #28
    WiringBleLock lk;
   baf38:	4668      	mov	r0, sp
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   baf3a:	460e      	mov	r6, r1
   baf3c:	4617      	mov	r7, r2
    WiringBleLock lk;
   baf3e:	f7fe fb8d 	bl	b965c <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   baf42:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   baf44:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   baf48:	eb04 08c3 	add.w	r8, r4, r3, lsl #3
    for (auto& existChar : impl()->characteristics()) {
   baf4c:	4544      	cmp	r4, r8
   baf4e:	46a1      	mov	r9, r4
   baf50:	d016      	beq.n	baf80 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x50>
        if (existChar.UUID() == uuid) {
   baf52:	4621      	mov	r1, r4
   baf54:	a801      	add	r0, sp, #4
   baf56:	f7fe fdf1 	bl	b9b3c <_ZNK8particle17BleCharacteristic4UUIDEv>
   baf5a:	4639      	mov	r1, r7
   baf5c:	a801      	add	r0, sp, #4
   baf5e:	f7fe fc1e 	bl	b979e <_ZNK8particle7BleUuideqERKS0_>
   baf62:	3408      	adds	r4, #8
   baf64:	4605      	mov	r5, r0
   baf66:	2800      	cmp	r0, #0
   baf68:	d0f0      	beq.n	baf4c <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x1c>
            characteristic = existChar;
   baf6a:	4649      	mov	r1, r9
   baf6c:	4630      	mov	r0, r6
   baf6e:	f7ff ffcb 	bl	baf08 <_ZN8particle17BleCharacteristicaSERKS0_>
    WiringBleLock lk;
   baf72:	4668      	mov	r0, sp
   baf74:	f7fe fb80 	bl	b9678 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   baf78:	4628      	mov	r0, r5
   baf7a:	b007      	add	sp, #28
   baf7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return false;
   baf80:	2500      	movs	r5, #0
   baf82:	e7f6      	b.n	baf72 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x42>

000baf84 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   baf84:	b510      	push	{r4, lr}
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   baf86:	6804      	ldr	r4, [r0, #0]
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   baf88:	b08a      	sub	sp, #40	; 0x28
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   baf8a:	344c      	adds	r4, #76	; 0x4c
   baf8c:	b1b9      	cbz	r1, bafbe <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x3a>
   baf8e:	e9cd 1200 	strd	r1, r2, [sp]
   baf92:	a802      	add	r0, sp, #8
   baf94:	4669      	mov	r1, sp
   baf96:	f7ff f865 	bl	ba064 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   baf9a:	2300      	movs	r3, #0
	__x.swap(*this);
   baf9c:	a906      	add	r1, sp, #24
   baf9e:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   bafa0:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   bafa2:	f7ff ff8b 	bl	baebc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   bafa6:	4621      	mov	r1, r4
   bafa8:	a806      	add	r0, sp, #24
   bafaa:	f7ff ff87 	bl	baebc <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   bafae:	a806      	add	r0, sp, #24
   bafb0:	f7f9 fa0a 	bl	b43c8 <_ZNSt14_Function_baseD1Ev>
   bafb4:	a802      	add	r0, sp, #8
   bafb6:	f7f9 fa07 	bl	b43c8 <_ZNSt14_Function_baseD1Ev>
}
   bafba:	b00a      	add	sp, #40	; 0x28
   bafbc:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   bafbe:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   bafc0:	e7eb      	b.n	baf9a <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x16>

000bafc2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bafc2:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bafc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bafc6:	4604      	mov	r4, r0
   bafc8:	460d      	mov	r5, r1
   bafca:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bafcc:	d914      	bls.n	baff8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bafce:	4290      	cmp	r0, r2
   bafd0:	d213      	bcs.n	baffa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bafd2:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bafd6:	1a75      	subs	r5, r6, r1
   bafd8:	f1a1 0708 	sub.w	r7, r1, #8
   bafdc:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bafde:	42b7      	cmp	r7, r6
   bafe0:	d018      	beq.n	bb014 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bafe2:	b11c      	cbz	r4, bafec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   bafe4:	4631      	mov	r1, r6
   bafe6:	4620      	mov	r0, r4
   bafe8:	f7ff f869 	bl	ba0be <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   bafec:	1d30      	adds	r0, r6, #4
   bafee:	f7ff f87a 	bl	ba0e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   baff2:	3e08      	subs	r6, #8
   baff4:	3c08      	subs	r4, #8
   baff6:	e7f2      	b.n	bafde <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   baff8:	d00c      	beq.n	bb014 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   baffa:	42b5      	cmp	r5, r6
   baffc:	d00a      	beq.n	bb014 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   baffe:	b11c      	cbz	r4, bb008 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bb000:	4629      	mov	r1, r5
   bb002:	4620      	mov	r0, r4
   bb004:	f7ff f85b 	bl	ba0be <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bb008:	1d28      	adds	r0, r5, #4
   bb00a:	f7ff f86c 	bl	ba0e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bb00e:	3508      	adds	r5, #8
   bb010:	3408      	adds	r4, #8
   bb012:	e7f2      	b.n	baffa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bb014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bb016 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bb016:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bb018:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bb01a:	4605      	mov	r5, r0
        if (n > 0) {
   bb01c:	dd11      	ble.n	bb042 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   bb01e:	00f0      	lsls	r0, r6, #3
   bb020:	f7fd ff7a 	bl	b8f18 <malloc>
            if (!d) {
   bb024:	4604      	mov	r4, r0
   bb026:	b158      	cbz	r0, bb040 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bb028:	e9d5 1200 	ldrd	r1, r2, [r5]
   bb02c:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bb030:	f7ff ffc7 	bl	bafc2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bb034:	6828      	ldr	r0, [r5, #0]
   bb036:	f7fd ff77 	bl	b8f28 <free>
        data_ = d;
   bb03a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bb03c:	60ae      	str	r6, [r5, #8]
        return true;
   bb03e:	2001      	movs	r0, #1
    }
   bb040:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bb042:	2400      	movs	r4, #0
   bb044:	e7f6      	b.n	bb034 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000bb046 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb046:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   bb04a:	2300      	movs	r3, #0
   bb04c:	e9c0 3300 	strd	r3, r3, [r0]
   bb050:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb052:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb054:	6849      	ldr	r1, [r1, #4]
   bb056:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb058:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb05a:	dd13      	ble.n	bb084 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   bb05c:	f7ff ffdb 	bl	bb016 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bb060:	b180      	cbz	r0, bb084 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   bb062:	e9d5 6300 	ldrd	r6, r3, [r5]
   bb066:	6827      	ldr	r7, [r4, #0]
   bb068:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   bb06c:	45b0      	cmp	r8, r6
   bb06e:	d007      	beq.n	bb080 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   bb070:	b11f      	cbz	r7, bb07a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   bb072:	4631      	mov	r1, r6
   bb074:	4638      	mov	r0, r7
   bb076:	f7ff f822 	bl	ba0be <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        for (; it != end; ++it, ++dest) {
   bb07a:	3608      	adds	r6, #8
   bb07c:	3708      	adds	r7, #8
   bb07e:	e7f5      	b.n	bb06c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   bb080:	686b      	ldr	r3, [r5, #4]
   bb082:	6063      	str	r3, [r4, #4]
}
   bb084:	4620      	mov	r0, r4
   bb086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bb08a <_ZNK8particle13BlePeerDevice8servicesEv>:
Vector<BleService> BlePeerDevice::services() const {
   bb08a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bb08c:	460d      	mov	r5, r1
   bb08e:	4604      	mov	r4, r0
    WiringBleLock lk;
   bb090:	a801      	add	r0, sp, #4
   bb092:	f7fe fae3 	bl	b965c <_ZN8particle3ble13WiringBleLockC1Ev>
        return services_;
   bb096:	6829      	ldr	r1, [r5, #0]
    return impl()->services();
   bb098:	4620      	mov	r0, r4
   bb09a:	310c      	adds	r1, #12
   bb09c:	f7ff ffd3 	bl	bb046 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   bb0a0:	a801      	add	r0, sp, #4
   bb0a2:	f7fe fae9 	bl	b9678 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bb0a6:	4620      	mov	r0, r4
   bb0a8:	b003      	add	sp, #12
   bb0aa:	bd30      	pop	{r4, r5, pc}

000bb0ac <_ZN8particle13BlePeerDevice19discoverAllServicesEv>:
Vector<BleService> BlePeerDevice::discoverAllServices() {
   bb0ac:	b538      	push	{r3, r4, r5, lr}
        return servicesDiscovered_;
   bb0ae:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   bb0b0:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleService> BlePeerDevice::discoverAllServices() {
   bb0b2:	4605      	mov	r5, r0
   bb0b4:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   bb0b6:	b933      	cbnz	r3, bb0c6 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
   bb0b8:	4608      	mov	r0, r1
   bb0ba:	f7fe fa63 	bl	b9584 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>
   bb0be:	b910      	cbnz	r0, bb0c6 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
      { return _M_ptr; }
   bb0c0:	6823      	ldr	r3, [r4, #0]
        servicesDiscovered_ = discovered;
   bb0c2:	2201      	movs	r2, #1
   bb0c4:	729a      	strb	r2, [r3, #10]
    return services();
   bb0c6:	4628      	mov	r0, r5
   bb0c8:	4621      	mov	r1, r4
   bb0ca:	f7ff ffde 	bl	bb08a <_ZNK8particle13BlePeerDevice8servicesEv>
}
   bb0ce:	4628      	mov	r0, r5
   bb0d0:	bd38      	pop	{r3, r4, r5, pc}

000bb0d2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bb0d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bb0d4:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bb0d6:	6845      	ldr	r5, [r0, #4]
   bb0d8:	4668      	mov	r0, sp
   bb0da:	f7fe fff0 	bl	ba0be <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb0de:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bb0e2:	4299      	cmp	r1, r3
   bb0e4:	da10      	bge.n	bb108 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   bb0e6:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bb0e8:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bb0ea:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   bb0ee:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bb0f2:	4629      	mov	r1, r5
   bb0f4:	f105 0008 	add.w	r0, r5, #8
   bb0f8:	f7ff ff63 	bl	bafc2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bb0fc:	b98d      	cbnz	r5, bb122 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   bb0fe:	6863      	ldr	r3, [r4, #4]
   bb100:	3301      	adds	r3, #1
   bb102:	6063      	str	r3, [r4, #4]
    return true;
   bb104:	2601      	movs	r6, #1
   bb106:	e006      	b.n	bb116 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb108:	3101      	adds	r1, #1
   bb10a:	4620      	mov	r0, r4
   bb10c:	f7ff ff83 	bl	bb016 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bb110:	4606      	mov	r6, r0
   bb112:	2800      	cmp	r0, #0
   bb114:	d1e7      	bne.n	bb0e6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
      ~__shared_ptr() = default;
   bb116:	a801      	add	r0, sp, #4
   bb118:	f7fe ffe5 	bl	ba0e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bb11c:	4630      	mov	r0, r6
   bb11e:	b002      	add	sp, #8
   bb120:	bd70      	pop	{r4, r5, r6, pc}
   bb122:	4669      	mov	r1, sp
   bb124:	4628      	mov	r0, r5
   bb126:	f7fe ffca 	bl	ba0be <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   bb12a:	e7e8      	b.n	bb0fe <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000bb12c <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv>:
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   bb12c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                LOG(ERROR, "Failed to append discovered service.");
   bb130:	f8df 90b8 	ldr.w	r9, [pc, #184]	; bb1ec <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc0>
   bb134:	f8df a0b8 	ldr.w	sl, [pc, #184]	; bb1f0 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc4>
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   bb138:	b093      	sub	sp, #76	; 0x4c
   bb13a:	4605      	mov	r5, r0
   bb13c:	4688      	mov	r8, r1
        for (size_t i = 0; i < event->count; i++) {
   bb13e:	2700      	movs	r7, #0
   bb140:	682b      	ldr	r3, [r5, #0]
   bb142:	42bb      	cmp	r3, r7
   bb144:	d94e      	bls.n	bb1e4 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xb8>
            BleService service;
   bb146:	a803      	add	r0, sp, #12
   bb148:	f7fe fd9e 	bl	b9c88 <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   bb14c:	261c      	movs	r6, #28
   bb14e:	686a      	ldr	r2, [r5, #4]
      { return _M_ptr; }
   bb150:	9c03      	ldr	r4, [sp, #12]
        return uuid_;
   bb152:	437e      	muls	r6, r7
   bb154:	4432      	add	r2, r6
   bb156:	f10d 0c14 	add.w	ip, sp, #20
   bb15a:	1d13      	adds	r3, r2, #4
   bb15c:	46e3      	mov	fp, ip
   bb15e:	3214      	adds	r2, #20
   bb160:	6818      	ldr	r0, [r3, #0]
   bb162:	6859      	ldr	r1, [r3, #4]
   bb164:	46e6      	mov	lr, ip
   bb166:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   bb16a:	3308      	adds	r3, #8
   bb16c:	4293      	cmp	r3, r2
   bb16e:	46f4      	mov	ip, lr
   bb170:	d1f6      	bne.n	bb160 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x34>
   bb172:	6818      	ldr	r0, [r3, #0]
   bb174:	f8ce 0000 	str.w	r0, [lr]
        return *this = BleUuid(uuid);
   bb178:	4659      	mov	r1, fp
   bb17a:	a80a      	add	r0, sp, #40	; 0x28
   bb17c:	f7fe fac4 	bl	b9708 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   bb180:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
   bb184:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   bb188:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb18a:	f8dc 3000 	ldr.w	r3, [ip]
   bb18e:	6023      	str	r3, [r4, #0]
            service.impl()->startHandle() = event->services[i].start_handle;
   bb190:	686b      	ldr	r3, [r5, #4]
   bb192:	9a03      	ldr	r2, [sp, #12]
   bb194:	4433      	add	r3, r6
   bb196:	a903      	add	r1, sp, #12
   bb198:	8b1b      	ldrh	r3, [r3, #24]
   bb19a:	8293      	strh	r3, [r2, #20]
            service.impl()->endHandle() = event->services[i].end_handle;
   bb19c:	686b      	ldr	r3, [r5, #4]
   bb19e:	4433      	add	r3, r6
   bb1a0:	8b5b      	ldrh	r3, [r3, #26]
   bb1a2:	82d3      	strh	r3, [r2, #22]
        return services_;
   bb1a4:	f8d8 0000 	ldr.w	r0, [r8]
   bb1a8:	f100 040c 	add.w	r4, r0, #12
   bb1ac:	a80a      	add	r0, sp, #40	; 0x28
   bb1ae:	f7fe ff86 	bl	ba0be <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
            if (!peer->impl()->services().append(service)) {
   bb1b2:	4620      	mov	r0, r4
   bb1b4:	a90a      	add	r1, sp, #40	; 0x28
   bb1b6:	f7ff ff8c 	bl	bb0d2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   bb1ba:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bb1bc:	a80b      	add	r0, sp, #44	; 0x2c
   bb1be:	f7fe ff92 	bl	ba0e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb1c2:	b954      	cbnz	r4, bb1da <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xae>
                LOG(ERROR, "Failed to append discovered service.");
   bb1c4:	2320      	movs	r3, #32
   bb1c6:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
   bb1ca:	f8cd 9000 	str.w	r9, [sp]
   bb1ce:	4623      	mov	r3, r4
   bb1d0:	aa0a      	add	r2, sp, #40	; 0x28
   bb1d2:	4651      	mov	r1, sl
   bb1d4:	2032      	movs	r0, #50	; 0x32
   bb1d6:	f7fd fdc3 	bl	b8d60 <log_message>
   bb1da:	a804      	add	r0, sp, #16
   bb1dc:	f7fe ff83 	bl	ba0e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   bb1e0:	3701      	adds	r7, #1
   bb1e2:	e7ad      	b.n	bb140 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x14>
    }
   bb1e4:	b013      	add	sp, #76	; 0x4c
   bb1e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb1ea:	bf00      	nop
   bb1ec:	000c0db1 	.word	0x000c0db1
   bb1f0:	000c0cb3 	.word	0x000c0cb3

000bb1f4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bb1f4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bb1f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb1f8:	4604      	mov	r4, r0
   bb1fa:	460d      	mov	r5, r1
   bb1fc:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bb1fe:	d914      	bls.n	bb22a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bb200:	4290      	cmp	r0, r2
   bb202:	d213      	bcs.n	bb22c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bb204:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   bb208:	1a75      	subs	r5, r6, r1
   bb20a:	f1a1 0708 	sub.w	r7, r1, #8
   bb20e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bb210:	42b7      	cmp	r7, r6
   bb212:	d018      	beq.n	bb246 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bb214:	b11c      	cbz	r4, bb21e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   bb216:	4631      	mov	r1, r6
   bb218:	4620      	mov	r0, r4
   bb21a:	f7fe ff42 	bl	ba0a2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bb21e:	1d30      	adds	r0, r6, #4
   bb220:	f7fe ff61 	bl	ba0e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   bb224:	3e08      	subs	r6, #8
   bb226:	3c08      	subs	r4, #8
   bb228:	e7f2      	b.n	bb210 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bb22a:	d00c      	beq.n	bb246 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bb22c:	42b5      	cmp	r5, r6
   bb22e:	d00a      	beq.n	bb246 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bb230:	b11c      	cbz	r4, bb23a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bb232:	4629      	mov	r1, r5
   bb234:	4620      	mov	r0, r4
   bb236:	f7fe ff34 	bl	ba0a2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bb23a:	1d28      	adds	r0, r5, #4
   bb23c:	f7fe ff53 	bl	ba0e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   bb240:	3508      	adds	r5, #8
   bb242:	3408      	adds	r4, #8
   bb244:	e7f2      	b.n	bb22c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bb246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bb248 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bb248:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   bb24a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bb24c:	4605      	mov	r5, r0
        if (n > 0) {
   bb24e:	dd11      	ble.n	bb274 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   bb250:	00f0      	lsls	r0, r6, #3
   bb252:	f7fd fe61 	bl	b8f18 <malloc>
            if (!d) {
   bb256:	4604      	mov	r4, r0
   bb258:	b158      	cbz	r0, bb272 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   bb25a:	e9d5 1200 	ldrd	r1, r2, [r5]
   bb25e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   bb262:	f7ff ffc7 	bl	bb1f4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bb266:	6828      	ldr	r0, [r5, #0]
   bb268:	f7fd fe5e 	bl	b8f28 <free>
        data_ = d;
   bb26c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bb26e:	60ae      	str	r6, [r5, #8]
        return true;
   bb270:	2001      	movs	r0, #1
    }
   bb272:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   bb274:	2400      	movs	r4, #0
   bb276:	e7f6      	b.n	bb266 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000bb278 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   bb27c:	2300      	movs	r3, #0
   bb27e:	e9c0 3300 	strd	r3, r3, [r0]
   bb282:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb284:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb286:	6849      	ldr	r1, [r1, #4]
   bb288:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   bb28a:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   bb28c:	dd13      	ble.n	bb2b6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   bb28e:	f7ff ffdb 	bl	bb248 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bb292:	b180      	cbz	r0, bb2b6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   bb294:	e9d5 6300 	ldrd	r6, r3, [r5]
   bb298:	6827      	ldr	r7, [r4, #0]
   bb29a:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   bb29e:	45b0      	cmp	r8, r6
   bb2a0:	d007      	beq.n	bb2b2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   bb2a2:	b11f      	cbz	r7, bb2ac <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   bb2a4:	4631      	mov	r1, r6
   bb2a6:	4638      	mov	r0, r7
   bb2a8:	f7fe fefb 	bl	ba0a2 <_ZN8particle17BleCharacteristicC1ERKS0_>
        for (; it != end; ++it, ++dest) {
   bb2ac:	3608      	adds	r6, #8
   bb2ae:	3708      	adds	r7, #8
   bb2b0:	e7f5      	b.n	bb29e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   bb2b2:	686b      	ldr	r3, [r5, #4]
   bb2b4:	6063      	str	r3, [r4, #4]
}
   bb2b6:	4620      	mov	r0, r4
   bb2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bb2bc <_ZNK8particle13BlePeerDevice15characteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::characteristics() const {
   bb2bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bb2be:	460d      	mov	r5, r1
   bb2c0:	4604      	mov	r4, r0
    WiringBleLock lk;
   bb2c2:	a801      	add	r0, sp, #4
   bb2c4:	f7fe f9ca 	bl	b965c <_ZN8particle3ble13WiringBleLockC1Ev>
        return characteristics_;
   bb2c8:	6829      	ldr	r1, [r5, #0]
    return impl()->characteristics();
   bb2ca:	4620      	mov	r0, r4
   bb2cc:	3118      	adds	r1, #24
   bb2ce:	f7ff ffd3 	bl	bb278 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   bb2d2:	a801      	add	r0, sp, #4
   bb2d4:	f7fe f9d0 	bl	b9678 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bb2d8:	4620      	mov	r0, r4
   bb2da:	b003      	add	sp, #12
   bb2dc:	bd30      	pop	{r4, r5, pc}

000bb2de <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   bb2de:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bb2e0:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   bb2e2:	6845      	ldr	r5, [r0, #4]
   bb2e4:	4668      	mov	r0, sp
   bb2e6:	f7fe fedc 	bl	ba0a2 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb2ea:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bb2ee:	4299      	cmp	r1, r3
   bb2f0:	da10      	bge.n	bb314 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   bb2f2:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bb2f4:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   bb2f6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   bb2fa:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   bb2fe:	4629      	mov	r1, r5
   bb300:	f105 0008 	add.w	r0, r5, #8
   bb304:	f7ff ff76 	bl	bb1f4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bb308:	b98d      	cbnz	r5, bb32e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   bb30a:	6863      	ldr	r3, [r4, #4]
   bb30c:	3301      	adds	r3, #1
   bb30e:	6063      	str	r3, [r4, #4]
    return true;
   bb310:	2601      	movs	r6, #1
   bb312:	e006      	b.n	bb322 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bb314:	3101      	adds	r1, #1
   bb316:	4620      	mov	r0, r4
   bb318:	f7ff ff96 	bl	bb248 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bb31c:	4606      	mov	r6, r0
   bb31e:	2800      	cmp	r0, #0
   bb320:	d1e7      	bne.n	bb2f2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   bb322:	a801      	add	r0, sp, #4
   bb324:	f7fe fedf 	bl	ba0e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bb328:	4630      	mov	r0, r6
   bb32a:	b002      	add	sp, #8
   bb32c:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   bb32e:	4669      	mov	r1, sp
   bb330:	4628      	mov	r0, r5
   bb332:	f7fe feb6 	bl	ba0a2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bb336:	e7e8      	b.n	bb30a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000bb338 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   bb338:	b5f0      	push	{r4, r5, r6, r7, lr}
   bb33a:	b085      	sub	sp, #20
   bb33c:	4605      	mov	r5, r0
    WiringBleLock lk;
   bb33e:	a801      	add	r0, sp, #4
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   bb340:	460c      	mov	r4, r1
   bb342:	4617      	mov	r7, r2
    WiringBleLock lk;
   bb344:	f7fe f98a 	bl	b965c <_ZN8particle3ble13WiringBleLockC1Ev>
        capacity_(0) {
   bb348:	2300      	movs	r3, #0
   bb34a:	e9c5 3300 	strd	r3, r3, [r5]
   bb34e:	60ab      	str	r3, [r5, #8]
      { return _M_ptr; }
   bb350:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   bb352:	e9d3 4606 	ldrd	r4, r6, [r3, #24]
   bb356:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    for (const auto& characteristic : impl()->characteristics()) {
   bb35a:	42b4      	cmp	r4, r6
   bb35c:	d011      	beq.n	bb382 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x4a>
        if (service.impl()->hasCharacteristic(characteristic)) {
   bb35e:	6838      	ldr	r0, [r7, #0]
   bb360:	4621      	mov	r1, r4
   bb362:	f7fe fbab 	bl	b9abc <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>
   bb366:	b150      	cbz	r0, bb37e <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x46>
            characteristics.append(characteristic);
   bb368:	4621      	mov	r1, r4
   bb36a:	a802      	add	r0, sp, #8
   bb36c:	f7fe fe99 	bl	ba0a2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bb370:	a902      	add	r1, sp, #8
   bb372:	4628      	mov	r0, r5
   bb374:	f7ff ffb3 	bl	bb2de <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
      ~__shared_ptr() = default;
   bb378:	a803      	add	r0, sp, #12
   bb37a:	f7fe feb4 	bl	ba0e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    for (const auto& characteristic : impl()->characteristics()) {
   bb37e:	3408      	adds	r4, #8
   bb380:	e7eb      	b.n	bb35a <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x22>
    WiringBleLock lk;
   bb382:	a801      	add	r0, sp, #4
   bb384:	f7fe f978 	bl	b9678 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   bb388:	4628      	mov	r0, r5
   bb38a:	b005      	add	sp, #20
   bb38c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000bb390 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   bb390:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return servicesDiscovered_;
   bb394:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   bb396:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   bb398:	b091      	sub	sp, #68	; 0x44
   bb39a:	4606      	mov	r6, r0
   bb39c:	460f      	mov	r7, r1
   bb39e:	4690      	mov	r8, r2
    if (!impl()->servicesDiscovered()) {
   bb3a0:	b933      	cbnz	r3, bb3b0 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x20>
        capacity_(0) {
   bb3a2:	e9c0 3300 	strd	r3, r3, [r0]
   bb3a6:	6083      	str	r3, [r0, #8]
}
   bb3a8:	4630      	mov	r0, r6
   bb3aa:	b011      	add	sp, #68	; 0x44
   bb3ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      { return _M_ptr; }
   bb3b0:	6811      	ldr	r1, [r2, #0]
    if (!service.impl()->characteristicsDiscovered()) {
   bb3b2:	7e0d      	ldrb	r5, [r1, #24]
   bb3b4:	2d00      	cmp	r5, #0
   bb3b6:	d158      	bne.n	bb46a <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
        LOG(TRACE, "Start discovering characteristics of service: %s.", service.impl()->UUID().toString().c_str());
   bb3b8:	2320      	movs	r3, #32
   bb3ba:	462a      	mov	r2, r5
   bb3bc:	a803      	add	r0, sp, #12
   bb3be:	e9cd 3508 	strd	r3, r5, [sp, #32]
   bb3c2:	f7fe fae8 	bl	b9996 <_ZNK8particle7BleUuid8toStringEb>
   bb3c6:	9b03      	ldr	r3, [sp, #12]
   bb3c8:	9301      	str	r3, [sp, #4]
   bb3ca:	4b2b      	ldr	r3, [pc, #172]	; (bb478 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xe8>)
   bb3cc:	492b      	ldr	r1, [pc, #172]	; (bb47c <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xec>)
   bb3ce:	9300      	str	r3, [sp, #0]
   bb3d0:	aa08      	add	r2, sp, #32
   bb3d2:	462b      	mov	r3, r5
   bb3d4:	2001      	movs	r0, #1
   bb3d6:	f7fd fcc3 	bl	b8d60 <log_message>
   bb3da:	a803      	add	r0, sp, #12
   bb3dc:	f7fd ff1a 	bl	b9214 <_ZN6StringD1Ev>
        halService.size = sizeof(hal_ble_svc_t);
   bb3e0:	231c      	movs	r3, #28
   bb3e2:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
   bb3e6:	f8d8 3000 	ldr.w	r3, [r8]
        halService.start_handle = service.impl()->startHandle();
   bb3ea:	8a9a      	ldrh	r2, [r3, #20]
   bb3ec:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
        halService.end_handle = service.impl()->endHandle();
   bb3f0:	8adb      	ldrh	r3, [r3, #22]
   bb3f2:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
   bb3f6:	683b      	ldr	r3, [r7, #0]
        CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, peer.impl(), nullptr));
   bb3f8:	4a21      	ldr	r2, [pc, #132]	; (bb480 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xf0>)
   bb3fa:	8818      	ldrh	r0, [r3, #0]
   bb3fc:	9500      	str	r5, [sp, #0]
   bb3fe:	a908      	add	r1, sp, #32
   bb400:	f7fd fab2 	bl	b8968 <hal_ble_gatt_client_discover_characteristics>
   bb404:	2800      	cmp	r0, #0
   bb406:	db30      	blt.n	bb46a <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
   bb408:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
   bb40a:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   bb40e:	eb04 09c3 	add.w	r9, r4, r3, lsl #3
   bb412:	3408      	adds	r4, #8
        for (auto& characteristic : peer.impl()->characteristics()) {
   bb414:	f1a4 0308 	sub.w	r3, r4, #8
   bb418:	4599      	cmp	r9, r3
   bb41a:	d022      	beq.n	bb462 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xd2>
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
   bb41c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   bb420:	89db      	ldrh	r3, [r3, #14]
   bb422:	2b00      	cmp	r3, #0
   bb424:	d0f5      	beq.n	bb412 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                char desc[BLE_MAX_DESC_LEN] = {};
   bb426:	2210      	movs	r2, #16
   bb428:	2100      	movs	r1, #0
   bb42a:	eb0d 0002 	add.w	r0, sp, r2
   bb42e:	9503      	str	r5, [sp, #12]
   bb430:	f002 fac3 	bl	bd9ba <memset>
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
   bb434:	f854 3c08 	ldr.w	r3, [r4, #-8]
   bb438:	89d9      	ldrh	r1, [r3, #14]
   bb43a:	683b      	ldr	r3, [r7, #0]
   bb43c:	aa03      	add	r2, sp, #12
   bb43e:	8818      	ldrh	r0, [r3, #0]
   bb440:	9500      	str	r5, [sp, #0]
   bb442:	2313      	movs	r3, #19
   bb444:	f7fd faae 	bl	b89a4 <hal_ble_gatt_client_read>
                if (len > 0) {
   bb448:	2800      	cmp	r0, #0
   bb44a:	d0e2      	beq.n	bb412 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                    desc[len] = '\0';
   bb44c:	ab10      	add	r3, sp, #64	; 0x40
   bb44e:	4418      	add	r0, r3
                    characteristic.impl()->description() = desc;
   bb450:	a903      	add	r1, sp, #12
                    desc[len] = '\0';
   bb452:	f800 5c34 	strb.w	r5, [r0, #-52]
        return description_;
   bb456:	f854 0c08 	ldr.w	r0, [r4, #-8]
                    characteristic.impl()->description() = desc;
   bb45a:	303c      	adds	r0, #60	; 0x3c
   bb45c:	f7fd ff7b 	bl	b9356 <_ZN6StringaSEPKc>
        for (auto& characteristic : peer.impl()->characteristics()) {
   bb460:	e7d7      	b.n	bb412 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
   bb462:	f8d8 3000 	ldr.w	r3, [r8]
        characteristicsDiscovered_ = discovered;
   bb466:	2201      	movs	r2, #1
   bb468:	761a      	strb	r2, [r3, #24]
    return characteristics(service);
   bb46a:	4642      	mov	r2, r8
   bb46c:	4639      	mov	r1, r7
   bb46e:	4630      	mov	r0, r6
   bb470:	f7ff ff62 	bl	bb338 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>
   bb474:	e798      	b.n	bb3a8 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x18>
   bb476:	bf00      	nop
   bb478:	000c0dd6 	.word	0x000c0dd6
   bb47c:	000c0cb3 	.word	0x000c0cb3
   bb480:	000bb629 	.word	0x000bb629

000bb484 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   bb484:	b5f0      	push	{r4, r5, r6, r7, lr}
        return servicesDiscovered_;
   bb486:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   bb488:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   bb48a:	b085      	sub	sp, #20
   bb48c:	4606      	mov	r6, r0
   bb48e:	460d      	mov	r5, r1
    if (!impl()->servicesDiscovered()) {
   bb490:	b92b      	cbnz	r3, bb49e <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x1a>
        discoverAllServices();
   bb492:	a801      	add	r0, sp, #4
   bb494:	f7ff fe0a 	bl	bb0ac <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
   bb498:	a801      	add	r0, sp, #4
   bb49a:	f7fe fe33 	bl	ba104 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   bb49e:	682b      	ldr	r3, [r5, #0]
   bb4a0:	e9d3 4703 	ldrd	r4, r7, [r3, #12]
   bb4a4:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
    for (const auto& service : impl()->services()) {
   bb4a8:	42bc      	cmp	r4, r7
   bb4aa:	d009      	beq.n	bb4c0 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x3c>
        discoverCharacteristicsOfService(service);
   bb4ac:	4622      	mov	r2, r4
   bb4ae:	4629      	mov	r1, r5
   bb4b0:	a801      	add	r0, sp, #4
   bb4b2:	f7ff ff6d 	bl	bb390 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>
   bb4b6:	a801      	add	r0, sp, #4
   bb4b8:	f7fe fe36 	bl	ba128 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
    for (const auto& service : impl()->services()) {
   bb4bc:	3408      	adds	r4, #8
   bb4be:	e7f3      	b.n	bb4a8 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x24>
    return characteristics();
   bb4c0:	4630      	mov	r0, r6
   bb4c2:	4629      	mov	r1, r5
   bb4c4:	f7ff fefa 	bl	bb2bc <_ZNK8particle13BlePeerDevice15characteristicsEv>
}
   bb4c8:	4630      	mov	r0, r6
   bb4ca:	b005      	add	sp, #20
   bb4cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000bb4d0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>:
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   bb4d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb4d4:	4605      	mov	r5, r0
   bb4d6:	b093      	sub	sp, #76	; 0x4c
    return address_;
   bb4d8:	6808      	ldr	r0, [r1, #0]
    connCfg.conn_params = params;
   bb4da:	9207      	str	r2, [sp, #28]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   bb4dc:	460f      	mov	r7, r1
    return address_;
   bb4de:	6849      	ldr	r1, [r1, #4]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   bb4e0:	4698      	mov	r8, r3
    return address_;
   bb4e2:	ac0a      	add	r4, sp, #40	; 0x28
    connCfg.version = BLE_API_VERSION;
   bb4e4:	4b41      	ldr	r3, [pc, #260]	; (bb5ec <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x11c>)
   bb4e6:	9304      	str	r3, [sp, #16]
    return address_;
   bb4e8:	c403      	stmia	r4!, {r0, r1}
    connCfg.address = addr.halAddress();
   bb4ea:	ab05      	add	r3, sp, #20
    hal_ble_conn_cfg_t connCfg = {};
   bb4ec:	f04f 0900 	mov.w	r9, #0
    connCfg.address = addr.halAddress();
   bb4f0:	e883 0003 	stmia.w	r3, {r0, r1}
    hal_ble_conn_cfg_t connCfg = {};
   bb4f4:	e9cd 9908 	strd	r9, r9, [sp, #32]
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
   bb4f8:	f7fe fc92 	bl	b9e20 <_ZN8particle14BleLocalDevice11getInstanceEv>
   bb4fc:	4b3c      	ldr	r3, [pc, #240]	; (bb5f0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x120>)
   bb4fe:	9308      	str	r3, [sp, #32]
    connCfg.context = BleLocalDevice::getInstance().impl();
   bb500:	f7fe fc8e 	bl	b9e20 <_ZN8particle14BleLocalDevice11getInstanceEv>
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   bb504:	6829      	ldr	r1, [r5, #0]
   bb506:	6803      	ldr	r3, [r0, #0]
    connCfg.context = BleLocalDevice::getInstance().impl();
   bb508:	9309      	str	r3, [sp, #36]	; 0x24
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   bb50a:	464a      	mov	r2, r9
   bb50c:	a804      	add	r0, sp, #16
   bb50e:	f7fd fa53 	bl	b89b8 <hal_ble_gap_connect>
    connCfg.address = addr.halAddress();
   bb512:	ae0a      	add	r6, sp, #40	; 0x28
    if (ret != SYSTEM_ERROR_NONE) {
   bb514:	4604      	mov	r4, r0
   bb516:	b138      	cbz	r0, bb528 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x58>
   bb518:	682b      	ldr	r3, [r5, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   bb51a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   bb51e:	801a      	strh	r2, [r3, #0]
}
   bb520:	4620      	mov	r0, r4
   bb522:	b013      	add	sp, #76	; 0x4c
   bb524:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bind(addr);
   bb528:	4639      	mov	r1, r7
   bb52a:	4628      	mov	r0, r5
   bb52c:	f7fe fbfc 	bl	b9d28 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>
        WiringBleLock lk;
   bb530:	a803      	add	r0, sp, #12
   bb532:	f7fe f893 	bl	b965c <_ZN8particle3ble13WiringBleLockC1Ev>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   bb536:	f7fe fc73 	bl	b9e20 <_ZN8particle14BleLocalDevice11getInstanceEv>
        return peers_;
   bb53a:	6807      	ldr	r7, [r0, #0]
   bb53c:	4629      	mov	r1, r5
   bb53e:	3718      	adds	r7, #24
   bb540:	4630      	mov	r0, r6
   bb542:	f7fe fdc6 	bl	ba0d2 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   bb546:	4631      	mov	r1, r6
   bb548:	4638      	mov	r0, r7
   bb54a:	f7ff f92b 	bl	ba7a4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   bb54e:	4607      	mov	r7, r0
      ~__shared_ptr() = default;
   bb550:	a80b      	add	r0, sp, #44	; 0x2c
   bb552:	f7fe fdc8 	bl	ba0e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb556:	f04f 0920 	mov.w	r9, #32
   bb55a:	bb1f      	cbnz	r7, bb5a4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xd4>
            LOG(ERROR, "Cannot add new peer device.");
   bb55c:	4632      	mov	r2, r6
   bb55e:	4b25      	ldr	r3, [pc, #148]	; (bb5f4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x124>)
    void unlock() { os_mutex_recursive_unlock(handle_); }
   bb560:	4e25      	ldr	r6, [pc, #148]	; (bb5f8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x128>)
   bb562:	4926      	ldr	r1, [pc, #152]	; (bb5fc <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   bb564:	9300      	str	r3, [sp, #0]
   bb566:	2032      	movs	r0, #50	; 0x32
   bb568:	4623      	mov	r3, r4
   bb56a:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   bb56e:	f7fd fbf7 	bl	b8d60 <log_message>
   bb572:	6830      	ldr	r0, [r6, #0]
   bb574:	f7fd faac 	bl	b8ad0 <os_mutex_recursive_unlock>
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   bb578:	682b      	ldr	r3, [r5, #0]
        locked_ = false;
   bb57a:	f88d 400c 	strb.w	r4, [sp, #12]
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   bb57e:	4621      	mov	r1, r4
   bb580:	8818      	ldrh	r0, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   bb582:	4c1f      	ldr	r4, [pc, #124]	; (bb600 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x130>)
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   bb584:	f7fd f9d2 	bl	b892c <hal_ble_gap_disconnect>
    void lock() { os_mutex_recursive_lock(handle_); }
   bb588:	6830      	ldr	r0, [r6, #0]
   bb58a:	f7fd fa99 	bl	b8ac0 <os_mutex_recursive_lock>
        locked_ = true;
   bb58e:	2301      	movs	r3, #1
   bb590:	f88d 300c 	strb.w	r3, [sp, #12]
      { return _M_ptr; }
   bb594:	682b      	ldr	r3, [r5, #0]
            impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   bb596:	f64f 72ff 	movw	r2, #65535	; 0xffff
   bb59a:	801a      	strh	r2, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   bb59c:	a803      	add	r0, sp, #12
   bb59e:	f7fe f86b 	bl	b9678 <_ZN8particle3ble13WiringBleLockD1Ev>
   bb5a2:	e7bd      	b.n	bb520 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        WiringBleLock lk;
   bb5a4:	a803      	add	r0, sp, #12
   bb5a6:	f7fe f867 	bl	b9678 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG(TRACE, "New peripheral is connected.");
   bb5aa:	4b16      	ldr	r3, [pc, #88]	; (bb604 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x134>)
   bb5ac:	9300      	str	r3, [sp, #0]
   bb5ae:	4913      	ldr	r1, [pc, #76]	; (bb5fc <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   bb5b0:	4623      	mov	r3, r4
   bb5b2:	4632      	mov	r2, r6
   bb5b4:	2001      	movs	r0, #1
   bb5b6:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   bb5ba:	f7fd fbd1 	bl	b8d60 <log_message>
    if (automatic) {
   bb5be:	f1b8 0f00 	cmp.w	r8, #0
   bb5c2:	d0ad      	beq.n	bb520 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   bb5c4:	4629      	mov	r1, r5
   bb5c6:	4630      	mov	r0, r6
   bb5c8:	f7ff ff5c 	bl	bb484 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
   bb5cc:	e9dd 530a 	ldrd	r5, r3, [sp, #40]	; 0x28
   bb5d0:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (auto& characteristic : characteristics) {
   bb5d4:	42bd      	cmp	r5, r7
   bb5d6:	d005      	beq.n	bb5e4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x114>
            characteristic.subscribe(true);
   bb5d8:	4628      	mov	r0, r5
   bb5da:	2101      	movs	r1, #1
   bb5dc:	f7fe fb1a 	bl	b9c14 <_ZNK8particle17BleCharacteristic9subscribeEb>
        for (auto& characteristic : characteristics) {
   bb5e0:	3508      	adds	r5, #8
   bb5e2:	e7f7      	b.n	bb5d4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x104>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   bb5e4:	4630      	mov	r0, r6
   bb5e6:	f7fe fd9f 	bl	ba128 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   bb5ea:	e799      	b.n	bb520 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
   bb5ec:	00180003 	.word	0x00180003
   bb5f0:	000ba85d 	.word	0x000ba85d
   bb5f4:	000c0e08 	.word	0x000c0e08
   bb5f8:	2003e670 	.word	0x2003e670
   bb5fc:	000c0cb3 	.word	0x000c0cb3
   bb600:	fffffefc 	.word	0xfffffefc
   bb604:	000c0e24 	.word	0x000c0e24

000bb608 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>:
BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
   bb608:	b513      	push	{r0, r1, r4, lr}
   bb60a:	4604      	mov	r4, r0
   bb60c:	e9cd 3200 	strd	r3, r2, [sp]
    BlePeerDevice peer;
   bb610:	f7fe fb56 	bl	b9cc0 <_ZN8particle13BlePeerDeviceC1Ev>
    peer.connect(addr, params, automatic);
   bb614:	9b00      	ldr	r3, [sp, #0]
   bb616:	9901      	ldr	r1, [sp, #4]
   bb618:	2200      	movs	r2, #0
   bb61a:	4620      	mov	r0, r4
   bb61c:	f7ff ff58 	bl	bb4d0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>
}
   bb620:	4620      	mov	r0, r4
   bb622:	b002      	add	sp, #8
   bb624:	bd10      	pop	{r4, pc}
	...

000bb628 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv>:
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   bb628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        LOG(TRACE, "Characteristic discovered.");
   bb62c:	2320      	movs	r3, #32
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   bb62e:	b095      	sub	sp, #84	; 0x54
        LOG(TRACE, "Characteristic discovered.");
   bb630:	2600      	movs	r6, #0
   bb632:	e9cd 360c 	strd	r3, r6, [sp, #48]	; 0x30
   bb636:	4b66      	ldr	r3, [pc, #408]	; (bb7d0 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a8>)
   bb638:	9300      	str	r3, [sp, #0]
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   bb63a:	4605      	mov	r5, r0
   bb63c:	460f      	mov	r7, r1
        LOG(TRACE, "Characteristic discovered.");
   bb63e:	4633      	mov	r3, r6
   bb640:	4964      	ldr	r1, [pc, #400]	; (bb7d4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>)
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   bb642:	f8df 9194 	ldr.w	r9, [pc, #404]	; bb7d8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b0>
   bb646:	f8df 818c 	ldr.w	r8, [pc, #396]	; bb7d4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   bb64a:	f8df a190 	ldr.w	sl, [pc, #400]	; bb7dc <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b4>
        LOG(TRACE, "Characteristic discovered.");
   bb64e:	aa0c      	add	r2, sp, #48	; 0x30
   bb650:	2001      	movs	r0, #1
   bb652:	f7fd fb85 	bl	b8d60 <log_message>
        for (size_t i = 0; i < event->count; i++) {
   bb656:	682b      	ldr	r3, [r5, #0]
   bb658:	42b3      	cmp	r3, r6
   bb65a:	f240 80b5 	bls.w	bb7c8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a0>
            BleCharacteristic characteristic;
   bb65e:	a803      	add	r0, sp, #12
   bb660:	f7fe fa52 	bl	b9b08 <_ZN8particle17BleCharacteristicC1Ev>
            BleService service;
   bb664:	a805      	add	r0, sp, #20
   bb666:	f7fe fb0f 	bl	b9c88 <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   bb66a:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   bb66e:	686b      	ldr	r3, [r5, #4]
      { return _M_ptr; }
   bb670:	9a03      	ldr	r2, [sp, #12]
        return attrHandles_;
   bb672:	fb0b fb06 	mul.w	fp, fp, r6
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   bb676:	445b      	add	r3, fp
        this->size = halHandles.size;
   bb678:	8bd9      	ldrh	r1, [r3, #30]
   bb67a:	8111      	strh	r1, [r2, #8]
        this->decl_handle = halHandles.decl_handle;
   bb67c:	8c19      	ldrh	r1, [r3, #32]
   bb67e:	8151      	strh	r1, [r2, #10]
        this->value_handle = halHandles.value_handle;
   bb680:	8c59      	ldrh	r1, [r3, #34]	; 0x22
   bb682:	8191      	strh	r1, [r2, #12]
        this->user_desc_handle = halHandles.user_desc_handle;
   bb684:	8c98      	ldrh	r0, [r3, #36]	; 0x24
   bb686:	81d0      	strh	r0, [r2, #14]
        this->cccd_handle = halHandles.cccd_handle;
   bb688:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
   bb68a:	8210      	strh	r0, [r2, #16]
        this->sccd_handle = halHandles.sccd_handle;
   bb68c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   bb68e:	8253      	strh	r3, [r2, #18]
   bb690:	e9d7 3203 	ldrd	r3, r2, [r7, #12]
   bb694:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (const auto& svc : services_) {
   bb698:	429a      	cmp	r2, r3
   bb69a:	d07d      	beq.n	bb798 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x170>
   bb69c:	6818      	ldr	r0, [r3, #0]
            if (handles.value_handle <= svc.impl()->endHandle() && handles.value_handle >= svc.impl()->startHandle()) {
   bb69e:	8ac4      	ldrh	r4, [r0, #22]
   bb6a0:	428c      	cmp	r4, r1
   bb6a2:	d377      	bcc.n	bb794 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
   bb6a4:	8a84      	ldrh	r4, [r0, #20]
   bb6a6:	428c      	cmp	r4, r1
   bb6a8:	d874      	bhi.n	bb794 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   bb6aa:	6859      	ldr	r1, [r3, #4]
   bb6ac:	9005      	str	r0, [sp, #20]
   bb6ae:	a806      	add	r0, sp, #24
   bb6b0:	f7fd ffae 	bl	b9610 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
                characteristic.impl()->svcUUID() = service.impl()->UUID();
   bb6b4:	f8dd c014 	ldr.w	ip, [sp, #20]
      { return _M_ptr; }
   bb6b8:	f8dd e00c 	ldr.w	lr, [sp, #12]
   bb6bc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   bb6c0:	f10e 0428 	add.w	r4, lr, #40	; 0x28
   bb6c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb6c6:	f8dc 3000 	ldr.w	r3, [ip]
   bb6ca:	6023      	str	r3, [r4, #0]
                characteristic.impl()->connHandle() = event->conn_handle;
   bb6cc:	892b      	ldrh	r3, [r5, #8]
   bb6ce:	f8ae 3002 	strh.w	r3, [lr, #2]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   bb6d2:	686b      	ldr	r3, [r5, #4]
   bb6d4:	9c03      	ldr	r4, [sp, #12]
   bb6d6:	445b      	add	r3, fp
   bb6d8:	7e5b      	ldrb	r3, [r3, #25]
   bb6da:	f013 0f02 	tst.w	r3, #2
   bb6de:	d16e      	bne.n	bb7be <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x196>
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE_WO_RESP) {
   bb6e0:	686b      	ldr	r3, [r5, #4]
   bb6e2:	445b      	add	r3, fp
   bb6e4:	7e5b      	ldrb	r3, [r3, #25]
   bb6e6:	0758      	lsls	r0, r3, #29
    return EnumFlags<T>(value_ | flags.value_);
}

template<typename T>
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
    value_ |= flags.value_;
   bb6e8:	bf42      	ittt	mi
   bb6ea:	7923      	ldrbmi	r3, [r4, #4]
   bb6ec:	f043 0304 	orrmi.w	r3, r3, #4
   bb6f0:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE) {
   bb6f2:	686b      	ldr	r3, [r5, #4]
   bb6f4:	445b      	add	r3, fp
   bb6f6:	7e5b      	ldrb	r3, [r3, #25]
   bb6f8:	0719      	lsls	r1, r3, #28
   bb6fa:	bf42      	ittt	mi
   bb6fc:	7923      	ldrbmi	r3, [r4, #4]
   bb6fe:	f043 0308 	orrmi.w	r3, r3, #8
   bb702:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_NOTIFY) {
   bb704:	686b      	ldr	r3, [r5, #4]
   bb706:	445b      	add	r3, fp
   bb708:	7e5b      	ldrb	r3, [r3, #25]
   bb70a:	06da      	lsls	r2, r3, #27
   bb70c:	bf42      	ittt	mi
   bb70e:	7923      	ldrbmi	r3, [r4, #4]
   bb710:	f043 0310 	orrmi.w	r3, r3, #16
   bb714:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
   bb716:	686b      	ldr	r3, [r5, #4]
   bb718:	445b      	add	r3, fp
   bb71a:	aa07      	add	r2, sp, #28
   bb71c:	7e5b      	ldrb	r3, [r3, #25]
   bb71e:	069b      	lsls	r3, r3, #26
   bb720:	bf42      	ittt	mi
   bb722:	7923      	ldrbmi	r3, [r4, #4]
   bb724:	f043 0320 	orrmi.w	r3, r3, #32
   bb728:	7123      	strbmi	r3, [r4, #4]
        return charUuid_;
   bb72a:	686b      	ldr	r3, [r5, #4]
   bb72c:	449b      	add	fp, r3
   bb72e:	f10b 0304 	add.w	r3, fp, #4
   bb732:	4696      	mov	lr, r2
   bb734:	f10b 0b14 	add.w	fp, fp, #20
   bb738:	6818      	ldr	r0, [r3, #0]
   bb73a:	6859      	ldr	r1, [r3, #4]
   bb73c:	4694      	mov	ip, r2
   bb73e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   bb742:	3308      	adds	r3, #8
   bb744:	455b      	cmp	r3, fp
   bb746:	4662      	mov	r2, ip
   bb748:	d1f6      	bne.n	bb738 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x110>
   bb74a:	6818      	ldr	r0, [r3, #0]
   bb74c:	f8cc 0000 	str.w	r0, [ip]
        return *this = BleUuid(uuid);
   bb750:	4671      	mov	r1, lr
   bb752:	a80c      	add	r0, sp, #48	; 0x30
   bb754:	f7fd ffd8 	bl	b9708 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   bb758:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
   bb75c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   bb760:	3414      	adds	r4, #20
   bb762:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bb764:	f8dc 3000 	ldr.w	r3, [ip]
   bb768:	6023      	str	r3, [r4, #0]
                if (!peerImpl->characteristics().append(characteristic)) {
   bb76a:	a903      	add	r1, sp, #12
   bb76c:	a80c      	add	r0, sp, #48	; 0x30
   bb76e:	f7fe fc98 	bl	ba0a2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   bb772:	a90c      	add	r1, sp, #48	; 0x30
   bb774:	f107 0018 	add.w	r0, r7, #24
   bb778:	f7ff fdb1 	bl	bb2de <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   bb77c:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   bb77e:	a80d      	add	r0, sp, #52	; 0x34
   bb780:	f7fe fcb1 	bl	ba0e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb784:	b99c      	cbnz	r4, bb7ae <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x186>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   bb786:	2320      	movs	r3, #32
   bb788:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
   bb78c:	f8cd a000 	str.w	sl, [sp]
   bb790:	4623      	mov	r3, r4
   bb792:	e007      	b.n	bb7a4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x17c>
        for (const auto& svc : services_) {
   bb794:	3308      	adds	r3, #8
   bb796:	e77f      	b.n	bb698 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x70>
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   bb798:	2420      	movs	r4, #32
   bb79a:	2300      	movs	r3, #0
   bb79c:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
   bb7a0:	f8cd 9000 	str.w	r9, [sp]
                    LOG(ERROR, "Failed to append discovered characteristic.");
   bb7a4:	aa0c      	add	r2, sp, #48	; 0x30
   bb7a6:	4641      	mov	r1, r8
   bb7a8:	2032      	movs	r0, #50	; 0x32
   bb7aa:	f7fd fad9 	bl	b8d60 <log_message>
   bb7ae:	a806      	add	r0, sp, #24
   bb7b0:	f7fe fc99 	bl	ba0e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bb7b4:	a804      	add	r0, sp, #16
   bb7b6:	f7fe fc96 	bl	ba0e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   bb7ba:	3601      	adds	r6, #1
   bb7bc:	e74b      	b.n	bb656 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x2e>
   bb7be:	7923      	ldrb	r3, [r4, #4]
   bb7c0:	f043 0302 	orr.w	r3, r3, #2
   bb7c4:	7123      	strb	r3, [r4, #4]
   bb7c6:	e78b      	b.n	bb6e0 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0xb8>
    }
   bb7c8:	b015      	add	sp, #84	; 0x54
   bb7ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb7ce:	bf00      	nop
   bb7d0:	000c0e41 	.word	0x000c0e41
   bb7d4:	000c0cb3 	.word	0x000c0cb3
   bb7d8:	000c0e5c 	.word	0x000c0e5c
   bb7dc:	000c0e8b 	.word	0x000c0e8b

000bb7e0 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   bb7e0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   bb7e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bb7e4:	4604      	mov	r4, r0
   bb7e6:	460d      	mov	r5, r1
   bb7e8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   bb7ea:	d914      	bls.n	bb816 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   bb7ec:	4290      	cmp	r0, r2
   bb7ee:	d213      	bcs.n	bb818 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   bb7f0:	f1a2 0624 	sub.w	r6, r2, #36	; 0x24
            dest += end - p - 1;
   bb7f4:	1a75      	subs	r5, r6, r1
   bb7f6:	f1a1 0724 	sub.w	r7, r1, #36	; 0x24
   bb7fa:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   bb7fc:	42b7      	cmp	r7, r6
   bb7fe:	d018      	beq.n	bb832 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   bb800:	b11c      	cbz	r4, bb80a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   bb802:	4631      	mov	r1, r6
   bb804:	4620      	mov	r0, r4
   bb806:	f7fe feb5 	bl	ba574 <_ZN8particle13BleScanResultC1EOS0_>
                end->~T();
   bb80a:	4630      	mov	r0, r6
   bb80c:	f7fe fb72 	bl	b9ef4 <_ZN8particle13BleScanResultD1Ev>
            for (; end != p; --end, --dest) {
   bb810:	3e24      	subs	r6, #36	; 0x24
   bb812:	3c24      	subs	r4, #36	; 0x24
   bb814:	e7f2      	b.n	bb7fc <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   bb816:	d00c      	beq.n	bb832 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   bb818:	42b5      	cmp	r5, r6
   bb81a:	d00a      	beq.n	bb832 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   bb81c:	b11c      	cbz	r4, bb826 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   bb81e:	4629      	mov	r1, r5
   bb820:	4620      	mov	r0, r4
   bb822:	f7fe fea7 	bl	ba574 <_ZN8particle13BleScanResultC1EOS0_>
                p->~T();
   bb826:	4628      	mov	r0, r5
   bb828:	f7fe fb64 	bl	b9ef4 <_ZN8particle13BleScanResultD1Ev>
            for (; p != end; ++p, ++dest) {
   bb82c:	3524      	adds	r5, #36	; 0x24
   bb82e:	3424      	adds	r4, #36	; 0x24
   bb830:	e7f2      	b.n	bb818 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   bb832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bb834 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   bb834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
   bb836:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   bb838:	4605      	mov	r5, r0
        if (n > 0) {
   bb83a:	dd13      	ble.n	bb864 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   bb83c:	2724      	movs	r7, #36	; 0x24
    return ::malloc(size);
   bb83e:	fb07 f006 	mul.w	r0, r7, r6
   bb842:	f7fd fb69 	bl	b8f18 <malloc>
            if (!d) {
   bb846:	4604      	mov	r4, r0
   bb848:	b158      	cbz	r0, bb862 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
   bb84a:	e9d5 1200 	ldrd	r1, r2, [r5]
   bb84e:	fb07 1202 	mla	r2, r7, r2, r1
   bb852:	f7ff ffc5 	bl	bb7e0 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   bb856:	6828      	ldr	r0, [r5, #0]
   bb858:	f7fd fb66 	bl	b8f28 <free>
        data_ = d;
   bb85c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   bb85e:	60ae      	str	r6, [r5, #8]
        return true;
   bb860:	2001      	movs	r0, #1
    }
   bb862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
   bb864:	2400      	movs	r4, #0
   bb866:	e7f6      	b.n	bb856 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>

000bb868 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   bb868:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bb86c:	b09d      	sub	sp, #116	; 0x74
            : rssi_(BLE_RSSI_INVALID) {
   bb86e:	ad01      	add	r5, sp, #4
   bb870:	4606      	mov	r6, r0
   bb872:	4628      	mov	r0, r5
   bb874:	460c      	mov	r4, r1
   bb876:	f7fd ff2c 	bl	b96d2 <_ZN8particle10BleAddressC1Ev>
   bb87a:	a803      	add	r0, sp, #12
   bb87c:	f7fe ff55 	bl	ba72a <_ZN8particle18BleAdvertisingDataC1Ev>
   bb880:	a806      	add	r0, sp, #24
   bb882:	f7fe ff52 	bl	ba72a <_ZN8particle18BleAdvertisingDataC1Ev>
    address_ = addr;
   bb886:	6930      	ldr	r0, [r6, #16]
   bb888:	6971      	ldr	r1, [r6, #20]
        scanResponse_.set(buf, len);
   bb88a:	89f2      	ldrh	r2, [r6, #14]
   bb88c:	ab13      	add	r3, sp, #76	; 0x4c
   bb88e:	c303      	stmia	r3!, {r0, r1}
    address_ = addr.address_;
   bb890:	e885 0003 	stmia.w	r5, {r0, r1}
        rssi_ = value;
   bb894:	7833      	ldrb	r3, [r6, #0]
        scanResponse_.set(buf, len);
   bb896:	68b1      	ldr	r1, [r6, #8]
        rssi_ = value;
   bb898:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        scanResponse_.set(buf, len);
   bb89c:	a806      	add	r0, sp, #24
   bb89e:	f7fe feb8 	bl	ba612 <_ZN8particle18BleAdvertisingData3setEPKhj>
        advertisingData_.set(buf, len);
   bb8a2:	89b2      	ldrh	r2, [r6, #12]
   bb8a4:	6871      	ldr	r1, [r6, #4]
   bb8a6:	a803      	add	r0, sp, #12
   bb8a8:	f7fe feb3 	bl	ba612 <_ZN8particle18BleAdvertisingData3setEPKhj>
        return minRssi_;
   bb8ac:	f994 3068 	ldrsb.w	r3, [r4, #104]	; 0x68
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   bb8b0:	2b7f      	cmp	r3, #127	; 0x7f
    address_ = addr.address_;
   bb8b2:	af13      	add	r7, sp, #76	; 0x4c
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   bb8b4:	d003      	beq.n	bb8be <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x56>
   bb8b6:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   bb8ba:	429a      	cmp	r2, r3
   bb8bc:	db5c      	blt.n	bb978 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        return maxRssi_;
   bb8be:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() > filterRssi) {
   bb8c2:	2b7f      	cmp	r3, #127	; 0x7f
   bb8c4:	d003      	beq.n	bb8ce <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x66>
   bb8c6:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   bb8ca:	429a      	cmp	r2, r3
   bb8cc:	dc54      	bgt.n	bb978 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filerAddresses = filter_.addresses();
   bb8ce:	f104 0150 	add.w	r1, r4, #80	; 0x50
   bb8d2:	4638      	mov	r0, r7
   bb8d4:	f7fe fd16 	bl	ba304 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>
    return size_;
   bb8d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
        if (filerAddresses.size() > 0) {
   bb8da:	2b00      	cmp	r3, #0
   bb8dc:	dd52      	ble.n	bb984 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x11c>
    return data_;
   bb8de:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    return data_ + size_;
   bb8e0:	eb06 09c3 	add.w	r9, r6, r3, lsl #3
            for (const auto& address : filerAddresses) {
   bb8e4:	45b1      	cmp	r9, r6
   bb8e6:	d050      	beq.n	bb98a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x122>
                if (address == result.address()) {
   bb8e8:	4630      	mov	r0, r6
   bb8ea:	4629      	mov	r1, r5
   bb8ec:	f7fd fedd 	bl	b96aa <_ZNK8particle10BleAddresseqERKS0_>
   bb8f0:	3608      	adds	r6, #8
   bb8f2:	4680      	mov	r8, r0
   bb8f4:	2800      	cmp	r0, #0
   bb8f6:	d0f5      	beq.n	bb8e4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7c>
    ::free(ptr);
   bb8f8:	9813      	ldr	r0, [sp, #76]	; 0x4c
   bb8fa:	f7fd fb15 	bl	b8f28 <free>
        if (!delegator->filterByRssi(result) ||
   bb8fe:	f1b8 0f00 	cmp.w	r8, #0
   bb902:	d039      	beq.n	bb978 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByDeviceName(result) ||
   bb904:	4629      	mov	r1, r5
   bb906:	4620      	mov	r0, r4
   bb908:	f7fe fcbf 	bl	ba28a <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>
              !delegator->filterByAddress(result) ||
   bb90c:	b3a0      	cbz	r0, bb978 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByServiceUUID(result) ||
   bb90e:	4629      	mov	r1, r5
   bb910:	4620      	mov	r0, r4
   bb912:	f7ff fa68 	bl	bade6 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>
              !delegator->filterByDeviceName(result) ||
   bb916:	4606      	mov	r6, r0
   bb918:	b370      	cbz	r0, bb978 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filterAppearances = filter_.appearances();
   bb91a:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   bb91e:	4638      	mov	r0, r7
   bb920:	f7fe fd3b 	bl	ba39a <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterAppearances.size() > 0) {
   bb924:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bb926:	2b00      	cmp	r3, #0
   bb928:	dd12      	ble.n	bb950 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
            ble_sig_appearance_t srAppearance = result.scanResponse().appearance();
   bb92a:	a806      	add	r0, sp, #24
   bb92c:	f7fe f899 	bl	b9a62 <_ZNK8particle18BleAdvertisingData10appearanceEv>
   bb930:	4680      	mov	r8, r0
            ble_sig_appearance_t advAppearance = result.advertisingData().appearance();
   bb932:	a803      	add	r0, sp, #12
   bb934:	f7fe f895 	bl	b9a62 <_ZNK8particle18BleAdvertisingData10appearanceEv>
    return data_ + size_;
   bb938:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
   bb93c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
            for (const auto& appearance : filterAppearances) {
   bb940:	429a      	cmp	r2, r3
   bb942:	d025      	beq.n	bb990 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x128>
                if (appearance == srAppearance || appearance == advAppearance) {
   bb944:	f833 1b02 	ldrh.w	r1, [r3], #2
   bb948:	4588      	cmp	r8, r1
   bb94a:	d001      	beq.n	bb950 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
   bb94c:	4288      	cmp	r0, r1
   bb94e:	d1f7      	bne.n	bb940 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd8>
    ::free(ptr);
   bb950:	9813      	ldr	r0, [sp, #76]	; 0x4c
   bb952:	f7fd fae9 	bl	b8f28 <free>
              !delegator->filterByServiceUUID(result) ||
   bb956:	b17e      	cbz	r6, bb978 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByCustomData(result)) {
   bb958:	4629      	mov	r1, r5
   bb95a:	4620      	mov	r0, r4
   bb95c:	f7fe fd52 	bl	ba404 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>
              !delegator->filterByAppearance(result) ||
   bb960:	b150      	cbz	r0, bb978 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        if (delegator->scanResultCallback_) {
   bb962:	6a23      	ldr	r3, [r4, #32]
   bb964:	b1b3      	cbz	r3, bb994 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x12c>
            delegator->foundCount_++;
   bb966:	6963      	ldr	r3, [r4, #20]
   bb968:	9513      	str	r5, [sp, #76]	; 0x4c
   bb96a:	3301      	adds	r3, #1
   bb96c:	6163      	str	r3, [r4, #20]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bb96e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bb970:	4639      	mov	r1, r7
   bb972:	f104 0018 	add.w	r0, r4, #24
   bb976:	4798      	blx	r3
            return;
   bb978:	4628      	mov	r0, r5
   bb97a:	f7fe fabb 	bl	b9ef4 <_ZN8particle13BleScanResultD1Ev>
    }
   bb97e:	b01d      	add	sp, #116	; 0x74
   bb980:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return true;
   bb984:	f04f 0801 	mov.w	r8, #1
   bb988:	e7b6      	b.n	bb8f8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   bb98a:	f04f 0800 	mov.w	r8, #0
   bb98e:	e7b3      	b.n	bb8f8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   bb990:	2600      	movs	r6, #0
   bb992:	e7dd      	b.n	bb950 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
        } else if (delegator->scanResultCallbackRef_) {
   bb994:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
   bb998:	f1b8 0f00 	cmp.w	r8, #0
   bb99c:	d007      	beq.n	bb9ae <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x146>
            delegator->foundCount_++;
   bb99e:	6963      	ldr	r3, [r4, #20]
   bb9a0:	3301      	adds	r3, #1
   bb9a2:	6163      	str	r3, [r4, #20]
   bb9a4:	4629      	mov	r1, r5
   bb9a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   bb9a8:	f104 0028 	add.w	r0, r4, #40	; 0x28
   bb9ac:	e7e3      	b.n	bb976 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x10e>
        if (delegator->resultsPtr_) {
   bb9ae:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   bb9b2:	f1bc 0f00 	cmp.w	ip, #0
   bb9b6:	d025      	beq.n	bba04 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x19c>
            delegator->foundCount_++;
   bb9b8:	6963      	ldr	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   bb9ba:	6922      	ldr	r2, [r4, #16]
            delegator->foundCount_++;
   bb9bc:	3301      	adds	r3, #1
            if (delegator->foundCount_ <= delegator->targetCount_) {
   bb9be:	4293      	cmp	r3, r2
            delegator->foundCount_++;
   bb9c0:	6163      	str	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   bb9c2:	d8d9      	bhi.n	bb978 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   bb9c4:	2224      	movs	r2, #36	; 0x24
   bb9c6:	4353      	muls	r3, r2
    address_ = addr.address_;
   bb9c8:	462a      	mov	r2, r5
   bb9ca:	ca03      	ldmia	r2!, {r0, r1}
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   bb9cc:	3b24      	subs	r3, #36	; 0x24
   bb9ce:	eb0c 0603 	add.w	r6, ip, r3
    address_ = addr.address_;
   bb9d2:	f84c 0003 	str.w	r0, [ip, r3]
   bb9d6:	6071      	str	r1, [r6, #4]
class BleScanResult {
   bb9d8:	f106 0008 	add.w	r0, r6, #8
   bb9dc:	a903      	add	r1, sp, #12
   bb9de:	f7fe fde0 	bl	ba5a2 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   bb9e2:	a906      	add	r1, sp, #24
   bb9e4:	f106 0014 	add.w	r0, r6, #20
   bb9e8:	f7fe fddb 	bl	ba5a2 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   bb9ec:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
   bb9f0:	f886 3020 	strb.w	r3, [r6, #32]
                if (delegator->foundCount_ >= delegator->targetCount_) {
   bb9f4:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   bb9f8:	429a      	cmp	r2, r3
   bb9fa:	d3bd      	bcc.n	bb978 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                    hal_ble_gap_stop_scan(nullptr);
   bb9fc:	4640      	mov	r0, r8
   bb9fe:	f7fc ff8b 	bl	b8918 <hal_ble_gap_stop_scan>
   bba02:	e7b9      	b.n	bb978 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    address_ = addr.address_;
   bba04:	e895 0003 	ldmia.w	r5, {r0, r1}
   bba08:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   bba0c:	e888 0003 	stmia.w	r8, {r0, r1}
class BleAdvertisingData {
   bba10:	a903      	add	r1, sp, #12
   bba12:	a80c      	add	r0, sp, #48	; 0x30
   bba14:	f7fe fd91 	bl	ba53a <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   bba18:	a906      	add	r1, sp, #24
   bba1a:	a80f      	add	r0, sp, #60	; 0x3c
   bba1c:	f7fe fd8d 	bl	ba53a <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   bba20:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   bba24:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    return insert(size_, std::move(value));
   bba28:	4641      	mov	r1, r8
   bba2a:	4638      	mov	r0, r7
   bba2c:	6866      	ldr	r6, [r4, #4]
   bba2e:	f7fe fda1 	bl	ba574 <_ZN8particle13BleScanResultC1EOS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bba32:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   bba36:	4299      	cmp	r1, r3
   bba38:	da10      	bge.n	bba5c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1f4>
    T* const p = data_ + i;
   bba3a:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   bba3c:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
   bba3e:	2224      	movs	r2, #36	; 0x24
   bba40:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
   bba44:	f106 0024 	add.w	r0, r6, #36	; 0x24
   bba48:	fb02 3201 	mla	r2, r2, r1, r3
   bba4c:	4631      	mov	r1, r6
   bba4e:	f7ff fec7 	bl	bb7e0 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   bba52:	b986      	cbnz	r6, bba76 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x20e>
    ++size_;
   bba54:	6863      	ldr	r3, [r4, #4]
   bba56:	3301      	adds	r3, #1
   bba58:	6063      	str	r3, [r4, #4]
    return true;
   bba5a:	e005      	b.n	bba68 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x200>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   bba5c:	3101      	adds	r1, #1
   bba5e:	4620      	mov	r0, r4
   bba60:	f7ff fee8 	bl	bb834 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   bba64:	2800      	cmp	r0, #0
   bba66:	d1e8      	bne.n	bba3a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1d2>
    return insert(size_, std::move(value));
   bba68:	4638      	mov	r0, r7
   bba6a:	f7fe fa43 	bl	b9ef4 <_ZN8particle13BleScanResultD1Ev>
        delegator->resultsVector_.append(result);
   bba6e:	4640      	mov	r0, r8
   bba70:	f7fe fa40 	bl	b9ef4 <_ZN8particle13BleScanResultD1Ev>
   bba74:	e780      	b.n	bb978 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    new(p) T(std::move(value));
   bba76:	4639      	mov	r1, r7
   bba78:	4630      	mov	r0, r6
   bba7a:	f7fe fd7b 	bl	ba574 <_ZN8particle13BleScanResultC1EOS0_>
   bba7e:	e7e9      	b.n	bba54 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1ec>

000bba80 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   bba80:	4802      	ldr	r0, [pc, #8]	; (bba8c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   bba82:	2300      	movs	r3, #0
   bba84:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   bba86:	f7fd b813 	b.w	b8ab0 <os_mutex_recursive_create>
   bba8a:	bf00      	nop
   bba8c:	2003e670 	.word	0x2003e670

000bba90 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   bba90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bba92:	4606      	mov	r6, r0
   bba94:	460d      	mov	r5, r1
  size_t n = 0;
   bba96:	188f      	adds	r7, r1, r2
   bba98:	2400      	movs	r4, #0
  while (size--) {
   bba9a:	42bd      	cmp	r5, r7
   bba9c:	d00c      	beq.n	bbab8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   bba9e:	6833      	ldr	r3, [r6, #0]
   bbaa0:	f815 1b01 	ldrb.w	r1, [r5], #1
   bbaa4:	689b      	ldr	r3, [r3, #8]
   bbaa6:	4630      	mov	r0, r6
   bbaa8:	4798      	blx	r3
     if (chunk>=0)
   bbaaa:	1e03      	subs	r3, r0, #0
   bbaac:	db01      	blt.n	bbab2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   bbaae:	441c      	add	r4, r3
  while (size--) {
   bbab0:	e7f3      	b.n	bba9a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   bbab2:	2c00      	cmp	r4, #0
   bbab4:	bf08      	it	eq
   bbab6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   bbab8:	4620      	mov	r0, r4
   bbaba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bbabc <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   bbabc:	b508      	push	{r3, lr}
  return write(str);
   bbabe:	f7fb fd99 	bl	b75f4 <_ZN5Print5writeEPKc>
}
   bbac2:	bd08      	pop	{r3, pc}

000bbac4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   bbac4:	6803      	ldr	r3, [r0, #0]
   bbac6:	689b      	ldr	r3, [r3, #8]
   bbac8:	4718      	bx	r3

000bbaca <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   bbaca:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   bbacc:	210d      	movs	r1, #13
{
   bbace:	4605      	mov	r5, r0
  size_t n = print('\r');
   bbad0:	f7ff fff8 	bl	bbac4 <_ZN5Print5printEc>
  n += print('\n');
   bbad4:	210a      	movs	r1, #10
  size_t n = print('\r');
   bbad6:	4604      	mov	r4, r0
  n += print('\n');
   bbad8:	4628      	mov	r0, r5
   bbada:	f7ff fff3 	bl	bbac4 <_ZN5Print5printEc>
  return n;
}
   bbade:	4420      	add	r0, r4
   bbae0:	bd38      	pop	{r3, r4, r5, pc}

000bbae2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   bbae2:	b538      	push	{r3, r4, r5, lr}
   bbae4:	4605      	mov	r5, r0
  return write(str);
   bbae6:	f7fb fd85 	bl	b75f4 <_ZN5Print5writeEPKc>
   bbaea:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   bbaec:	4628      	mov	r0, r5
   bbaee:	f7ff ffec 	bl	bbaca <_ZN5Print7printlnEv>
  return n;
}
   bbaf2:	4420      	add	r0, r4
   bbaf4:	bd38      	pop	{r3, r4, r5, pc}

000bbaf6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   bbaf6:	b530      	push	{r4, r5, lr}
   bbaf8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   bbafa:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   bbafc:	2a01      	cmp	r2, #1
  *str = '\0';
   bbafe:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   bbb02:	bf98      	it	ls
   bbb04:	220a      	movls	r2, #10
   bbb06:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   bbb08:	460d      	mov	r5, r1
   bbb0a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   bbb0e:	fb01 5312 	mls	r3, r1, r2, r5
   bbb12:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bbb16:	2b09      	cmp	r3, #9
   bbb18:	bf94      	ite	ls
   bbb1a:	3330      	addls	r3, #48	; 0x30
   bbb1c:	3337      	addhi	r3, #55	; 0x37
   bbb1e:	b2db      	uxtb	r3, r3
  } while(n);
   bbb20:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   bbb22:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   bbb26:	d9ef      	bls.n	bbb08 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   bbb28:	4621      	mov	r1, r4
   bbb2a:	f7fb fd63 	bl	b75f4 <_ZN5Print5writeEPKc>
}
   bbb2e:	b00b      	add	sp, #44	; 0x2c
   bbb30:	bd30      	pop	{r4, r5, pc}

000bbb32 <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   bbb32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bbb36:	b086      	sub	sp, #24
   bbb38:	af00      	add	r7, sp, #0
   bbb3a:	4605      	mov	r5, r0
   bbb3c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   bbb3e:	1d38      	adds	r0, r7, #4
   bbb40:	2114      	movs	r1, #20
{
   bbb42:	4614      	mov	r4, r2
    va_copy(args2, args);
   bbb44:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   bbb46:	f7fd fa17 	bl	b8f78 <vsnprintf>

    if (n<bufsize)
   bbb4a:	2813      	cmp	r0, #19
   bbb4c:	d80e      	bhi.n	bbb6c <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   bbb4e:	1d39      	adds	r1, r7, #4
   bbb50:	4628      	mov	r0, r5
   bbb52:	f7fb fd4f 	bl	b75f4 <_ZN5Print5writeEPKc>
   bbb56:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   bbb58:	b11e      	cbz	r6, bbb62 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   bbb5a:	4628      	mov	r0, r5
   bbb5c:	f7ff ffb5 	bl	bbaca <_ZN5Print7printlnEv>
   bbb60:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   bbb62:	4620      	mov	r0, r4
   bbb64:	3718      	adds	r7, #24
   bbb66:	46bd      	mov	sp, r7
   bbb68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   bbb6c:	f100 0308 	add.w	r3, r0, #8
   bbb70:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   bbb74:	46e8      	mov	r8, sp
        char bigger[n+1];
   bbb76:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   bbb7a:	4622      	mov	r2, r4
   bbb7c:	1c41      	adds	r1, r0, #1
   bbb7e:	683b      	ldr	r3, [r7, #0]
   bbb80:	4668      	mov	r0, sp
   bbb82:	f7fd f9f9 	bl	b8f78 <vsnprintf>
  return write(str);
   bbb86:	4669      	mov	r1, sp
   bbb88:	4628      	mov	r0, r5
   bbb8a:	f7fb fd33 	bl	b75f4 <_ZN5Print5writeEPKc>
   bbb8e:	4604      	mov	r4, r0
   bbb90:	46c5      	mov	sp, r8
   bbb92:	e7e1      	b.n	bbb58 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000bbb94 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   bbb94:	b510      	push	{r4, lr}
   bbb96:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   bbb98:	f7fc fe86 	bl	b88a8 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   bbb9c:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   bbb9e:	6823      	ldr	r3, [r4, #0]
   bbba0:	4620      	mov	r0, r4
   bbba2:	695b      	ldr	r3, [r3, #20]
   bbba4:	4798      	blx	r3
    if (c >= 0) return c;
   bbba6:	2800      	cmp	r0, #0
   bbba8:	da08      	bge.n	bbbbc <_ZN6Stream9timedReadEv+0x28>
   bbbaa:	f7fc fe7d 	bl	b88a8 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   bbbae:	68e3      	ldr	r3, [r4, #12]
   bbbb0:	1ac0      	subs	r0, r0, r3
   bbbb2:	68a3      	ldr	r3, [r4, #8]
   bbbb4:	4298      	cmp	r0, r3
   bbbb6:	d3f2      	bcc.n	bbb9e <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   bbbb8:	f04f 30ff 	mov.w	r0, #4294967295
}
   bbbbc:	bd10      	pop	{r4, pc}
	...

000bbbc0 <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   bbbc0:	b570      	push	{r4, r5, r6, lr}
   bbbc2:	460d      	mov	r5, r1
  String ret;
   bbbc4:	4909      	ldr	r1, [pc, #36]	; (bbbec <_ZN6Stream15readStringUntilEc+0x2c>)
{
   bbbc6:	4604      	mov	r4, r0
   bbbc8:	4616      	mov	r6, r2
  String ret;
   bbbca:	f7fd fb6e 	bl	b92aa <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   bbbce:	4628      	mov	r0, r5
   bbbd0:	f7ff ffe0 	bl	bbb94 <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   bbbd4:	2800      	cmp	r0, #0
   bbbd6:	db06      	blt.n	bbbe6 <_ZN6Stream15readStringUntilEc+0x26>
   bbbd8:	4286      	cmp	r6, r0
   bbbda:	d004      	beq.n	bbbe6 <_ZN6Stream15readStringUntilEc+0x26>
	String & operator += (char c)			{concat(c); return (*this);}
   bbbdc:	b2c1      	uxtb	r1, r0
   bbbde:	4620      	mov	r0, r4
   bbbe0:	f7fd fbe2 	bl	b93a8 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   bbbe4:	e7f3      	b.n	bbbce <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   bbbe6:	4620      	mov	r0, r4
   bbbe8:	bd70      	pop	{r4, r5, r6, pc}
   bbbea:	bf00      	nop
   bbbec:	000bff2b 	.word	0x000bff2b

000bbbf0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   bbbf0:	4b01      	ldr	r3, [pc, #4]	; (bbbf8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   bbbf2:	4a02      	ldr	r2, [pc, #8]	; (bbbfc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   bbbf4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   bbbf6:	4770      	bx	lr
   bbbf8:	2003e678 	.word	0x2003e678
   bbbfc:	000c0f2a 	.word	0x000c0f2a

000bbc00 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   bbc00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   bbc04:	4a15      	ldr	r2, [pc, #84]	; (bbc5c <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   bbc06:	f8df 8060 	ldr.w	r8, [pc, #96]	; bbc68 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   bbc0a:	e9d2 6300 	ldrd	r6, r3, [r2]
   bbc0e:	1980      	adds	r0, r0, r6
   bbc10:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   bbc14:	4b12      	ldr	r3, [pc, #72]	; (bbc60 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   bbc16:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   bbc1a:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   bbc1e:	1986      	adds	r6, r0, r6
   bbc20:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   bbc24:	42bb      	cmp	r3, r7
   bbc26:	bf08      	it	eq
   bbc28:	42b2      	cmpeq	r2, r6
{
   bbc2a:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   bbc2c:	d013      	beq.n	bbc56 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   bbc2e:	a903      	add	r1, sp, #12
   bbc30:	4668      	mov	r0, sp
   bbc32:	e9cd 6700 	strd	r6, r7, [sp]
   bbc36:	f7fd f9cf 	bl	b8fd8 <localtime_r>
	calendar_time.tm_year += 1900;
   bbc3a:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bbc3c:	4d09      	ldr	r5, [pc, #36]	; (bbc64 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   bbc3e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bbc42:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   bbc44:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bbc46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bbc48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   bbc4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   bbc4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   bbc4e:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   bbc52:	6823      	ldr	r3, [r4, #0]
   bbc54:	602b      	str	r3, [r5, #0]
    }
}
   bbc56:	b00c      	add	sp, #48	; 0x30
   bbc58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bbc5c:	2003e6b0 	.word	0x2003e6b0
   bbc60:	2003e6a8 	.word	0x2003e6a8
   bbc64:	2003e680 	.word	0x2003e680
   bbc68:	2003e6b8 	.word	0x2003e6b8

000bbc6c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   bbc6c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   bbc6e:	2000      	movs	r0, #0
   bbc70:	f7fd f942 	bl	b8ef8 <spark_sync_time_pending>
   bbc74:	b128      	cbz	r0, bbc82 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   bbc76:	f7fd f927 	bl	b8ec8 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   bbc7a:	f080 0001 	eor.w	r0, r0, #1
   bbc7e:	b2c0      	uxtb	r0, r0
    }
   bbc80:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   bbc82:	2001      	movs	r0, #1
   bbc84:	e7fc      	b.n	bbc80 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000bbc88 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   bbc88:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   bbc8a:	f7ff ffb9 	bl	bbc00 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   bbc8e:	4b02      	ldr	r3, [pc, #8]	; (bbc98 <_ZN9TimeClass5monthEx+0x10>)
   bbc90:	6918      	ldr	r0, [r3, #16]
}
   bbc92:	3001      	adds	r0, #1
   bbc94:	bd08      	pop	{r3, pc}
   bbc96:	bf00      	nop
   bbc98:	2003e680 	.word	0x2003e680

000bbc9c <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   bbc9c:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   bbc9e:	2000      	movs	r0, #0
   bbca0:	f7fc fe0a 	bl	b88b8 <hal_rtc_time_is_valid>
    if (rtcstate)
   bbca4:	4604      	mov	r4, r0
   bbca6:	b9a0      	cbnz	r0, bbcd2 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   bbca8:	f7fd f862 	bl	b8d70 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   bbcac:	2801      	cmp	r0, #1
   bbcae:	d110      	bne.n	bbcd2 <_ZN9TimeClass7isValidEv+0x36>
   bbcb0:	4620      	mov	r0, r4
   bbcb2:	f7fd f885 	bl	b8dc0 <system_thread_get_state>
   bbcb6:	b960      	cbnz	r0, bbcd2 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   bbcb8:	f7ff ffd8 	bl	bbc6c <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   bbcbc:	b910      	cbnz	r0, bbcc4 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   bbcbe:	f7fd f8fb 	bl	b8eb8 <spark_process>
        while (_while() && !_condition()) {
   bbcc2:	e7f9      	b.n	bbcb8 <_ZN9TimeClass7isValidEv+0x1c>
   bbcc4:	f7ff ffd2 	bl	bbc6c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   bbcc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   bbccc:	2000      	movs	r0, #0
   bbcce:	f7fc bdf3 	b.w	b88b8 <hal_rtc_time_is_valid>
}
   bbcd2:	4620      	mov	r0, r4
   bbcd4:	bd10      	pop	{r4, pc}

000bbcd6 <_ZN9TimeClass3nowEv>:
{
   bbcd6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   bbcd8:	f7ff ffe0 	bl	bbc9c <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   bbcdc:	2210      	movs	r2, #16
   bbcde:	2100      	movs	r1, #0
   bbce0:	4668      	mov	r0, sp
   bbce2:	f001 fe6a 	bl	bd9ba <memset>
    hal_rtc_get_time(&tv, nullptr);
   bbce6:	2100      	movs	r1, #0
   bbce8:	4668      	mov	r0, sp
   bbcea:	f7fc fded 	bl	b88c8 <hal_rtc_get_time>
}
   bbcee:	9800      	ldr	r0, [sp, #0]
   bbcf0:	b005      	add	sp, #20
   bbcf2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bbcf8 <_ZN9TimeClass4hourEv>:
{
   bbcf8:	b508      	push	{r3, lr}
	return hour(now());
   bbcfa:	f7ff ffec 	bl	bbcd6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bbcfe:	17c1      	asrs	r1, r0, #31
   bbd00:	f7ff ff7e 	bl	bbc00 <_ZL22Refresh_UnixTime_Cachex>
}
   bbd04:	4b01      	ldr	r3, [pc, #4]	; (bbd0c <_ZN9TimeClass4hourEv+0x14>)
   bbd06:	6898      	ldr	r0, [r3, #8]
   bbd08:	bd08      	pop	{r3, pc}
   bbd0a:	bf00      	nop
   bbd0c:	2003e680 	.word	0x2003e680

000bbd10 <_ZN9TimeClass6minuteEv>:
{
   bbd10:	b508      	push	{r3, lr}
	return minute(now());
   bbd12:	f7ff ffe0 	bl	bbcd6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bbd16:	17c1      	asrs	r1, r0, #31
   bbd18:	f7ff ff72 	bl	bbc00 <_ZL22Refresh_UnixTime_Cachex>
}
   bbd1c:	4b01      	ldr	r3, [pc, #4]	; (bbd24 <_ZN9TimeClass6minuteEv+0x14>)
   bbd1e:	6858      	ldr	r0, [r3, #4]
   bbd20:	bd08      	pop	{r3, pc}
   bbd22:	bf00      	nop
   bbd24:	2003e680 	.word	0x2003e680

000bbd28 <_ZN9TimeClass6secondEv>:
{
   bbd28:	b508      	push	{r3, lr}
	return second(now());
   bbd2a:	f7ff ffd4 	bl	bbcd6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bbd2e:	17c1      	asrs	r1, r0, #31
   bbd30:	f7ff ff66 	bl	bbc00 <_ZL22Refresh_UnixTime_Cachex>
}
   bbd34:	4b01      	ldr	r3, [pc, #4]	; (bbd3c <_ZN9TimeClass6secondEv+0x14>)
   bbd36:	6818      	ldr	r0, [r3, #0]
   bbd38:	bd08      	pop	{r3, pc}
   bbd3a:	bf00      	nop
   bbd3c:	2003e680 	.word	0x2003e680

000bbd40 <_ZN9TimeClass3dayEv>:
{
   bbd40:	b508      	push	{r3, lr}
	return day(now());
   bbd42:	f7ff ffc8 	bl	bbcd6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bbd46:	17c1      	asrs	r1, r0, #31
   bbd48:	f7ff ff5a 	bl	bbc00 <_ZL22Refresh_UnixTime_Cachex>
}
   bbd4c:	4b01      	ldr	r3, [pc, #4]	; (bbd54 <_ZN9TimeClass3dayEv+0x14>)
   bbd4e:	68d8      	ldr	r0, [r3, #12]
   bbd50:	bd08      	pop	{r3, pc}
   bbd52:	bf00      	nop
   bbd54:	2003e680 	.word	0x2003e680

000bbd58 <_ZN9TimeClass5monthEv>:
{
   bbd58:	b508      	push	{r3, lr}
	return month(now());
   bbd5a:	f7ff ffbc 	bl	bbcd6 <_ZN9TimeClass3nowEv>
}
   bbd5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   bbd62:	17c1      	asrs	r1, r0, #31
   bbd64:	f7ff bf90 	b.w	bbc88 <_ZN9TimeClass5monthEx>

000bbd68 <_ZN9TimeClass4yearEv>:
{
   bbd68:	b508      	push	{r3, lr}
	return year(now());
   bbd6a:	f7ff ffb4 	bl	bbcd6 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bbd6e:	17c1      	asrs	r1, r0, #31
   bbd70:	f7ff ff46 	bl	bbc00 <_ZL22Refresh_UnixTime_Cachex>
}
   bbd74:	4b01      	ldr	r3, [pc, #4]	; (bbd7c <_ZN9TimeClass4yearEv+0x14>)
   bbd76:	6958      	ldr	r0, [r3, #20]
   bbd78:	bd08      	pop	{r3, pc}
   bbd7a:	bf00      	nop
   bbd7c:	2003e680 	.word	0x2003e680

000bbd80 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   bbd80:	4b02      	ldr	r3, [pc, #8]	; (bbd8c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   bbd82:	681a      	ldr	r2, [r3, #0]
   bbd84:	4b02      	ldr	r3, [pc, #8]	; (bbd90 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   bbd86:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   bbd88:	4770      	bx	lr
   bbd8a:	bf00      	nop
   bbd8c:	2003da9c 	.word	0x2003da9c
   bbd90:	2003e67c 	.word	0x2003e67c

000bbd94 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   bbd94:	2100      	movs	r1, #0
   bbd96:	f7fc bffb 	b.w	b8d90 <system_delay_ms>
	...

000bbd9c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   bbd9c:	4b01      	ldr	r3, [pc, #4]	; (bbda4 <_GLOBAL__sub_I_RGB+0x8>)
   bbd9e:	2200      	movs	r2, #0
   bbda0:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   bbda2:	4770      	bx	lr
   bbda4:	2003e6c0 	.word	0x2003e6c0

000bbda8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   bbda8:	4b01      	ldr	r3, [pc, #4]	; (bbdb0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   bbdaa:	6018      	str	r0, [r3, #0]
    }, nullptr);
   bbdac:	4770      	bx	lr
   bbdae:	bf00      	nop
   bbdb0:	2003daa0 	.word	0x2003daa0

000bbdb4 <serialEventRun>:
{
   bbdb4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   bbdb6:	4b0b      	ldr	r3, [pc, #44]	; (bbde4 <serialEventRun+0x30>)
   bbdb8:	b143      	cbz	r3, bbdcc <serialEventRun+0x18>
   bbdba:	f000 fbff 	bl	bc5bc <_Z16_fetch_usbserialv>
   bbdbe:	6803      	ldr	r3, [r0, #0]
   bbdc0:	691b      	ldr	r3, [r3, #16]
   bbdc2:	4798      	blx	r3
   bbdc4:	2800      	cmp	r0, #0
   bbdc6:	dd01      	ble.n	bbdcc <serialEventRun+0x18>
        serialEvent();
   bbdc8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bbdcc:	4b06      	ldr	r3, [pc, #24]	; (bbde8 <serialEventRun+0x34>)
   bbdce:	b143      	cbz	r3, bbde2 <serialEventRun+0x2e>
   bbdd0:	f000 fe9e 	bl	bcb10 <_Z22__fetch_global_Serial1v>
   bbdd4:	6803      	ldr	r3, [r0, #0]
   bbdd6:	691b      	ldr	r3, [r3, #16]
   bbdd8:	4798      	blx	r3
   bbdda:	2800      	cmp	r0, #0
   bbddc:	dd01      	ble.n	bbde2 <serialEventRun+0x2e>
        serialEvent1();
   bbdde:	f3af 8000 	nop.w
}
   bbde2:	bd08      	pop	{r3, pc}
	...

000bbdec <_post_loop>:
{
   bbdec:	b508      	push	{r3, lr}
	serialEventRun();
   bbdee:	f7ff ffe1 	bl	bbdb4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bbdf2:	f7fc fd59 	bl	b88a8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bbdf6:	4b01      	ldr	r3, [pc, #4]	; (bbdfc <_post_loop+0x10>)
   bbdf8:	6018      	str	r0, [r3, #0]
}
   bbdfa:	bd08      	pop	{r3, pc}
   bbdfc:	2003e740 	.word	0x2003e740

000bbe00 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bbe00:	4805      	ldr	r0, [pc, #20]	; (bbe18 <_Z33system_initialize_user_backup_ramv+0x18>)
   bbe02:	4a06      	ldr	r2, [pc, #24]	; (bbe1c <_Z33system_initialize_user_backup_ramv+0x1c>)
   bbe04:	4906      	ldr	r1, [pc, #24]	; (bbe20 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bbe06:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bbe08:	1a12      	subs	r2, r2, r0
   bbe0a:	f001 fdae 	bl	bd96a <memcpy>
    __backup_sram_signature = signature;
   bbe0e:	4b05      	ldr	r3, [pc, #20]	; (bbe24 <_Z33system_initialize_user_backup_ramv+0x24>)
   bbe10:	4a05      	ldr	r2, [pc, #20]	; (bbe28 <_Z33system_initialize_user_backup_ramv+0x28>)
   bbe12:	601a      	str	r2, [r3, #0]
}
   bbe14:	bd08      	pop	{r3, pc}
   bbe16:	bf00      	nop
   bbe18:	2003f400 	.word	0x2003f400
   bbe1c:	2003f404 	.word	0x2003f404
   bbe20:	000c1654 	.word	0x000c1654
   bbe24:	2003f400 	.word	0x2003f400
   bbe28:	9a271c1e 	.word	0x9a271c1e

000bbe2c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bbe2c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bbe2e:	2300      	movs	r3, #0
   bbe30:	9300      	str	r3, [sp, #0]
   bbe32:	461a      	mov	r2, r3
   bbe34:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bbe38:	f7fc ffd4 	bl	b8de4 <system_ctrl_set_result>
}
   bbe3c:	b003      	add	sp, #12
   bbe3e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bbe44 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   bbe44:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   bbe46:	8843      	ldrh	r3, [r0, #2]
   bbe48:	2b0a      	cmp	r3, #10
   bbe4a:	d008      	beq.n	bbe5e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   bbe4c:	2b50      	cmp	r3, #80	; 0x50
   bbe4e:	d10b      	bne.n	bbe68 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bbe50:	4b09      	ldr	r3, [pc, #36]	; (bbe78 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bbe52:	681b      	ldr	r3, [r3, #0]
   bbe54:	b14b      	cbz	r3, bbe6a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bbe56:	b003      	add	sp, #12
   bbe58:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   bbe5c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   bbe5e:	f7ff ffe5 	bl	bbe2c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   bbe62:	b003      	add	sp, #12
   bbe64:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bbe68:	2300      	movs	r3, #0
   bbe6a:	9300      	str	r3, [sp, #0]
   bbe6c:	461a      	mov	r2, r3
   bbe6e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bbe72:	f7fc ffb7 	bl	b8de4 <system_ctrl_set_result>
}
   bbe76:	e7f4      	b.n	bbe62 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   bbe78:	2003e6d4 	.word	0x2003e6d4

000bbe7c <module_user_init_hook>:
{
   bbe7c:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   bbe7e:	4812      	ldr	r0, [pc, #72]	; (bbec8 <module_user_init_hook+0x4c>)
   bbe80:	2100      	movs	r1, #0
   bbe82:	f7fd f8a1 	bl	b8fc8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   bbe86:	4b11      	ldr	r3, [pc, #68]	; (bbecc <module_user_init_hook+0x50>)
   bbe88:	681a      	ldr	r2, [r3, #0]
   bbe8a:	4b11      	ldr	r3, [pc, #68]	; (bbed0 <module_user_init_hook+0x54>)
   bbe8c:	429a      	cmp	r2, r3
   bbe8e:	4b11      	ldr	r3, [pc, #68]	; (bbed4 <module_user_init_hook+0x58>)
   bbe90:	bf0c      	ite	eq
   bbe92:	2201      	moveq	r2, #1
   bbe94:	2200      	movne	r2, #0
   bbe96:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   bbe98:	d001      	beq.n	bbe9e <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   bbe9a:	f7ff ffb1 	bl	bbe00 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   bbe9e:	f7fc fceb 	bl	b8878 <HAL_RNG_GetRandomNumber>
   bbea2:	4604      	mov	r4, r0
    srand(seed);
   bbea4:	f001 fd92 	bl	bd9cc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   bbea8:	4b0b      	ldr	r3, [pc, #44]	; (bbed8 <module_user_init_hook+0x5c>)
   bbeaa:	b113      	cbz	r3, bbeb2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   bbeac:	4620      	mov	r0, r4
   bbeae:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   bbeb2:	2100      	movs	r1, #0
   bbeb4:	4808      	ldr	r0, [pc, #32]	; (bbed8 <module_user_init_hook+0x5c>)
   bbeb6:	f7fd f827 	bl	b8f08 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   bbeba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   bbebe:	4807      	ldr	r0, [pc, #28]	; (bbedc <module_user_init_hook+0x60>)
   bbec0:	2100      	movs	r1, #0
   bbec2:	f7fc bf85 	b.w	b8dd0 <system_ctrl_set_app_request_handler>
   bbec6:	bf00      	nop
   bbec8:	000bbda9 	.word	0x000bbda9
   bbecc:	2003f400 	.word	0x2003f400
   bbed0:	9a271c1e 	.word	0x9a271c1e
   bbed4:	2003e6d0 	.word	0x2003e6d0
   bbed8:	00000000 	.word	0x00000000
   bbedc:	000bbe45 	.word	0x000bbe45

000bbee0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bbee0:	4770      	bx	lr

000bbee2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   bbee2:	2000      	movs	r0, #0
   bbee4:	4770      	bx	lr

000bbee6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   bbee6:	b510      	push	{r4, lr}
   bbee8:	2110      	movs	r1, #16
   bbeea:	4604      	mov	r4, r0
   bbeec:	f7f8 f8d7 	bl	b409e <_ZdlPvj>
   bbef0:	4620      	mov	r0, r4
   bbef2:	bd10      	pop	{r4, pc}

000bbef4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   bbef4:	b508      	push	{r3, lr}
      { delete this; }
   bbef6:	f7ff fff6 	bl	bbee6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   bbefa:	bd08      	pop	{r3, pc}

000bbefc <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   bbefc:	b530      	push	{r4, r5, lr}
        type_(type) {
   bbefe:	2200      	movs	r2, #0
   bbf00:	f64f 749c 	movw	r4, #65436	; 0xff9c
   bbf04:	6002      	str	r2, [r0, #0]
   bbf06:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   bbf08:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   bbf0a:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   bbf0c:	680c      	ldr	r4, [r1, #0]
   bbf0e:	8085      	strh	r5, [r0, #4]
   bbf10:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   bbf12:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   bbf14:	bd30      	pop	{r4, r5, pc}

000bbf16 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   bbf16:	b510      	push	{r4, lr}
   bbf18:	4604      	mov	r4, r0
    free((void*)msg_);
   bbf1a:	6800      	ldr	r0, [r0, #0]
   bbf1c:	f7fd f804 	bl	b8f28 <free>
}
   bbf20:	4620      	mov	r0, r4
   bbf22:	bd10      	pop	{r4, pc}

000bbf24 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   bbf24:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   bbf26:	68c4      	ldr	r4, [r0, #12]
   bbf28:	b1f4      	cbz	r4, bbf68 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   bbf2a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   bbf2c:	2b02      	cmp	r3, #2
   bbf2e:	d103      	bne.n	bbf38 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   bbf30:	f104 000c 	add.w	r0, r4, #12
   bbf34:	f7ff ffef 	bl	bbf16 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   bbf38:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   bbf3a:	b135      	cbz	r5, bbf4a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   bbf3c:	4628      	mov	r0, r5
   bbf3e:	f7f8 fa43 	bl	b43c8 <_ZNSt14_Function_baseD1Ev>
   bbf42:	2110      	movs	r1, #16
   bbf44:	4628      	mov	r0, r5
   bbf46:	f7f8 f8aa 	bl	b409e <_ZdlPvj>
   bbf4a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   bbf4c:	b135      	cbz	r5, bbf5c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   bbf4e:	4628      	mov	r0, r5
   bbf50:	f7f8 fa3a 	bl	b43c8 <_ZNSt14_Function_baseD1Ev>
   bbf54:	2110      	movs	r1, #16
   bbf56:	4628      	mov	r0, r5
   bbf58:	f7f8 f8a1 	bl	b409e <_ZdlPvj>
   bbf5c:	4620      	mov	r0, r4
   bbf5e:	2114      	movs	r1, #20
   bbf60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bbf64:	f7f8 b89b 	b.w	b409e <_ZdlPvj>
   bbf68:	bd38      	pop	{r3, r4, r5, pc}

000bbf6a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bbf6a:	680b      	ldr	r3, [r1, #0]
   bbf6c:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   bbf6e:	684b      	ldr	r3, [r1, #4]
   bbf70:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   bbf72:	b113      	cbz	r3, bbf7a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   bbf74:	685a      	ldr	r2, [r3, #4]
   bbf76:	3201      	adds	r2, #1
   bbf78:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   bbf7a:	4770      	bx	lr

000bbf7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   bbf7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bbf7e:	4604      	mov	r4, r0
   bbf80:	4668      	mov	r0, sp
   bbf82:	460d      	mov	r5, r1
   bbf84:	f7ff fff1 	bl	bbf6a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bbf88:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bbf8a:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bbf8c:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   bbf8e:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   bbf90:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bbf92:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   bbf94:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   bbf96:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   bbf98:	f7fe f8a5 	bl	ba0e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   bbf9c:	b135      	cbz	r5, bbfac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   bbf9e:	1d28      	adds	r0, r5, #4
   bbfa0:	f7fe f8a1 	bl	ba0e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bbfa4:	2108      	movs	r1, #8
   bbfa6:	4628      	mov	r0, r5
   bbfa8:	f7f8 f879 	bl	b409e <_ZdlPvj>
        return p;
    }
   bbfac:	4620      	mov	r0, r4
   bbfae:	b003      	add	sp, #12
   bbfb0:	bd30      	pop	{r4, r5, pc}

000bbfb2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   bbfb2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bbfb4:	b510      	push	{r4, lr}
      if (_M_empty())
   bbfb6:	b90a      	cbnz	r2, bbfbc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   bbfb8:	f000 fe2e 	bl	bcc18 <_ZSt25__throw_bad_function_callv>
    }
   bbfbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bbfc0:	68c3      	ldr	r3, [r0, #12]
   bbfc2:	4718      	bx	r3

000bbfc4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bbfc4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bbfc6:	6800      	ldr	r0, [r0, #0]
   bbfc8:	f100 0110 	add.w	r1, r0, #16
   bbfcc:	f7ff fff1 	bl	bbfb2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   bbfd0:	bd08      	pop	{r3, pc}

000bbfd2 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   bbfd2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   bbfd4:	b510      	push	{r4, lr}
      if (_M_empty())
   bbfd6:	b90a      	cbnz	r2, bbfdc <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   bbfd8:	f000 fe1e 	bl	bcc18 <_ZSt25__throw_bad_function_callv>
    }
   bbfdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bbfe0:	68c3      	ldr	r3, [r0, #12]
   bbfe2:	4718      	bx	r3

000bbfe4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   bbfe4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   bbfe6:	6800      	ldr	r0, [r0, #0]
   bbfe8:	f100 0110 	add.w	r1, r0, #16
   bbfec:	f7ff fff1 	bl	bbfd2 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   bbff0:	bd08      	pop	{r3, pc}
	...

000bbff4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   bbff4:	b538      	push	{r3, r4, r5, lr}
   bbff6:	2300      	movs	r3, #0
   bbff8:	4604      	mov	r4, r0
   bbffa:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bbffc:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   bbffe:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bc000:	f7f8 f849 	bl	b4096 <_Znwj>
   bc004:	b128      	cbz	r0, bc012 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   bc006:	2301      	movs	r3, #1
   bc008:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   bc00c:	4b02      	ldr	r3, [pc, #8]	; (bc018 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   bc00e:	6003      	str	r3, [r0, #0]
   bc010:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   bc012:	6020      	str	r0, [r4, #0]
	}
   bc014:	4620      	mov	r0, r4
   bc016:	bd38      	pop	{r3, r4, r5, pc}
   bc018:	000c0f54 	.word	0x000c0f54

000bc01c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   bc01c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bc01e:	2300      	movs	r3, #0
   bc020:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bc022:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bc024:	4604      	mov	r4, r0
   bc026:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bc028:	b12b      	cbz	r3, bc036 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bc02a:	2202      	movs	r2, #2
   bc02c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bc02e:	68eb      	ldr	r3, [r5, #12]
   bc030:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bc032:	68ab      	ldr	r3, [r5, #8]
   bc034:	60a3      	str	r3, [r4, #8]
    }
   bc036:	4620      	mov	r0, r4
   bc038:	bd38      	pop	{r3, r4, r5, pc}
	...

000bc03c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   bc03c:	b5f0      	push	{r4, r5, r6, r7, lr}
   bc03e:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   bc040:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   bc042:	4668      	mov	r0, sp
   bc044:	f7ff ff5a 	bl	bbefc <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bc048:	f04f 0302 	mov.w	r3, #2
   bc04c:	e8d4 2f4f 	ldrexb	r2, [r4]
   bc050:	2a00      	cmp	r2, #0
   bc052:	d103      	bne.n	bc05c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   bc054:	e8c4 3f41 	strexb	r1, r3, [r4]
   bc058:	2900      	cmp	r1, #0
   bc05a:	d1f7      	bne.n	bc04c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   bc05c:	d125      	bne.n	bc0aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   bc05e:	f104 050c 	add.w	r5, r4, #12
   bc062:	4669      	mov	r1, sp
   bc064:	4628      	mov	r0, r5
   bc066:	f7ff ff49 	bl	bbefc <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   bc06a:	f3bf 8f5b 	dmb	ish
   bc06e:	2301      	movs	r3, #1
   bc070:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bc072:	2000      	movs	r0, #0
   bc074:	f104 0308 	add.w	r3, r4, #8
   bc078:	f3bf 8f5b 	dmb	ish
   bc07c:	e853 6f00 	ldrex	r6, [r3]
   bc080:	e843 0200 	strex	r2, r0, [r3]
   bc084:	2a00      	cmp	r2, #0
   bc086:	d1f9      	bne.n	bc07c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   bc088:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bc08c:	b16e      	cbz	r6, bc0aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   bc08e:	f7fc fe87 	bl	b8da0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bc092:	b178      	cbz	r0, bc0b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bc094:	4629      	mov	r1, r5
   bc096:	4630      	mov	r0, r6
   bc098:	f7ff ff8b 	bl	bbfb2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   bc09c:	4630      	mov	r0, r6
   bc09e:	f7f8 f993 	bl	b43c8 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bc0a2:	2110      	movs	r1, #16
   bc0a4:	4630      	mov	r0, r6
   bc0a6:	f7f7 fffa 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   bc0aa:	4668      	mov	r0, sp
   bc0ac:	f7ff ff33 	bl	bbf16 <_ZN8particle5ErrorD1Ev>
    }
   bc0b0:	b009      	add	sp, #36	; 0x24
   bc0b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bc0b4:	4631      	mov	r1, r6
   bc0b6:	a802      	add	r0, sp, #8
   bc0b8:	f7ff ffb0 	bl	bc01c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bc0bc:	68e0      	ldr	r0, [r4, #12]
   bc0be:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bc0c2:	b108      	cbz	r0, bc0c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   bc0c4:	f001 fcd2 	bl	bda6c <strdup>
        type_(type) {
   bc0c8:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bc0ca:	2010      	movs	r0, #16
   bc0cc:	f8ad 501c 	strh.w	r5, [sp, #28]
   bc0d0:	f7f7 ffe1 	bl	b4096 <_Znwj>
   bc0d4:	4605      	mov	r5, r0
   bc0d6:	b1e8      	cbz	r0, bc114 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   bc0d8:	2700      	movs	r7, #0
   bc0da:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bc0dc:	2018      	movs	r0, #24
   bc0de:	f7f7 ffda 	bl	b4096 <_Znwj>
   bc0e2:	4604      	mov	r4, r0
   bc0e4:	b188      	cbz	r0, bc10a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   bc0e6:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   bc0e8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bc0ea:	a802      	add	r0, sp, #8
   bc0ec:	f7fe fed4 	bl	bae98 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc0f0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   bc0f2:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bc0f4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc0f6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bc0f8:	9204      	str	r2, [sp, #16]
   bc0fa:	a906      	add	r1, sp, #24
   bc0fc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bc0fe:	60e3      	str	r3, [r4, #12]
   bc100:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   bc104:	9205      	str	r2, [sp, #20]
   bc106:	f7ff fef9 	bl	bbefc <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   bc10a:	4b08      	ldr	r3, [pc, #32]	; (bc12c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   bc10c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bc10e:	4b08      	ldr	r3, [pc, #32]	; (bc130 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bc110:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bc112:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   bc114:	a806      	add	r0, sp, #24
   bc116:	f7ff fefe 	bl	bbf16 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bc11a:	a802      	add	r0, sp, #8
   bc11c:	f7f8 f954 	bl	b43c8 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bc120:	2200      	movs	r2, #0
   bc122:	4629      	mov	r1, r5
   bc124:	4803      	ldr	r0, [pc, #12]	; (bc134 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   bc126:	f7fc fe43 	bl	b8db0 <application_thread_invoke>
   bc12a:	e7b7      	b.n	bc09c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   bc12c:	000bbfc5 	.word	0x000bbfc5
   bc130:	000bc249 	.word	0x000bc249
   bc134:	000bc7ab 	.word	0x000bc7ab

000bc138 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   bc138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bc13c:	b08b      	sub	sp, #44	; 0x2c
   bc13e:	4605      	mov	r5, r0
   bc140:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   bc144:	460f      	mov	r7, r1
   bc146:	4690      	mov	r8, r2
   bc148:	4699      	mov	r9, r3
    static bool connected(void) { return spark_cloud_flag_connected(); }
   bc14a:	f7fc febd 	bl	b8ec8 <spark_cloud_flag_connected>
   bc14e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   bc150:	4683      	mov	fp, r0
   bc152:	bb38      	cbnz	r0, bc1a4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   bc154:	f64f 732e 	movw	r3, #65326	; 0xff2e
   bc158:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bc15a:	a905      	add	r1, sp, #20
   bc15c:	4630      	mov	r0, r6
   bc15e:	f8ad 3018 	strh.w	r3, [sp, #24]
   bc162:	f7ff fecb 	bl	bbefc <_ZN8particle5ErrorC1EOS0_>
   bc166:	2014      	movs	r0, #20
   bc168:	f7f7 ff95 	bl	b4096 <_Znwj>
   bc16c:	4604      	mov	r4, r0
   bc16e:	b148      	cbz	r0, bc184 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   bc170:	2302      	movs	r3, #2
   bc172:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bc174:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bc176:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bc17a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   bc17c:	4631      	mov	r1, r6
   bc17e:	300c      	adds	r0, #12
   bc180:	f7ff febc 	bl	bbefc <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bc184:	4628      	mov	r0, r5
	: __shared_count(__p)
   bc186:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bc188:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   bc18c:	f7ff ff32 	bl	bbff4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   bc190:	4630      	mov	r0, r6
   bc192:	f7ff fec0 	bl	bbf16 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   bc196:	a805      	add	r0, sp, #20
   bc198:	f7ff febd 	bl	bbf16 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   bc19c:	4628      	mov	r0, r5
   bc19e:	b00b      	add	sp, #44	; 0x2c
   bc1a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   bc1a4:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   bc1a6:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   bc1a8:	2014      	movs	r0, #20
   bc1aa:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   bc1ae:	9307      	str	r3, [sp, #28]
   bc1b0:	f7f7 ff71 	bl	b4096 <_Znwj>
   bc1b4:	4601      	mov	r1, r0
   bc1b6:	b118      	cbz	r0, bc1c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   bc1b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bc1bc:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   bc1be:	7044      	strb	r4, [r0, #1]
   bc1c0:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   bc1c2:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   bc1c4:	f7ff ff16 	bl	bbff4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   bc1c8:	4b1e      	ldr	r3, [pc, #120]	; (bc244 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   bc1ca:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   bc1cc:	2008      	movs	r0, #8
   bc1ce:	f7f7 ff62 	bl	b4096 <_Znwj>
   bc1d2:	4604      	mov	r4, r0
   bc1d4:	b110      	cbz	r0, bc1dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   bc1d6:	a903      	add	r1, sp, #12
   bc1d8:	f7ff fec7 	bl	bbf6a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bc1dc:	9600      	str	r6, [sp, #0]
   bc1de:	fa5f f38a 	uxtb.w	r3, sl
   bc1e2:	464a      	mov	r2, r9
   bc1e4:	4641      	mov	r1, r8
   bc1e6:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   bc1e8:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   bc1ea:	f7fc fe75 	bl	b8ed8 <spark_send_event>
   bc1ee:	b9b8      	cbnz	r0, bc220 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   bc1f0:	9b03      	ldr	r3, [sp, #12]
   bc1f2:	785b      	ldrb	r3, [r3, #1]
   bc1f4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   bc1f8:	b993      	cbnz	r3, bc220 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   bc1fa:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   bc1fe:	a905      	add	r1, sp, #20
   bc200:	a803      	add	r0, sp, #12
   bc202:	9205      	str	r2, [sp, #20]
   bc204:	f8ad 3018 	strh.w	r3, [sp, #24]
   bc208:	f7ff ff18 	bl	bc03c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bc20c:	a805      	add	r0, sp, #20
   bc20e:	f7ff fe82 	bl	bbf16 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   bc212:	a805      	add	r0, sp, #20
   bc214:	9909      	ldr	r1, [sp, #36]	; 0x24
   bc216:	f7ff feb1 	bl	bbf7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   bc21a:	a806      	add	r0, sp, #24
   bc21c:	f7fd ff63 	bl	ba0e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc220:	a903      	add	r1, sp, #12
   bc222:	a805      	add	r0, sp, #20
   bc224:	f7ff fea1 	bl	bbf6a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   bc228:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   bc22a:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   bc22c:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   bc22e:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   bc230:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   bc232:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   bc234:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   bc236:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   bc238:	f7fd ff55 	bl	ba0e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   bc23c:	a804      	add	r0, sp, #16
   bc23e:	f7fd ff52 	bl	ba0e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   bc242:	e7ab      	b.n	bc19c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   bc244:	000bc2c5 	.word	0x000bc2c5

000bc248 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   bc248:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bc24a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc24c:	4605      	mov	r5, r0
	switch (__op)
   bc24e:	d103      	bne.n	bc258 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bc250:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bc252:	6003      	str	r3, [r0, #0]
      }
   bc254:	2000      	movs	r0, #0
   bc256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   bc258:	2a02      	cmp	r2, #2
   bc25a:	d010      	beq.n	bc27e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   bc25c:	2a03      	cmp	r2, #3
   bc25e:	d1f9      	bne.n	bc254 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bc260:	6804      	ldr	r4, [r0, #0]
   bc262:	2c00      	cmp	r4, #0
   bc264:	d0f6      	beq.n	bc254 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   bc266:	f104 0010 	add.w	r0, r4, #16
   bc26a:	f7ff fe54 	bl	bbf16 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   bc26e:	4620      	mov	r0, r4
   bc270:	f7f8 f8aa 	bl	b43c8 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bc274:	2118      	movs	r1, #24
   bc276:	4620      	mov	r0, r4
   bc278:	f7f7 ff11 	bl	b409e <_ZdlPvj>
   bc27c:	e7ea      	b.n	bc254 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bc27e:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   bc280:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bc282:	f7f7 ff08 	bl	b4096 <_Znwj>
   bc286:	4604      	mov	r4, r0
   bc288:	b150      	cbz	r0, bc2a0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   bc28a:	4631      	mov	r1, r6
   bc28c:	f7ff fec6 	bl	bc01c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   bc290:	6930      	ldr	r0, [r6, #16]
   bc292:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bc296:	b108      	cbz	r0, bc29c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   bc298:	f001 fbe8 	bl	bda6c <strdup>
        type_(type) {
   bc29c:	6120      	str	r0, [r4, #16]
   bc29e:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   bc2a0:	602c      	str	r4, [r5, #0]
	}
   bc2a2:	e7d7      	b.n	bc254 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000bc2a4 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   bc2a4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   bc2a6:	2300      	movs	r3, #0
   bc2a8:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   bc2aa:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   bc2ac:	4604      	mov	r4, r0
   bc2ae:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   bc2b0:	b12b      	cbz	r3, bc2be <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   bc2b2:	2202      	movs	r2, #2
   bc2b4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   bc2b6:	68eb      	ldr	r3, [r5, #12]
   bc2b8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   bc2ba:	68ab      	ldr	r3, [r5, #8]
   bc2bc:	60a3      	str	r3, [r4, #8]
    }
   bc2be:	4620      	mov	r0, r4
   bc2c0:	bd38      	pop	{r3, r4, r5, pc}
	...

000bc2c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   bc2c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   bc2c6:	b089      	sub	sp, #36	; 0x24
   bc2c8:	4604      	mov	r4, r0
   bc2ca:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   bc2cc:	a801      	add	r0, sp, #4
   bc2ce:	4611      	mov	r1, r2
   bc2d0:	f7ff fe54 	bl	bbf7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   bc2d4:	b1a4      	cbz	r4, bc300 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   bc2d6:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   bc2d8:	b11d      	cbz	r5, bc2e2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   bc2da:	4628      	mov	r0, r5
   bc2dc:	f001 fbc6 	bl	bda6c <strdup>
   bc2e0:	4605      	mov	r5, r0
   bc2e2:	a801      	add	r0, sp, #4
   bc2e4:	a903      	add	r1, sp, #12
        type_(type) {
   bc2e6:	9503      	str	r5, [sp, #12]
   bc2e8:	f8ad 4010 	strh.w	r4, [sp, #16]
   bc2ec:	f7ff fea6 	bl	bc03c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   bc2f0:	a803      	add	r0, sp, #12
   bc2f2:	f7ff fe10 	bl	bbf16 <_ZN8particle5ErrorD1Ev>
   bc2f6:	a802      	add	r0, sp, #8
   bc2f8:	f7fd fef5 	bl	ba0e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   bc2fc:	b009      	add	sp, #36	; 0x24
   bc2fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   bc300:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   bc302:	2301      	movs	r3, #1
   bc304:	e8d5 2f4f 	ldrexb	r2, [r5]
   bc308:	2a00      	cmp	r2, #0
   bc30a:	d103      	bne.n	bc314 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   bc30c:	e8c5 3f41 	strexb	r1, r3, [r5]
   bc310:	2900      	cmp	r1, #0
   bc312:	d1f7      	bne.n	bc304 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   bc314:	d1ef      	bne.n	bc2f6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   bc316:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   bc318:	f3bf 8f5b 	dmb	ish
   bc31c:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   bc31e:	1d2b      	adds	r3, r5, #4
   bc320:	f3bf 8f5b 	dmb	ish
   bc324:	e853 6f00 	ldrex	r6, [r3]
   bc328:	e843 4200 	strex	r2, r4, [r3]
   bc32c:	2a00      	cmp	r2, #0
   bc32e:	d1f9      	bne.n	bc324 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   bc330:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   bc334:	2e00      	cmp	r6, #0
   bc336:	d0de      	beq.n	bc2f6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   bc338:	4620      	mov	r0, r4
   bc33a:	f7fc fd31 	bl	b8da0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   bc33e:	4607      	mov	r7, r0
   bc340:	b160      	cbz	r0, bc35c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   bc342:	f105 010c 	add.w	r1, r5, #12
   bc346:	4630      	mov	r0, r6
   bc348:	f7ff fe43 	bl	bbfd2 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   bc34c:	4630      	mov	r0, r6
   bc34e:	f7f8 f83b 	bl	b43c8 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   bc352:	2110      	movs	r1, #16
   bc354:	4630      	mov	r0, r6
   bc356:	f7f7 fea2 	bl	b409e <_ZdlPvj>
   bc35a:	e7cc      	b.n	bc2f6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   bc35c:	4631      	mov	r1, r6
   bc35e:	a803      	add	r0, sp, #12
   bc360:	f7ff ffa0 	bl	bc2a4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   bc364:	7b2b      	ldrb	r3, [r5, #12]
   bc366:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   bc36a:	2010      	movs	r0, #16
   bc36c:	f7f7 fe93 	bl	b4096 <_Znwj>
   bc370:	4605      	mov	r5, r0
   bc372:	b1d0      	cbz	r0, bc3aa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   bc374:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bc376:	2014      	movs	r0, #20
   bc378:	f7f7 fe8d 	bl	b4096 <_Znwj>
   bc37c:	4604      	mov	r4, r0
   bc37e:	b178      	cbz	r0, bc3a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   bc380:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   bc382:	4601      	mov	r1, r0
   bc384:	a803      	add	r0, sp, #12
   bc386:	f7fe fd87 	bl	bae98 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc38a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   bc38c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   bc38e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   bc390:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   bc392:	9205      	str	r2, [sp, #20]
   bc394:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   bc396:	60e3      	str	r3, [r4, #12]
   bc398:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   bc39c:	9206      	str	r2, [sp, #24]
   bc39e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   bc3a0:	4b06      	ldr	r3, [pc, #24]	; (bc3bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   bc3a2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   bc3a4:	4b06      	ldr	r3, [pc, #24]	; (bc3c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   bc3a6:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   bc3a8:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   bc3aa:	a803      	add	r0, sp, #12
   bc3ac:	f7f8 f80c 	bl	b43c8 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   bc3b0:	2200      	movs	r2, #0
   bc3b2:	4629      	mov	r1, r5
   bc3b4:	4803      	ldr	r0, [pc, #12]	; (bc3c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   bc3b6:	f7fc fcfb 	bl	b8db0 <application_thread_invoke>
   bc3ba:	e7c7      	b.n	bc34c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   bc3bc:	000bbfe5 	.word	0x000bbfe5
   bc3c0:	000bc3c9 	.word	0x000bc3c9
   bc3c4:	000bc7ab 	.word	0x000bc7ab

000bc3c8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   bc3c8:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   bc3ca:	b570      	push	{r4, r5, r6, lr}
   bc3cc:	4604      	mov	r4, r0
	switch (__op)
   bc3ce:	d103      	bne.n	bc3d8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   bc3d0:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   bc3d2:	6003      	str	r3, [r0, #0]
      }
   bc3d4:	2000      	movs	r0, #0
   bc3d6:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   bc3d8:	2a02      	cmp	r2, #2
   bc3da:	d00c      	beq.n	bc3f6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   bc3dc:	2a03      	cmp	r2, #3
   bc3de:	d1f9      	bne.n	bc3d4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   bc3e0:	6804      	ldr	r4, [r0, #0]
   bc3e2:	2c00      	cmp	r4, #0
   bc3e4:	d0f6      	beq.n	bc3d4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   bc3e6:	4620      	mov	r0, r4
   bc3e8:	f7f7 ffee 	bl	b43c8 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   bc3ec:	2114      	movs	r1, #20
   bc3ee:	4620      	mov	r0, r4
   bc3f0:	f7f7 fe55 	bl	b409e <_ZdlPvj>
   bc3f4:	e7ee      	b.n	bc3d4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   bc3f6:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   bc3f8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   bc3fa:	f7f7 fe4c 	bl	b4096 <_Znwj>
   bc3fe:	4605      	mov	r5, r0
   bc400:	b120      	cbz	r0, bc40c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   bc402:	4631      	mov	r1, r6
   bc404:	f7ff ff4e 	bl	bc2a4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   bc408:	7c33      	ldrb	r3, [r6, #16]
   bc40a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   bc40c:	6025      	str	r5, [r4, #0]
	}
   bc40e:	e7e1      	b.n	bc3d4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000bc410 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   bc410:	4770      	bx	lr

000bc412 <_ZN9IPAddressD0Ev>:
   bc412:	b510      	push	{r4, lr}
   bc414:	2118      	movs	r1, #24
   bc416:	4604      	mov	r4, r0
   bc418:	f7f7 fe41 	bl	b409e <_ZdlPvj>
   bc41c:	4620      	mov	r0, r4
   bc41e:	bd10      	pop	{r4, pc}

000bc420 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   bc420:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   bc422:	7d03      	ldrb	r3, [r0, #20]
   bc424:	2b06      	cmp	r3, #6
{
   bc426:	b08d      	sub	sp, #52	; 0x34
   bc428:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bc42a:	f100 0704 	add.w	r7, r0, #4
   bc42e:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   bc432:	d012      	beq.n	bc45a <_ZNK9IPAddress7printToER5Print+0x3a>
   bc434:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   bc438:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   bc43c:	220a      	movs	r2, #10
   bc43e:	4630      	mov	r0, r6
   bc440:	f7ff fb59 	bl	bbaf6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   bc444:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   bc446:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   bc448:	d019      	beq.n	bc47e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   bc44a:	2c00      	cmp	r4, #0
   bc44c:	d0f4      	beq.n	bc438 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   bc44e:	212e      	movs	r1, #46	; 0x2e
   bc450:	4630      	mov	r0, r6
   bc452:	f7ff fb37 	bl	bbac4 <_ZN5Print5printEc>
   bc456:	4404      	add	r4, r0
   bc458:	e7ee      	b.n	bc438 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bc45a:	232f      	movs	r3, #47	; 0x2f
   bc45c:	466a      	mov	r2, sp
   bc45e:	4639      	mov	r1, r7
   bc460:	200a      	movs	r0, #10
		buf[0] = 0;
   bc462:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   bc466:	f7fc fb43 	bl	b8af0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   bc46a:	4668      	mov	r0, sp
   bc46c:	f001 fb1b 	bl	bdaa6 <strlen>
   bc470:	6833      	ldr	r3, [r6, #0]
   bc472:	4602      	mov	r2, r0
   bc474:	68db      	ldr	r3, [r3, #12]
   bc476:	4669      	mov	r1, sp
   bc478:	4630      	mov	r0, r6
   bc47a:	4798      	blx	r3
   bc47c:	4604      	mov	r4, r0
    }
    return n;
}
   bc47e:	4620      	mov	r0, r4
   bc480:	b00d      	add	sp, #52	; 0x34
   bc482:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bc484 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   bc484:	b510      	push	{r4, lr}
   bc486:	4b05      	ldr	r3, [pc, #20]	; (bc49c <_ZN9IPAddressC1Ev+0x18>)
   bc488:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   bc48a:	2211      	movs	r2, #17
   bc48c:	f840 3b04 	str.w	r3, [r0], #4
   bc490:	2100      	movs	r1, #0
   bc492:	f001 fa92 	bl	bd9ba <memset>
}
   bc496:	4620      	mov	r0, r4
   bc498:	bd10      	pop	{r4, pc}
   bc49a:	bf00      	nop
   bc49c:	000c0f70 	.word	0x000c0f70

000bc4a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   bc4a0:	4603      	mov	r3, r0
   bc4a2:	4a07      	ldr	r2, [pc, #28]	; (bc4c0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   bc4a4:	b510      	push	{r4, lr}
   bc4a6:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   bc4aa:	f101 0210 	add.w	r2, r1, #16
   bc4ae:	f851 4b04 	ldr.w	r4, [r1], #4
   bc4b2:	f843 4b04 	str.w	r4, [r3], #4
   bc4b6:	4291      	cmp	r1, r2
   bc4b8:	d1f9      	bne.n	bc4ae <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   bc4ba:	780a      	ldrb	r2, [r1, #0]
   bc4bc:	701a      	strb	r2, [r3, #0]
}
   bc4be:	bd10      	pop	{r4, pc}
   bc4c0:	000c0f70 	.word	0x000c0f70

000bc4c4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   bc4c4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   bc4c6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   bc4ca:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   bc4ce:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   bc4d2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   bc4d6:	2304      	movs	r3, #4
   bc4d8:	6041      	str	r1, [r0, #4]
   bc4da:	7503      	strb	r3, [r0, #20]
}
   bc4dc:	bd10      	pop	{r4, pc}
	...

000bc4e0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   bc4e0:	b507      	push	{r0, r1, r2, lr}
   bc4e2:	4b06      	ldr	r3, [pc, #24]	; (bc4fc <_ZN9IPAddressC1EPKh+0x1c>)
   bc4e4:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   bc4e6:	78cb      	ldrb	r3, [r1, #3]
   bc4e8:	9300      	str	r3, [sp, #0]
   bc4ea:	788b      	ldrb	r3, [r1, #2]
   bc4ec:	784a      	ldrb	r2, [r1, #1]
   bc4ee:	7809      	ldrb	r1, [r1, #0]
   bc4f0:	f7ff ffe8 	bl	bc4c4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   bc4f4:	b003      	add	sp, #12
   bc4f6:	f85d fb04 	ldr.w	pc, [sp], #4
   bc4fa:	bf00      	nop
   bc4fc:	000c0f70 	.word	0x000c0f70

000bc500 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bc500:	7441      	strb	r1, [r0, #17]
}
   bc502:	4770      	bx	lr

000bc504 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bc504:	4770      	bx	lr

000bc506 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   bc506:	4770      	bx	lr

000bc508 <_ZN9USBSerial4readEv>:
{
   bc508:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   bc50a:	2100      	movs	r1, #0
   bc50c:	7c00      	ldrb	r0, [r0, #16]
   bc50e:	f7fc fc07 	bl	b8d20 <HAL_USB_USART_Receive_Data>
}
   bc512:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bc516:	bd08      	pop	{r3, pc}

000bc518 <_ZN9USBSerial4peekEv>:
{
   bc518:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   bc51a:	2101      	movs	r1, #1
   bc51c:	7c00      	ldrb	r0, [r0, #16]
   bc51e:	f7fc fbff 	bl	b8d20 <HAL_USB_USART_Receive_Data>
}
   bc522:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bc526:	bd08      	pop	{r3, pc}

000bc528 <_ZN9USBSerial17availableForWriteEv>:
{
   bc528:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   bc52a:	7c00      	ldrb	r0, [r0, #16]
   bc52c:	f7fc fbf0 	bl	b8d10 <HAL_USB_USART_Available_Data_For_Write>
}
   bc530:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bc534:	bd08      	pop	{r3, pc}

000bc536 <_ZN9USBSerial9availableEv>:
{
   bc536:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   bc538:	7c00      	ldrb	r0, [r0, #16]
   bc53a:	f7fc fbe1 	bl	b8d00 <HAL_USB_USART_Available_Data>
}
   bc53e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bc542:	bd08      	pop	{r3, pc}

000bc544 <_ZN9USBSerial5writeEh>:
{
   bc544:	b513      	push	{r0, r1, r4, lr}
   bc546:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bc548:	7c00      	ldrb	r0, [r0, #16]
{
   bc54a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bc54c:	f7fc fbe0 	bl	b8d10 <HAL_USB_USART_Available_Data_For_Write>
   bc550:	2800      	cmp	r0, #0
   bc552:	9901      	ldr	r1, [sp, #4]
   bc554:	dc01      	bgt.n	bc55a <_ZN9USBSerial5writeEh+0x16>
   bc556:	7c60      	ldrb	r0, [r4, #17]
   bc558:	b120      	cbz	r0, bc564 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   bc55a:	7c20      	ldrb	r0, [r4, #16]
   bc55c:	f7fc fbe8 	bl	b8d30 <HAL_USB_USART_Send_Data>
   bc560:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   bc564:	b002      	add	sp, #8
   bc566:	bd10      	pop	{r4, pc}

000bc568 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   bc568:	7c00      	ldrb	r0, [r0, #16]
   bc56a:	f7fc bbe9 	b.w	b8d40 <HAL_USB_USART_Flush_Data>

000bc56e <_ZN9USBSerialD0Ev>:
   bc56e:	b510      	push	{r4, lr}
   bc570:	2114      	movs	r1, #20
   bc572:	4604      	mov	r4, r0
   bc574:	f7f7 fd93 	bl	b409e <_ZdlPvj>
   bc578:	4620      	mov	r0, r4
   bc57a:	bd10      	pop	{r4, pc}

000bc57c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   bc57c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   bc57e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bc582:	4604      	mov	r4, r0
   bc584:	4608      	mov	r0, r1
   bc586:	2100      	movs	r1, #0
   bc588:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bc58c:	4b04      	ldr	r3, [pc, #16]	; (bc5a0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   bc58e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bc590:	2301      	movs	r3, #1
  _serial = serial;
   bc592:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bc594:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   bc596:	4611      	mov	r1, r2
   bc598:	f7fc fba2 	bl	b8ce0 <HAL_USB_USART_Init>
}
   bc59c:	4620      	mov	r0, r4
   bc59e:	bd10      	pop	{r4, pc}
   bc5a0:	000c0f84 	.word	0x000c0f84

000bc5a4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   bc5a4:	7c00      	ldrb	r0, [r0, #16]
   bc5a6:	2200      	movs	r2, #0
   bc5a8:	f7fc bba2 	b.w	b8cf0 <HAL_USB_USART_Begin>

000bc5ac <_Z19acquireSerialBufferv>:
{
   bc5ac:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   bc5ae:	2214      	movs	r2, #20
{
   bc5b0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   bc5b2:	2100      	movs	r1, #0
   bc5b4:	f001 fa01 	bl	bd9ba <memset>
}
   bc5b8:	4620      	mov	r0, r4
   bc5ba:	bd10      	pop	{r4, pc}

000bc5bc <_Z16_fetch_usbserialv>:
{
   bc5bc:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bc5be:	4c0f      	ldr	r4, [pc, #60]	; (bc5fc <_Z16_fetch_usbserialv+0x40>)
{
   bc5c0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   bc5c2:	a803      	add	r0, sp, #12
   bc5c4:	f7ff fff2 	bl	bc5ac <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bc5c8:	7821      	ldrb	r1, [r4, #0]
   bc5ca:	f3bf 8f5b 	dmb	ish
   bc5ce:	f011 0101 	ands.w	r1, r1, #1
   bc5d2:	d10f      	bne.n	bc5f4 <_Z16_fetch_usbserialv+0x38>
   bc5d4:	4620      	mov	r0, r4
   bc5d6:	9101      	str	r1, [sp, #4]
   bc5d8:	f7f7 fd70 	bl	b40bc <__cxa_guard_acquire>
   bc5dc:	9901      	ldr	r1, [sp, #4]
   bc5de:	b148      	cbz	r0, bc5f4 <_Z16_fetch_usbserialv+0x38>
   bc5e0:	aa03      	add	r2, sp, #12
   bc5e2:	4807      	ldr	r0, [pc, #28]	; (bc600 <_Z16_fetch_usbserialv+0x44>)
   bc5e4:	f7ff ffca 	bl	bc57c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   bc5e8:	4620      	mov	r0, r4
   bc5ea:	f7f7 fd6c 	bl	b40c6 <__cxa_guard_release>
   bc5ee:	4805      	ldr	r0, [pc, #20]	; (bc604 <_Z16_fetch_usbserialv+0x48>)
   bc5f0:	f001 f99e 	bl	bd930 <atexit>
	return _usbserial;
}
   bc5f4:	4802      	ldr	r0, [pc, #8]	; (bc600 <_Z16_fetch_usbserialv+0x44>)
   bc5f6:	b008      	add	sp, #32
   bc5f8:	bd10      	pop	{r4, pc}
   bc5fa:	bf00      	nop
   bc5fc:	2003e6d8 	.word	0x2003e6d8
   bc600:	2003e6dc 	.word	0x2003e6dc
   bc604:	000bc505 	.word	0x000bc505

000bc608 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   bc608:	4700      	bx	r0
	...

000bc60c <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   bc60c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {};
   bc610:	2400      	movs	r4, #0
{
   bc612:	461d      	mov	r5, r3
   bc614:	460f      	mov	r7, r1
   bc616:	4690      	mov	r8, r2
   bc618:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   bc61a:	f7fc f925 	bl	b8868 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   bc61e:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bc620:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {};
   bc624:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   bc628:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {};
   bc62c:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   bc630:	bfa2      	ittt	ge
   bc632:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   bc636:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   bc63a:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bc63c:	4907      	ldr	r1, [pc, #28]	; (bc65c <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   bc63e:	9400      	str	r4, [sp, #0]
   bc640:	4643      	mov	r3, r8
   bc642:	463a      	mov	r2, r7
   bc644:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   bc646:	bfa8      	it	ge
   bc648:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   bc64c:	f7fc f904 	bl	b8858 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   bc650:	fab0 f080 	clz	r0, r0
   bc654:	0940      	lsrs	r0, r0, #5
   bc656:	b004      	add	sp, #16
   bc658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bc65c:	000bc609 	.word	0x000bc609

000bc660 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   bc660:	2200      	movs	r2, #0
   bc662:	6840      	ldr	r0, [r0, #4]
   bc664:	4611      	mov	r1, r2
   bc666:	f7fc bbdf 	b.w	b8e28 <network_ready>

000bc66a <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   bc66a:	2200      	movs	r2, #0
   bc66c:	6840      	ldr	r0, [r0, #4]
   bc66e:	4611      	mov	r1, r2
   bc670:	f7fc bbfa 	b.w	b8e68 <network_listening>

000bc674 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   bc674:	2200      	movs	r2, #0
   bc676:	6840      	ldr	r0, [r0, #4]
   bc678:	4611      	mov	r1, r2
   bc67a:	f7fc bc05 	b.w	b8e88 <network_get_listen_timeout>

000bc67e <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   bc67e:	6840      	ldr	r0, [r0, #4]
   bc680:	2200      	movs	r2, #0
   bc682:	f7fc bbf9 	b.w	b8e78 <network_set_listen_timeout>

000bc686 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   bc686:	6840      	ldr	r0, [r0, #4]
   bc688:	2200      	movs	r2, #0
   bc68a:	f081 0101 	eor.w	r1, r1, #1
   bc68e:	f7fc bbe3 	b.w	b8e58 <network_listen>

000bc692 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   bc692:	2300      	movs	r3, #0
   bc694:	6840      	ldr	r0, [r0, #4]
   bc696:	461a      	mov	r2, r3
   bc698:	4619      	mov	r1, r3
   bc69a:	f7fc bbd5 	b.w	b8e48 <network_off>

000bc69e <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   bc69e:	2300      	movs	r3, #0
   bc6a0:	6840      	ldr	r0, [r0, #4]
   bc6a2:	461a      	mov	r2, r3
   bc6a4:	4619      	mov	r1, r3
   bc6a6:	f7fc bbc7 	b.w	b8e38 <network_on>

000bc6aa <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   bc6aa:	2200      	movs	r2, #0
   bc6ac:	6840      	ldr	r0, [r0, #4]
   bc6ae:	4611      	mov	r1, r2
   bc6b0:	f7fc bbaa 	b.w	b8e08 <network_connecting>

000bc6b4 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   bc6b4:	6840      	ldr	r0, [r0, #4]
   bc6b6:	2200      	movs	r2, #0
   bc6b8:	2102      	movs	r1, #2
   bc6ba:	f7fc bbad 	b.w	b8e18 <network_disconnect>

000bc6be <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   bc6be:	2300      	movs	r3, #0
   bc6c0:	6840      	ldr	r0, [r0, #4]
   bc6c2:	461a      	mov	r2, r3
   bc6c4:	f7fc bb98 	b.w	b8df8 <network_connect>

000bc6c8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   bc6c8:	4b08      	ldr	r3, [pc, #32]	; (bc6ec <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   bc6ca:	b510      	push	{r4, lr}
   bc6cc:	2428      	movs	r4, #40	; 0x28
   bc6ce:	4622      	mov	r2, r4
   bc6d0:	4618      	mov	r0, r3
   bc6d2:	2100      	movs	r1, #0
   bc6d4:	f001 f971 	bl	bd9ba <memset>
   bc6d8:	4b05      	ldr	r3, [pc, #20]	; (bc6f0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   bc6da:	8004      	strh	r4, [r0, #0]
        cid = -1;
   bc6dc:	f04f 32ff 	mov.w	r2, #4294967295
   bc6e0:	6042      	str	r2, [r0, #4]
   bc6e2:	2204      	movs	r2, #4
   bc6e4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   bc6e6:	4a03      	ldr	r2, [pc, #12]	; (bc6f4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   bc6e8:	601a      	str	r2, [r3, #0]
   bc6ea:	bd10      	pop	{r4, pc}
   bc6ec:	2003e6f8 	.word	0x2003e6f8
   bc6f0:	2003e6f0 	.word	0x2003e6f0
   bc6f4:	000c0fb4 	.word	0x000c0fb4

000bc6f8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bc6f8:	4770      	bx	lr

000bc6fa <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bc6fa:	7441      	strb	r1, [r0, #17]
}
   bc6fc:	4770      	bx	lr

000bc6fe <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bc6fe:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bc700:	7c00      	ldrb	r0, [r0, #16]
   bc702:	f7fc fa2d 	bl	b8b60 <hal_usart_available_data_for_write>
}
   bc706:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bc70a:	bd08      	pop	{r3, pc}

000bc70c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bc70c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bc70e:	7c00      	ldrb	r0, [r0, #16]
   bc710:	f7fc f9fe 	bl	b8b10 <hal_usart_available>
}
   bc714:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bc718:	bd08      	pop	{r3, pc}

000bc71a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   bc71a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   bc71c:	7c00      	ldrb	r0, [r0, #16]
   bc71e:	f7fc fa07 	bl	b8b30 <hal_usart_peek>
}
   bc722:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bc726:	bd08      	pop	{r3, pc}

000bc728 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   bc728:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   bc72a:	7c00      	ldrb	r0, [r0, #16]
   bc72c:	f7fc f9f8 	bl	b8b20 <hal_usart_read>
}
   bc730:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bc734:	bd08      	pop	{r3, pc}

000bc736 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   bc736:	7c00      	ldrb	r0, [r0, #16]
   bc738:	f7fc ba02 	b.w	b8b40 <hal_usart_flush>

000bc73c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   bc73c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bc73e:	7c45      	ldrb	r5, [r0, #17]
{
   bc740:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bc742:	b12d      	cbz	r5, bc750 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   bc744:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   bc746:	b003      	add	sp, #12
   bc748:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   bc74c:	f7fc b9d8 	b.w	b8b00 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bc750:	7c00      	ldrb	r0, [r0, #16]
   bc752:	9101      	str	r1, [sp, #4]
   bc754:	f7fc fa04 	bl	b8b60 <hal_usart_available_data_for_write>
   bc758:	2800      	cmp	r0, #0
   bc75a:	9901      	ldr	r1, [sp, #4]
   bc75c:	dcf2      	bgt.n	bc744 <_ZN11USARTSerial5writeEh+0x8>
}
   bc75e:	4628      	mov	r0, r5
   bc760:	b003      	add	sp, #12
   bc762:	bd30      	pop	{r4, r5, pc}

000bc764 <_ZN11USARTSerialD0Ev>:
   bc764:	b510      	push	{r4, lr}
   bc766:	2114      	movs	r1, #20
   bc768:	4604      	mov	r4, r0
   bc76a:	f7f7 fc98 	bl	b409e <_ZdlPvj>
   bc76e:	4620      	mov	r0, r4
   bc770:	bd10      	pop	{r4, pc}
	...

000bc774 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   bc774:	b510      	push	{r4, lr}
   bc776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bc77a:	4604      	mov	r4, r0
   bc77c:	4608      	mov	r0, r1
   bc77e:	4611      	mov	r1, r2
   bc780:	2200      	movs	r2, #0
   bc782:	e9c4 2301 	strd	r2, r3, [r4, #4]
   bc786:	4b04      	ldr	r3, [pc, #16]	; (bc798 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   bc788:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bc78a:	2301      	movs	r3, #1
  _serial = serial;
   bc78c:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bc78e:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   bc790:	f7fc f9f6 	bl	b8b80 <hal_usart_init_ex>
}
   bc794:	4620      	mov	r0, r4
   bc796:	bd10      	pop	{r4, pc}
   bc798:	000c0ff0 	.word	0x000c0ff0

000bc79c <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   bc79c:	7c00      	ldrb	r0, [r0, #16]
   bc79e:	2300      	movs	r3, #0
   bc7a0:	f7fc b9e6 	b.w	b8b70 <hal_usart_begin_config>

000bc7a4 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   bc7a4:	2200      	movs	r2, #0
   bc7a6:	f7ff bff9 	b.w	bc79c <_ZN11USARTSerial5beginEmm>

000bc7aa <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   bc7aa:	b510      	push	{r4, lr}
      if (_M_empty())
   bc7ac:	6883      	ldr	r3, [r0, #8]
   bc7ae:	4604      	mov	r4, r0
   bc7b0:	b90b      	cbnz	r3, bc7b6 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   bc7b2:	f000 fa31 	bl	bcc18 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   bc7b6:	68c3      	ldr	r3, [r0, #12]
   bc7b8:	4798      	blx	r3
      if (_M_manager)
   bc7ba:	68a3      	ldr	r3, [r4, #8]
   bc7bc:	b11b      	cbz	r3, bc7c6 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   bc7be:	2203      	movs	r2, #3
   bc7c0:	4621      	mov	r1, r4
   bc7c2:	4620      	mov	r0, r4
   bc7c4:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   bc7c6:	4620      	mov	r0, r4
   bc7c8:	2110      	movs	r1, #16
}
   bc7ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   bc7ce:	f7f7 bc66 	b.w	b409e <_ZdlPvj>

000bc7d2 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   bc7d2:	4770      	bx	lr

000bc7d4 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   bc7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bc7d6:	4606      	mov	r6, r0
   bc7d8:	4615      	mov	r5, r2
   bc7da:	460c      	mov	r4, r1
   bc7dc:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   bc7de:	42bc      	cmp	r4, r7
   bc7e0:	d006      	beq.n	bc7f0 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   bc7e2:	6833      	ldr	r3, [r6, #0]
   bc7e4:	f814 1b01 	ldrb.w	r1, [r4], #1
   bc7e8:	689b      	ldr	r3, [r3, #8]
   bc7ea:	4630      	mov	r0, r6
   bc7ec:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   bc7ee:	e7f6      	b.n	bc7de <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   bc7f0:	4628      	mov	r0, r5
   bc7f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000bc7f4 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   bc7f4:	7c00      	ldrb	r0, [r0, #16]
   bc7f6:	2200      	movs	r2, #0
   bc7f8:	f7fc b9ea 	b.w	b8bd0 <hal_i2c_write>

000bc7fc <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   bc7fc:	7c00      	ldrb	r0, [r0, #16]
   bc7fe:	2100      	movs	r1, #0
   bc800:	f7fc b9ee 	b.w	b8be0 <hal_i2c_available>

000bc804 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   bc804:	7c00      	ldrb	r0, [r0, #16]
   bc806:	2100      	movs	r1, #0
   bc808:	f7fc b9f2 	b.w	b8bf0 <hal_i2c_read>

000bc80c <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   bc80c:	7c00      	ldrb	r0, [r0, #16]
   bc80e:	2100      	movs	r1, #0
   bc810:	f7fc b9f6 	b.w	b8c00 <hal_i2c_peek>

000bc814 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   bc814:	7c00      	ldrb	r0, [r0, #16]
   bc816:	2100      	movs	r1, #0
   bc818:	f7fc b9fa 	b.w	b8c10 <hal_i2c_flush>

000bc81c <_ZN7TwoWireD0Ev>:
   bc81c:	b510      	push	{r4, lr}
   bc81e:	2114      	movs	r1, #20
   bc820:	4604      	mov	r4, r0
   bc822:	f7f7 fc3c 	bl	b409e <_ZdlPvj>
   bc826:	4620      	mov	r0, r4
   bc828:	bd10      	pop	{r4, pc}
	...

000bc82c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   bc82c:	b510      	push	{r4, lr}
   bc82e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bc832:	4604      	mov	r4, r0
   bc834:	4608      	mov	r0, r1
   bc836:	2100      	movs	r1, #0
   bc838:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bc83c:	4b03      	ldr	r3, [pc, #12]	; (bc84c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   bc83e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   bc840:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   bc842:	4611      	mov	r1, r2
   bc844:	f7fc f9f4 	bl	b8c30 <hal_i2c_init>
}
   bc848:	4620      	mov	r0, r4
   bc84a:	bd10      	pop	{r4, pc}
   bc84c:	000c1020 	.word	0x000c1020

000bc850 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   bc850:	7c00      	ldrb	r0, [r0, #16]
   bc852:	2200      	movs	r2, #0
   bc854:	f7fc b99c 	b.w	b8b90 <hal_i2c_set_speed>

000bc858 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   bc858:	2300      	movs	r3, #0
   bc85a:	7c00      	ldrb	r0, [r0, #16]
   bc85c:	461a      	mov	r2, r3
   bc85e:	4619      	mov	r1, r3
   bc860:	f7fc b99e 	b.w	b8ba0 <hal_i2c_begin>

000bc864 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   bc864:	7c00      	ldrb	r0, [r0, #16]
   bc866:	2200      	movs	r2, #0
   bc868:	f7fc b9a2 	b.w	b8bb0 <hal_i2c_begin_transmission>

000bc86c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   bc86c:	b2c9      	uxtb	r1, r1
   bc86e:	f7ff bff9 	b.w	bc864 <_ZN7TwoWire17beginTransmissionEh>

000bc872 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   bc872:	7c00      	ldrb	r0, [r0, #16]
   bc874:	2200      	movs	r2, #0
   bc876:	f7fc b9a3 	b.w	b8bc0 <hal_i2c_end_transmission>

000bc87a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   bc87a:	2101      	movs	r1, #1
   bc87c:	f7ff bff9 	b.w	bc872 <_ZN7TwoWire15endTransmissionEh>

000bc880 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   bc880:	2300      	movs	r3, #0
   bc882:	6840      	ldr	r0, [r0, #4]
   bc884:	461a      	mov	r2, r3
   bc886:	f7fc bab7 	b.w	b8df8 <network_connect>

000bc88a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   bc88a:	6840      	ldr	r0, [r0, #4]
   bc88c:	2200      	movs	r2, #0
   bc88e:	2102      	movs	r1, #2
   bc890:	f7fc bac2 	b.w	b8e18 <network_disconnect>

000bc894 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   bc894:	2200      	movs	r2, #0
   bc896:	6840      	ldr	r0, [r0, #4]
   bc898:	4611      	mov	r1, r2
   bc89a:	f7fc bab5 	b.w	b8e08 <network_connecting>

000bc89e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   bc89e:	2200      	movs	r2, #0
   bc8a0:	6840      	ldr	r0, [r0, #4]
   bc8a2:	4611      	mov	r1, r2
   bc8a4:	f7fc bac0 	b.w	b8e28 <network_ready>

000bc8a8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   bc8a8:	2300      	movs	r3, #0
   bc8aa:	6840      	ldr	r0, [r0, #4]
   bc8ac:	461a      	mov	r2, r3
   bc8ae:	4619      	mov	r1, r3
   bc8b0:	f7fc bac2 	b.w	b8e38 <network_on>

000bc8b4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   bc8b4:	2300      	movs	r3, #0
   bc8b6:	6840      	ldr	r0, [r0, #4]
   bc8b8:	461a      	mov	r2, r3
   bc8ba:	4619      	mov	r1, r3
   bc8bc:	f7fc bac4 	b.w	b8e48 <network_off>

000bc8c0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   bc8c0:	6840      	ldr	r0, [r0, #4]
   bc8c2:	2100      	movs	r1, #0
   bc8c4:	f7fc bae8 	b.w	b8e98 <network_is_on>

000bc8c8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   bc8c8:	6840      	ldr	r0, [r0, #4]
   bc8ca:	2100      	movs	r1, #0
   bc8cc:	f7fc baec 	b.w	b8ea8 <network_is_off>

000bc8d0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   bc8d0:	6840      	ldr	r0, [r0, #4]
   bc8d2:	2200      	movs	r2, #0
   bc8d4:	f081 0101 	eor.w	r1, r1, #1
   bc8d8:	f7fc babe 	b.w	b8e58 <network_listen>

000bc8dc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   bc8dc:	6840      	ldr	r0, [r0, #4]
   bc8de:	2200      	movs	r2, #0
   bc8e0:	f7fc baca 	b.w	b8e78 <network_set_listen_timeout>

000bc8e4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   bc8e4:	2200      	movs	r2, #0
   bc8e6:	6840      	ldr	r0, [r0, #4]
   bc8e8:	4611      	mov	r1, r2
   bc8ea:	f7fc bacd 	b.w	b8e88 <network_get_listen_timeout>

000bc8ee <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   bc8ee:	2200      	movs	r2, #0
   bc8f0:	6840      	ldr	r0, [r0, #4]
   bc8f2:	4611      	mov	r1, r2
   bc8f4:	f7fc bab8 	b.w	b8e68 <network_listening>

000bc8f8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   bc8f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bc8fc:	b095      	sub	sp, #84	; 0x54
   bc8fe:	4614      	mov	r4, r2
   bc900:	460d      	mov	r5, r1
   bc902:	4607      	mov	r7, r0
    IPAddress addr;
   bc904:	f7ff fdbe 	bl	bc484 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   bc908:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   bc90a:	221c      	movs	r2, #28
   bc90c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   bc90e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   bc910:	f001 f853 	bl	bd9ba <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   bc914:	2340      	movs	r3, #64	; 0x40
   bc916:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   bc918:	4620      	mov	r0, r4
   bc91a:	466b      	mov	r3, sp
   bc91c:	aa0c      	add	r2, sp, #48	; 0x30
   bc91e:	2100      	movs	r1, #0
   bc920:	f7fb ff72 	bl	b8808 <netdb_getaddrinfo>
    if (!r) {
   bc924:	4604      	mov	r4, r0
   bc926:	2800      	cmp	r0, #0
   bc928:	d14b      	bne.n	bc9c2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bc92a:	4602      	mov	r2, r0
   bc92c:	2101      	movs	r1, #1
   bc92e:	6868      	ldr	r0, [r5, #4]
   bc930:	f7fc fa7a 	bl	b8e28 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bc934:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   bc936:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bc938:	4622      	mov	r2, r4
   bc93a:	6868      	ldr	r0, [r5, #4]
   bc93c:	f7fc fa74 	bl	b8e28 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bc940:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   bc942:	4681      	mov	r9, r0
        bool ok = false;
   bc944:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bc946:	2e00      	cmp	r6, #0
   bc948:	d03b      	beq.n	bc9c2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   bc94a:	2900      	cmp	r1, #0
   bc94c:	d139      	bne.n	bc9c2 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   bc94e:	6873      	ldr	r3, [r6, #4]
   bc950:	2b02      	cmp	r3, #2
   bc952:	d003      	beq.n	bc95c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   bc954:	2b0a      	cmp	r3, #10
   bc956:	d011      	beq.n	bc97c <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   bc958:	69f6      	ldr	r6, [r6, #28]
   bc95a:	e7f4      	b.n	bc946 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   bc95c:	f1b8 0f00 	cmp.w	r8, #0
   bc960:	d0fa      	beq.n	bc958 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   bc962:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   bc964:	a806      	add	r0, sp, #24
   bc966:	3104      	adds	r1, #4
class IPAddress : public Printable {
   bc968:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   bc96a:	f7ff fdb9 	bl	bc4e0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   bc96e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bc970:	1d3c      	adds	r4, r7, #4
   bc972:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bc974:	682b      	ldr	r3, [r5, #0]
   bc976:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bc978:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   bc97a:	e7ed      	b.n	bc958 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   bc97c:	f1b9 0f00 	cmp.w	r9, #0
   bc980:	d0ea      	beq.n	bc958 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   bc982:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   bc984:	2210      	movs	r2, #16
   bc986:	a801      	add	r0, sp, #4
   bc988:	f001 f817 	bl	bd9ba <memset>
                    a.v = 6;
   bc98c:	2306      	movs	r3, #6
   bc98e:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   bc992:	ad01      	add	r5, sp, #4
   bc994:	f104 0308 	add.w	r3, r4, #8
   bc998:	3418      	adds	r4, #24
   bc99a:	6818      	ldr	r0, [r3, #0]
   bc99c:	6859      	ldr	r1, [r3, #4]
   bc99e:	462a      	mov	r2, r5
   bc9a0:	c203      	stmia	r2!, {r0, r1}
   bc9a2:	3308      	adds	r3, #8
   bc9a4:	42a3      	cmp	r3, r4
   bc9a6:	4615      	mov	r5, r2
   bc9a8:	d1f7      	bne.n	bc99a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   bc9aa:	a901      	add	r1, sp, #4
   bc9ac:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   bc9ae:	ad07      	add	r5, sp, #28
   bc9b0:	f7ff fd76 	bl	bc4a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   bc9b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   bc9b6:	1d3c      	adds	r4, r7, #4
   bc9b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   bc9ba:	682b      	ldr	r3, [r5, #0]
   bc9bc:	7023      	strb	r3, [r4, #0]
                    ok = true;
   bc9be:	4649      	mov	r1, r9
   bc9c0:	e7ca      	b.n	bc958 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   bc9c2:	9800      	ldr	r0, [sp, #0]
   bc9c4:	f7fb ff18 	bl	b87f8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   bc9c8:	4638      	mov	r0, r7
   bc9ca:	b015      	add	sp, #84	; 0x54
   bc9cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000bc9d0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   bc9d0:	4b02      	ldr	r3, [pc, #8]	; (bc9dc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   bc9d2:	4a03      	ldr	r2, [pc, #12]	; (bc9e0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   bc9d4:	601a      	str	r2, [r3, #0]
   bc9d6:	2200      	movs	r2, #0
   bc9d8:	605a      	str	r2, [r3, #4]

} // spark
   bc9da:	4770      	bx	lr
   bc9dc:	2003e720 	.word	0x2003e720
   bc9e0:	000c1048 	.word	0x000c1048

000bc9e4 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   bc9e4:	2825      	cmp	r0, #37	; 0x25
bool pinAvailable(uint16_t pin) {
   bc9e6:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   bc9e8:	d902      	bls.n	bc9f0 <pinAvailable+0xc>
    return false;
   bc9ea:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   bc9ec:	b002      	add	sp, #8
   bc9ee:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   bc9f0:	f1a0 030b 	sub.w	r3, r0, #11
   bc9f4:	2b02      	cmp	r3, #2
   bc9f6:	d81a      	bhi.n	bca2e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   bc9f8:	4c17      	ldr	r4, [pc, #92]	; (bca58 <pinAvailable+0x74>)
   bc9fa:	7821      	ldrb	r1, [r4, #0]
   bc9fc:	f3bf 8f5b 	dmb	ish
   bca00:	f011 0101 	ands.w	r1, r1, #1
   bca04:	d10b      	bne.n	bca1e <pinAvailable+0x3a>
   bca06:	4620      	mov	r0, r4
   bca08:	9101      	str	r1, [sp, #4]
   bca0a:	f7f7 fb57 	bl	b40bc <__cxa_guard_acquire>
   bca0e:	9901      	ldr	r1, [sp, #4]
   bca10:	b128      	cbz	r0, bca1e <pinAvailable+0x3a>
   bca12:	4812      	ldr	r0, [pc, #72]	; (bca5c <pinAvailable+0x78>)
   bca14:	f7fc fb2c 	bl	b9070 <_ZN8SPIClassC1E19hal_spi_interface_t>
   bca18:	4620      	mov	r0, r4
   bca1a:	f7f7 fb54 	bl	b40c6 <__cxa_guard_release>
   bca1e:	4b0f      	ldr	r3, [pc, #60]	; (bca5c <pinAvailable+0x78>)
   bca20:	7818      	ldrb	r0, [r3, #0]
   bca22:	f7fc f925 	bl	b8c70 <hal_spi_is_enabled>
   bca26:	2800      	cmp	r0, #0
   bca28:	d1df      	bne.n	bc9ea <pinAvailable+0x6>
  return true; // 'pin' is available
   bca2a:	2001      	movs	r0, #1
   bca2c:	e7de      	b.n	bc9ec <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   bca2e:	2801      	cmp	r0, #1
   bca30:	d809      	bhi.n	bca46 <pinAvailable+0x62>
   bca32:	f000 f8a9 	bl	bcb88 <_Z19__fetch_global_Wirev>
   bca36:	2100      	movs	r1, #0
   bca38:	7c00      	ldrb	r0, [r0, #16]
   bca3a:	f7fc f8f1 	bl	b8c20 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   bca3e:	f080 0001 	eor.w	r0, r0, #1
   bca42:	b2c0      	uxtb	r0, r0
   bca44:	e7d2      	b.n	bc9ec <pinAvailable+0x8>
   bca46:	3809      	subs	r0, #9
   bca48:	2801      	cmp	r0, #1
   bca4a:	d8ee      	bhi.n	bca2a <pinAvailable+0x46>
   bca4c:	f000 f860 	bl	bcb10 <_Z22__fetch_global_Serial1v>
   bca50:	7c00      	ldrb	r0, [r0, #16]
   bca52:	f7fc f87d 	bl	b8b50 <hal_usart_is_enabled>
   bca56:	e7f2      	b.n	bca3e <pinAvailable+0x5a>
   bca58:	2003e638 	.word	0x2003e638
   bca5c:	2003e63c 	.word	0x2003e63c

000bca60 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bca60:	2825      	cmp	r0, #37	; 0x25
{
   bca62:	b538      	push	{r3, r4, r5, lr}
   bca64:	4604      	mov	r4, r0
   bca66:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bca68:	d80a      	bhi.n	bca80 <pinMode+0x20>
   bca6a:	29ff      	cmp	r1, #255	; 0xff
   bca6c:	d008      	beq.n	bca80 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   bca6e:	f7ff ffb9 	bl	bc9e4 <pinAvailable>
   bca72:	b128      	cbz	r0, bca80 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   bca74:	4629      	mov	r1, r5
   bca76:	4620      	mov	r0, r4
}
   bca78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   bca7c:	f7fb becc 	b.w	b8818 <HAL_Pin_Mode>
}
   bca80:	bd38      	pop	{r3, r4, r5, pc}

000bca82 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   bca82:	b538      	push	{r3, r4, r5, lr}
   bca84:	4604      	mov	r4, r0
   bca86:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bca88:	f7fb fece 	bl	b8828 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   bca8c:	28ff      	cmp	r0, #255	; 0xff
   bca8e:	d010      	beq.n	bcab2 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   bca90:	2806      	cmp	r0, #6
   bca92:	d804      	bhi.n	bca9e <digitalWrite+0x1c>
   bca94:	234d      	movs	r3, #77	; 0x4d
   bca96:	fa23 f000 	lsr.w	r0, r3, r0
   bca9a:	07c3      	lsls	r3, r0, #31
   bca9c:	d409      	bmi.n	bcab2 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   bca9e:	4620      	mov	r0, r4
   bcaa0:	f7ff ffa0 	bl	bc9e4 <pinAvailable>
   bcaa4:	b128      	cbz	r0, bcab2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   bcaa6:	4629      	mov	r1, r5
   bcaa8:	4620      	mov	r0, r4
}
   bcaaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   bcaae:	f7fb bec3 	b.w	b8838 <HAL_GPIO_Write>
}
   bcab2:	bd38      	pop	{r3, r4, r5, pc}

000bcab4 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   bcab4:	b510      	push	{r4, lr}
   bcab6:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   bcab8:	f7fb feb6 	bl	b8828 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   bcabc:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   bcabe:	b2db      	uxtb	r3, r3
   bcac0:	2b01      	cmp	r3, #1
   bcac2:	d908      	bls.n	bcad6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   bcac4:	4620      	mov	r0, r4
   bcac6:	f7ff ff8d 	bl	bc9e4 <pinAvailable>
   bcaca:	b120      	cbz	r0, bcad6 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   bcacc:	4620      	mov	r0, r4
}
   bcace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   bcad2:	f7fb beb9 	b.w	b8848 <HAL_GPIO_Read>
}
   bcad6:	2000      	movs	r0, #0
   bcad8:	bd10      	pop	{r4, pc}

000bcada <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bcada:	4770      	bx	lr

000bcadc <_Z20acquireSerial1Bufferv>:
{
   bcadc:	b538      	push	{r3, r4, r5, lr}
   bcade:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bcae0:	2514      	movs	r5, #20
   bcae2:	462a      	mov	r2, r5
   bcae4:	2100      	movs	r1, #0
   bcae6:	f000 ff68 	bl	bd9ba <memset>
   bcaea:	8025      	strh	r5, [r4, #0]
   bcaec:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bcaee:	4907      	ldr	r1, [pc, #28]	; (bcb0c <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bcaf0:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bcaf2:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bcaf4:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bcaf6:	f000 f86b 	bl	bcbd0 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bcafa:	4904      	ldr	r1, [pc, #16]	; (bcb0c <_Z20acquireSerial1Bufferv+0x30>)
    };
   bcafc:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bcafe:	4628      	mov	r0, r5
   bcb00:	f000 f866 	bl	bcbd0 <_ZnajRKSt9nothrow_t>
    };
   bcb04:	60e0      	str	r0, [r4, #12]
}
   bcb06:	4620      	mov	r0, r4
   bcb08:	bd38      	pop	{r3, r4, r5, pc}
   bcb0a:	bf00      	nop
   bcb0c:	000c107c 	.word	0x000c107c

000bcb10 <_Z22__fetch_global_Serial1v>:
{
   bcb10:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bcb12:	4d0e      	ldr	r5, [pc, #56]	; (bcb4c <_Z22__fetch_global_Serial1v+0x3c>)
   bcb14:	7829      	ldrb	r1, [r5, #0]
   bcb16:	f3bf 8f5b 	dmb	ish
   bcb1a:	f011 0401 	ands.w	r4, r1, #1
{
   bcb1e:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bcb20:	d111      	bne.n	bcb46 <_Z22__fetch_global_Serial1v+0x36>
   bcb22:	4628      	mov	r0, r5
   bcb24:	f7f7 faca 	bl	b40bc <__cxa_guard_acquire>
   bcb28:	b168      	cbz	r0, bcb46 <_Z22__fetch_global_Serial1v+0x36>
   bcb2a:	a801      	add	r0, sp, #4
   bcb2c:	f7ff ffd6 	bl	bcadc <_Z20acquireSerial1Bufferv>
   bcb30:	aa01      	add	r2, sp, #4
   bcb32:	4621      	mov	r1, r4
   bcb34:	4806      	ldr	r0, [pc, #24]	; (bcb50 <_Z22__fetch_global_Serial1v+0x40>)
   bcb36:	f7ff fe1d 	bl	bc774 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bcb3a:	4628      	mov	r0, r5
   bcb3c:	f7f7 fac3 	bl	b40c6 <__cxa_guard_release>
   bcb40:	4804      	ldr	r0, [pc, #16]	; (bcb54 <_Z22__fetch_global_Serial1v+0x44>)
   bcb42:	f000 fef5 	bl	bd930 <atexit>
    return serial1;
}
   bcb46:	4802      	ldr	r0, [pc, #8]	; (bcb50 <_Z22__fetch_global_Serial1v+0x40>)
   bcb48:	b007      	add	sp, #28
   bcb4a:	bd30      	pop	{r4, r5, pc}
   bcb4c:	2003e728 	.word	0x2003e728
   bcb50:	2003e72c 	.word	0x2003e72c
   bcb54:	000bcadb 	.word	0x000bcadb

000bcb58 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bcb58:	4770      	bx	lr
	...

000bcb5c <_Z17acquireWireBufferv>:
{
   bcb5c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   bcb5e:	2520      	movs	r5, #32
   bcb60:	2314      	movs	r3, #20
{
   bcb62:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   bcb64:	6003      	str	r3, [r0, #0]
   bcb66:	6085      	str	r5, [r0, #8]
   bcb68:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bcb6a:	4906      	ldr	r1, [pc, #24]	; (bcb84 <_Z17acquireWireBufferv+0x28>)
   bcb6c:	4628      	mov	r0, r5
   bcb6e:	f000 f82f 	bl	bcbd0 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bcb72:	4904      	ldr	r1, [pc, #16]	; (bcb84 <_Z17acquireWireBufferv+0x28>)
	};
   bcb74:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   bcb76:	4628      	mov	r0, r5
   bcb78:	f000 f82a 	bl	bcbd0 <_ZnajRKSt9nothrow_t>
	};
   bcb7c:	60e0      	str	r0, [r4, #12]
}
   bcb7e:	4620      	mov	r0, r4
   bcb80:	bd38      	pop	{r3, r4, r5, pc}
   bcb82:	bf00      	nop
   bcb84:	000c107c 	.word	0x000c107c

000bcb88 <_Z19__fetch_global_Wirev>:
{
   bcb88:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bcb8a:	4d0e      	ldr	r5, [pc, #56]	; (bcbc4 <_Z19__fetch_global_Wirev+0x3c>)
   bcb8c:	7829      	ldrb	r1, [r5, #0]
   bcb8e:	f3bf 8f5b 	dmb	ish
   bcb92:	f011 0401 	ands.w	r4, r1, #1
{
   bcb96:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   bcb98:	d111      	bne.n	bcbbe <_Z19__fetch_global_Wirev+0x36>
   bcb9a:	4628      	mov	r0, r5
   bcb9c:	f7f7 fa8e 	bl	b40bc <__cxa_guard_acquire>
   bcba0:	b168      	cbz	r0, bcbbe <_Z19__fetch_global_Wirev+0x36>
   bcba2:	a801      	add	r0, sp, #4
   bcba4:	f7ff ffda 	bl	bcb5c <_Z17acquireWireBufferv>
   bcba8:	aa01      	add	r2, sp, #4
   bcbaa:	4621      	mov	r1, r4
   bcbac:	4806      	ldr	r0, [pc, #24]	; (bcbc8 <_Z19__fetch_global_Wirev+0x40>)
   bcbae:	f7ff fe3d 	bl	bc82c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   bcbb2:	4628      	mov	r0, r5
   bcbb4:	f7f7 fa87 	bl	b40c6 <__cxa_guard_release>
   bcbb8:	4804      	ldr	r0, [pc, #16]	; (bcbcc <_Z19__fetch_global_Wirev+0x44>)
   bcbba:	f000 feb9 	bl	bd930 <atexit>
	return wire;
}
   bcbbe:	4802      	ldr	r0, [pc, #8]	; (bcbc8 <_Z19__fetch_global_Wirev+0x40>)
   bcbc0:	b007      	add	sp, #28
   bcbc2:	bd30      	pop	{r4, r5, pc}
   bcbc4:	2003e744 	.word	0x2003e744
   bcbc8:	2003e748 	.word	0x2003e748
   bcbcc:	000bcb59 	.word	0x000bcb59

000bcbd0 <_ZnajRKSt9nothrow_t>:
   bcbd0:	f7f7 ba63 	b.w	b409a <_Znaj>

000bcbd4 <_ZSt19__throw_logic_errorPKc>:
   bcbd4:	b508      	push	{r3, lr}
   bcbd6:	f7fc f9d7 	bl	b8f88 <abort>

000bcbda <_ZSt20__throw_length_errorPKc>:
   bcbda:	b508      	push	{r3, lr}
   bcbdc:	f7fc f9d4 	bl	b8f88 <abort>

000bcbe0 <_ZSt24__throw_out_of_range_fmtPKcz>:
   bcbe0:	b40f      	push	{r0, r1, r2, r3}
   bcbe2:	b580      	push	{r7, lr}
   bcbe4:	b084      	sub	sp, #16
   bcbe6:	af00      	add	r7, sp, #0
   bcbe8:	f107 0418 	add.w	r4, r7, #24
   bcbec:	f854 2b04 	ldr.w	r2, [r4], #4
   bcbf0:	607a      	str	r2, [r7, #4]
   bcbf2:	4610      	mov	r0, r2
   bcbf4:	f000 ff57 	bl	bdaa6 <strlen>
   bcbf8:	f200 2307 	addw	r3, r0, #519	; 0x207
   bcbfc:	f023 0307 	bic.w	r3, r3, #7
   bcc00:	ebad 0d03 	sub.w	sp, sp, r3
   bcc04:	f500 7100 	add.w	r1, r0, #512	; 0x200
   bcc08:	687a      	ldr	r2, [r7, #4]
   bcc0a:	60fc      	str	r4, [r7, #12]
   bcc0c:	4623      	mov	r3, r4
   bcc0e:	4668      	mov	r0, sp
   bcc10:	f000 f85e 	bl	bccd0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
   bcc14:	f7fc f9b8 	bl	b8f88 <abort>

000bcc18 <_ZSt25__throw_bad_function_callv>:
   bcc18:	b508      	push	{r3, lr}
   bcc1a:	f7fc f9b5 	bl	b8f88 <abort>
	...

000bcc20 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   bcc20:	4901      	ldr	r1, [pc, #4]	; (bcc28 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   bcc22:	f000 b98b 	b.w	bcf3c <_ZNKSt9type_infoeqERKS_>
   bcc26:	bf00      	nop
   bcc28:	000c1098 	.word	0x000c1098

000bcc2c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
   bcc2c:	b580      	push	{r7, lr}
   bcc2e:	b09c      	sub	sp, #112	; 0x70
   bcc30:	4606      	mov	r6, r0
   bcc32:	af00      	add	r7, sp, #0
   bcc34:	460c      	mov	r4, r1
   bcc36:	1ba4      	subs	r4, r4, r6
   bcc38:	490e      	ldr	r1, [pc, #56]	; (bcc74 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
   bcc3a:	2269      	movs	r2, #105	; 0x69
   bcc3c:	1d38      	adds	r0, r7, #4
   bcc3e:	f000 fe94 	bl	bd96a <memcpy>
   bcc42:	f104 0370 	add.w	r3, r4, #112	; 0x70
   bcc46:	f023 0307 	bic.w	r3, r3, #7
   bcc4a:	ebad 0d03 	sub.w	sp, sp, r3
   bcc4e:	466d      	mov	r5, sp
   bcc50:	2268      	movs	r2, #104	; 0x68
   bcc52:	1d39      	adds	r1, r7, #4
   bcc54:	4628      	mov	r0, r5
   bcc56:	f000 fe88 	bl	bd96a <memcpy>
   bcc5a:	4622      	mov	r2, r4
   bcc5c:	4631      	mov	r1, r6
   bcc5e:	f105 0068 	add.w	r0, r5, #104	; 0x68
   bcc62:	442c      	add	r4, r5
   bcc64:	f000 fe81 	bl	bd96a <memcpy>
   bcc68:	2300      	movs	r3, #0
   bcc6a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
   bcc6e:	4628      	mov	r0, r5
   bcc70:	f7ff ffb0 	bl	bcbd4 <_ZSt19__throw_logic_errorPKc>
   bcc74:	000c10a0 	.word	0x000c10a0

000bcc78 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
   bcc78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bcc7c:	af00      	add	r7, sp, #0
   bcc7e:	b084      	sub	sp, #16
   bcc80:	466d      	mov	r5, sp
   bcc82:	f105 040c 	add.w	r4, r5, #12
   bcc86:	f8df 8044 	ldr.w	r8, [pc, #68]	; bcccc <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
   bcc8a:	4623      	mov	r3, r4
   bcc8c:	f04f 0c0a 	mov.w	ip, #10
   bcc90:	fbb2 f6fc 	udiv	r6, r2, ip
   bcc94:	fb0c 2e16 	mls	lr, ip, r6, r2
   bcc98:	f818 e00e 	ldrb.w	lr, [r8, lr]
   bcc9c:	f803 ed01 	strb.w	lr, [r3, #-1]!
   bcca0:	4696      	mov	lr, r2
   bcca2:	f1be 0f09 	cmp.w	lr, #9
   bcca6:	4632      	mov	r2, r6
   bcca8:	d8f2      	bhi.n	bcc90 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
   bccaa:	1ae4      	subs	r4, r4, r3
   bccac:	428c      	cmp	r4, r1
   bccae:	d809      	bhi.n	bccc4 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
   bccb0:	f1c4 030c 	rsb	r3, r4, #12
   bccb4:	4622      	mov	r2, r4
   bccb6:	18e9      	adds	r1, r5, r3
   bccb8:	f000 fe57 	bl	bd96a <memcpy>
   bccbc:	4620      	mov	r0, r4
   bccbe:	46bd      	mov	sp, r7
   bccc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bccc4:	f04f 34ff 	mov.w	r4, #4294967295
   bccc8:	e7f8      	b.n	bccbc <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
   bccca:	bf00      	nop
   bcccc:	000c1109 	.word	0x000c1109

000bccd0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
   bccd0:	3901      	subs	r1, #1
   bccd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bccd6:	4607      	mov	r7, r0
   bccd8:	4615      	mov	r5, r2
   bccda:	eb00 0801 	add.w	r8, r0, r1
   bccde:	4604      	mov	r4, r0
   bcce0:	782a      	ldrb	r2, [r5, #0]
   bcce2:	b392      	cbz	r2, bcd4a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
   bcce4:	4544      	cmp	r4, r8
   bcce6:	d22a      	bcs.n	bcd3e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   bcce8:	2a25      	cmp	r2, #37	; 0x25
   bccea:	d107      	bne.n	bccfc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   bccec:	786a      	ldrb	r2, [r5, #1]
   bccee:	2a73      	cmp	r2, #115	; 0x73
   bccf0:	d009      	beq.n	bcd06 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
   bccf2:	2a7a      	cmp	r2, #122	; 0x7a
   bccf4:	d012      	beq.n	bcd1c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
   bccf6:	2a25      	cmp	r2, #37	; 0x25
   bccf8:	d100      	bne.n	bccfc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   bccfa:	3501      	adds	r5, #1
   bccfc:	f815 2b01 	ldrb.w	r2, [r5], #1
   bcd00:	f804 2b01 	strb.w	r2, [r4], #1
   bcd04:	e7ec      	b.n	bcce0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   bcd06:	f853 2b04 	ldr.w	r2, [r3], #4
   bcd0a:	3a01      	subs	r2, #1
   bcd0c:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   bcd10:	b1c9      	cbz	r1, bcd46 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
   bcd12:	4544      	cmp	r4, r8
   bcd14:	d013      	beq.n	bcd3e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   bcd16:	f804 1b01 	strb.w	r1, [r4], #1
   bcd1a:	e7f7      	b.n	bcd0c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
   bcd1c:	78aa      	ldrb	r2, [r5, #2]
   bcd1e:	2a75      	cmp	r2, #117	; 0x75
   bcd20:	d1ec      	bne.n	bccfc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
   bcd22:	461e      	mov	r6, r3
   bcd24:	eba8 0104 	sub.w	r1, r8, r4
   bcd28:	f856 2b04 	ldr.w	r2, [r6], #4
   bcd2c:	4620      	mov	r0, r4
   bcd2e:	f7ff ffa3 	bl	bcc78 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
   bcd32:	2800      	cmp	r0, #0
   bcd34:	dd03      	ble.n	bcd3e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
   bcd36:	4404      	add	r4, r0
   bcd38:	3503      	adds	r5, #3
   bcd3a:	4633      	mov	r3, r6
   bcd3c:	e7d0      	b.n	bcce0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   bcd3e:	4621      	mov	r1, r4
   bcd40:	4638      	mov	r0, r7
   bcd42:	f7ff ff73 	bl	bcc2c <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
   bcd46:	3502      	adds	r5, #2
   bcd48:	e7ca      	b.n	bcce0 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
   bcd4a:	7022      	strb	r2, [r4, #0]
   bcd4c:	1be0      	subs	r0, r4, r7
   bcd4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bcd52 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   bcd52:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   bcd54:	2400      	movs	r4, #0
   bcd56:	2310      	movs	r3, #16
   bcd58:	e9cd 3402 	strd	r3, r4, [sp, #8]
   bcd5c:	6803      	ldr	r3, [r0, #0]
   bcd5e:	4615      	mov	r5, r2
   bcd60:	699e      	ldr	r6, [r3, #24]
   bcd62:	6812      	ldr	r2, [r2, #0]
   bcd64:	466b      	mov	r3, sp
   bcd66:	e9cd 4400 	strd	r4, r4, [sp]
   bcd6a:	47b0      	blx	r6
   bcd6c:	f89d 3004 	ldrb.w	r3, [sp, #4]
   bcd70:	f003 0306 	and.w	r3, r3, #6
   bcd74:	2b06      	cmp	r3, #6
   bcd76:	bf03      	ittte	eq
   bcd78:	9b00      	ldreq	r3, [sp, #0]
   bcd7a:	602b      	streq	r3, [r5, #0]
   bcd7c:	2001      	moveq	r0, #1
   bcd7e:	4620      	movne	r0, r4
   bcd80:	b004      	add	sp, #16
   bcd82:	bd70      	pop	{r4, r5, r6, pc}

000bcd84 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   bcd84:	9800      	ldr	r0, [sp, #0]
   bcd86:	4290      	cmp	r0, r2
   bcd88:	bf14      	ite	ne
   bcd8a:	2001      	movne	r0, #1
   bcd8c:	2006      	moveq	r0, #6
   bcd8e:	4770      	bx	lr

000bcd90 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   bcd90:	b510      	push	{r4, lr}
   bcd92:	4b03      	ldr	r3, [pc, #12]	; (bcda0 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   bcd94:	6003      	str	r3, [r0, #0]
   bcd96:	4604      	mov	r4, r0
   bcd98:	f000 f8cd 	bl	bcf36 <_ZNSt9type_infoD1Ev>
   bcd9c:	4620      	mov	r0, r4
   bcd9e:	bd10      	pop	{r4, pc}
   bcda0:	000c114c 	.word	0x000c114c

000bcda4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   bcda4:	b510      	push	{r4, lr}
   bcda6:	4604      	mov	r4, r0
   bcda8:	f7ff fff2 	bl	bcd90 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bcdac:	4620      	mov	r0, r4
   bcdae:	2108      	movs	r1, #8
   bcdb0:	f7f7 f975 	bl	b409e <_ZdlPvj>
   bcdb4:	4620      	mov	r0, r4
   bcdb6:	bd10      	pop	{r4, pc}

000bcdb8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   bcdb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bcdbc:	461f      	mov	r7, r3
   bcdbe:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   bcdc2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   bcdc6:	4598      	cmp	r8, r3
   bcdc8:	4606      	mov	r6, r0
   bcdca:	4615      	mov	r5, r2
   bcdcc:	d107      	bne.n	bcdde <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bcdce:	9907      	ldr	r1, [sp, #28]
   bcdd0:	f000 f8b4 	bl	bcf3c <_ZNKSt9type_infoeqERKS_>
   bcdd4:	b118      	cbz	r0, bcdde <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bcdd6:	7165      	strb	r5, [r4, #5]
   bcdd8:	2000      	movs	r0, #0
   bcdda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bcdde:	4639      	mov	r1, r7
   bcde0:	4630      	mov	r0, r6
   bcde2:	f000 f8ab 	bl	bcf3c <_ZNKSt9type_infoeqERKS_>
   bcde6:	2800      	cmp	r0, #0
   bcde8:	d0f6      	beq.n	bcdd8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   bcdea:	2301      	movs	r3, #1
   bcdec:	f8c4 8000 	str.w	r8, [r4]
   bcdf0:	7125      	strb	r5, [r4, #4]
   bcdf2:	71a3      	strb	r3, [r4, #6]
   bcdf4:	e7f0      	b.n	bcdd8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000bcdf6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   bcdf6:	b538      	push	{r3, r4, r5, lr}
   bcdf8:	4615      	mov	r5, r2
   bcdfa:	461c      	mov	r4, r3
   bcdfc:	f000 f89e 	bl	bcf3c <_ZNKSt9type_infoeqERKS_>
   bce00:	b120      	cbz	r0, bce0c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   bce02:	2308      	movs	r3, #8
   bce04:	60e3      	str	r3, [r4, #12]
   bce06:	2306      	movs	r3, #6
   bce08:	6025      	str	r5, [r4, #0]
   bce0a:	7123      	strb	r3, [r4, #4]
   bce0c:	bd38      	pop	{r3, r4, r5, pc}

000bce0e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   bce0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bce10:	4605      	mov	r5, r0
   bce12:	460c      	mov	r4, r1
   bce14:	9201      	str	r2, [sp, #4]
   bce16:	461e      	mov	r6, r3
   bce18:	f000 f890 	bl	bcf3c <_ZNKSt9type_infoeqERKS_>
   bce1c:	b950      	cbnz	r0, bce34 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bce1e:	2e03      	cmp	r6, #3
   bce20:	d808      	bhi.n	bce34 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bce22:	6823      	ldr	r3, [r4, #0]
   bce24:	9a01      	ldr	r2, [sp, #4]
   bce26:	695b      	ldr	r3, [r3, #20]
   bce28:	4629      	mov	r1, r5
   bce2a:	4620      	mov	r0, r4
   bce2c:	b002      	add	sp, #8
   bce2e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bce32:	4718      	bx	r3
   bce34:	b002      	add	sp, #8
   bce36:	bd70      	pop	{r4, r5, r6, pc}

000bce38 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   bce38:	b510      	push	{r4, lr}
   bce3a:	4b03      	ldr	r3, [pc, #12]	; (bce48 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   bce3c:	6003      	str	r3, [r0, #0]
   bce3e:	4604      	mov	r4, r0
   bce40:	f7ff ffa6 	bl	bcd90 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bce44:	4620      	mov	r0, r4
   bce46:	bd10      	pop	{r4, pc}
   bce48:	000c11ac 	.word	0x000c11ac

000bce4c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   bce4c:	b510      	push	{r4, lr}
   bce4e:	4604      	mov	r4, r0
   bce50:	f7ff fff2 	bl	bce38 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   bce54:	4620      	mov	r0, r4
   bce56:	210c      	movs	r1, #12
   bce58:	f7f7 f921 	bl	b409e <_ZdlPvj>
   bce5c:	4620      	mov	r0, r4
   bce5e:	bd10      	pop	{r4, pc}

000bce60 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   bce60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bce62:	9f08      	ldr	r7, [sp, #32]
   bce64:	4297      	cmp	r7, r2
   bce66:	4605      	mov	r5, r0
   bce68:	460e      	mov	r6, r1
   bce6a:	4614      	mov	r4, r2
   bce6c:	d00a      	beq.n	bce84 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   bce6e:	68a8      	ldr	r0, [r5, #8]
   bce70:	6802      	ldr	r2, [r0, #0]
   bce72:	9708      	str	r7, [sp, #32]
   bce74:	6a15      	ldr	r5, [r2, #32]
   bce76:	4631      	mov	r1, r6
   bce78:	4622      	mov	r2, r4
   bce7a:	46ac      	mov	ip, r5
   bce7c:	b003      	add	sp, #12
   bce7e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bce82:	4760      	bx	ip
   bce84:	4619      	mov	r1, r3
   bce86:	9301      	str	r3, [sp, #4]
   bce88:	f000 f858 	bl	bcf3c <_ZNKSt9type_infoeqERKS_>
   bce8c:	9b01      	ldr	r3, [sp, #4]
   bce8e:	2800      	cmp	r0, #0
   bce90:	d0ed      	beq.n	bce6e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   bce92:	2006      	movs	r0, #6
   bce94:	b003      	add	sp, #12
   bce96:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bce98 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   bce98:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bce9c:	460d      	mov	r5, r1
   bce9e:	4619      	mov	r1, r3
   bcea0:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   bcea4:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   bcea8:	4681      	mov	r9, r0
   bceaa:	4617      	mov	r7, r2
   bceac:	4698      	mov	r8, r3
   bceae:	f000 f845 	bl	bcf3c <_ZNKSt9type_infoeqERKS_>
   bceb2:	b190      	cbz	r0, bceda <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   bceb4:	2d00      	cmp	r5, #0
   bceb6:	6034      	str	r4, [r6, #0]
   bceb8:	7137      	strb	r7, [r6, #4]
   bceba:	db09      	blt.n	bced0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   bcebc:	1961      	adds	r1, r4, r5
   bcebe:	458a      	cmp	sl, r1
   bcec0:	bf0c      	ite	eq
   bcec2:	2106      	moveq	r1, #6
   bcec4:	2101      	movne	r1, #1
   bcec6:	71b1      	strb	r1, [r6, #6]
   bcec8:	2000      	movs	r0, #0
   bceca:	b001      	add	sp, #4
   bcecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bced0:	3502      	adds	r5, #2
   bced2:	d1f9      	bne.n	bcec8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bced4:	2301      	movs	r3, #1
   bced6:	71b3      	strb	r3, [r6, #6]
   bced8:	e7f6      	b.n	bcec8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bceda:	4554      	cmp	r4, sl
   bcedc:	d106      	bne.n	bceec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bcede:	4659      	mov	r1, fp
   bcee0:	4648      	mov	r0, r9
   bcee2:	f000 f82b 	bl	bcf3c <_ZNKSt9type_infoeqERKS_>
   bcee6:	b108      	cbz	r0, bceec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bcee8:	7177      	strb	r7, [r6, #5]
   bceea:	e7ed      	b.n	bcec8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bceec:	f8d9 0008 	ldr.w	r0, [r9, #8]
   bcef0:	6803      	ldr	r3, [r0, #0]
   bcef2:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   bcef6:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   bcefa:	69dc      	ldr	r4, [r3, #28]
   bcefc:	463a      	mov	r2, r7
   bcefe:	4643      	mov	r3, r8
   bcf00:	4629      	mov	r1, r5
   bcf02:	46a4      	mov	ip, r4
   bcf04:	b001      	add	sp, #4
   bcf06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bcf0a:	4760      	bx	ip

000bcf0c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   bcf0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bcf10:	4607      	mov	r7, r0
   bcf12:	460c      	mov	r4, r1
   bcf14:	4615      	mov	r5, r2
   bcf16:	461e      	mov	r6, r3
   bcf18:	f7ff ff6d 	bl	bcdf6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   bcf1c:	b948      	cbnz	r0, bcf32 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   bcf1e:	68b8      	ldr	r0, [r7, #8]
   bcf20:	6803      	ldr	r3, [r0, #0]
   bcf22:	699f      	ldr	r7, [r3, #24]
   bcf24:	462a      	mov	r2, r5
   bcf26:	4633      	mov	r3, r6
   bcf28:	4621      	mov	r1, r4
   bcf2a:	46bc      	mov	ip, r7
   bcf2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   bcf30:	4760      	bx	ip
   bcf32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bcf36 <_ZNSt9type_infoD1Ev>:
   bcf36:	4770      	bx	lr

000bcf38 <_ZNKSt9type_info14__is_pointer_pEv>:
   bcf38:	2000      	movs	r0, #0
   bcf3a:	4770      	bx	lr

000bcf3c <_ZNKSt9type_infoeqERKS_>:
   bcf3c:	4281      	cmp	r1, r0
   bcf3e:	b508      	push	{r3, lr}
   bcf40:	d00e      	beq.n	bcf60 <_ZNKSt9type_infoeqERKS_+0x24>
   bcf42:	6840      	ldr	r0, [r0, #4]
   bcf44:	7803      	ldrb	r3, [r0, #0]
   bcf46:	2b2a      	cmp	r3, #42	; 0x2a
   bcf48:	d00c      	beq.n	bcf64 <_ZNKSt9type_infoeqERKS_+0x28>
   bcf4a:	6849      	ldr	r1, [r1, #4]
   bcf4c:	780b      	ldrb	r3, [r1, #0]
   bcf4e:	2b2a      	cmp	r3, #42	; 0x2a
   bcf50:	bf08      	it	eq
   bcf52:	3101      	addeq	r1, #1
   bcf54:	f000 fd77 	bl	bda46 <strcmp>
   bcf58:	fab0 f080 	clz	r0, r0
   bcf5c:	0940      	lsrs	r0, r0, #5
   bcf5e:	bd08      	pop	{r3, pc}
   bcf60:	2001      	movs	r0, #1
   bcf62:	e7fc      	b.n	bcf5e <_ZNKSt9type_infoeqERKS_+0x22>
   bcf64:	2000      	movs	r0, #0
   bcf66:	e7fa      	b.n	bcf5e <_ZNKSt9type_infoeqERKS_+0x22>

000bcf68 <__aeabi_drsub>:
   bcf68:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   bcf6c:	e002      	b.n	bcf74 <__adddf3>
   bcf6e:	bf00      	nop

000bcf70 <__aeabi_dsub>:
   bcf70:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000bcf74 <__adddf3>:
   bcf74:	b530      	push	{r4, r5, lr}
   bcf76:	ea4f 0441 	mov.w	r4, r1, lsl #1
   bcf7a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   bcf7e:	ea94 0f05 	teq	r4, r5
   bcf82:	bf08      	it	eq
   bcf84:	ea90 0f02 	teqeq	r0, r2
   bcf88:	bf1f      	itttt	ne
   bcf8a:	ea54 0c00 	orrsne.w	ip, r4, r0
   bcf8e:	ea55 0c02 	orrsne.w	ip, r5, r2
   bcf92:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   bcf96:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bcf9a:	f000 80e2 	beq.w	bd162 <__adddf3+0x1ee>
   bcf9e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   bcfa2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bcfa6:	bfb8      	it	lt
   bcfa8:	426d      	neglt	r5, r5
   bcfaa:	dd0c      	ble.n	bcfc6 <__adddf3+0x52>
   bcfac:	442c      	add	r4, r5
   bcfae:	ea80 0202 	eor.w	r2, r0, r2
   bcfb2:	ea81 0303 	eor.w	r3, r1, r3
   bcfb6:	ea82 0000 	eor.w	r0, r2, r0
   bcfba:	ea83 0101 	eor.w	r1, r3, r1
   bcfbe:	ea80 0202 	eor.w	r2, r0, r2
   bcfc2:	ea81 0303 	eor.w	r3, r1, r3
   bcfc6:	2d36      	cmp	r5, #54	; 0x36
   bcfc8:	bf88      	it	hi
   bcfca:	bd30      	pophi	{r4, r5, pc}
   bcfcc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bcfd0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bcfd4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   bcfd8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bcfdc:	d002      	beq.n	bcfe4 <__adddf3+0x70>
   bcfde:	4240      	negs	r0, r0
   bcfe0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bcfe4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   bcfe8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bcfec:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   bcff0:	d002      	beq.n	bcff8 <__adddf3+0x84>
   bcff2:	4252      	negs	r2, r2
   bcff4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bcff8:	ea94 0f05 	teq	r4, r5
   bcffc:	f000 80a7 	beq.w	bd14e <__adddf3+0x1da>
   bd000:	f1a4 0401 	sub.w	r4, r4, #1
   bd004:	f1d5 0e20 	rsbs	lr, r5, #32
   bd008:	db0d      	blt.n	bd026 <__adddf3+0xb2>
   bd00a:	fa02 fc0e 	lsl.w	ip, r2, lr
   bd00e:	fa22 f205 	lsr.w	r2, r2, r5
   bd012:	1880      	adds	r0, r0, r2
   bd014:	f141 0100 	adc.w	r1, r1, #0
   bd018:	fa03 f20e 	lsl.w	r2, r3, lr
   bd01c:	1880      	adds	r0, r0, r2
   bd01e:	fa43 f305 	asr.w	r3, r3, r5
   bd022:	4159      	adcs	r1, r3
   bd024:	e00e      	b.n	bd044 <__adddf3+0xd0>
   bd026:	f1a5 0520 	sub.w	r5, r5, #32
   bd02a:	f10e 0e20 	add.w	lr, lr, #32
   bd02e:	2a01      	cmp	r2, #1
   bd030:	fa03 fc0e 	lsl.w	ip, r3, lr
   bd034:	bf28      	it	cs
   bd036:	f04c 0c02 	orrcs.w	ip, ip, #2
   bd03a:	fa43 f305 	asr.w	r3, r3, r5
   bd03e:	18c0      	adds	r0, r0, r3
   bd040:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   bd044:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bd048:	d507      	bpl.n	bd05a <__adddf3+0xe6>
   bd04a:	f04f 0e00 	mov.w	lr, #0
   bd04e:	f1dc 0c00 	rsbs	ip, ip, #0
   bd052:	eb7e 0000 	sbcs.w	r0, lr, r0
   bd056:	eb6e 0101 	sbc.w	r1, lr, r1
   bd05a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bd05e:	d31b      	bcc.n	bd098 <__adddf3+0x124>
   bd060:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bd064:	d30c      	bcc.n	bd080 <__adddf3+0x10c>
   bd066:	0849      	lsrs	r1, r1, #1
   bd068:	ea5f 0030 	movs.w	r0, r0, rrx
   bd06c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   bd070:	f104 0401 	add.w	r4, r4, #1
   bd074:	ea4f 5244 	mov.w	r2, r4, lsl #21
   bd078:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bd07c:	f080 809a 	bcs.w	bd1b4 <__adddf3+0x240>
   bd080:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bd084:	bf08      	it	eq
   bd086:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bd08a:	f150 0000 	adcs.w	r0, r0, #0
   bd08e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bd092:	ea41 0105 	orr.w	r1, r1, r5
   bd096:	bd30      	pop	{r4, r5, pc}
   bd098:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bd09c:	4140      	adcs	r0, r0
   bd09e:	eb41 0101 	adc.w	r1, r1, r1
   bd0a2:	3c01      	subs	r4, #1
   bd0a4:	bf28      	it	cs
   bd0a6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bd0aa:	d2e9      	bcs.n	bd080 <__adddf3+0x10c>
   bd0ac:	f091 0f00 	teq	r1, #0
   bd0b0:	bf04      	itt	eq
   bd0b2:	4601      	moveq	r1, r0
   bd0b4:	2000      	moveq	r0, #0
   bd0b6:	fab1 f381 	clz	r3, r1
   bd0ba:	bf08      	it	eq
   bd0bc:	3320      	addeq	r3, #32
   bd0be:	f1a3 030b 	sub.w	r3, r3, #11
   bd0c2:	f1b3 0220 	subs.w	r2, r3, #32
   bd0c6:	da0c      	bge.n	bd0e2 <__adddf3+0x16e>
   bd0c8:	320c      	adds	r2, #12
   bd0ca:	dd08      	ble.n	bd0de <__adddf3+0x16a>
   bd0cc:	f102 0c14 	add.w	ip, r2, #20
   bd0d0:	f1c2 020c 	rsb	r2, r2, #12
   bd0d4:	fa01 f00c 	lsl.w	r0, r1, ip
   bd0d8:	fa21 f102 	lsr.w	r1, r1, r2
   bd0dc:	e00c      	b.n	bd0f8 <__adddf3+0x184>
   bd0de:	f102 0214 	add.w	r2, r2, #20
   bd0e2:	bfd8      	it	le
   bd0e4:	f1c2 0c20 	rsble	ip, r2, #32
   bd0e8:	fa01 f102 	lsl.w	r1, r1, r2
   bd0ec:	fa20 fc0c 	lsr.w	ip, r0, ip
   bd0f0:	bfdc      	itt	le
   bd0f2:	ea41 010c 	orrle.w	r1, r1, ip
   bd0f6:	4090      	lslle	r0, r2
   bd0f8:	1ae4      	subs	r4, r4, r3
   bd0fa:	bfa2      	ittt	ge
   bd0fc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bd100:	4329      	orrge	r1, r5
   bd102:	bd30      	popge	{r4, r5, pc}
   bd104:	ea6f 0404 	mvn.w	r4, r4
   bd108:	3c1f      	subs	r4, #31
   bd10a:	da1c      	bge.n	bd146 <__adddf3+0x1d2>
   bd10c:	340c      	adds	r4, #12
   bd10e:	dc0e      	bgt.n	bd12e <__adddf3+0x1ba>
   bd110:	f104 0414 	add.w	r4, r4, #20
   bd114:	f1c4 0220 	rsb	r2, r4, #32
   bd118:	fa20 f004 	lsr.w	r0, r0, r4
   bd11c:	fa01 f302 	lsl.w	r3, r1, r2
   bd120:	ea40 0003 	orr.w	r0, r0, r3
   bd124:	fa21 f304 	lsr.w	r3, r1, r4
   bd128:	ea45 0103 	orr.w	r1, r5, r3
   bd12c:	bd30      	pop	{r4, r5, pc}
   bd12e:	f1c4 040c 	rsb	r4, r4, #12
   bd132:	f1c4 0220 	rsb	r2, r4, #32
   bd136:	fa20 f002 	lsr.w	r0, r0, r2
   bd13a:	fa01 f304 	lsl.w	r3, r1, r4
   bd13e:	ea40 0003 	orr.w	r0, r0, r3
   bd142:	4629      	mov	r1, r5
   bd144:	bd30      	pop	{r4, r5, pc}
   bd146:	fa21 f004 	lsr.w	r0, r1, r4
   bd14a:	4629      	mov	r1, r5
   bd14c:	bd30      	pop	{r4, r5, pc}
   bd14e:	f094 0f00 	teq	r4, #0
   bd152:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   bd156:	bf06      	itte	eq
   bd158:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bd15c:	3401      	addeq	r4, #1
   bd15e:	3d01      	subne	r5, #1
   bd160:	e74e      	b.n	bd000 <__adddf3+0x8c>
   bd162:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bd166:	bf18      	it	ne
   bd168:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bd16c:	d029      	beq.n	bd1c2 <__adddf3+0x24e>
   bd16e:	ea94 0f05 	teq	r4, r5
   bd172:	bf08      	it	eq
   bd174:	ea90 0f02 	teqeq	r0, r2
   bd178:	d005      	beq.n	bd186 <__adddf3+0x212>
   bd17a:	ea54 0c00 	orrs.w	ip, r4, r0
   bd17e:	bf04      	itt	eq
   bd180:	4619      	moveq	r1, r3
   bd182:	4610      	moveq	r0, r2
   bd184:	bd30      	pop	{r4, r5, pc}
   bd186:	ea91 0f03 	teq	r1, r3
   bd18a:	bf1e      	ittt	ne
   bd18c:	2100      	movne	r1, #0
   bd18e:	2000      	movne	r0, #0
   bd190:	bd30      	popne	{r4, r5, pc}
   bd192:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bd196:	d105      	bne.n	bd1a4 <__adddf3+0x230>
   bd198:	0040      	lsls	r0, r0, #1
   bd19a:	4149      	adcs	r1, r1
   bd19c:	bf28      	it	cs
   bd19e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   bd1a2:	bd30      	pop	{r4, r5, pc}
   bd1a4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bd1a8:	bf3c      	itt	cc
   bd1aa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bd1ae:	bd30      	popcc	{r4, r5, pc}
   bd1b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bd1b4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bd1b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bd1bc:	f04f 0000 	mov.w	r0, #0
   bd1c0:	bd30      	pop	{r4, r5, pc}
   bd1c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bd1c6:	bf1a      	itte	ne
   bd1c8:	4619      	movne	r1, r3
   bd1ca:	4610      	movne	r0, r2
   bd1cc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   bd1d0:	bf1c      	itt	ne
   bd1d2:	460b      	movne	r3, r1
   bd1d4:	4602      	movne	r2, r0
   bd1d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bd1da:	bf06      	itte	eq
   bd1dc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   bd1e0:	ea91 0f03 	teqeq	r1, r3
   bd1e4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   bd1e8:	bd30      	pop	{r4, r5, pc}
   bd1ea:	bf00      	nop

000bd1ec <__aeabi_ui2d>:
   bd1ec:	f090 0f00 	teq	r0, #0
   bd1f0:	bf04      	itt	eq
   bd1f2:	2100      	moveq	r1, #0
   bd1f4:	4770      	bxeq	lr
   bd1f6:	b530      	push	{r4, r5, lr}
   bd1f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bd1fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bd200:	f04f 0500 	mov.w	r5, #0
   bd204:	f04f 0100 	mov.w	r1, #0
   bd208:	e750      	b.n	bd0ac <__adddf3+0x138>
   bd20a:	bf00      	nop

000bd20c <__aeabi_i2d>:
   bd20c:	f090 0f00 	teq	r0, #0
   bd210:	bf04      	itt	eq
   bd212:	2100      	moveq	r1, #0
   bd214:	4770      	bxeq	lr
   bd216:	b530      	push	{r4, r5, lr}
   bd218:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bd21c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bd220:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bd224:	bf48      	it	mi
   bd226:	4240      	negmi	r0, r0
   bd228:	f04f 0100 	mov.w	r1, #0
   bd22c:	e73e      	b.n	bd0ac <__adddf3+0x138>
   bd22e:	bf00      	nop

000bd230 <__aeabi_f2d>:
   bd230:	0042      	lsls	r2, r0, #1
   bd232:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bd236:	ea4f 0131 	mov.w	r1, r1, rrx
   bd23a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bd23e:	bf1f      	itttt	ne
   bd240:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bd244:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bd248:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bd24c:	4770      	bxne	lr
   bd24e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   bd252:	bf08      	it	eq
   bd254:	4770      	bxeq	lr
   bd256:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   bd25a:	bf04      	itt	eq
   bd25c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   bd260:	4770      	bxeq	lr
   bd262:	b530      	push	{r4, r5, lr}
   bd264:	f44f 7460 	mov.w	r4, #896	; 0x380
   bd268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bd26c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bd270:	e71c      	b.n	bd0ac <__adddf3+0x138>
   bd272:	bf00      	nop

000bd274 <__aeabi_ul2d>:
   bd274:	ea50 0201 	orrs.w	r2, r0, r1
   bd278:	bf08      	it	eq
   bd27a:	4770      	bxeq	lr
   bd27c:	b530      	push	{r4, r5, lr}
   bd27e:	f04f 0500 	mov.w	r5, #0
   bd282:	e00a      	b.n	bd29a <__aeabi_l2d+0x16>

000bd284 <__aeabi_l2d>:
   bd284:	ea50 0201 	orrs.w	r2, r0, r1
   bd288:	bf08      	it	eq
   bd28a:	4770      	bxeq	lr
   bd28c:	b530      	push	{r4, r5, lr}
   bd28e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bd292:	d502      	bpl.n	bd29a <__aeabi_l2d+0x16>
   bd294:	4240      	negs	r0, r0
   bd296:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bd29a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bd29e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bd2a2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bd2a6:	f43f aed8 	beq.w	bd05a <__adddf3+0xe6>
   bd2aa:	f04f 0203 	mov.w	r2, #3
   bd2ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bd2b2:	bf18      	it	ne
   bd2b4:	3203      	addne	r2, #3
   bd2b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bd2ba:	bf18      	it	ne
   bd2bc:	3203      	addne	r2, #3
   bd2be:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bd2c2:	f1c2 0320 	rsb	r3, r2, #32
   bd2c6:	fa00 fc03 	lsl.w	ip, r0, r3
   bd2ca:	fa20 f002 	lsr.w	r0, r0, r2
   bd2ce:	fa01 fe03 	lsl.w	lr, r1, r3
   bd2d2:	ea40 000e 	orr.w	r0, r0, lr
   bd2d6:	fa21 f102 	lsr.w	r1, r1, r2
   bd2da:	4414      	add	r4, r2
   bd2dc:	e6bd      	b.n	bd05a <__adddf3+0xe6>
   bd2de:	bf00      	nop

000bd2e0 <__aeabi_dmul>:
   bd2e0:	b570      	push	{r4, r5, r6, lr}
   bd2e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bd2e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bd2ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bd2ee:	bf1d      	ittte	ne
   bd2f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bd2f4:	ea94 0f0c 	teqne	r4, ip
   bd2f8:	ea95 0f0c 	teqne	r5, ip
   bd2fc:	f000 f8de 	bleq	bd4bc <__aeabi_dmul+0x1dc>
   bd300:	442c      	add	r4, r5
   bd302:	ea81 0603 	eor.w	r6, r1, r3
   bd306:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bd30a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bd30e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bd312:	bf18      	it	ne
   bd314:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bd318:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bd31c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bd320:	d038      	beq.n	bd394 <__aeabi_dmul+0xb4>
   bd322:	fba0 ce02 	umull	ip, lr, r0, r2
   bd326:	f04f 0500 	mov.w	r5, #0
   bd32a:	fbe1 e502 	umlal	lr, r5, r1, r2
   bd32e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bd332:	fbe0 e503 	umlal	lr, r5, r0, r3
   bd336:	f04f 0600 	mov.w	r6, #0
   bd33a:	fbe1 5603 	umlal	r5, r6, r1, r3
   bd33e:	f09c 0f00 	teq	ip, #0
   bd342:	bf18      	it	ne
   bd344:	f04e 0e01 	orrne.w	lr, lr, #1
   bd348:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bd34c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bd350:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bd354:	d204      	bcs.n	bd360 <__aeabi_dmul+0x80>
   bd356:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bd35a:	416d      	adcs	r5, r5
   bd35c:	eb46 0606 	adc.w	r6, r6, r6
   bd360:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bd364:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bd368:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bd36c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bd370:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bd374:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bd378:	bf88      	it	hi
   bd37a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bd37e:	d81e      	bhi.n	bd3be <__aeabi_dmul+0xde>
   bd380:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bd384:	bf08      	it	eq
   bd386:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bd38a:	f150 0000 	adcs.w	r0, r0, #0
   bd38e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bd392:	bd70      	pop	{r4, r5, r6, pc}
   bd394:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bd398:	ea46 0101 	orr.w	r1, r6, r1
   bd39c:	ea40 0002 	orr.w	r0, r0, r2
   bd3a0:	ea81 0103 	eor.w	r1, r1, r3
   bd3a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bd3a8:	bfc2      	ittt	gt
   bd3aa:	ebd4 050c 	rsbsgt	r5, r4, ip
   bd3ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bd3b2:	bd70      	popgt	{r4, r5, r6, pc}
   bd3b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bd3b8:	f04f 0e00 	mov.w	lr, #0
   bd3bc:	3c01      	subs	r4, #1
   bd3be:	f300 80ab 	bgt.w	bd518 <__aeabi_dmul+0x238>
   bd3c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bd3c6:	bfde      	ittt	le
   bd3c8:	2000      	movle	r0, #0
   bd3ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bd3ce:	bd70      	pople	{r4, r5, r6, pc}
   bd3d0:	f1c4 0400 	rsb	r4, r4, #0
   bd3d4:	3c20      	subs	r4, #32
   bd3d6:	da35      	bge.n	bd444 <__aeabi_dmul+0x164>
   bd3d8:	340c      	adds	r4, #12
   bd3da:	dc1b      	bgt.n	bd414 <__aeabi_dmul+0x134>
   bd3dc:	f104 0414 	add.w	r4, r4, #20
   bd3e0:	f1c4 0520 	rsb	r5, r4, #32
   bd3e4:	fa00 f305 	lsl.w	r3, r0, r5
   bd3e8:	fa20 f004 	lsr.w	r0, r0, r4
   bd3ec:	fa01 f205 	lsl.w	r2, r1, r5
   bd3f0:	ea40 0002 	orr.w	r0, r0, r2
   bd3f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bd3f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bd3fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bd400:	fa21 f604 	lsr.w	r6, r1, r4
   bd404:	eb42 0106 	adc.w	r1, r2, r6
   bd408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bd40c:	bf08      	it	eq
   bd40e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bd412:	bd70      	pop	{r4, r5, r6, pc}
   bd414:	f1c4 040c 	rsb	r4, r4, #12
   bd418:	f1c4 0520 	rsb	r5, r4, #32
   bd41c:	fa00 f304 	lsl.w	r3, r0, r4
   bd420:	fa20 f005 	lsr.w	r0, r0, r5
   bd424:	fa01 f204 	lsl.w	r2, r1, r4
   bd428:	ea40 0002 	orr.w	r0, r0, r2
   bd42c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bd430:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bd434:	f141 0100 	adc.w	r1, r1, #0
   bd438:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bd43c:	bf08      	it	eq
   bd43e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bd442:	bd70      	pop	{r4, r5, r6, pc}
   bd444:	f1c4 0520 	rsb	r5, r4, #32
   bd448:	fa00 f205 	lsl.w	r2, r0, r5
   bd44c:	ea4e 0e02 	orr.w	lr, lr, r2
   bd450:	fa20 f304 	lsr.w	r3, r0, r4
   bd454:	fa01 f205 	lsl.w	r2, r1, r5
   bd458:	ea43 0302 	orr.w	r3, r3, r2
   bd45c:	fa21 f004 	lsr.w	r0, r1, r4
   bd460:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bd464:	fa21 f204 	lsr.w	r2, r1, r4
   bd468:	ea20 0002 	bic.w	r0, r0, r2
   bd46c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bd470:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bd474:	bf08      	it	eq
   bd476:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bd47a:	bd70      	pop	{r4, r5, r6, pc}
   bd47c:	f094 0f00 	teq	r4, #0
   bd480:	d10f      	bne.n	bd4a2 <__aeabi_dmul+0x1c2>
   bd482:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bd486:	0040      	lsls	r0, r0, #1
   bd488:	eb41 0101 	adc.w	r1, r1, r1
   bd48c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bd490:	bf08      	it	eq
   bd492:	3c01      	subeq	r4, #1
   bd494:	d0f7      	beq.n	bd486 <__aeabi_dmul+0x1a6>
   bd496:	ea41 0106 	orr.w	r1, r1, r6
   bd49a:	f095 0f00 	teq	r5, #0
   bd49e:	bf18      	it	ne
   bd4a0:	4770      	bxne	lr
   bd4a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bd4a6:	0052      	lsls	r2, r2, #1
   bd4a8:	eb43 0303 	adc.w	r3, r3, r3
   bd4ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bd4b0:	bf08      	it	eq
   bd4b2:	3d01      	subeq	r5, #1
   bd4b4:	d0f7      	beq.n	bd4a6 <__aeabi_dmul+0x1c6>
   bd4b6:	ea43 0306 	orr.w	r3, r3, r6
   bd4ba:	4770      	bx	lr
   bd4bc:	ea94 0f0c 	teq	r4, ip
   bd4c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bd4c4:	bf18      	it	ne
   bd4c6:	ea95 0f0c 	teqne	r5, ip
   bd4ca:	d00c      	beq.n	bd4e6 <__aeabi_dmul+0x206>
   bd4cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bd4d0:	bf18      	it	ne
   bd4d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bd4d6:	d1d1      	bne.n	bd47c <__aeabi_dmul+0x19c>
   bd4d8:	ea81 0103 	eor.w	r1, r1, r3
   bd4dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bd4e0:	f04f 0000 	mov.w	r0, #0
   bd4e4:	bd70      	pop	{r4, r5, r6, pc}
   bd4e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bd4ea:	bf06      	itte	eq
   bd4ec:	4610      	moveq	r0, r2
   bd4ee:	4619      	moveq	r1, r3
   bd4f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bd4f4:	d019      	beq.n	bd52a <__aeabi_dmul+0x24a>
   bd4f6:	ea94 0f0c 	teq	r4, ip
   bd4fa:	d102      	bne.n	bd502 <__aeabi_dmul+0x222>
   bd4fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bd500:	d113      	bne.n	bd52a <__aeabi_dmul+0x24a>
   bd502:	ea95 0f0c 	teq	r5, ip
   bd506:	d105      	bne.n	bd514 <__aeabi_dmul+0x234>
   bd508:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bd50c:	bf1c      	itt	ne
   bd50e:	4610      	movne	r0, r2
   bd510:	4619      	movne	r1, r3
   bd512:	d10a      	bne.n	bd52a <__aeabi_dmul+0x24a>
   bd514:	ea81 0103 	eor.w	r1, r1, r3
   bd518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bd51c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bd520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bd524:	f04f 0000 	mov.w	r0, #0
   bd528:	bd70      	pop	{r4, r5, r6, pc}
   bd52a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bd52e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bd532:	bd70      	pop	{r4, r5, r6, pc}

000bd534 <__aeabi_ddiv>:
   bd534:	b570      	push	{r4, r5, r6, lr}
   bd536:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bd53a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bd53e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bd542:	bf1d      	ittte	ne
   bd544:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bd548:	ea94 0f0c 	teqne	r4, ip
   bd54c:	ea95 0f0c 	teqne	r5, ip
   bd550:	f000 f8a7 	bleq	bd6a2 <__aeabi_ddiv+0x16e>
   bd554:	eba4 0405 	sub.w	r4, r4, r5
   bd558:	ea81 0e03 	eor.w	lr, r1, r3
   bd55c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bd560:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bd564:	f000 8088 	beq.w	bd678 <__aeabi_ddiv+0x144>
   bd568:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bd56c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bd570:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bd574:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bd578:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bd57c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bd580:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bd584:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bd588:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bd58c:	429d      	cmp	r5, r3
   bd58e:	bf08      	it	eq
   bd590:	4296      	cmpeq	r6, r2
   bd592:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bd596:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bd59a:	d202      	bcs.n	bd5a2 <__aeabi_ddiv+0x6e>
   bd59c:	085b      	lsrs	r3, r3, #1
   bd59e:	ea4f 0232 	mov.w	r2, r2, rrx
   bd5a2:	1ab6      	subs	r6, r6, r2
   bd5a4:	eb65 0503 	sbc.w	r5, r5, r3
   bd5a8:	085b      	lsrs	r3, r3, #1
   bd5aa:	ea4f 0232 	mov.w	r2, r2, rrx
   bd5ae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bd5b2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bd5b6:	ebb6 0e02 	subs.w	lr, r6, r2
   bd5ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   bd5be:	bf22      	ittt	cs
   bd5c0:	1ab6      	subcs	r6, r6, r2
   bd5c2:	4675      	movcs	r5, lr
   bd5c4:	ea40 000c 	orrcs.w	r0, r0, ip
   bd5c8:	085b      	lsrs	r3, r3, #1
   bd5ca:	ea4f 0232 	mov.w	r2, r2, rrx
   bd5ce:	ebb6 0e02 	subs.w	lr, r6, r2
   bd5d2:	eb75 0e03 	sbcs.w	lr, r5, r3
   bd5d6:	bf22      	ittt	cs
   bd5d8:	1ab6      	subcs	r6, r6, r2
   bd5da:	4675      	movcs	r5, lr
   bd5dc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bd5e0:	085b      	lsrs	r3, r3, #1
   bd5e2:	ea4f 0232 	mov.w	r2, r2, rrx
   bd5e6:	ebb6 0e02 	subs.w	lr, r6, r2
   bd5ea:	eb75 0e03 	sbcs.w	lr, r5, r3
   bd5ee:	bf22      	ittt	cs
   bd5f0:	1ab6      	subcs	r6, r6, r2
   bd5f2:	4675      	movcs	r5, lr
   bd5f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bd5f8:	085b      	lsrs	r3, r3, #1
   bd5fa:	ea4f 0232 	mov.w	r2, r2, rrx
   bd5fe:	ebb6 0e02 	subs.w	lr, r6, r2
   bd602:	eb75 0e03 	sbcs.w	lr, r5, r3
   bd606:	bf22      	ittt	cs
   bd608:	1ab6      	subcs	r6, r6, r2
   bd60a:	4675      	movcs	r5, lr
   bd60c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bd610:	ea55 0e06 	orrs.w	lr, r5, r6
   bd614:	d018      	beq.n	bd648 <__aeabi_ddiv+0x114>
   bd616:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bd61a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bd61e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bd622:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bd626:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bd62a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bd62e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bd632:	d1c0      	bne.n	bd5b6 <__aeabi_ddiv+0x82>
   bd634:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bd638:	d10b      	bne.n	bd652 <__aeabi_ddiv+0x11e>
   bd63a:	ea41 0100 	orr.w	r1, r1, r0
   bd63e:	f04f 0000 	mov.w	r0, #0
   bd642:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bd646:	e7b6      	b.n	bd5b6 <__aeabi_ddiv+0x82>
   bd648:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bd64c:	bf04      	itt	eq
   bd64e:	4301      	orreq	r1, r0
   bd650:	2000      	moveq	r0, #0
   bd652:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bd656:	bf88      	it	hi
   bd658:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bd65c:	f63f aeaf 	bhi.w	bd3be <__aeabi_dmul+0xde>
   bd660:	ebb5 0c03 	subs.w	ip, r5, r3
   bd664:	bf04      	itt	eq
   bd666:	ebb6 0c02 	subseq.w	ip, r6, r2
   bd66a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bd66e:	f150 0000 	adcs.w	r0, r0, #0
   bd672:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bd676:	bd70      	pop	{r4, r5, r6, pc}
   bd678:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bd67c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bd680:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bd684:	bfc2      	ittt	gt
   bd686:	ebd4 050c 	rsbsgt	r5, r4, ip
   bd68a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bd68e:	bd70      	popgt	{r4, r5, r6, pc}
   bd690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bd694:	f04f 0e00 	mov.w	lr, #0
   bd698:	3c01      	subs	r4, #1
   bd69a:	e690      	b.n	bd3be <__aeabi_dmul+0xde>
   bd69c:	ea45 0e06 	orr.w	lr, r5, r6
   bd6a0:	e68d      	b.n	bd3be <__aeabi_dmul+0xde>
   bd6a2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bd6a6:	ea94 0f0c 	teq	r4, ip
   bd6aa:	bf08      	it	eq
   bd6ac:	ea95 0f0c 	teqeq	r5, ip
   bd6b0:	f43f af3b 	beq.w	bd52a <__aeabi_dmul+0x24a>
   bd6b4:	ea94 0f0c 	teq	r4, ip
   bd6b8:	d10a      	bne.n	bd6d0 <__aeabi_ddiv+0x19c>
   bd6ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bd6be:	f47f af34 	bne.w	bd52a <__aeabi_dmul+0x24a>
   bd6c2:	ea95 0f0c 	teq	r5, ip
   bd6c6:	f47f af25 	bne.w	bd514 <__aeabi_dmul+0x234>
   bd6ca:	4610      	mov	r0, r2
   bd6cc:	4619      	mov	r1, r3
   bd6ce:	e72c      	b.n	bd52a <__aeabi_dmul+0x24a>
   bd6d0:	ea95 0f0c 	teq	r5, ip
   bd6d4:	d106      	bne.n	bd6e4 <__aeabi_ddiv+0x1b0>
   bd6d6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bd6da:	f43f aefd 	beq.w	bd4d8 <__aeabi_dmul+0x1f8>
   bd6de:	4610      	mov	r0, r2
   bd6e0:	4619      	mov	r1, r3
   bd6e2:	e722      	b.n	bd52a <__aeabi_dmul+0x24a>
   bd6e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bd6e8:	bf18      	it	ne
   bd6ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bd6ee:	f47f aec5 	bne.w	bd47c <__aeabi_dmul+0x19c>
   bd6f2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bd6f6:	f47f af0d 	bne.w	bd514 <__aeabi_dmul+0x234>
   bd6fa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bd6fe:	f47f aeeb 	bne.w	bd4d8 <__aeabi_dmul+0x1f8>
   bd702:	e712      	b.n	bd52a <__aeabi_dmul+0x24a>

000bd704 <__gedf2>:
   bd704:	f04f 3cff 	mov.w	ip, #4294967295
   bd708:	e006      	b.n	bd718 <__cmpdf2+0x4>
   bd70a:	bf00      	nop

000bd70c <__ledf2>:
   bd70c:	f04f 0c01 	mov.w	ip, #1
   bd710:	e002      	b.n	bd718 <__cmpdf2+0x4>
   bd712:	bf00      	nop

000bd714 <__cmpdf2>:
   bd714:	f04f 0c01 	mov.w	ip, #1
   bd718:	f84d cd04 	str.w	ip, [sp, #-4]!
   bd71c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bd720:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bd724:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bd728:	bf18      	it	ne
   bd72a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bd72e:	d01b      	beq.n	bd768 <__cmpdf2+0x54>
   bd730:	b001      	add	sp, #4
   bd732:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bd736:	bf0c      	ite	eq
   bd738:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bd73c:	ea91 0f03 	teqne	r1, r3
   bd740:	bf02      	ittt	eq
   bd742:	ea90 0f02 	teqeq	r0, r2
   bd746:	2000      	moveq	r0, #0
   bd748:	4770      	bxeq	lr
   bd74a:	f110 0f00 	cmn.w	r0, #0
   bd74e:	ea91 0f03 	teq	r1, r3
   bd752:	bf58      	it	pl
   bd754:	4299      	cmppl	r1, r3
   bd756:	bf08      	it	eq
   bd758:	4290      	cmpeq	r0, r2
   bd75a:	bf2c      	ite	cs
   bd75c:	17d8      	asrcs	r0, r3, #31
   bd75e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bd762:	f040 0001 	orr.w	r0, r0, #1
   bd766:	4770      	bx	lr
   bd768:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bd76c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bd770:	d102      	bne.n	bd778 <__cmpdf2+0x64>
   bd772:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bd776:	d107      	bne.n	bd788 <__cmpdf2+0x74>
   bd778:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bd77c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bd780:	d1d6      	bne.n	bd730 <__cmpdf2+0x1c>
   bd782:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bd786:	d0d3      	beq.n	bd730 <__cmpdf2+0x1c>
   bd788:	f85d 0b04 	ldr.w	r0, [sp], #4
   bd78c:	4770      	bx	lr
   bd78e:	bf00      	nop

000bd790 <__aeabi_cdrcmple>:
   bd790:	4684      	mov	ip, r0
   bd792:	4610      	mov	r0, r2
   bd794:	4662      	mov	r2, ip
   bd796:	468c      	mov	ip, r1
   bd798:	4619      	mov	r1, r3
   bd79a:	4663      	mov	r3, ip
   bd79c:	e000      	b.n	bd7a0 <__aeabi_cdcmpeq>
   bd79e:	bf00      	nop

000bd7a0 <__aeabi_cdcmpeq>:
   bd7a0:	b501      	push	{r0, lr}
   bd7a2:	f7ff ffb7 	bl	bd714 <__cmpdf2>
   bd7a6:	2800      	cmp	r0, #0
   bd7a8:	bf48      	it	mi
   bd7aa:	f110 0f00 	cmnmi.w	r0, #0
   bd7ae:	bd01      	pop	{r0, pc}

000bd7b0 <__aeabi_dcmpeq>:
   bd7b0:	f84d ed08 	str.w	lr, [sp, #-8]!
   bd7b4:	f7ff fff4 	bl	bd7a0 <__aeabi_cdcmpeq>
   bd7b8:	bf0c      	ite	eq
   bd7ba:	2001      	moveq	r0, #1
   bd7bc:	2000      	movne	r0, #0
   bd7be:	f85d fb08 	ldr.w	pc, [sp], #8
   bd7c2:	bf00      	nop

000bd7c4 <__aeabi_dcmplt>:
   bd7c4:	f84d ed08 	str.w	lr, [sp, #-8]!
   bd7c8:	f7ff ffea 	bl	bd7a0 <__aeabi_cdcmpeq>
   bd7cc:	bf34      	ite	cc
   bd7ce:	2001      	movcc	r0, #1
   bd7d0:	2000      	movcs	r0, #0
   bd7d2:	f85d fb08 	ldr.w	pc, [sp], #8
   bd7d6:	bf00      	nop

000bd7d8 <__aeabi_dcmple>:
   bd7d8:	f84d ed08 	str.w	lr, [sp, #-8]!
   bd7dc:	f7ff ffe0 	bl	bd7a0 <__aeabi_cdcmpeq>
   bd7e0:	bf94      	ite	ls
   bd7e2:	2001      	movls	r0, #1
   bd7e4:	2000      	movhi	r0, #0
   bd7e6:	f85d fb08 	ldr.w	pc, [sp], #8
   bd7ea:	bf00      	nop

000bd7ec <__aeabi_dcmpge>:
   bd7ec:	f84d ed08 	str.w	lr, [sp, #-8]!
   bd7f0:	f7ff ffce 	bl	bd790 <__aeabi_cdrcmple>
   bd7f4:	bf94      	ite	ls
   bd7f6:	2001      	movls	r0, #1
   bd7f8:	2000      	movhi	r0, #0
   bd7fa:	f85d fb08 	ldr.w	pc, [sp], #8
   bd7fe:	bf00      	nop

000bd800 <__aeabi_dcmpgt>:
   bd800:	f84d ed08 	str.w	lr, [sp, #-8]!
   bd804:	f7ff ffc4 	bl	bd790 <__aeabi_cdrcmple>
   bd808:	bf34      	ite	cc
   bd80a:	2001      	movcc	r0, #1
   bd80c:	2000      	movcs	r0, #0
   bd80e:	f85d fb08 	ldr.w	pc, [sp], #8
   bd812:	bf00      	nop

000bd814 <__aeabi_d2uiz>:
   bd814:	004a      	lsls	r2, r1, #1
   bd816:	d211      	bcs.n	bd83c <__aeabi_d2uiz+0x28>
   bd818:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bd81c:	d211      	bcs.n	bd842 <__aeabi_d2uiz+0x2e>
   bd81e:	d50d      	bpl.n	bd83c <__aeabi_d2uiz+0x28>
   bd820:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bd824:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bd828:	d40e      	bmi.n	bd848 <__aeabi_d2uiz+0x34>
   bd82a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bd82e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bd832:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bd836:	fa23 f002 	lsr.w	r0, r3, r2
   bd83a:	4770      	bx	lr
   bd83c:	f04f 0000 	mov.w	r0, #0
   bd840:	4770      	bx	lr
   bd842:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bd846:	d102      	bne.n	bd84e <__aeabi_d2uiz+0x3a>
   bd848:	f04f 30ff 	mov.w	r0, #4294967295
   bd84c:	4770      	bx	lr
   bd84e:	f04f 0000 	mov.w	r0, #0
   bd852:	4770      	bx	lr

000bd854 <__aeabi_d2f>:
   bd854:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bd858:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   bd85c:	bf24      	itt	cs
   bd85e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   bd862:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   bd866:	d90d      	bls.n	bd884 <__aeabi_d2f+0x30>
   bd868:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   bd86c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   bd870:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   bd874:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   bd878:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   bd87c:	bf08      	it	eq
   bd87e:	f020 0001 	biceq.w	r0, r0, #1
   bd882:	4770      	bx	lr
   bd884:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   bd888:	d121      	bne.n	bd8ce <__aeabi_d2f+0x7a>
   bd88a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   bd88e:	bfbc      	itt	lt
   bd890:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   bd894:	4770      	bxlt	lr
   bd896:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bd89a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   bd89e:	f1c2 0218 	rsb	r2, r2, #24
   bd8a2:	f1c2 0c20 	rsb	ip, r2, #32
   bd8a6:	fa10 f30c 	lsls.w	r3, r0, ip
   bd8aa:	fa20 f002 	lsr.w	r0, r0, r2
   bd8ae:	bf18      	it	ne
   bd8b0:	f040 0001 	orrne.w	r0, r0, #1
   bd8b4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bd8b8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   bd8bc:	fa03 fc0c 	lsl.w	ip, r3, ip
   bd8c0:	ea40 000c 	orr.w	r0, r0, ip
   bd8c4:	fa23 f302 	lsr.w	r3, r3, r2
   bd8c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
   bd8cc:	e7cc      	b.n	bd868 <__aeabi_d2f+0x14>
   bd8ce:	ea7f 5362 	mvns.w	r3, r2, asr #21
   bd8d2:	d107      	bne.n	bd8e4 <__aeabi_d2f+0x90>
   bd8d4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   bd8d8:	bf1e      	ittt	ne
   bd8da:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   bd8de:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   bd8e2:	4770      	bxne	lr
   bd8e4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   bd8e8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   bd8ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   bd8f0:	4770      	bx	lr
   bd8f2:	bf00      	nop

000bd8f4 <__aeabi_d2ulz>:
   bd8f4:	b5d0      	push	{r4, r6, r7, lr}
   bd8f6:	4b0c      	ldr	r3, [pc, #48]	; (bd928 <__aeabi_d2ulz+0x34>)
   bd8f8:	2200      	movs	r2, #0
   bd8fa:	4606      	mov	r6, r0
   bd8fc:	460f      	mov	r7, r1
   bd8fe:	f7ff fcef 	bl	bd2e0 <__aeabi_dmul>
   bd902:	f7ff ff87 	bl	bd814 <__aeabi_d2uiz>
   bd906:	4604      	mov	r4, r0
   bd908:	f7ff fc70 	bl	bd1ec <__aeabi_ui2d>
   bd90c:	4b07      	ldr	r3, [pc, #28]	; (bd92c <__aeabi_d2ulz+0x38>)
   bd90e:	2200      	movs	r2, #0
   bd910:	f7ff fce6 	bl	bd2e0 <__aeabi_dmul>
   bd914:	4602      	mov	r2, r0
   bd916:	460b      	mov	r3, r1
   bd918:	4630      	mov	r0, r6
   bd91a:	4639      	mov	r1, r7
   bd91c:	f7ff fb28 	bl	bcf70 <__aeabi_dsub>
   bd920:	f7ff ff78 	bl	bd814 <__aeabi_d2uiz>
   bd924:	4621      	mov	r1, r4
   bd926:	bdd0      	pop	{r4, r6, r7, pc}
   bd928:	3df00000 	.word	0x3df00000
   bd92c:	41f00000 	.word	0x41f00000

000bd930 <atexit>:
   bd930:	2300      	movs	r3, #0
   bd932:	4601      	mov	r1, r0
   bd934:	461a      	mov	r2, r3
   bd936:	4618      	mov	r0, r3
   bd938:	f000 bfac 	b.w	be894 <__register_exitproc>

000bd93c <atof>:
   bd93c:	2100      	movs	r1, #0
   bd93e:	f000 bf11 	b.w	be764 <strtod>

000bd942 <atoi>:
   bd942:	220a      	movs	r2, #10
   bd944:	2100      	movs	r1, #0
   bd946:	f000 bf9b 	b.w	be880 <strtol>

000bd94a <memcmp>:
   bd94a:	b510      	push	{r4, lr}
   bd94c:	3901      	subs	r1, #1
   bd94e:	4402      	add	r2, r0
   bd950:	4290      	cmp	r0, r2
   bd952:	d101      	bne.n	bd958 <memcmp+0xe>
   bd954:	2000      	movs	r0, #0
   bd956:	e005      	b.n	bd964 <memcmp+0x1a>
   bd958:	7803      	ldrb	r3, [r0, #0]
   bd95a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bd95e:	42a3      	cmp	r3, r4
   bd960:	d001      	beq.n	bd966 <memcmp+0x1c>
   bd962:	1b18      	subs	r0, r3, r4
   bd964:	bd10      	pop	{r4, pc}
   bd966:	3001      	adds	r0, #1
   bd968:	e7f2      	b.n	bd950 <memcmp+0x6>

000bd96a <memcpy>:
   bd96a:	440a      	add	r2, r1
   bd96c:	4291      	cmp	r1, r2
   bd96e:	f100 33ff 	add.w	r3, r0, #4294967295
   bd972:	d100      	bne.n	bd976 <memcpy+0xc>
   bd974:	4770      	bx	lr
   bd976:	b510      	push	{r4, lr}
   bd978:	f811 4b01 	ldrb.w	r4, [r1], #1
   bd97c:	f803 4f01 	strb.w	r4, [r3, #1]!
   bd980:	4291      	cmp	r1, r2
   bd982:	d1f9      	bne.n	bd978 <memcpy+0xe>
   bd984:	bd10      	pop	{r4, pc}

000bd986 <memmove>:
   bd986:	4288      	cmp	r0, r1
   bd988:	b510      	push	{r4, lr}
   bd98a:	eb01 0402 	add.w	r4, r1, r2
   bd98e:	d902      	bls.n	bd996 <memmove+0x10>
   bd990:	4284      	cmp	r4, r0
   bd992:	4623      	mov	r3, r4
   bd994:	d807      	bhi.n	bd9a6 <memmove+0x20>
   bd996:	1e43      	subs	r3, r0, #1
   bd998:	42a1      	cmp	r1, r4
   bd99a:	d008      	beq.n	bd9ae <memmove+0x28>
   bd99c:	f811 2b01 	ldrb.w	r2, [r1], #1
   bd9a0:	f803 2f01 	strb.w	r2, [r3, #1]!
   bd9a4:	e7f8      	b.n	bd998 <memmove+0x12>
   bd9a6:	4402      	add	r2, r0
   bd9a8:	4601      	mov	r1, r0
   bd9aa:	428a      	cmp	r2, r1
   bd9ac:	d100      	bne.n	bd9b0 <memmove+0x2a>
   bd9ae:	bd10      	pop	{r4, pc}
   bd9b0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bd9b4:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bd9b8:	e7f7      	b.n	bd9aa <memmove+0x24>

000bd9ba <memset>:
   bd9ba:	4402      	add	r2, r0
   bd9bc:	4603      	mov	r3, r0
   bd9be:	4293      	cmp	r3, r2
   bd9c0:	d100      	bne.n	bd9c4 <memset+0xa>
   bd9c2:	4770      	bx	lr
   bd9c4:	f803 1b01 	strb.w	r1, [r3], #1
   bd9c8:	e7f9      	b.n	bd9be <memset+0x4>
	...

000bd9cc <srand>:
   bd9cc:	b538      	push	{r3, r4, r5, lr}
   bd9ce:	4b10      	ldr	r3, [pc, #64]	; (bda10 <srand+0x44>)
   bd9d0:	681d      	ldr	r5, [r3, #0]
   bd9d2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bd9d4:	4604      	mov	r4, r0
   bd9d6:	b9b3      	cbnz	r3, bda06 <srand+0x3a>
   bd9d8:	2018      	movs	r0, #24
   bd9da:	f7fb fa9d 	bl	b8f18 <malloc>
   bd9de:	4602      	mov	r2, r0
   bd9e0:	63a8      	str	r0, [r5, #56]	; 0x38
   bd9e2:	b920      	cbnz	r0, bd9ee <srand+0x22>
   bd9e4:	4b0b      	ldr	r3, [pc, #44]	; (bda14 <srand+0x48>)
   bd9e6:	480c      	ldr	r0, [pc, #48]	; (bda18 <srand+0x4c>)
   bd9e8:	2142      	movs	r1, #66	; 0x42
   bd9ea:	f7fb fae5 	bl	b8fb8 <__assert_func>
   bd9ee:	490b      	ldr	r1, [pc, #44]	; (bda1c <srand+0x50>)
   bd9f0:	4b0b      	ldr	r3, [pc, #44]	; (bda20 <srand+0x54>)
   bd9f2:	e9c0 1300 	strd	r1, r3, [r0]
   bd9f6:	4b0b      	ldr	r3, [pc, #44]	; (bda24 <srand+0x58>)
   bd9f8:	6083      	str	r3, [r0, #8]
   bd9fa:	230b      	movs	r3, #11
   bd9fc:	8183      	strh	r3, [r0, #12]
   bd9fe:	2100      	movs	r1, #0
   bda00:	2001      	movs	r0, #1
   bda02:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bda06:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bda08:	2200      	movs	r2, #0
   bda0a:	611c      	str	r4, [r3, #16]
   bda0c:	615a      	str	r2, [r3, #20]
   bda0e:	bd38      	pop	{r3, r4, r5, pc}
   bda10:	2003daa0 	.word	0x2003daa0
   bda14:	000c11e5 	.word	0x000c11e5
   bda18:	000c11fc 	.word	0x000c11fc
   bda1c:	abcd330e 	.word	0xabcd330e
   bda20:	e66d1234 	.word	0xe66d1234
   bda24:	0005deec 	.word	0x0005deec

000bda28 <strcat>:
   bda28:	b510      	push	{r4, lr}
   bda2a:	4602      	mov	r2, r0
   bda2c:	7814      	ldrb	r4, [r2, #0]
   bda2e:	4613      	mov	r3, r2
   bda30:	3201      	adds	r2, #1
   bda32:	2c00      	cmp	r4, #0
   bda34:	d1fa      	bne.n	bda2c <strcat+0x4>
   bda36:	3b01      	subs	r3, #1
   bda38:	f811 2b01 	ldrb.w	r2, [r1], #1
   bda3c:	f803 2f01 	strb.w	r2, [r3, #1]!
   bda40:	2a00      	cmp	r2, #0
   bda42:	d1f9      	bne.n	bda38 <strcat+0x10>
   bda44:	bd10      	pop	{r4, pc}

000bda46 <strcmp>:
   bda46:	f810 2b01 	ldrb.w	r2, [r0], #1
   bda4a:	f811 3b01 	ldrb.w	r3, [r1], #1
   bda4e:	2a01      	cmp	r2, #1
   bda50:	bf28      	it	cs
   bda52:	429a      	cmpcs	r2, r3
   bda54:	d0f7      	beq.n	bda46 <strcmp>
   bda56:	1ad0      	subs	r0, r2, r3
   bda58:	4770      	bx	lr

000bda5a <strcpy>:
   bda5a:	4603      	mov	r3, r0
   bda5c:	f811 2b01 	ldrb.w	r2, [r1], #1
   bda60:	f803 2b01 	strb.w	r2, [r3], #1
   bda64:	2a00      	cmp	r2, #0
   bda66:	d1f9      	bne.n	bda5c <strcpy+0x2>
   bda68:	4770      	bx	lr
	...

000bda6c <strdup>:
   bda6c:	4b02      	ldr	r3, [pc, #8]	; (bda78 <strdup+0xc>)
   bda6e:	4601      	mov	r1, r0
   bda70:	6818      	ldr	r0, [r3, #0]
   bda72:	f000 b803 	b.w	bda7c <_strdup_r>
   bda76:	bf00      	nop
   bda78:	2003daa0 	.word	0x2003daa0

000bda7c <_strdup_r>:
   bda7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bda7e:	4604      	mov	r4, r0
   bda80:	4608      	mov	r0, r1
   bda82:	460d      	mov	r5, r1
   bda84:	f000 f80f 	bl	bdaa6 <strlen>
   bda88:	1c42      	adds	r2, r0, #1
   bda8a:	4611      	mov	r1, r2
   bda8c:	4620      	mov	r0, r4
   bda8e:	9201      	str	r2, [sp, #4]
   bda90:	f7fb fa82 	bl	b8f98 <_malloc_r>
   bda94:	4604      	mov	r4, r0
   bda96:	b118      	cbz	r0, bdaa0 <_strdup_r+0x24>
   bda98:	9a01      	ldr	r2, [sp, #4]
   bda9a:	4629      	mov	r1, r5
   bda9c:	f7ff ff65 	bl	bd96a <memcpy>
   bdaa0:	4620      	mov	r0, r4
   bdaa2:	b003      	add	sp, #12
   bdaa4:	bd30      	pop	{r4, r5, pc}

000bdaa6 <strlen>:
   bdaa6:	4603      	mov	r3, r0
   bdaa8:	f813 2b01 	ldrb.w	r2, [r3], #1
   bdaac:	2a00      	cmp	r2, #0
   bdaae:	d1fb      	bne.n	bdaa8 <strlen+0x2>
   bdab0:	1a18      	subs	r0, r3, r0
   bdab2:	3801      	subs	r0, #1
   bdab4:	4770      	bx	lr

000bdab6 <strncmp>:
   bdab6:	b510      	push	{r4, lr}
   bdab8:	b17a      	cbz	r2, bdada <strncmp+0x24>
   bdaba:	4603      	mov	r3, r0
   bdabc:	3901      	subs	r1, #1
   bdabe:	1884      	adds	r4, r0, r2
   bdac0:	f813 0b01 	ldrb.w	r0, [r3], #1
   bdac4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bdac8:	4290      	cmp	r0, r2
   bdaca:	d101      	bne.n	bdad0 <strncmp+0x1a>
   bdacc:	42a3      	cmp	r3, r4
   bdace:	d101      	bne.n	bdad4 <strncmp+0x1e>
   bdad0:	1a80      	subs	r0, r0, r2
   bdad2:	bd10      	pop	{r4, pc}
   bdad4:	2800      	cmp	r0, #0
   bdad6:	d1f3      	bne.n	bdac0 <strncmp+0xa>
   bdad8:	e7fa      	b.n	bdad0 <strncmp+0x1a>
   bdada:	4610      	mov	r0, r2
   bdadc:	e7f9      	b.n	bdad2 <strncmp+0x1c>

000bdade <strncpy>:
   bdade:	b510      	push	{r4, lr}
   bdae0:	3901      	subs	r1, #1
   bdae2:	4603      	mov	r3, r0
   bdae4:	b132      	cbz	r2, bdaf4 <strncpy+0x16>
   bdae6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bdaea:	f803 4b01 	strb.w	r4, [r3], #1
   bdaee:	3a01      	subs	r2, #1
   bdaf0:	2c00      	cmp	r4, #0
   bdaf2:	d1f7      	bne.n	bdae4 <strncpy+0x6>
   bdaf4:	441a      	add	r2, r3
   bdaf6:	2100      	movs	r1, #0
   bdaf8:	4293      	cmp	r3, r2
   bdafa:	d100      	bne.n	bdafe <strncpy+0x20>
   bdafc:	bd10      	pop	{r4, pc}
   bdafe:	f803 1b01 	strb.w	r1, [r3], #1
   bdb02:	e7f9      	b.n	bdaf8 <strncpy+0x1a>

000bdb04 <strnlen>:
   bdb04:	b510      	push	{r4, lr}
   bdb06:	4602      	mov	r2, r0
   bdb08:	4401      	add	r1, r0
   bdb0a:	428a      	cmp	r2, r1
   bdb0c:	4613      	mov	r3, r2
   bdb0e:	d003      	beq.n	bdb18 <strnlen+0x14>
   bdb10:	781c      	ldrb	r4, [r3, #0]
   bdb12:	3201      	adds	r2, #1
   bdb14:	2c00      	cmp	r4, #0
   bdb16:	d1f8      	bne.n	bdb0a <strnlen+0x6>
   bdb18:	1a18      	subs	r0, r3, r0
   bdb1a:	bd10      	pop	{r4, pc}

000bdb1c <sulp>:
   bdb1c:	b570      	push	{r4, r5, r6, lr}
   bdb1e:	4604      	mov	r4, r0
   bdb20:	460d      	mov	r5, r1
   bdb22:	ec45 4b10 	vmov	d0, r4, r5
   bdb26:	4616      	mov	r6, r2
   bdb28:	f001 fe0e 	bl	bf748 <__ulp>
   bdb2c:	ec51 0b10 	vmov	r0, r1, d0
   bdb30:	b17e      	cbz	r6, bdb52 <sulp+0x36>
   bdb32:	f3c5 530a 	ubfx	r3, r5, #20, #11
   bdb36:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bdb3a:	2b00      	cmp	r3, #0
   bdb3c:	dd09      	ble.n	bdb52 <sulp+0x36>
   bdb3e:	051b      	lsls	r3, r3, #20
   bdb40:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   bdb44:	2400      	movs	r4, #0
   bdb46:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   bdb4a:	4622      	mov	r2, r4
   bdb4c:	462b      	mov	r3, r5
   bdb4e:	f7ff fbc7 	bl	bd2e0 <__aeabi_dmul>
   bdb52:	bd70      	pop	{r4, r5, r6, pc}
   bdb54:	0000      	movs	r0, r0
	...

000bdb58 <_strtod_l>:
   bdb58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bdb5c:	ed2d 8b02 	vpush	{d8}
   bdb60:	b09d      	sub	sp, #116	; 0x74
   bdb62:	461f      	mov	r7, r3
   bdb64:	2300      	movs	r3, #0
   bdb66:	9318      	str	r3, [sp, #96]	; 0x60
   bdb68:	4ba2      	ldr	r3, [pc, #648]	; (bddf4 <_strtod_l+0x29c>)
   bdb6a:	9213      	str	r2, [sp, #76]	; 0x4c
   bdb6c:	681b      	ldr	r3, [r3, #0]
   bdb6e:	9305      	str	r3, [sp, #20]
   bdb70:	4604      	mov	r4, r0
   bdb72:	4618      	mov	r0, r3
   bdb74:	4688      	mov	r8, r1
   bdb76:	f7ff ff96 	bl	bdaa6 <strlen>
   bdb7a:	f04f 0a00 	mov.w	sl, #0
   bdb7e:	4605      	mov	r5, r0
   bdb80:	f04f 0b00 	mov.w	fp, #0
   bdb84:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bdb88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bdb8a:	781a      	ldrb	r2, [r3, #0]
   bdb8c:	2a2b      	cmp	r2, #43	; 0x2b
   bdb8e:	d04e      	beq.n	bdc2e <_strtod_l+0xd6>
   bdb90:	d83b      	bhi.n	bdc0a <_strtod_l+0xb2>
   bdb92:	2a0d      	cmp	r2, #13
   bdb94:	d834      	bhi.n	bdc00 <_strtod_l+0xa8>
   bdb96:	2a08      	cmp	r2, #8
   bdb98:	d834      	bhi.n	bdc04 <_strtod_l+0xac>
   bdb9a:	2a00      	cmp	r2, #0
   bdb9c:	d03e      	beq.n	bdc1c <_strtod_l+0xc4>
   bdb9e:	2300      	movs	r3, #0
   bdba0:	930a      	str	r3, [sp, #40]	; 0x28
   bdba2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   bdba4:	7833      	ldrb	r3, [r6, #0]
   bdba6:	2b30      	cmp	r3, #48	; 0x30
   bdba8:	f040 80b0 	bne.w	bdd0c <_strtod_l+0x1b4>
   bdbac:	7873      	ldrb	r3, [r6, #1]
   bdbae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bdbb2:	2b58      	cmp	r3, #88	; 0x58
   bdbb4:	d168      	bne.n	bdc88 <_strtod_l+0x130>
   bdbb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bdbb8:	9301      	str	r3, [sp, #4]
   bdbba:	ab18      	add	r3, sp, #96	; 0x60
   bdbbc:	9702      	str	r7, [sp, #8]
   bdbbe:	9300      	str	r3, [sp, #0]
   bdbc0:	4a8d      	ldr	r2, [pc, #564]	; (bddf8 <_strtod_l+0x2a0>)
   bdbc2:	ab19      	add	r3, sp, #100	; 0x64
   bdbc4:	a917      	add	r1, sp, #92	; 0x5c
   bdbc6:	4620      	mov	r0, r4
   bdbc8:	f000 ff2e 	bl	bea28 <__gethex>
   bdbcc:	f010 0707 	ands.w	r7, r0, #7
   bdbd0:	4605      	mov	r5, r0
   bdbd2:	d005      	beq.n	bdbe0 <_strtod_l+0x88>
   bdbd4:	2f06      	cmp	r7, #6
   bdbd6:	d12c      	bne.n	bdc32 <_strtod_l+0xda>
   bdbd8:	3601      	adds	r6, #1
   bdbda:	2300      	movs	r3, #0
   bdbdc:	9617      	str	r6, [sp, #92]	; 0x5c
   bdbde:	930a      	str	r3, [sp, #40]	; 0x28
   bdbe0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bdbe2:	2b00      	cmp	r3, #0
   bdbe4:	f040 8590 	bne.w	be708 <_strtod_l+0xbb0>
   bdbe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bdbea:	b1eb      	cbz	r3, bdc28 <_strtod_l+0xd0>
   bdbec:	4652      	mov	r2, sl
   bdbee:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   bdbf2:	ec43 2b10 	vmov	d0, r2, r3
   bdbf6:	b01d      	add	sp, #116	; 0x74
   bdbf8:	ecbd 8b02 	vpop	{d8}
   bdbfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bdc00:	2a20      	cmp	r2, #32
   bdc02:	d1cc      	bne.n	bdb9e <_strtod_l+0x46>
   bdc04:	3301      	adds	r3, #1
   bdc06:	9317      	str	r3, [sp, #92]	; 0x5c
   bdc08:	e7be      	b.n	bdb88 <_strtod_l+0x30>
   bdc0a:	2a2d      	cmp	r2, #45	; 0x2d
   bdc0c:	d1c7      	bne.n	bdb9e <_strtod_l+0x46>
   bdc0e:	2201      	movs	r2, #1
   bdc10:	920a      	str	r2, [sp, #40]	; 0x28
   bdc12:	1c5a      	adds	r2, r3, #1
   bdc14:	9217      	str	r2, [sp, #92]	; 0x5c
   bdc16:	785b      	ldrb	r3, [r3, #1]
   bdc18:	2b00      	cmp	r3, #0
   bdc1a:	d1c2      	bne.n	bdba2 <_strtod_l+0x4a>
   bdc1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bdc1e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bdc22:	2b00      	cmp	r3, #0
   bdc24:	f040 856e 	bne.w	be704 <_strtod_l+0xbac>
   bdc28:	4652      	mov	r2, sl
   bdc2a:	465b      	mov	r3, fp
   bdc2c:	e7e1      	b.n	bdbf2 <_strtod_l+0x9a>
   bdc2e:	2200      	movs	r2, #0
   bdc30:	e7ee      	b.n	bdc10 <_strtod_l+0xb8>
   bdc32:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bdc34:	b13a      	cbz	r2, bdc46 <_strtod_l+0xee>
   bdc36:	2135      	movs	r1, #53	; 0x35
   bdc38:	a81a      	add	r0, sp, #104	; 0x68
   bdc3a:	f001 fe90 	bl	bf95e <__copybits>
   bdc3e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bdc40:	4620      	mov	r0, r4
   bdc42:	f001 fa4f 	bl	bf0e4 <_Bfree>
   bdc46:	3f01      	subs	r7, #1
   bdc48:	2f04      	cmp	r7, #4
   bdc4a:	d806      	bhi.n	bdc5a <_strtod_l+0x102>
   bdc4c:	e8df f007 	tbb	[pc, r7]
   bdc50:	1714030a 	.word	0x1714030a
   bdc54:	0a          	.byte	0x0a
   bdc55:	00          	.byte	0x00
   bdc56:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   bdc5a:	0728      	lsls	r0, r5, #28
   bdc5c:	d5c0      	bpl.n	bdbe0 <_strtod_l+0x88>
   bdc5e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   bdc62:	e7bd      	b.n	bdbe0 <_strtod_l+0x88>
   bdc64:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   bdc68:	9a19      	ldr	r2, [sp, #100]	; 0x64
   bdc6a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   bdc6e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   bdc72:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   bdc76:	e7f0      	b.n	bdc5a <_strtod_l+0x102>
   bdc78:	f8df b180 	ldr.w	fp, [pc, #384]	; bddfc <_strtod_l+0x2a4>
   bdc7c:	e7ed      	b.n	bdc5a <_strtod_l+0x102>
   bdc7e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   bdc82:	f04f 3aff 	mov.w	sl, #4294967295
   bdc86:	e7e8      	b.n	bdc5a <_strtod_l+0x102>
   bdc88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bdc8a:	1c5a      	adds	r2, r3, #1
   bdc8c:	9217      	str	r2, [sp, #92]	; 0x5c
   bdc8e:	785b      	ldrb	r3, [r3, #1]
   bdc90:	2b30      	cmp	r3, #48	; 0x30
   bdc92:	d0f9      	beq.n	bdc88 <_strtod_l+0x130>
   bdc94:	2b00      	cmp	r3, #0
   bdc96:	d0a3      	beq.n	bdbe0 <_strtod_l+0x88>
   bdc98:	2301      	movs	r3, #1
   bdc9a:	f04f 0900 	mov.w	r9, #0
   bdc9e:	9304      	str	r3, [sp, #16]
   bdca0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bdca2:	9308      	str	r3, [sp, #32]
   bdca4:	f8cd 901c 	str.w	r9, [sp, #28]
   bdca8:	464f      	mov	r7, r9
   bdcaa:	220a      	movs	r2, #10
   bdcac:	9817      	ldr	r0, [sp, #92]	; 0x5c
   bdcae:	7806      	ldrb	r6, [r0, #0]
   bdcb0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   bdcb4:	b2d9      	uxtb	r1, r3
   bdcb6:	2909      	cmp	r1, #9
   bdcb8:	d92a      	bls.n	bdd10 <_strtod_l+0x1b8>
   bdcba:	9905      	ldr	r1, [sp, #20]
   bdcbc:	462a      	mov	r2, r5
   bdcbe:	f7ff fefa 	bl	bdab6 <strncmp>
   bdcc2:	b398      	cbz	r0, bdd2c <_strtod_l+0x1d4>
   bdcc4:	2000      	movs	r0, #0
   bdcc6:	4632      	mov	r2, r6
   bdcc8:	463d      	mov	r5, r7
   bdcca:	9005      	str	r0, [sp, #20]
   bdccc:	4603      	mov	r3, r0
   bdcce:	2a65      	cmp	r2, #101	; 0x65
   bdcd0:	d001      	beq.n	bdcd6 <_strtod_l+0x17e>
   bdcd2:	2a45      	cmp	r2, #69	; 0x45
   bdcd4:	d118      	bne.n	bdd08 <_strtod_l+0x1b0>
   bdcd6:	b91d      	cbnz	r5, bdce0 <_strtod_l+0x188>
   bdcd8:	9a04      	ldr	r2, [sp, #16]
   bdcda:	4302      	orrs	r2, r0
   bdcdc:	d09e      	beq.n	bdc1c <_strtod_l+0xc4>
   bdcde:	2500      	movs	r5, #0
   bdce0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   bdce4:	f108 0201 	add.w	r2, r8, #1
   bdce8:	9217      	str	r2, [sp, #92]	; 0x5c
   bdcea:	f898 2001 	ldrb.w	r2, [r8, #1]
   bdcee:	2a2b      	cmp	r2, #43	; 0x2b
   bdcf0:	d075      	beq.n	bddde <_strtod_l+0x286>
   bdcf2:	2a2d      	cmp	r2, #45	; 0x2d
   bdcf4:	d07b      	beq.n	bddee <_strtod_l+0x296>
   bdcf6:	f04f 0c00 	mov.w	ip, #0
   bdcfa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   bdcfe:	2909      	cmp	r1, #9
   bdd00:	f240 8082 	bls.w	bde08 <_strtod_l+0x2b0>
   bdd04:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bdd08:	2600      	movs	r6, #0
   bdd0a:	e09d      	b.n	bde48 <_strtod_l+0x2f0>
   bdd0c:	2300      	movs	r3, #0
   bdd0e:	e7c4      	b.n	bdc9a <_strtod_l+0x142>
   bdd10:	2f08      	cmp	r7, #8
   bdd12:	bfd8      	it	le
   bdd14:	9907      	ldrle	r1, [sp, #28]
   bdd16:	f100 0001 	add.w	r0, r0, #1
   bdd1a:	bfda      	itte	le
   bdd1c:	fb02 3301 	mlale	r3, r2, r1, r3
   bdd20:	9307      	strle	r3, [sp, #28]
   bdd22:	fb02 3909 	mlagt	r9, r2, r9, r3
   bdd26:	3701      	adds	r7, #1
   bdd28:	9017      	str	r0, [sp, #92]	; 0x5c
   bdd2a:	e7bf      	b.n	bdcac <_strtod_l+0x154>
   bdd2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bdd2e:	195a      	adds	r2, r3, r5
   bdd30:	9217      	str	r2, [sp, #92]	; 0x5c
   bdd32:	5d5a      	ldrb	r2, [r3, r5]
   bdd34:	2f00      	cmp	r7, #0
   bdd36:	d037      	beq.n	bdda8 <_strtod_l+0x250>
   bdd38:	9005      	str	r0, [sp, #20]
   bdd3a:	463d      	mov	r5, r7
   bdd3c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   bdd40:	2b09      	cmp	r3, #9
   bdd42:	d912      	bls.n	bdd6a <_strtod_l+0x212>
   bdd44:	2301      	movs	r3, #1
   bdd46:	e7c2      	b.n	bdcce <_strtod_l+0x176>
   bdd48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bdd4a:	1c5a      	adds	r2, r3, #1
   bdd4c:	9217      	str	r2, [sp, #92]	; 0x5c
   bdd4e:	785a      	ldrb	r2, [r3, #1]
   bdd50:	3001      	adds	r0, #1
   bdd52:	2a30      	cmp	r2, #48	; 0x30
   bdd54:	d0f8      	beq.n	bdd48 <_strtod_l+0x1f0>
   bdd56:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   bdd5a:	2b08      	cmp	r3, #8
   bdd5c:	f200 84d9 	bhi.w	be712 <_strtod_l+0xbba>
   bdd60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bdd62:	9005      	str	r0, [sp, #20]
   bdd64:	2000      	movs	r0, #0
   bdd66:	9308      	str	r3, [sp, #32]
   bdd68:	4605      	mov	r5, r0
   bdd6a:	3a30      	subs	r2, #48	; 0x30
   bdd6c:	f100 0301 	add.w	r3, r0, #1
   bdd70:	d014      	beq.n	bdd9c <_strtod_l+0x244>
   bdd72:	9905      	ldr	r1, [sp, #20]
   bdd74:	4419      	add	r1, r3
   bdd76:	9105      	str	r1, [sp, #20]
   bdd78:	462b      	mov	r3, r5
   bdd7a:	eb00 0e05 	add.w	lr, r0, r5
   bdd7e:	210a      	movs	r1, #10
   bdd80:	4573      	cmp	r3, lr
   bdd82:	d113      	bne.n	bddac <_strtod_l+0x254>
   bdd84:	182b      	adds	r3, r5, r0
   bdd86:	2b08      	cmp	r3, #8
   bdd88:	f105 0501 	add.w	r5, r5, #1
   bdd8c:	4405      	add	r5, r0
   bdd8e:	dc1c      	bgt.n	bddca <_strtod_l+0x272>
   bdd90:	9907      	ldr	r1, [sp, #28]
   bdd92:	230a      	movs	r3, #10
   bdd94:	fb03 2301 	mla	r3, r3, r1, r2
   bdd98:	9307      	str	r3, [sp, #28]
   bdd9a:	2300      	movs	r3, #0
   bdd9c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bdd9e:	1c51      	adds	r1, r2, #1
   bdda0:	9117      	str	r1, [sp, #92]	; 0x5c
   bdda2:	7852      	ldrb	r2, [r2, #1]
   bdda4:	4618      	mov	r0, r3
   bdda6:	e7c9      	b.n	bdd3c <_strtod_l+0x1e4>
   bdda8:	4638      	mov	r0, r7
   bddaa:	e7d2      	b.n	bdd52 <_strtod_l+0x1fa>
   bddac:	2b08      	cmp	r3, #8
   bddae:	dc04      	bgt.n	bddba <_strtod_l+0x262>
   bddb0:	9e07      	ldr	r6, [sp, #28]
   bddb2:	434e      	muls	r6, r1
   bddb4:	9607      	str	r6, [sp, #28]
   bddb6:	3301      	adds	r3, #1
   bddb8:	e7e2      	b.n	bdd80 <_strtod_l+0x228>
   bddba:	f103 0c01 	add.w	ip, r3, #1
   bddbe:	f1bc 0f10 	cmp.w	ip, #16
   bddc2:	bfd8      	it	le
   bddc4:	fb01 f909 	mulle.w	r9, r1, r9
   bddc8:	e7f5      	b.n	bddb6 <_strtod_l+0x25e>
   bddca:	2d10      	cmp	r5, #16
   bddcc:	bfdc      	itt	le
   bddce:	230a      	movle	r3, #10
   bddd0:	fb03 2909 	mlale	r9, r3, r9, r2
   bddd4:	e7e1      	b.n	bdd9a <_strtod_l+0x242>
   bddd6:	2300      	movs	r3, #0
   bddd8:	9305      	str	r3, [sp, #20]
   bddda:	2301      	movs	r3, #1
   bdddc:	e77c      	b.n	bdcd8 <_strtod_l+0x180>
   bddde:	f04f 0c00 	mov.w	ip, #0
   bdde2:	f108 0202 	add.w	r2, r8, #2
   bdde6:	9217      	str	r2, [sp, #92]	; 0x5c
   bdde8:	f898 2002 	ldrb.w	r2, [r8, #2]
   bddec:	e785      	b.n	bdcfa <_strtod_l+0x1a2>
   bddee:	f04f 0c01 	mov.w	ip, #1
   bddf2:	e7f6      	b.n	bdde2 <_strtod_l+0x28a>
   bddf4:	000c1470 	.word	0x000c1470
   bddf8:	000c1288 	.word	0x000c1288
   bddfc:	7ff00000 	.word	0x7ff00000
   bde00:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bde02:	1c51      	adds	r1, r2, #1
   bde04:	9117      	str	r1, [sp, #92]	; 0x5c
   bde06:	7852      	ldrb	r2, [r2, #1]
   bde08:	2a30      	cmp	r2, #48	; 0x30
   bde0a:	d0f9      	beq.n	bde00 <_strtod_l+0x2a8>
   bde0c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   bde10:	2908      	cmp	r1, #8
   bde12:	f63f af79 	bhi.w	bdd08 <_strtod_l+0x1b0>
   bde16:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   bde1a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bde1c:	9206      	str	r2, [sp, #24]
   bde1e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bde20:	1c51      	adds	r1, r2, #1
   bde22:	9117      	str	r1, [sp, #92]	; 0x5c
   bde24:	7852      	ldrb	r2, [r2, #1]
   bde26:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   bde2a:	2e09      	cmp	r6, #9
   bde2c:	d937      	bls.n	bde9e <_strtod_l+0x346>
   bde2e:	9e06      	ldr	r6, [sp, #24]
   bde30:	1b89      	subs	r1, r1, r6
   bde32:	2908      	cmp	r1, #8
   bde34:	f644 661f 	movw	r6, #19999	; 0x4e1f
   bde38:	dc02      	bgt.n	bde40 <_strtod_l+0x2e8>
   bde3a:	4576      	cmp	r6, lr
   bde3c:	bfa8      	it	ge
   bde3e:	4676      	movge	r6, lr
   bde40:	f1bc 0f00 	cmp.w	ip, #0
   bde44:	d000      	beq.n	bde48 <_strtod_l+0x2f0>
   bde46:	4276      	negs	r6, r6
   bde48:	2d00      	cmp	r5, #0
   bde4a:	d14d      	bne.n	bdee8 <_strtod_l+0x390>
   bde4c:	9904      	ldr	r1, [sp, #16]
   bde4e:	4301      	orrs	r1, r0
   bde50:	f47f aec6 	bne.w	bdbe0 <_strtod_l+0x88>
   bde54:	2b00      	cmp	r3, #0
   bde56:	f47f aee1 	bne.w	bdc1c <_strtod_l+0xc4>
   bde5a:	2a69      	cmp	r2, #105	; 0x69
   bde5c:	d027      	beq.n	bdeae <_strtod_l+0x356>
   bde5e:	dc24      	bgt.n	bdeaa <_strtod_l+0x352>
   bde60:	2a49      	cmp	r2, #73	; 0x49
   bde62:	d024      	beq.n	bdeae <_strtod_l+0x356>
   bde64:	2a4e      	cmp	r2, #78	; 0x4e
   bde66:	f47f aed9 	bne.w	bdc1c <_strtod_l+0xc4>
   bde6a:	499f      	ldr	r1, [pc, #636]	; (be0e8 <_strtod_l+0x590>)
   bde6c:	a817      	add	r0, sp, #92	; 0x5c
   bde6e:	f001 f833 	bl	beed8 <__match>
   bde72:	2800      	cmp	r0, #0
   bde74:	f43f aed2 	beq.w	bdc1c <_strtod_l+0xc4>
   bde78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bde7a:	781b      	ldrb	r3, [r3, #0]
   bde7c:	2b28      	cmp	r3, #40	; 0x28
   bde7e:	d12d      	bne.n	bdedc <_strtod_l+0x384>
   bde80:	499a      	ldr	r1, [pc, #616]	; (be0ec <_strtod_l+0x594>)
   bde82:	aa1a      	add	r2, sp, #104	; 0x68
   bde84:	a817      	add	r0, sp, #92	; 0x5c
   bde86:	f001 f83b 	bl	bef00 <__hexnan>
   bde8a:	2805      	cmp	r0, #5
   bde8c:	d126      	bne.n	bdedc <_strtod_l+0x384>
   bde8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   bde90:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   bde94:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   bde98:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   bde9c:	e6a0      	b.n	bdbe0 <_strtod_l+0x88>
   bde9e:	210a      	movs	r1, #10
   bdea0:	fb01 2e0e 	mla	lr, r1, lr, r2
   bdea4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   bdea8:	e7b9      	b.n	bde1e <_strtod_l+0x2c6>
   bdeaa:	2a6e      	cmp	r2, #110	; 0x6e
   bdeac:	e7db      	b.n	bde66 <_strtod_l+0x30e>
   bdeae:	4990      	ldr	r1, [pc, #576]	; (be0f0 <_strtod_l+0x598>)
   bdeb0:	a817      	add	r0, sp, #92	; 0x5c
   bdeb2:	f001 f811 	bl	beed8 <__match>
   bdeb6:	2800      	cmp	r0, #0
   bdeb8:	f43f aeb0 	beq.w	bdc1c <_strtod_l+0xc4>
   bdebc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bdebe:	498d      	ldr	r1, [pc, #564]	; (be0f4 <_strtod_l+0x59c>)
   bdec0:	3b01      	subs	r3, #1
   bdec2:	a817      	add	r0, sp, #92	; 0x5c
   bdec4:	9317      	str	r3, [sp, #92]	; 0x5c
   bdec6:	f001 f807 	bl	beed8 <__match>
   bdeca:	b910      	cbnz	r0, bded2 <_strtod_l+0x37a>
   bdecc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bdece:	3301      	adds	r3, #1
   bded0:	9317      	str	r3, [sp, #92]	; 0x5c
   bded2:	f8df b230 	ldr.w	fp, [pc, #560]	; be104 <_strtod_l+0x5ac>
   bded6:	f04f 0a00 	mov.w	sl, #0
   bdeda:	e681      	b.n	bdbe0 <_strtod_l+0x88>
   bdedc:	4886      	ldr	r0, [pc, #536]	; (be0f8 <_strtod_l+0x5a0>)
   bdede:	f001 fd93 	bl	bfa08 <nan>
   bdee2:	ec5b ab10 	vmov	sl, fp, d0
   bdee6:	e67b      	b.n	bdbe0 <_strtod_l+0x88>
   bdee8:	9b05      	ldr	r3, [sp, #20]
   bdeea:	9807      	ldr	r0, [sp, #28]
   bdeec:	1af3      	subs	r3, r6, r3
   bdeee:	2f00      	cmp	r7, #0
   bdef0:	bf08      	it	eq
   bdef2:	462f      	moveq	r7, r5
   bdef4:	2d10      	cmp	r5, #16
   bdef6:	9306      	str	r3, [sp, #24]
   bdef8:	46a8      	mov	r8, r5
   bdefa:	bfa8      	it	ge
   bdefc:	f04f 0810 	movge.w	r8, #16
   bdf00:	f7ff f974 	bl	bd1ec <__aeabi_ui2d>
   bdf04:	2d09      	cmp	r5, #9
   bdf06:	4682      	mov	sl, r0
   bdf08:	468b      	mov	fp, r1
   bdf0a:	dd13      	ble.n	bdf34 <_strtod_l+0x3dc>
   bdf0c:	4b7b      	ldr	r3, [pc, #492]	; (be0fc <_strtod_l+0x5a4>)
   bdf0e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   bdf12:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   bdf16:	f7ff f9e3 	bl	bd2e0 <__aeabi_dmul>
   bdf1a:	4682      	mov	sl, r0
   bdf1c:	4648      	mov	r0, r9
   bdf1e:	468b      	mov	fp, r1
   bdf20:	f7ff f964 	bl	bd1ec <__aeabi_ui2d>
   bdf24:	4602      	mov	r2, r0
   bdf26:	460b      	mov	r3, r1
   bdf28:	4650      	mov	r0, sl
   bdf2a:	4659      	mov	r1, fp
   bdf2c:	f7ff f822 	bl	bcf74 <__adddf3>
   bdf30:	4682      	mov	sl, r0
   bdf32:	468b      	mov	fp, r1
   bdf34:	2d0f      	cmp	r5, #15
   bdf36:	dc38      	bgt.n	bdfaa <_strtod_l+0x452>
   bdf38:	9b06      	ldr	r3, [sp, #24]
   bdf3a:	2b00      	cmp	r3, #0
   bdf3c:	f43f ae50 	beq.w	bdbe0 <_strtod_l+0x88>
   bdf40:	dd24      	ble.n	bdf8c <_strtod_l+0x434>
   bdf42:	2b16      	cmp	r3, #22
   bdf44:	dc0b      	bgt.n	bdf5e <_strtod_l+0x406>
   bdf46:	496d      	ldr	r1, [pc, #436]	; (be0fc <_strtod_l+0x5a4>)
   bdf48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bdf4c:	e9d1 0100 	ldrd	r0, r1, [r1]
   bdf50:	4652      	mov	r2, sl
   bdf52:	465b      	mov	r3, fp
   bdf54:	f7ff f9c4 	bl	bd2e0 <__aeabi_dmul>
   bdf58:	4682      	mov	sl, r0
   bdf5a:	468b      	mov	fp, r1
   bdf5c:	e640      	b.n	bdbe0 <_strtod_l+0x88>
   bdf5e:	9a06      	ldr	r2, [sp, #24]
   bdf60:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   bdf64:	4293      	cmp	r3, r2
   bdf66:	db20      	blt.n	bdfaa <_strtod_l+0x452>
   bdf68:	4c64      	ldr	r4, [pc, #400]	; (be0fc <_strtod_l+0x5a4>)
   bdf6a:	f1c5 050f 	rsb	r5, r5, #15
   bdf6e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   bdf72:	4652      	mov	r2, sl
   bdf74:	465b      	mov	r3, fp
   bdf76:	e9d1 0100 	ldrd	r0, r1, [r1]
   bdf7a:	f7ff f9b1 	bl	bd2e0 <__aeabi_dmul>
   bdf7e:	9b06      	ldr	r3, [sp, #24]
   bdf80:	1b5d      	subs	r5, r3, r5
   bdf82:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   bdf86:	e9d4 2300 	ldrd	r2, r3, [r4]
   bdf8a:	e7e3      	b.n	bdf54 <_strtod_l+0x3fc>
   bdf8c:	9b06      	ldr	r3, [sp, #24]
   bdf8e:	3316      	adds	r3, #22
   bdf90:	db0b      	blt.n	bdfaa <_strtod_l+0x452>
   bdf92:	9b05      	ldr	r3, [sp, #20]
   bdf94:	1b9e      	subs	r6, r3, r6
   bdf96:	4b59      	ldr	r3, [pc, #356]	; (be0fc <_strtod_l+0x5a4>)
   bdf98:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   bdf9c:	e9d6 2300 	ldrd	r2, r3, [r6]
   bdfa0:	4650      	mov	r0, sl
   bdfa2:	4659      	mov	r1, fp
   bdfa4:	f7ff fac6 	bl	bd534 <__aeabi_ddiv>
   bdfa8:	e7d6      	b.n	bdf58 <_strtod_l+0x400>
   bdfaa:	9b06      	ldr	r3, [sp, #24]
   bdfac:	eba5 0808 	sub.w	r8, r5, r8
   bdfb0:	4498      	add	r8, r3
   bdfb2:	f1b8 0f00 	cmp.w	r8, #0
   bdfb6:	dd74      	ble.n	be0a2 <_strtod_l+0x54a>
   bdfb8:	f018 030f 	ands.w	r3, r8, #15
   bdfbc:	d00a      	beq.n	bdfd4 <_strtod_l+0x47c>
   bdfbe:	494f      	ldr	r1, [pc, #316]	; (be0fc <_strtod_l+0x5a4>)
   bdfc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bdfc4:	4652      	mov	r2, sl
   bdfc6:	465b      	mov	r3, fp
   bdfc8:	e9d1 0100 	ldrd	r0, r1, [r1]
   bdfcc:	f7ff f988 	bl	bd2e0 <__aeabi_dmul>
   bdfd0:	4682      	mov	sl, r0
   bdfd2:	468b      	mov	fp, r1
   bdfd4:	f038 080f 	bics.w	r8, r8, #15
   bdfd8:	d04f      	beq.n	be07a <_strtod_l+0x522>
   bdfda:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   bdfde:	dd22      	ble.n	be026 <_strtod_l+0x4ce>
   bdfe0:	2500      	movs	r5, #0
   bdfe2:	462e      	mov	r6, r5
   bdfe4:	9507      	str	r5, [sp, #28]
   bdfe6:	9505      	str	r5, [sp, #20]
   bdfe8:	2322      	movs	r3, #34	; 0x22
   bdfea:	f8df b118 	ldr.w	fp, [pc, #280]	; be104 <_strtod_l+0x5ac>
   bdfee:	6023      	str	r3, [r4, #0]
   bdff0:	f04f 0a00 	mov.w	sl, #0
   bdff4:	9b07      	ldr	r3, [sp, #28]
   bdff6:	2b00      	cmp	r3, #0
   bdff8:	f43f adf2 	beq.w	bdbe0 <_strtod_l+0x88>
   bdffc:	9918      	ldr	r1, [sp, #96]	; 0x60
   bdffe:	4620      	mov	r0, r4
   be000:	f001 f870 	bl	bf0e4 <_Bfree>
   be004:	9905      	ldr	r1, [sp, #20]
   be006:	4620      	mov	r0, r4
   be008:	f001 f86c 	bl	bf0e4 <_Bfree>
   be00c:	4631      	mov	r1, r6
   be00e:	4620      	mov	r0, r4
   be010:	f001 f868 	bl	bf0e4 <_Bfree>
   be014:	9907      	ldr	r1, [sp, #28]
   be016:	4620      	mov	r0, r4
   be018:	f001 f864 	bl	bf0e4 <_Bfree>
   be01c:	4629      	mov	r1, r5
   be01e:	4620      	mov	r0, r4
   be020:	f001 f860 	bl	bf0e4 <_Bfree>
   be024:	e5dc      	b.n	bdbe0 <_strtod_l+0x88>
   be026:	4b36      	ldr	r3, [pc, #216]	; (be100 <_strtod_l+0x5a8>)
   be028:	9304      	str	r3, [sp, #16]
   be02a:	2300      	movs	r3, #0
   be02c:	ea4f 1828 	mov.w	r8, r8, asr #4
   be030:	4650      	mov	r0, sl
   be032:	4659      	mov	r1, fp
   be034:	4699      	mov	r9, r3
   be036:	f1b8 0f01 	cmp.w	r8, #1
   be03a:	dc21      	bgt.n	be080 <_strtod_l+0x528>
   be03c:	b10b      	cbz	r3, be042 <_strtod_l+0x4ea>
   be03e:	4682      	mov	sl, r0
   be040:	468b      	mov	fp, r1
   be042:	4b2f      	ldr	r3, [pc, #188]	; (be100 <_strtod_l+0x5a8>)
   be044:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   be048:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   be04c:	4652      	mov	r2, sl
   be04e:	465b      	mov	r3, fp
   be050:	e9d9 0100 	ldrd	r0, r1, [r9]
   be054:	f7ff f944 	bl	bd2e0 <__aeabi_dmul>
   be058:	4b2a      	ldr	r3, [pc, #168]	; (be104 <_strtod_l+0x5ac>)
   be05a:	460a      	mov	r2, r1
   be05c:	400b      	ands	r3, r1
   be05e:	492a      	ldr	r1, [pc, #168]	; (be108 <_strtod_l+0x5b0>)
   be060:	428b      	cmp	r3, r1
   be062:	4682      	mov	sl, r0
   be064:	d8bc      	bhi.n	bdfe0 <_strtod_l+0x488>
   be066:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   be06a:	428b      	cmp	r3, r1
   be06c:	bf86      	itte	hi
   be06e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; be10c <_strtod_l+0x5b4>
   be072:	f04f 3aff 	movhi.w	sl, #4294967295
   be076:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   be07a:	2300      	movs	r3, #0
   be07c:	9304      	str	r3, [sp, #16]
   be07e:	e084      	b.n	be18a <_strtod_l+0x632>
   be080:	f018 0f01 	tst.w	r8, #1
   be084:	d005      	beq.n	be092 <_strtod_l+0x53a>
   be086:	9b04      	ldr	r3, [sp, #16]
   be088:	e9d3 2300 	ldrd	r2, r3, [r3]
   be08c:	f7ff f928 	bl	bd2e0 <__aeabi_dmul>
   be090:	2301      	movs	r3, #1
   be092:	9a04      	ldr	r2, [sp, #16]
   be094:	3208      	adds	r2, #8
   be096:	f109 0901 	add.w	r9, r9, #1
   be09a:	ea4f 0868 	mov.w	r8, r8, asr #1
   be09e:	9204      	str	r2, [sp, #16]
   be0a0:	e7c9      	b.n	be036 <_strtod_l+0x4de>
   be0a2:	d0ea      	beq.n	be07a <_strtod_l+0x522>
   be0a4:	f1c8 0800 	rsb	r8, r8, #0
   be0a8:	f018 020f 	ands.w	r2, r8, #15
   be0ac:	d00a      	beq.n	be0c4 <_strtod_l+0x56c>
   be0ae:	4b13      	ldr	r3, [pc, #76]	; (be0fc <_strtod_l+0x5a4>)
   be0b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   be0b4:	4650      	mov	r0, sl
   be0b6:	4659      	mov	r1, fp
   be0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   be0bc:	f7ff fa3a 	bl	bd534 <__aeabi_ddiv>
   be0c0:	4682      	mov	sl, r0
   be0c2:	468b      	mov	fp, r1
   be0c4:	ea5f 1828 	movs.w	r8, r8, asr #4
   be0c8:	d0d7      	beq.n	be07a <_strtod_l+0x522>
   be0ca:	f1b8 0f1f 	cmp.w	r8, #31
   be0ce:	dd1f      	ble.n	be110 <_strtod_l+0x5b8>
   be0d0:	2500      	movs	r5, #0
   be0d2:	462e      	mov	r6, r5
   be0d4:	9507      	str	r5, [sp, #28]
   be0d6:	9505      	str	r5, [sp, #20]
   be0d8:	2322      	movs	r3, #34	; 0x22
   be0da:	f04f 0a00 	mov.w	sl, #0
   be0de:	f04f 0b00 	mov.w	fp, #0
   be0e2:	6023      	str	r3, [r4, #0]
   be0e4:	e786      	b.n	bdff4 <_strtod_l+0x49c>
   be0e6:	bf00      	nop
   be0e8:	000c1282 	.word	0x000c1282
   be0ec:	000c129c 	.word	0x000c129c
   be0f0:	000c1279 	.word	0x000c1279
   be0f4:	000c127c 	.word	0x000c127c
   be0f8:	000bff2b 	.word	0x000bff2b
   be0fc:	000c1530 	.word	0x000c1530
   be100:	000c1508 	.word	0x000c1508
   be104:	7ff00000 	.word	0x7ff00000
   be108:	7ca00000 	.word	0x7ca00000
   be10c:	7fefffff 	.word	0x7fefffff
   be110:	f018 0310 	ands.w	r3, r8, #16
   be114:	bf18      	it	ne
   be116:	236a      	movne	r3, #106	; 0x6a
   be118:	f8df 93ac 	ldr.w	r9, [pc, #940]	; be4c8 <_strtod_l+0x970>
   be11c:	9304      	str	r3, [sp, #16]
   be11e:	4650      	mov	r0, sl
   be120:	4659      	mov	r1, fp
   be122:	2300      	movs	r3, #0
   be124:	f018 0f01 	tst.w	r8, #1
   be128:	d004      	beq.n	be134 <_strtod_l+0x5dc>
   be12a:	e9d9 2300 	ldrd	r2, r3, [r9]
   be12e:	f7ff f8d7 	bl	bd2e0 <__aeabi_dmul>
   be132:	2301      	movs	r3, #1
   be134:	ea5f 0868 	movs.w	r8, r8, asr #1
   be138:	f109 0908 	add.w	r9, r9, #8
   be13c:	d1f2      	bne.n	be124 <_strtod_l+0x5cc>
   be13e:	b10b      	cbz	r3, be144 <_strtod_l+0x5ec>
   be140:	4682      	mov	sl, r0
   be142:	468b      	mov	fp, r1
   be144:	9b04      	ldr	r3, [sp, #16]
   be146:	b1c3      	cbz	r3, be17a <_strtod_l+0x622>
   be148:	f3cb 520a 	ubfx	r2, fp, #20, #11
   be14c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   be150:	2b00      	cmp	r3, #0
   be152:	4659      	mov	r1, fp
   be154:	dd11      	ble.n	be17a <_strtod_l+0x622>
   be156:	2b1f      	cmp	r3, #31
   be158:	f340 8124 	ble.w	be3a4 <_strtod_l+0x84c>
   be15c:	2b34      	cmp	r3, #52	; 0x34
   be15e:	bfde      	ittt	le
   be160:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   be164:	f04f 33ff 	movle.w	r3, #4294967295
   be168:	fa03 f202 	lslle.w	r2, r3, r2
   be16c:	f04f 0a00 	mov.w	sl, #0
   be170:	bfcc      	ite	gt
   be172:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   be176:	ea02 0b01 	andle.w	fp, r2, r1
   be17a:	2200      	movs	r2, #0
   be17c:	2300      	movs	r3, #0
   be17e:	4650      	mov	r0, sl
   be180:	4659      	mov	r1, fp
   be182:	f7ff fb15 	bl	bd7b0 <__aeabi_dcmpeq>
   be186:	2800      	cmp	r0, #0
   be188:	d1a2      	bne.n	be0d0 <_strtod_l+0x578>
   be18a:	9b07      	ldr	r3, [sp, #28]
   be18c:	9300      	str	r3, [sp, #0]
   be18e:	9908      	ldr	r1, [sp, #32]
   be190:	462b      	mov	r3, r5
   be192:	463a      	mov	r2, r7
   be194:	4620      	mov	r0, r4
   be196:	f001 f80d 	bl	bf1b4 <__s2b>
   be19a:	9007      	str	r0, [sp, #28]
   be19c:	2800      	cmp	r0, #0
   be19e:	f43f af1f 	beq.w	bdfe0 <_strtod_l+0x488>
   be1a2:	9b05      	ldr	r3, [sp, #20]
   be1a4:	1b9e      	subs	r6, r3, r6
   be1a6:	9b06      	ldr	r3, [sp, #24]
   be1a8:	2b00      	cmp	r3, #0
   be1aa:	bfb4      	ite	lt
   be1ac:	4633      	movlt	r3, r6
   be1ae:	2300      	movge	r3, #0
   be1b0:	930c      	str	r3, [sp, #48]	; 0x30
   be1b2:	9b06      	ldr	r3, [sp, #24]
   be1b4:	2500      	movs	r5, #0
   be1b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   be1ba:	9312      	str	r3, [sp, #72]	; 0x48
   be1bc:	462e      	mov	r6, r5
   be1be:	9b07      	ldr	r3, [sp, #28]
   be1c0:	4620      	mov	r0, r4
   be1c2:	6859      	ldr	r1, [r3, #4]
   be1c4:	f000 ff4e 	bl	bf064 <_Balloc>
   be1c8:	9005      	str	r0, [sp, #20]
   be1ca:	2800      	cmp	r0, #0
   be1cc:	f43f af0c 	beq.w	bdfe8 <_strtod_l+0x490>
   be1d0:	9b07      	ldr	r3, [sp, #28]
   be1d2:	691a      	ldr	r2, [r3, #16]
   be1d4:	3202      	adds	r2, #2
   be1d6:	f103 010c 	add.w	r1, r3, #12
   be1da:	0092      	lsls	r2, r2, #2
   be1dc:	300c      	adds	r0, #12
   be1de:	f7ff fbc4 	bl	bd96a <memcpy>
   be1e2:	ec4b ab10 	vmov	d0, sl, fp
   be1e6:	aa1a      	add	r2, sp, #104	; 0x68
   be1e8:	a919      	add	r1, sp, #100	; 0x64
   be1ea:	4620      	mov	r0, r4
   be1ec:	f001 fb28 	bl	bf840 <__d2b>
   be1f0:	ec4b ab18 	vmov	d8, sl, fp
   be1f4:	9018      	str	r0, [sp, #96]	; 0x60
   be1f6:	2800      	cmp	r0, #0
   be1f8:	f43f aef6 	beq.w	bdfe8 <_strtod_l+0x490>
   be1fc:	2101      	movs	r1, #1
   be1fe:	4620      	mov	r0, r4
   be200:	f001 f872 	bl	bf2e8 <__i2b>
   be204:	4606      	mov	r6, r0
   be206:	2800      	cmp	r0, #0
   be208:	f43f aeee 	beq.w	bdfe8 <_strtod_l+0x490>
   be20c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   be20e:	9904      	ldr	r1, [sp, #16]
   be210:	2b00      	cmp	r3, #0
   be212:	bfab      	itete	ge
   be214:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   be216:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   be218:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   be21a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   be21e:	bfac      	ite	ge
   be220:	eb03 0902 	addge.w	r9, r3, r2
   be224:	1ad7      	sublt	r7, r2, r3
   be226:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   be228:	eba3 0801 	sub.w	r8, r3, r1
   be22c:	4490      	add	r8, r2
   be22e:	4ba1      	ldr	r3, [pc, #644]	; (be4b4 <_strtod_l+0x95c>)
   be230:	f108 38ff 	add.w	r8, r8, #4294967295
   be234:	4598      	cmp	r8, r3
   be236:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   be23a:	f280 80c7 	bge.w	be3cc <_strtod_l+0x874>
   be23e:	eba3 0308 	sub.w	r3, r3, r8
   be242:	2b1f      	cmp	r3, #31
   be244:	eba2 0203 	sub.w	r2, r2, r3
   be248:	f04f 0101 	mov.w	r1, #1
   be24c:	f300 80b1 	bgt.w	be3b2 <_strtod_l+0x85a>
   be250:	fa01 f303 	lsl.w	r3, r1, r3
   be254:	930d      	str	r3, [sp, #52]	; 0x34
   be256:	2300      	movs	r3, #0
   be258:	9308      	str	r3, [sp, #32]
   be25a:	eb09 0802 	add.w	r8, r9, r2
   be25e:	9b04      	ldr	r3, [sp, #16]
   be260:	45c1      	cmp	r9, r8
   be262:	4417      	add	r7, r2
   be264:	441f      	add	r7, r3
   be266:	464b      	mov	r3, r9
   be268:	bfa8      	it	ge
   be26a:	4643      	movge	r3, r8
   be26c:	42bb      	cmp	r3, r7
   be26e:	bfa8      	it	ge
   be270:	463b      	movge	r3, r7
   be272:	2b00      	cmp	r3, #0
   be274:	bfc2      	ittt	gt
   be276:	eba8 0803 	subgt.w	r8, r8, r3
   be27a:	1aff      	subgt	r7, r7, r3
   be27c:	eba9 0903 	subgt.w	r9, r9, r3
   be280:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   be282:	2b00      	cmp	r3, #0
   be284:	dd17      	ble.n	be2b6 <_strtod_l+0x75e>
   be286:	4631      	mov	r1, r6
   be288:	461a      	mov	r2, r3
   be28a:	4620      	mov	r0, r4
   be28c:	f001 f8ec 	bl	bf468 <__pow5mult>
   be290:	4606      	mov	r6, r0
   be292:	2800      	cmp	r0, #0
   be294:	f43f aea8 	beq.w	bdfe8 <_strtod_l+0x490>
   be298:	4601      	mov	r1, r0
   be29a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   be29c:	4620      	mov	r0, r4
   be29e:	f001 f839 	bl	bf314 <__multiply>
   be2a2:	900b      	str	r0, [sp, #44]	; 0x2c
   be2a4:	2800      	cmp	r0, #0
   be2a6:	f43f ae9f 	beq.w	bdfe8 <_strtod_l+0x490>
   be2aa:	9918      	ldr	r1, [sp, #96]	; 0x60
   be2ac:	4620      	mov	r0, r4
   be2ae:	f000 ff19 	bl	bf0e4 <_Bfree>
   be2b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   be2b4:	9318      	str	r3, [sp, #96]	; 0x60
   be2b6:	f1b8 0f00 	cmp.w	r8, #0
   be2ba:	f300 808c 	bgt.w	be3d6 <_strtod_l+0x87e>
   be2be:	9b06      	ldr	r3, [sp, #24]
   be2c0:	2b00      	cmp	r3, #0
   be2c2:	dd08      	ble.n	be2d6 <_strtod_l+0x77e>
   be2c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   be2c6:	9905      	ldr	r1, [sp, #20]
   be2c8:	4620      	mov	r0, r4
   be2ca:	f001 f8cd 	bl	bf468 <__pow5mult>
   be2ce:	9005      	str	r0, [sp, #20]
   be2d0:	2800      	cmp	r0, #0
   be2d2:	f43f ae89 	beq.w	bdfe8 <_strtod_l+0x490>
   be2d6:	2f00      	cmp	r7, #0
   be2d8:	dd08      	ble.n	be2ec <_strtod_l+0x794>
   be2da:	9905      	ldr	r1, [sp, #20]
   be2dc:	463a      	mov	r2, r7
   be2de:	4620      	mov	r0, r4
   be2e0:	f001 f91c 	bl	bf51c <__lshift>
   be2e4:	9005      	str	r0, [sp, #20]
   be2e6:	2800      	cmp	r0, #0
   be2e8:	f43f ae7e 	beq.w	bdfe8 <_strtod_l+0x490>
   be2ec:	f1b9 0f00 	cmp.w	r9, #0
   be2f0:	dd08      	ble.n	be304 <_strtod_l+0x7ac>
   be2f2:	4631      	mov	r1, r6
   be2f4:	464a      	mov	r2, r9
   be2f6:	4620      	mov	r0, r4
   be2f8:	f001 f910 	bl	bf51c <__lshift>
   be2fc:	4606      	mov	r6, r0
   be2fe:	2800      	cmp	r0, #0
   be300:	f43f ae72 	beq.w	bdfe8 <_strtod_l+0x490>
   be304:	9a05      	ldr	r2, [sp, #20]
   be306:	9918      	ldr	r1, [sp, #96]	; 0x60
   be308:	4620      	mov	r0, r4
   be30a:	f001 f993 	bl	bf634 <__mdiff>
   be30e:	4605      	mov	r5, r0
   be310:	2800      	cmp	r0, #0
   be312:	f43f ae69 	beq.w	bdfe8 <_strtod_l+0x490>
   be316:	68c3      	ldr	r3, [r0, #12]
   be318:	930b      	str	r3, [sp, #44]	; 0x2c
   be31a:	2300      	movs	r3, #0
   be31c:	60c3      	str	r3, [r0, #12]
   be31e:	4631      	mov	r1, r6
   be320:	f001 f96c 	bl	bf5fc <__mcmp>
   be324:	2800      	cmp	r0, #0
   be326:	da60      	bge.n	be3ea <_strtod_l+0x892>
   be328:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   be32a:	ea53 030a 	orrs.w	r3, r3, sl
   be32e:	f040 8082 	bne.w	be436 <_strtod_l+0x8de>
   be332:	f3cb 0313 	ubfx	r3, fp, #0, #20
   be336:	2b00      	cmp	r3, #0
   be338:	d17d      	bne.n	be436 <_strtod_l+0x8de>
   be33a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   be33e:	0d1b      	lsrs	r3, r3, #20
   be340:	051b      	lsls	r3, r3, #20
   be342:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   be346:	d976      	bls.n	be436 <_strtod_l+0x8de>
   be348:	696b      	ldr	r3, [r5, #20]
   be34a:	b913      	cbnz	r3, be352 <_strtod_l+0x7fa>
   be34c:	692b      	ldr	r3, [r5, #16]
   be34e:	2b01      	cmp	r3, #1
   be350:	dd71      	ble.n	be436 <_strtod_l+0x8de>
   be352:	4629      	mov	r1, r5
   be354:	2201      	movs	r2, #1
   be356:	4620      	mov	r0, r4
   be358:	f001 f8e0 	bl	bf51c <__lshift>
   be35c:	4631      	mov	r1, r6
   be35e:	4605      	mov	r5, r0
   be360:	f001 f94c 	bl	bf5fc <__mcmp>
   be364:	2800      	cmp	r0, #0
   be366:	dd66      	ble.n	be436 <_strtod_l+0x8de>
   be368:	9904      	ldr	r1, [sp, #16]
   be36a:	4a53      	ldr	r2, [pc, #332]	; (be4b8 <_strtod_l+0x960>)
   be36c:	465b      	mov	r3, fp
   be36e:	2900      	cmp	r1, #0
   be370:	f000 8081 	beq.w	be476 <_strtod_l+0x91e>
   be374:	ea02 010b 	and.w	r1, r2, fp
   be378:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   be37c:	dc7b      	bgt.n	be476 <_strtod_l+0x91e>
   be37e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   be382:	f77f aea9 	ble.w	be0d8 <_strtod_l+0x580>
   be386:	4b4d      	ldr	r3, [pc, #308]	; (be4bc <_strtod_l+0x964>)
   be388:	4650      	mov	r0, sl
   be38a:	4659      	mov	r1, fp
   be38c:	2200      	movs	r2, #0
   be38e:	f7fe ffa7 	bl	bd2e0 <__aeabi_dmul>
   be392:	460b      	mov	r3, r1
   be394:	4303      	orrs	r3, r0
   be396:	bf08      	it	eq
   be398:	2322      	moveq	r3, #34	; 0x22
   be39a:	4682      	mov	sl, r0
   be39c:	468b      	mov	fp, r1
   be39e:	bf08      	it	eq
   be3a0:	6023      	streq	r3, [r4, #0]
   be3a2:	e62b      	b.n	bdffc <_strtod_l+0x4a4>
   be3a4:	f04f 32ff 	mov.w	r2, #4294967295
   be3a8:	fa02 f303 	lsl.w	r3, r2, r3
   be3ac:	ea03 0a0a 	and.w	sl, r3, sl
   be3b0:	e6e3      	b.n	be17a <_strtod_l+0x622>
   be3b2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   be3b6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   be3ba:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   be3be:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   be3c2:	fa01 f308 	lsl.w	r3, r1, r8
   be3c6:	9308      	str	r3, [sp, #32]
   be3c8:	910d      	str	r1, [sp, #52]	; 0x34
   be3ca:	e746      	b.n	be25a <_strtod_l+0x702>
   be3cc:	2300      	movs	r3, #0
   be3ce:	9308      	str	r3, [sp, #32]
   be3d0:	2301      	movs	r3, #1
   be3d2:	930d      	str	r3, [sp, #52]	; 0x34
   be3d4:	e741      	b.n	be25a <_strtod_l+0x702>
   be3d6:	9918      	ldr	r1, [sp, #96]	; 0x60
   be3d8:	4642      	mov	r2, r8
   be3da:	4620      	mov	r0, r4
   be3dc:	f001 f89e 	bl	bf51c <__lshift>
   be3e0:	9018      	str	r0, [sp, #96]	; 0x60
   be3e2:	2800      	cmp	r0, #0
   be3e4:	f47f af6b 	bne.w	be2be <_strtod_l+0x766>
   be3e8:	e5fe      	b.n	bdfe8 <_strtod_l+0x490>
   be3ea:	465f      	mov	r7, fp
   be3ec:	d16e      	bne.n	be4cc <_strtod_l+0x974>
   be3ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   be3f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   be3f4:	b342      	cbz	r2, be448 <_strtod_l+0x8f0>
   be3f6:	4a32      	ldr	r2, [pc, #200]	; (be4c0 <_strtod_l+0x968>)
   be3f8:	4293      	cmp	r3, r2
   be3fa:	d128      	bne.n	be44e <_strtod_l+0x8f6>
   be3fc:	9b04      	ldr	r3, [sp, #16]
   be3fe:	4651      	mov	r1, sl
   be400:	b1eb      	cbz	r3, be43e <_strtod_l+0x8e6>
   be402:	4b2d      	ldr	r3, [pc, #180]	; (be4b8 <_strtod_l+0x960>)
   be404:	403b      	ands	r3, r7
   be406:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   be40a:	f04f 32ff 	mov.w	r2, #4294967295
   be40e:	d819      	bhi.n	be444 <_strtod_l+0x8ec>
   be410:	0d1b      	lsrs	r3, r3, #20
   be412:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   be416:	fa02 f303 	lsl.w	r3, r2, r3
   be41a:	4299      	cmp	r1, r3
   be41c:	d117      	bne.n	be44e <_strtod_l+0x8f6>
   be41e:	4b29      	ldr	r3, [pc, #164]	; (be4c4 <_strtod_l+0x96c>)
   be420:	429f      	cmp	r7, r3
   be422:	d102      	bne.n	be42a <_strtod_l+0x8d2>
   be424:	3101      	adds	r1, #1
   be426:	f43f addf 	beq.w	bdfe8 <_strtod_l+0x490>
   be42a:	4b23      	ldr	r3, [pc, #140]	; (be4b8 <_strtod_l+0x960>)
   be42c:	403b      	ands	r3, r7
   be42e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   be432:	f04f 0a00 	mov.w	sl, #0
   be436:	9b04      	ldr	r3, [sp, #16]
   be438:	2b00      	cmp	r3, #0
   be43a:	d1a4      	bne.n	be386 <_strtod_l+0x82e>
   be43c:	e5de      	b.n	bdffc <_strtod_l+0x4a4>
   be43e:	f04f 33ff 	mov.w	r3, #4294967295
   be442:	e7ea      	b.n	be41a <_strtod_l+0x8c2>
   be444:	4613      	mov	r3, r2
   be446:	e7e8      	b.n	be41a <_strtod_l+0x8c2>
   be448:	ea53 030a 	orrs.w	r3, r3, sl
   be44c:	d08c      	beq.n	be368 <_strtod_l+0x810>
   be44e:	9b08      	ldr	r3, [sp, #32]
   be450:	b1db      	cbz	r3, be48a <_strtod_l+0x932>
   be452:	423b      	tst	r3, r7
   be454:	d0ef      	beq.n	be436 <_strtod_l+0x8de>
   be456:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   be458:	9a04      	ldr	r2, [sp, #16]
   be45a:	4650      	mov	r0, sl
   be45c:	4659      	mov	r1, fp
   be45e:	b1c3      	cbz	r3, be492 <_strtod_l+0x93a>
   be460:	f7ff fb5c 	bl	bdb1c <sulp>
   be464:	4602      	mov	r2, r0
   be466:	460b      	mov	r3, r1
   be468:	ec51 0b18 	vmov	r0, r1, d8
   be46c:	f7fe fd82 	bl	bcf74 <__adddf3>
   be470:	4682      	mov	sl, r0
   be472:	468b      	mov	fp, r1
   be474:	e7df      	b.n	be436 <_strtod_l+0x8de>
   be476:	4013      	ands	r3, r2
   be478:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   be47c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   be480:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   be484:	f04f 3aff 	mov.w	sl, #4294967295
   be488:	e7d5      	b.n	be436 <_strtod_l+0x8de>
   be48a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   be48c:	ea13 0f0a 	tst.w	r3, sl
   be490:	e7e0      	b.n	be454 <_strtod_l+0x8fc>
   be492:	f7ff fb43 	bl	bdb1c <sulp>
   be496:	4602      	mov	r2, r0
   be498:	460b      	mov	r3, r1
   be49a:	ec51 0b18 	vmov	r0, r1, d8
   be49e:	f7fe fd67 	bl	bcf70 <__aeabi_dsub>
   be4a2:	2200      	movs	r2, #0
   be4a4:	2300      	movs	r3, #0
   be4a6:	4682      	mov	sl, r0
   be4a8:	468b      	mov	fp, r1
   be4aa:	f7ff f981 	bl	bd7b0 <__aeabi_dcmpeq>
   be4ae:	2800      	cmp	r0, #0
   be4b0:	d0c1      	beq.n	be436 <_strtod_l+0x8de>
   be4b2:	e611      	b.n	be0d8 <_strtod_l+0x580>
   be4b4:	fffffc02 	.word	0xfffffc02
   be4b8:	7ff00000 	.word	0x7ff00000
   be4bc:	39500000 	.word	0x39500000
   be4c0:	000fffff 	.word	0x000fffff
   be4c4:	7fefffff 	.word	0x7fefffff
   be4c8:	000c12b0 	.word	0x000c12b0
   be4cc:	4631      	mov	r1, r6
   be4ce:	4628      	mov	r0, r5
   be4d0:	f001 fa12 	bl	bf8f8 <__ratio>
   be4d4:	ec59 8b10 	vmov	r8, r9, d0
   be4d8:	ee10 0a10 	vmov	r0, s0
   be4dc:	2200      	movs	r2, #0
   be4de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   be4e2:	4649      	mov	r1, r9
   be4e4:	f7ff f978 	bl	bd7d8 <__aeabi_dcmple>
   be4e8:	2800      	cmp	r0, #0
   be4ea:	d07a      	beq.n	be5e2 <_strtod_l+0xa8a>
   be4ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   be4ee:	2b00      	cmp	r3, #0
   be4f0:	d04a      	beq.n	be588 <_strtod_l+0xa30>
   be4f2:	4b95      	ldr	r3, [pc, #596]	; (be748 <_strtod_l+0xbf0>)
   be4f4:	2200      	movs	r2, #0
   be4f6:	e9cd 2308 	strd	r2, r3, [sp, #32]
   be4fa:	f8df 924c 	ldr.w	r9, [pc, #588]	; be748 <_strtod_l+0xbf0>
   be4fe:	f04f 0800 	mov.w	r8, #0
   be502:	4b92      	ldr	r3, [pc, #584]	; (be74c <_strtod_l+0xbf4>)
   be504:	403b      	ands	r3, r7
   be506:	930d      	str	r3, [sp, #52]	; 0x34
   be508:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   be50a:	4b91      	ldr	r3, [pc, #580]	; (be750 <_strtod_l+0xbf8>)
   be50c:	429a      	cmp	r2, r3
   be50e:	f040 80b0 	bne.w	be672 <_strtod_l+0xb1a>
   be512:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   be516:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   be51a:	ec4b ab10 	vmov	d0, sl, fp
   be51e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   be522:	f001 f911 	bl	bf748 <__ulp>
   be526:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   be52a:	ec53 2b10 	vmov	r2, r3, d0
   be52e:	f7fe fed7 	bl	bd2e0 <__aeabi_dmul>
   be532:	4652      	mov	r2, sl
   be534:	465b      	mov	r3, fp
   be536:	f7fe fd1d 	bl	bcf74 <__adddf3>
   be53a:	460b      	mov	r3, r1
   be53c:	4983      	ldr	r1, [pc, #524]	; (be74c <_strtod_l+0xbf4>)
   be53e:	4a85      	ldr	r2, [pc, #532]	; (be754 <_strtod_l+0xbfc>)
   be540:	4019      	ands	r1, r3
   be542:	4291      	cmp	r1, r2
   be544:	4682      	mov	sl, r0
   be546:	d960      	bls.n	be60a <_strtod_l+0xab2>
   be548:	ee18 3a90 	vmov	r3, s17
   be54c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   be550:	4293      	cmp	r3, r2
   be552:	d104      	bne.n	be55e <_strtod_l+0xa06>
   be554:	ee18 3a10 	vmov	r3, s16
   be558:	3301      	adds	r3, #1
   be55a:	f43f ad45 	beq.w	bdfe8 <_strtod_l+0x490>
   be55e:	f8df b200 	ldr.w	fp, [pc, #512]	; be760 <_strtod_l+0xc08>
   be562:	f04f 3aff 	mov.w	sl, #4294967295
   be566:	9918      	ldr	r1, [sp, #96]	; 0x60
   be568:	4620      	mov	r0, r4
   be56a:	f000 fdbb 	bl	bf0e4 <_Bfree>
   be56e:	9905      	ldr	r1, [sp, #20]
   be570:	4620      	mov	r0, r4
   be572:	f000 fdb7 	bl	bf0e4 <_Bfree>
   be576:	4631      	mov	r1, r6
   be578:	4620      	mov	r0, r4
   be57a:	f000 fdb3 	bl	bf0e4 <_Bfree>
   be57e:	4629      	mov	r1, r5
   be580:	4620      	mov	r0, r4
   be582:	f000 fdaf 	bl	bf0e4 <_Bfree>
   be586:	e61a      	b.n	be1be <_strtod_l+0x666>
   be588:	f1ba 0f00 	cmp.w	sl, #0
   be58c:	d11b      	bne.n	be5c6 <_strtod_l+0xa6e>
   be58e:	f3cb 0313 	ubfx	r3, fp, #0, #20
   be592:	b9f3      	cbnz	r3, be5d2 <_strtod_l+0xa7a>
   be594:	4b6c      	ldr	r3, [pc, #432]	; (be748 <_strtod_l+0xbf0>)
   be596:	2200      	movs	r2, #0
   be598:	4640      	mov	r0, r8
   be59a:	4649      	mov	r1, r9
   be59c:	f7ff f912 	bl	bd7c4 <__aeabi_dcmplt>
   be5a0:	b9d0      	cbnz	r0, be5d8 <_strtod_l+0xa80>
   be5a2:	4640      	mov	r0, r8
   be5a4:	4649      	mov	r1, r9
   be5a6:	4b6c      	ldr	r3, [pc, #432]	; (be758 <_strtod_l+0xc00>)
   be5a8:	2200      	movs	r2, #0
   be5aa:	f7fe fe99 	bl	bd2e0 <__aeabi_dmul>
   be5ae:	4680      	mov	r8, r0
   be5b0:	4689      	mov	r9, r1
   be5b2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   be5b6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   be5ba:	9315      	str	r3, [sp, #84]	; 0x54
   be5bc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   be5c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
   be5c4:	e79d      	b.n	be502 <_strtod_l+0x9aa>
   be5c6:	f1ba 0f01 	cmp.w	sl, #1
   be5ca:	d102      	bne.n	be5d2 <_strtod_l+0xa7a>
   be5cc:	2f00      	cmp	r7, #0
   be5ce:	f43f ad83 	beq.w	be0d8 <_strtod_l+0x580>
   be5d2:	4b62      	ldr	r3, [pc, #392]	; (be75c <_strtod_l+0xc04>)
   be5d4:	2200      	movs	r2, #0
   be5d6:	e78e      	b.n	be4f6 <_strtod_l+0x99e>
   be5d8:	f8df 917c 	ldr.w	r9, [pc, #380]	; be758 <_strtod_l+0xc00>
   be5dc:	f04f 0800 	mov.w	r8, #0
   be5e0:	e7e7      	b.n	be5b2 <_strtod_l+0xa5a>
   be5e2:	4b5d      	ldr	r3, [pc, #372]	; (be758 <_strtod_l+0xc00>)
   be5e4:	4640      	mov	r0, r8
   be5e6:	4649      	mov	r1, r9
   be5e8:	2200      	movs	r2, #0
   be5ea:	f7fe fe79 	bl	bd2e0 <__aeabi_dmul>
   be5ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   be5f0:	4680      	mov	r8, r0
   be5f2:	4689      	mov	r9, r1
   be5f4:	b933      	cbnz	r3, be604 <_strtod_l+0xaac>
   be5f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   be5fa:	900e      	str	r0, [sp, #56]	; 0x38
   be5fc:	930f      	str	r3, [sp, #60]	; 0x3c
   be5fe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   be602:	e7dd      	b.n	be5c0 <_strtod_l+0xa68>
   be604:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   be608:	e7f9      	b.n	be5fe <_strtod_l+0xaa6>
   be60a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   be60e:	9b04      	ldr	r3, [sp, #16]
   be610:	2b00      	cmp	r3, #0
   be612:	d1a8      	bne.n	be566 <_strtod_l+0xa0e>
   be614:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   be618:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   be61a:	0d1b      	lsrs	r3, r3, #20
   be61c:	051b      	lsls	r3, r3, #20
   be61e:	429a      	cmp	r2, r3
   be620:	d1a1      	bne.n	be566 <_strtod_l+0xa0e>
   be622:	4640      	mov	r0, r8
   be624:	4649      	mov	r1, r9
   be626:	f001 fa05 	bl	bfa34 <__aeabi_d2lz>
   be62a:	f7fe fe2b 	bl	bd284 <__aeabi_l2d>
   be62e:	4602      	mov	r2, r0
   be630:	460b      	mov	r3, r1
   be632:	4640      	mov	r0, r8
   be634:	4649      	mov	r1, r9
   be636:	f7fe fc9b 	bl	bcf70 <__aeabi_dsub>
   be63a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   be63c:	f3cb 0313 	ubfx	r3, fp, #0, #20
   be640:	ea43 030a 	orr.w	r3, r3, sl
   be644:	4313      	orrs	r3, r2
   be646:	4680      	mov	r8, r0
   be648:	4689      	mov	r9, r1
   be64a:	d055      	beq.n	be6f8 <_strtod_l+0xba0>
   be64c:	a336      	add	r3, pc, #216	; (adr r3, be728 <_strtod_l+0xbd0>)
   be64e:	e9d3 2300 	ldrd	r2, r3, [r3]
   be652:	f7ff f8b7 	bl	bd7c4 <__aeabi_dcmplt>
   be656:	2800      	cmp	r0, #0
   be658:	f47f acd0 	bne.w	bdffc <_strtod_l+0x4a4>
   be65c:	a334      	add	r3, pc, #208	; (adr r3, be730 <_strtod_l+0xbd8>)
   be65e:	e9d3 2300 	ldrd	r2, r3, [r3]
   be662:	4640      	mov	r0, r8
   be664:	4649      	mov	r1, r9
   be666:	f7ff f8cb 	bl	bd800 <__aeabi_dcmpgt>
   be66a:	2800      	cmp	r0, #0
   be66c:	f43f af7b 	beq.w	be566 <_strtod_l+0xa0e>
   be670:	e4c4      	b.n	bdffc <_strtod_l+0x4a4>
   be672:	9b04      	ldr	r3, [sp, #16]
   be674:	b333      	cbz	r3, be6c4 <_strtod_l+0xb6c>
   be676:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   be678:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   be67c:	d822      	bhi.n	be6c4 <_strtod_l+0xb6c>
   be67e:	a32e      	add	r3, pc, #184	; (adr r3, be738 <_strtod_l+0xbe0>)
   be680:	e9d3 2300 	ldrd	r2, r3, [r3]
   be684:	4640      	mov	r0, r8
   be686:	4649      	mov	r1, r9
   be688:	f7ff f8a6 	bl	bd7d8 <__aeabi_dcmple>
   be68c:	b1a0      	cbz	r0, be6b8 <_strtod_l+0xb60>
   be68e:	4649      	mov	r1, r9
   be690:	4640      	mov	r0, r8
   be692:	f7ff f8bf 	bl	bd814 <__aeabi_d2uiz>
   be696:	2801      	cmp	r0, #1
   be698:	bf38      	it	cc
   be69a:	2001      	movcc	r0, #1
   be69c:	f7fe fda6 	bl	bd1ec <__aeabi_ui2d>
   be6a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   be6a2:	4680      	mov	r8, r0
   be6a4:	4689      	mov	r9, r1
   be6a6:	bb23      	cbnz	r3, be6f2 <_strtod_l+0xb9a>
   be6a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   be6ac:	9010      	str	r0, [sp, #64]	; 0x40
   be6ae:	9311      	str	r3, [sp, #68]	; 0x44
   be6b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   be6b4:	e9cd 2308 	strd	r2, r3, [sp, #32]
   be6b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   be6ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   be6bc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   be6c0:	1a9b      	subs	r3, r3, r2
   be6c2:	9309      	str	r3, [sp, #36]	; 0x24
   be6c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   be6c8:	eeb0 0a48 	vmov.f32	s0, s16
   be6cc:	eef0 0a68 	vmov.f32	s1, s17
   be6d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
   be6d4:	f001 f838 	bl	bf748 <__ulp>
   be6d8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   be6dc:	ec53 2b10 	vmov	r2, r3, d0
   be6e0:	f7fe fdfe 	bl	bd2e0 <__aeabi_dmul>
   be6e4:	ec53 2b18 	vmov	r2, r3, d8
   be6e8:	f7fe fc44 	bl	bcf74 <__adddf3>
   be6ec:	4682      	mov	sl, r0
   be6ee:	468b      	mov	fp, r1
   be6f0:	e78d      	b.n	be60e <_strtod_l+0xab6>
   be6f2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   be6f6:	e7db      	b.n	be6b0 <_strtod_l+0xb58>
   be6f8:	a311      	add	r3, pc, #68	; (adr r3, be740 <_strtod_l+0xbe8>)
   be6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   be6fe:	f7ff f861 	bl	bd7c4 <__aeabi_dcmplt>
   be702:	e7b2      	b.n	be66a <_strtod_l+0xb12>
   be704:	2300      	movs	r3, #0
   be706:	930a      	str	r3, [sp, #40]	; 0x28
   be708:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   be70a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   be70c:	6013      	str	r3, [r2, #0]
   be70e:	f7ff ba6b 	b.w	bdbe8 <_strtod_l+0x90>
   be712:	2a65      	cmp	r2, #101	; 0x65
   be714:	f43f ab5f 	beq.w	bddd6 <_strtod_l+0x27e>
   be718:	2a45      	cmp	r2, #69	; 0x45
   be71a:	f43f ab5c 	beq.w	bddd6 <_strtod_l+0x27e>
   be71e:	2301      	movs	r3, #1
   be720:	f7ff bb94 	b.w	bde4c <_strtod_l+0x2f4>
   be724:	f3af 8000 	nop.w
   be728:	94a03595 	.word	0x94a03595
   be72c:	3fdfffff 	.word	0x3fdfffff
   be730:	35afe535 	.word	0x35afe535
   be734:	3fe00000 	.word	0x3fe00000
   be738:	ffc00000 	.word	0xffc00000
   be73c:	41dfffff 	.word	0x41dfffff
   be740:	94a03595 	.word	0x94a03595
   be744:	3fcfffff 	.word	0x3fcfffff
   be748:	3ff00000 	.word	0x3ff00000
   be74c:	7ff00000 	.word	0x7ff00000
   be750:	7fe00000 	.word	0x7fe00000
   be754:	7c9fffff 	.word	0x7c9fffff
   be758:	3fe00000 	.word	0x3fe00000
   be75c:	bff00000 	.word	0xbff00000
   be760:	7fefffff 	.word	0x7fefffff

000be764 <strtod>:
   be764:	460a      	mov	r2, r1
   be766:	4601      	mov	r1, r0
   be768:	4802      	ldr	r0, [pc, #8]	; (be774 <strtod+0x10>)
   be76a:	4b03      	ldr	r3, [pc, #12]	; (be778 <strtod+0x14>)
   be76c:	6800      	ldr	r0, [r0, #0]
   be76e:	f7ff b9f3 	b.w	bdb58 <_strtod_l>
   be772:	bf00      	nop
   be774:	2003daa0 	.word	0x2003daa0
   be778:	2003db0c 	.word	0x2003db0c

000be77c <_strtol_l.constprop.0>:
   be77c:	2b01      	cmp	r3, #1
   be77e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   be782:	d001      	beq.n	be788 <_strtol_l.constprop.0+0xc>
   be784:	2b24      	cmp	r3, #36	; 0x24
   be786:	d906      	bls.n	be796 <_strtol_l.constprop.0+0x1a>
   be788:	f7fa fc0e 	bl	b8fa8 <__errno>
   be78c:	2316      	movs	r3, #22
   be78e:	6003      	str	r3, [r0, #0]
   be790:	2000      	movs	r0, #0
   be792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   be796:	f8df c0e4 	ldr.w	ip, [pc, #228]	; be87c <_strtol_l.constprop.0+0x100>
   be79a:	460d      	mov	r5, r1
   be79c:	462e      	mov	r6, r5
   be79e:	f815 4b01 	ldrb.w	r4, [r5], #1
   be7a2:	f814 700c 	ldrb.w	r7, [r4, ip]
   be7a6:	f017 0708 	ands.w	r7, r7, #8
   be7aa:	d1f7      	bne.n	be79c <_strtol_l.constprop.0+0x20>
   be7ac:	2c2d      	cmp	r4, #45	; 0x2d
   be7ae:	d132      	bne.n	be816 <_strtol_l.constprop.0+0x9a>
   be7b0:	782c      	ldrb	r4, [r5, #0]
   be7b2:	2701      	movs	r7, #1
   be7b4:	1cb5      	adds	r5, r6, #2
   be7b6:	2b00      	cmp	r3, #0
   be7b8:	d05b      	beq.n	be872 <_strtol_l.constprop.0+0xf6>
   be7ba:	2b10      	cmp	r3, #16
   be7bc:	d109      	bne.n	be7d2 <_strtol_l.constprop.0+0x56>
   be7be:	2c30      	cmp	r4, #48	; 0x30
   be7c0:	d107      	bne.n	be7d2 <_strtol_l.constprop.0+0x56>
   be7c2:	782c      	ldrb	r4, [r5, #0]
   be7c4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   be7c8:	2c58      	cmp	r4, #88	; 0x58
   be7ca:	d14d      	bne.n	be868 <_strtol_l.constprop.0+0xec>
   be7cc:	786c      	ldrb	r4, [r5, #1]
   be7ce:	2310      	movs	r3, #16
   be7d0:	3502      	adds	r5, #2
   be7d2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   be7d6:	f108 38ff 	add.w	r8, r8, #4294967295
   be7da:	f04f 0c00 	mov.w	ip, #0
   be7de:	fbb8 f9f3 	udiv	r9, r8, r3
   be7e2:	4666      	mov	r6, ip
   be7e4:	fb03 8a19 	mls	sl, r3, r9, r8
   be7e8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   be7ec:	f1be 0f09 	cmp.w	lr, #9
   be7f0:	d816      	bhi.n	be820 <_strtol_l.constprop.0+0xa4>
   be7f2:	4674      	mov	r4, lr
   be7f4:	42a3      	cmp	r3, r4
   be7f6:	dd24      	ble.n	be842 <_strtol_l.constprop.0+0xc6>
   be7f8:	f1bc 0f00 	cmp.w	ip, #0
   be7fc:	db1e      	blt.n	be83c <_strtol_l.constprop.0+0xc0>
   be7fe:	45b1      	cmp	r9, r6
   be800:	d31c      	bcc.n	be83c <_strtol_l.constprop.0+0xc0>
   be802:	d101      	bne.n	be808 <_strtol_l.constprop.0+0x8c>
   be804:	45a2      	cmp	sl, r4
   be806:	db19      	blt.n	be83c <_strtol_l.constprop.0+0xc0>
   be808:	fb06 4603 	mla	r6, r6, r3, r4
   be80c:	f04f 0c01 	mov.w	ip, #1
   be810:	f815 4b01 	ldrb.w	r4, [r5], #1
   be814:	e7e8      	b.n	be7e8 <_strtol_l.constprop.0+0x6c>
   be816:	2c2b      	cmp	r4, #43	; 0x2b
   be818:	bf04      	itt	eq
   be81a:	782c      	ldrbeq	r4, [r5, #0]
   be81c:	1cb5      	addeq	r5, r6, #2
   be81e:	e7ca      	b.n	be7b6 <_strtol_l.constprop.0+0x3a>
   be820:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   be824:	f1be 0f19 	cmp.w	lr, #25
   be828:	d801      	bhi.n	be82e <_strtol_l.constprop.0+0xb2>
   be82a:	3c37      	subs	r4, #55	; 0x37
   be82c:	e7e2      	b.n	be7f4 <_strtol_l.constprop.0+0x78>
   be82e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   be832:	f1be 0f19 	cmp.w	lr, #25
   be836:	d804      	bhi.n	be842 <_strtol_l.constprop.0+0xc6>
   be838:	3c57      	subs	r4, #87	; 0x57
   be83a:	e7db      	b.n	be7f4 <_strtol_l.constprop.0+0x78>
   be83c:	f04f 3cff 	mov.w	ip, #4294967295
   be840:	e7e6      	b.n	be810 <_strtol_l.constprop.0+0x94>
   be842:	f1bc 0f00 	cmp.w	ip, #0
   be846:	da05      	bge.n	be854 <_strtol_l.constprop.0+0xd8>
   be848:	2322      	movs	r3, #34	; 0x22
   be84a:	6003      	str	r3, [r0, #0]
   be84c:	4646      	mov	r6, r8
   be84e:	b942      	cbnz	r2, be862 <_strtol_l.constprop.0+0xe6>
   be850:	4630      	mov	r0, r6
   be852:	e79e      	b.n	be792 <_strtol_l.constprop.0+0x16>
   be854:	b107      	cbz	r7, be858 <_strtol_l.constprop.0+0xdc>
   be856:	4276      	negs	r6, r6
   be858:	2a00      	cmp	r2, #0
   be85a:	d0f9      	beq.n	be850 <_strtol_l.constprop.0+0xd4>
   be85c:	f1bc 0f00 	cmp.w	ip, #0
   be860:	d000      	beq.n	be864 <_strtol_l.constprop.0+0xe8>
   be862:	1e69      	subs	r1, r5, #1
   be864:	6011      	str	r1, [r2, #0]
   be866:	e7f3      	b.n	be850 <_strtol_l.constprop.0+0xd4>
   be868:	2430      	movs	r4, #48	; 0x30
   be86a:	2b00      	cmp	r3, #0
   be86c:	d1b1      	bne.n	be7d2 <_strtol_l.constprop.0+0x56>
   be86e:	2308      	movs	r3, #8
   be870:	e7af      	b.n	be7d2 <_strtol_l.constprop.0+0x56>
   be872:	2c30      	cmp	r4, #48	; 0x30
   be874:	d0a5      	beq.n	be7c2 <_strtol_l.constprop.0+0x46>
   be876:	230a      	movs	r3, #10
   be878:	e7ab      	b.n	be7d2 <_strtol_l.constprop.0+0x56>
   be87a:	bf00      	nop
   be87c:	000c12d9 	.word	0x000c12d9

000be880 <strtol>:
   be880:	4613      	mov	r3, r2
   be882:	460a      	mov	r2, r1
   be884:	4601      	mov	r1, r0
   be886:	4802      	ldr	r0, [pc, #8]	; (be890 <strtol+0x10>)
   be888:	6800      	ldr	r0, [r0, #0]
   be88a:	f7ff bf77 	b.w	be77c <_strtol_l.constprop.0>
   be88e:	bf00      	nop
   be890:	2003daa0 	.word	0x2003daa0

000be894 <__register_exitproc>:
   be894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   be898:	f8df 80b8 	ldr.w	r8, [pc, #184]	; be954 <__register_exitproc+0xc0>
   be89c:	4606      	mov	r6, r0
   be89e:	f8d8 0000 	ldr.w	r0, [r8]
   be8a2:	461f      	mov	r7, r3
   be8a4:	460d      	mov	r5, r1
   be8a6:	4691      	mov	r9, r2
   be8a8:	f000 fbc6 	bl	bf038 <__retarget_lock_acquire_recursive>
   be8ac:	4b25      	ldr	r3, [pc, #148]	; (be944 <__register_exitproc+0xb0>)
   be8ae:	681c      	ldr	r4, [r3, #0]
   be8b0:	b934      	cbnz	r4, be8c0 <__register_exitproc+0x2c>
   be8b2:	4c25      	ldr	r4, [pc, #148]	; (be948 <__register_exitproc+0xb4>)
   be8b4:	601c      	str	r4, [r3, #0]
   be8b6:	4b25      	ldr	r3, [pc, #148]	; (be94c <__register_exitproc+0xb8>)
   be8b8:	b113      	cbz	r3, be8c0 <__register_exitproc+0x2c>
   be8ba:	681b      	ldr	r3, [r3, #0]
   be8bc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   be8c0:	6863      	ldr	r3, [r4, #4]
   be8c2:	2b1f      	cmp	r3, #31
   be8c4:	dd07      	ble.n	be8d6 <__register_exitproc+0x42>
   be8c6:	f8d8 0000 	ldr.w	r0, [r8]
   be8ca:	f000 fbb7 	bl	bf03c <__retarget_lock_release_recursive>
   be8ce:	f04f 30ff 	mov.w	r0, #4294967295
   be8d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   be8d6:	b34e      	cbz	r6, be92c <__register_exitproc+0x98>
   be8d8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   be8dc:	b988      	cbnz	r0, be902 <__register_exitproc+0x6e>
   be8de:	4b1c      	ldr	r3, [pc, #112]	; (be950 <__register_exitproc+0xbc>)
   be8e0:	b923      	cbnz	r3, be8ec <__register_exitproc+0x58>
   be8e2:	f8d8 0000 	ldr.w	r0, [r8]
   be8e6:	f000 fba8 	bl	bf03a <__retarget_lock_release>
   be8ea:	e7f0      	b.n	be8ce <__register_exitproc+0x3a>
   be8ec:	f44f 7084 	mov.w	r0, #264	; 0x108
   be8f0:	f7fa fb12 	bl	b8f18 <malloc>
   be8f4:	2800      	cmp	r0, #0
   be8f6:	d0f4      	beq.n	be8e2 <__register_exitproc+0x4e>
   be8f8:	2300      	movs	r3, #0
   be8fa:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   be8fe:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   be902:	6863      	ldr	r3, [r4, #4]
   be904:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   be908:	2201      	movs	r2, #1
   be90a:	409a      	lsls	r2, r3
   be90c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   be910:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   be914:	4313      	orrs	r3, r2
   be916:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   be91a:	2e02      	cmp	r6, #2
   be91c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   be920:	bf02      	ittt	eq
   be922:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   be926:	4313      	orreq	r3, r2
   be928:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   be92c:	6863      	ldr	r3, [r4, #4]
   be92e:	f8d8 0000 	ldr.w	r0, [r8]
   be932:	1c5a      	adds	r2, r3, #1
   be934:	3302      	adds	r3, #2
   be936:	6062      	str	r2, [r4, #4]
   be938:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   be93c:	f000 fb7e 	bl	bf03c <__retarget_lock_release_recursive>
   be940:	2000      	movs	r0, #0
   be942:	e7c6      	b.n	be8d2 <__register_exitproc+0x3e>
   be944:	2003e7e8 	.word	0x2003e7e8
   be948:	2003e75c 	.word	0x2003e75c
   be94c:	00000000 	.word	0x00000000
   be950:	000b8f19 	.word	0x000b8f19
   be954:	2003db04 	.word	0x2003db04

000be958 <rshift>:
   be958:	6903      	ldr	r3, [r0, #16]
   be95a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   be95e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   be962:	ea4f 1261 	mov.w	r2, r1, asr #5
   be966:	f100 0414 	add.w	r4, r0, #20
   be96a:	dd45      	ble.n	be9f8 <rshift+0xa0>
   be96c:	f011 011f 	ands.w	r1, r1, #31
   be970:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   be974:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   be978:	d10c      	bne.n	be994 <rshift+0x3c>
   be97a:	f100 0710 	add.w	r7, r0, #16
   be97e:	4629      	mov	r1, r5
   be980:	42b1      	cmp	r1, r6
   be982:	d334      	bcc.n	be9ee <rshift+0x96>
   be984:	1a9b      	subs	r3, r3, r2
   be986:	009b      	lsls	r3, r3, #2
   be988:	1eea      	subs	r2, r5, #3
   be98a:	4296      	cmp	r6, r2
   be98c:	bf38      	it	cc
   be98e:	2300      	movcc	r3, #0
   be990:	4423      	add	r3, r4
   be992:	e015      	b.n	be9c0 <rshift+0x68>
   be994:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   be998:	f1c1 0820 	rsb	r8, r1, #32
   be99c:	40cf      	lsrs	r7, r1
   be99e:	f105 0e04 	add.w	lr, r5, #4
   be9a2:	46a1      	mov	r9, r4
   be9a4:	4576      	cmp	r6, lr
   be9a6:	46f4      	mov	ip, lr
   be9a8:	d815      	bhi.n	be9d6 <rshift+0x7e>
   be9aa:	1a9a      	subs	r2, r3, r2
   be9ac:	0092      	lsls	r2, r2, #2
   be9ae:	3a04      	subs	r2, #4
   be9b0:	3501      	adds	r5, #1
   be9b2:	42ae      	cmp	r6, r5
   be9b4:	bf38      	it	cc
   be9b6:	2200      	movcc	r2, #0
   be9b8:	18a3      	adds	r3, r4, r2
   be9ba:	50a7      	str	r7, [r4, r2]
   be9bc:	b107      	cbz	r7, be9c0 <rshift+0x68>
   be9be:	3304      	adds	r3, #4
   be9c0:	1b1a      	subs	r2, r3, r4
   be9c2:	42a3      	cmp	r3, r4
   be9c4:	ea4f 02a2 	mov.w	r2, r2, asr #2
   be9c8:	bf08      	it	eq
   be9ca:	2300      	moveq	r3, #0
   be9cc:	6102      	str	r2, [r0, #16]
   be9ce:	bf08      	it	eq
   be9d0:	6143      	streq	r3, [r0, #20]
   be9d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   be9d6:	f8dc c000 	ldr.w	ip, [ip]
   be9da:	fa0c fc08 	lsl.w	ip, ip, r8
   be9de:	ea4c 0707 	orr.w	r7, ip, r7
   be9e2:	f849 7b04 	str.w	r7, [r9], #4
   be9e6:	f85e 7b04 	ldr.w	r7, [lr], #4
   be9ea:	40cf      	lsrs	r7, r1
   be9ec:	e7da      	b.n	be9a4 <rshift+0x4c>
   be9ee:	f851 cb04 	ldr.w	ip, [r1], #4
   be9f2:	f847 cf04 	str.w	ip, [r7, #4]!
   be9f6:	e7c3      	b.n	be980 <rshift+0x28>
   be9f8:	4623      	mov	r3, r4
   be9fa:	e7e1      	b.n	be9c0 <rshift+0x68>

000be9fc <__hexdig_fun>:
   be9fc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bea00:	2b09      	cmp	r3, #9
   bea02:	d802      	bhi.n	bea0a <__hexdig_fun+0xe>
   bea04:	3820      	subs	r0, #32
   bea06:	b2c0      	uxtb	r0, r0
   bea08:	4770      	bx	lr
   bea0a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bea0e:	2b05      	cmp	r3, #5
   bea10:	d801      	bhi.n	bea16 <__hexdig_fun+0x1a>
   bea12:	3847      	subs	r0, #71	; 0x47
   bea14:	e7f7      	b.n	bea06 <__hexdig_fun+0xa>
   bea16:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bea1a:	2b05      	cmp	r3, #5
   bea1c:	d801      	bhi.n	bea22 <__hexdig_fun+0x26>
   bea1e:	3827      	subs	r0, #39	; 0x27
   bea20:	e7f1      	b.n	bea06 <__hexdig_fun+0xa>
   bea22:	2000      	movs	r0, #0
   bea24:	4770      	bx	lr
	...

000bea28 <__gethex>:
   bea28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bea2c:	ed2d 8b02 	vpush	{d8}
   bea30:	b089      	sub	sp, #36	; 0x24
   bea32:	ee08 0a10 	vmov	s16, r0
   bea36:	9304      	str	r3, [sp, #16]
   bea38:	4bb4      	ldr	r3, [pc, #720]	; (bed0c <__gethex+0x2e4>)
   bea3a:	681b      	ldr	r3, [r3, #0]
   bea3c:	9301      	str	r3, [sp, #4]
   bea3e:	4618      	mov	r0, r3
   bea40:	468b      	mov	fp, r1
   bea42:	4690      	mov	r8, r2
   bea44:	f7ff f82f 	bl	bdaa6 <strlen>
   bea48:	9b01      	ldr	r3, [sp, #4]
   bea4a:	f8db 2000 	ldr.w	r2, [fp]
   bea4e:	4403      	add	r3, r0
   bea50:	4682      	mov	sl, r0
   bea52:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bea56:	9305      	str	r3, [sp, #20]
   bea58:	1c93      	adds	r3, r2, #2
   bea5a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bea5e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bea62:	32fe      	adds	r2, #254	; 0xfe
   bea64:	18d1      	adds	r1, r2, r3
   bea66:	461f      	mov	r7, r3
   bea68:	f813 0b01 	ldrb.w	r0, [r3], #1
   bea6c:	9100      	str	r1, [sp, #0]
   bea6e:	2830      	cmp	r0, #48	; 0x30
   bea70:	d0f8      	beq.n	bea64 <__gethex+0x3c>
   bea72:	f7ff ffc3 	bl	be9fc <__hexdig_fun>
   bea76:	4604      	mov	r4, r0
   bea78:	2800      	cmp	r0, #0
   bea7a:	d13a      	bne.n	beaf2 <__gethex+0xca>
   bea7c:	9901      	ldr	r1, [sp, #4]
   bea7e:	4652      	mov	r2, sl
   bea80:	4638      	mov	r0, r7
   bea82:	f7ff f818 	bl	bdab6 <strncmp>
   bea86:	4605      	mov	r5, r0
   bea88:	2800      	cmp	r0, #0
   bea8a:	d168      	bne.n	beb5e <__gethex+0x136>
   bea8c:	f817 000a 	ldrb.w	r0, [r7, sl]
   bea90:	eb07 060a 	add.w	r6, r7, sl
   bea94:	f7ff ffb2 	bl	be9fc <__hexdig_fun>
   bea98:	2800      	cmp	r0, #0
   bea9a:	d062      	beq.n	beb62 <__gethex+0x13a>
   bea9c:	4633      	mov	r3, r6
   bea9e:	7818      	ldrb	r0, [r3, #0]
   beaa0:	2830      	cmp	r0, #48	; 0x30
   beaa2:	461f      	mov	r7, r3
   beaa4:	f103 0301 	add.w	r3, r3, #1
   beaa8:	d0f9      	beq.n	bea9e <__gethex+0x76>
   beaaa:	f7ff ffa7 	bl	be9fc <__hexdig_fun>
   beaae:	2301      	movs	r3, #1
   beab0:	fab0 f480 	clz	r4, r0
   beab4:	0964      	lsrs	r4, r4, #5
   beab6:	4635      	mov	r5, r6
   beab8:	9300      	str	r3, [sp, #0]
   beaba:	463a      	mov	r2, r7
   beabc:	4616      	mov	r6, r2
   beabe:	3201      	adds	r2, #1
   beac0:	7830      	ldrb	r0, [r6, #0]
   beac2:	f7ff ff9b 	bl	be9fc <__hexdig_fun>
   beac6:	2800      	cmp	r0, #0
   beac8:	d1f8      	bne.n	beabc <__gethex+0x94>
   beaca:	9901      	ldr	r1, [sp, #4]
   beacc:	4652      	mov	r2, sl
   beace:	4630      	mov	r0, r6
   bead0:	f7fe fff1 	bl	bdab6 <strncmp>
   bead4:	b980      	cbnz	r0, beaf8 <__gethex+0xd0>
   bead6:	b94d      	cbnz	r5, beaec <__gethex+0xc4>
   bead8:	eb06 050a 	add.w	r5, r6, sl
   beadc:	462a      	mov	r2, r5
   beade:	4616      	mov	r6, r2
   beae0:	3201      	adds	r2, #1
   beae2:	7830      	ldrb	r0, [r6, #0]
   beae4:	f7ff ff8a 	bl	be9fc <__hexdig_fun>
   beae8:	2800      	cmp	r0, #0
   beaea:	d1f8      	bne.n	beade <__gethex+0xb6>
   beaec:	1bad      	subs	r5, r5, r6
   beaee:	00ad      	lsls	r5, r5, #2
   beaf0:	e004      	b.n	beafc <__gethex+0xd4>
   beaf2:	2400      	movs	r4, #0
   beaf4:	4625      	mov	r5, r4
   beaf6:	e7e0      	b.n	beaba <__gethex+0x92>
   beaf8:	2d00      	cmp	r5, #0
   beafa:	d1f7      	bne.n	beaec <__gethex+0xc4>
   beafc:	7833      	ldrb	r3, [r6, #0]
   beafe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   beb02:	2b50      	cmp	r3, #80	; 0x50
   beb04:	d13b      	bne.n	beb7e <__gethex+0x156>
   beb06:	7873      	ldrb	r3, [r6, #1]
   beb08:	2b2b      	cmp	r3, #43	; 0x2b
   beb0a:	d02c      	beq.n	beb66 <__gethex+0x13e>
   beb0c:	2b2d      	cmp	r3, #45	; 0x2d
   beb0e:	d02e      	beq.n	beb6e <__gethex+0x146>
   beb10:	1c71      	adds	r1, r6, #1
   beb12:	f04f 0900 	mov.w	r9, #0
   beb16:	7808      	ldrb	r0, [r1, #0]
   beb18:	f7ff ff70 	bl	be9fc <__hexdig_fun>
   beb1c:	1e43      	subs	r3, r0, #1
   beb1e:	b2db      	uxtb	r3, r3
   beb20:	2b18      	cmp	r3, #24
   beb22:	d82c      	bhi.n	beb7e <__gethex+0x156>
   beb24:	f1a0 0210 	sub.w	r2, r0, #16
   beb28:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   beb2c:	f7ff ff66 	bl	be9fc <__hexdig_fun>
   beb30:	1e43      	subs	r3, r0, #1
   beb32:	b2db      	uxtb	r3, r3
   beb34:	2b18      	cmp	r3, #24
   beb36:	d91d      	bls.n	beb74 <__gethex+0x14c>
   beb38:	f1b9 0f00 	cmp.w	r9, #0
   beb3c:	d000      	beq.n	beb40 <__gethex+0x118>
   beb3e:	4252      	negs	r2, r2
   beb40:	4415      	add	r5, r2
   beb42:	f8cb 1000 	str.w	r1, [fp]
   beb46:	b1e4      	cbz	r4, beb82 <__gethex+0x15a>
   beb48:	9b00      	ldr	r3, [sp, #0]
   beb4a:	2b00      	cmp	r3, #0
   beb4c:	bf14      	ite	ne
   beb4e:	2700      	movne	r7, #0
   beb50:	2706      	moveq	r7, #6
   beb52:	4638      	mov	r0, r7
   beb54:	b009      	add	sp, #36	; 0x24
   beb56:	ecbd 8b02 	vpop	{d8}
   beb5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   beb5e:	463e      	mov	r6, r7
   beb60:	4625      	mov	r5, r4
   beb62:	2401      	movs	r4, #1
   beb64:	e7ca      	b.n	beafc <__gethex+0xd4>
   beb66:	f04f 0900 	mov.w	r9, #0
   beb6a:	1cb1      	adds	r1, r6, #2
   beb6c:	e7d3      	b.n	beb16 <__gethex+0xee>
   beb6e:	f04f 0901 	mov.w	r9, #1
   beb72:	e7fa      	b.n	beb6a <__gethex+0x142>
   beb74:	230a      	movs	r3, #10
   beb76:	fb03 0202 	mla	r2, r3, r2, r0
   beb7a:	3a10      	subs	r2, #16
   beb7c:	e7d4      	b.n	beb28 <__gethex+0x100>
   beb7e:	4631      	mov	r1, r6
   beb80:	e7df      	b.n	beb42 <__gethex+0x11a>
   beb82:	1bf3      	subs	r3, r6, r7
   beb84:	3b01      	subs	r3, #1
   beb86:	4621      	mov	r1, r4
   beb88:	2b07      	cmp	r3, #7
   beb8a:	dc0b      	bgt.n	beba4 <__gethex+0x17c>
   beb8c:	ee18 0a10 	vmov	r0, s16
   beb90:	f000 fa68 	bl	bf064 <_Balloc>
   beb94:	4604      	mov	r4, r0
   beb96:	b940      	cbnz	r0, bebaa <__gethex+0x182>
   beb98:	4b5d      	ldr	r3, [pc, #372]	; (bed10 <__gethex+0x2e8>)
   beb9a:	4602      	mov	r2, r0
   beb9c:	21de      	movs	r1, #222	; 0xde
   beb9e:	485d      	ldr	r0, [pc, #372]	; (bed14 <__gethex+0x2ec>)
   beba0:	f7fa fa0a 	bl	b8fb8 <__assert_func>
   beba4:	3101      	adds	r1, #1
   beba6:	105b      	asrs	r3, r3, #1
   beba8:	e7ee      	b.n	beb88 <__gethex+0x160>
   bebaa:	f100 0914 	add.w	r9, r0, #20
   bebae:	f04f 0b00 	mov.w	fp, #0
   bebb2:	f1ca 0301 	rsb	r3, sl, #1
   bebb6:	f8cd 9008 	str.w	r9, [sp, #8]
   bebba:	f8cd b000 	str.w	fp, [sp]
   bebbe:	9306      	str	r3, [sp, #24]
   bebc0:	42b7      	cmp	r7, r6
   bebc2:	d340      	bcc.n	bec46 <__gethex+0x21e>
   bebc4:	9802      	ldr	r0, [sp, #8]
   bebc6:	9b00      	ldr	r3, [sp, #0]
   bebc8:	f840 3b04 	str.w	r3, [r0], #4
   bebcc:	eba0 0009 	sub.w	r0, r0, r9
   bebd0:	1080      	asrs	r0, r0, #2
   bebd2:	0146      	lsls	r6, r0, #5
   bebd4:	6120      	str	r0, [r4, #16]
   bebd6:	4618      	mov	r0, r3
   bebd8:	f000 fb36 	bl	bf248 <__hi0bits>
   bebdc:	1a30      	subs	r0, r6, r0
   bebde:	f8d8 6000 	ldr.w	r6, [r8]
   bebe2:	42b0      	cmp	r0, r6
   bebe4:	dd63      	ble.n	becae <__gethex+0x286>
   bebe6:	1b87      	subs	r7, r0, r6
   bebe8:	4639      	mov	r1, r7
   bebea:	4620      	mov	r0, r4
   bebec:	f000 feda 	bl	bf9a4 <__any_on>
   bebf0:	4682      	mov	sl, r0
   bebf2:	b1a8      	cbz	r0, bec20 <__gethex+0x1f8>
   bebf4:	1e7b      	subs	r3, r7, #1
   bebf6:	1159      	asrs	r1, r3, #5
   bebf8:	f003 021f 	and.w	r2, r3, #31
   bebfc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bec00:	f04f 0a01 	mov.w	sl, #1
   bec04:	fa0a f202 	lsl.w	r2, sl, r2
   bec08:	420a      	tst	r2, r1
   bec0a:	d009      	beq.n	bec20 <__gethex+0x1f8>
   bec0c:	4553      	cmp	r3, sl
   bec0e:	dd05      	ble.n	bec1c <__gethex+0x1f4>
   bec10:	1eb9      	subs	r1, r7, #2
   bec12:	4620      	mov	r0, r4
   bec14:	f000 fec6 	bl	bf9a4 <__any_on>
   bec18:	2800      	cmp	r0, #0
   bec1a:	d145      	bne.n	beca8 <__gethex+0x280>
   bec1c:	f04f 0a02 	mov.w	sl, #2
   bec20:	4639      	mov	r1, r7
   bec22:	4620      	mov	r0, r4
   bec24:	f7ff fe98 	bl	be958 <rshift>
   bec28:	443d      	add	r5, r7
   bec2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bec2e:	42ab      	cmp	r3, r5
   bec30:	da4c      	bge.n	beccc <__gethex+0x2a4>
   bec32:	ee18 0a10 	vmov	r0, s16
   bec36:	4621      	mov	r1, r4
   bec38:	f000 fa54 	bl	bf0e4 <_Bfree>
   bec3c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bec3e:	2300      	movs	r3, #0
   bec40:	6013      	str	r3, [r2, #0]
   bec42:	27a3      	movs	r7, #163	; 0xa3
   bec44:	e785      	b.n	beb52 <__gethex+0x12a>
   bec46:	1e73      	subs	r3, r6, #1
   bec48:	9a05      	ldr	r2, [sp, #20]
   bec4a:	9303      	str	r3, [sp, #12]
   bec4c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bec50:	4293      	cmp	r3, r2
   bec52:	d019      	beq.n	bec88 <__gethex+0x260>
   bec54:	f1bb 0f20 	cmp.w	fp, #32
   bec58:	d107      	bne.n	bec6a <__gethex+0x242>
   bec5a:	9b02      	ldr	r3, [sp, #8]
   bec5c:	9a00      	ldr	r2, [sp, #0]
   bec5e:	f843 2b04 	str.w	r2, [r3], #4
   bec62:	9302      	str	r3, [sp, #8]
   bec64:	2300      	movs	r3, #0
   bec66:	9300      	str	r3, [sp, #0]
   bec68:	469b      	mov	fp, r3
   bec6a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bec6e:	f7ff fec5 	bl	be9fc <__hexdig_fun>
   bec72:	9b00      	ldr	r3, [sp, #0]
   bec74:	f000 000f 	and.w	r0, r0, #15
   bec78:	fa00 f00b 	lsl.w	r0, r0, fp
   bec7c:	4303      	orrs	r3, r0
   bec7e:	9300      	str	r3, [sp, #0]
   bec80:	f10b 0b04 	add.w	fp, fp, #4
   bec84:	9b03      	ldr	r3, [sp, #12]
   bec86:	e00d      	b.n	beca4 <__gethex+0x27c>
   bec88:	9b03      	ldr	r3, [sp, #12]
   bec8a:	9a06      	ldr	r2, [sp, #24]
   bec8c:	4413      	add	r3, r2
   bec8e:	42bb      	cmp	r3, r7
   bec90:	d3e0      	bcc.n	bec54 <__gethex+0x22c>
   bec92:	4618      	mov	r0, r3
   bec94:	9901      	ldr	r1, [sp, #4]
   bec96:	9307      	str	r3, [sp, #28]
   bec98:	4652      	mov	r2, sl
   bec9a:	f7fe ff0c 	bl	bdab6 <strncmp>
   bec9e:	9b07      	ldr	r3, [sp, #28]
   beca0:	2800      	cmp	r0, #0
   beca2:	d1d7      	bne.n	bec54 <__gethex+0x22c>
   beca4:	461e      	mov	r6, r3
   beca6:	e78b      	b.n	bebc0 <__gethex+0x198>
   beca8:	f04f 0a03 	mov.w	sl, #3
   becac:	e7b8      	b.n	bec20 <__gethex+0x1f8>
   becae:	da0a      	bge.n	becc6 <__gethex+0x29e>
   becb0:	1a37      	subs	r7, r6, r0
   becb2:	4621      	mov	r1, r4
   becb4:	ee18 0a10 	vmov	r0, s16
   becb8:	463a      	mov	r2, r7
   becba:	f000 fc2f 	bl	bf51c <__lshift>
   becbe:	1bed      	subs	r5, r5, r7
   becc0:	4604      	mov	r4, r0
   becc2:	f100 0914 	add.w	r9, r0, #20
   becc6:	f04f 0a00 	mov.w	sl, #0
   becca:	e7ae      	b.n	bec2a <__gethex+0x202>
   beccc:	f8d8 0004 	ldr.w	r0, [r8, #4]
   becd0:	42a8      	cmp	r0, r5
   becd2:	dd72      	ble.n	bedba <__gethex+0x392>
   becd4:	1b45      	subs	r5, r0, r5
   becd6:	42ae      	cmp	r6, r5
   becd8:	dc36      	bgt.n	bed48 <__gethex+0x320>
   becda:	f8d8 300c 	ldr.w	r3, [r8, #12]
   becde:	2b02      	cmp	r3, #2
   bece0:	d02a      	beq.n	bed38 <__gethex+0x310>
   bece2:	2b03      	cmp	r3, #3
   bece4:	d02c      	beq.n	bed40 <__gethex+0x318>
   bece6:	2b01      	cmp	r3, #1
   bece8:	d11c      	bne.n	bed24 <__gethex+0x2fc>
   becea:	42ae      	cmp	r6, r5
   becec:	d11a      	bne.n	bed24 <__gethex+0x2fc>
   becee:	2e01      	cmp	r6, #1
   becf0:	d112      	bne.n	bed18 <__gethex+0x2f0>
   becf2:	9a04      	ldr	r2, [sp, #16]
   becf4:	f8d8 3004 	ldr.w	r3, [r8, #4]
   becf8:	6013      	str	r3, [r2, #0]
   becfa:	2301      	movs	r3, #1
   becfc:	6123      	str	r3, [r4, #16]
   becfe:	f8c9 3000 	str.w	r3, [r9]
   bed02:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bed04:	2762      	movs	r7, #98	; 0x62
   bed06:	601c      	str	r4, [r3, #0]
   bed08:	e723      	b.n	beb52 <__gethex+0x12a>
   bed0a:	bf00      	nop
   bed0c:	000c1470 	.word	0x000c1470
   bed10:	000c13d9 	.word	0x000c13d9
   bed14:	000c13ea 	.word	0x000c13ea
   bed18:	1e71      	subs	r1, r6, #1
   bed1a:	4620      	mov	r0, r4
   bed1c:	f000 fe42 	bl	bf9a4 <__any_on>
   bed20:	2800      	cmp	r0, #0
   bed22:	d1e6      	bne.n	becf2 <__gethex+0x2ca>
   bed24:	ee18 0a10 	vmov	r0, s16
   bed28:	4621      	mov	r1, r4
   bed2a:	f000 f9db 	bl	bf0e4 <_Bfree>
   bed2e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bed30:	2300      	movs	r3, #0
   bed32:	6013      	str	r3, [r2, #0]
   bed34:	2750      	movs	r7, #80	; 0x50
   bed36:	e70c      	b.n	beb52 <__gethex+0x12a>
   bed38:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bed3a:	2b00      	cmp	r3, #0
   bed3c:	d1f2      	bne.n	bed24 <__gethex+0x2fc>
   bed3e:	e7d8      	b.n	becf2 <__gethex+0x2ca>
   bed40:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bed42:	2b00      	cmp	r3, #0
   bed44:	d1d5      	bne.n	becf2 <__gethex+0x2ca>
   bed46:	e7ed      	b.n	bed24 <__gethex+0x2fc>
   bed48:	1e6f      	subs	r7, r5, #1
   bed4a:	f1ba 0f00 	cmp.w	sl, #0
   bed4e:	d131      	bne.n	bedb4 <__gethex+0x38c>
   bed50:	b127      	cbz	r7, bed5c <__gethex+0x334>
   bed52:	4639      	mov	r1, r7
   bed54:	4620      	mov	r0, r4
   bed56:	f000 fe25 	bl	bf9a4 <__any_on>
   bed5a:	4682      	mov	sl, r0
   bed5c:	117b      	asrs	r3, r7, #5
   bed5e:	2101      	movs	r1, #1
   bed60:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bed64:	f007 071f 	and.w	r7, r7, #31
   bed68:	fa01 f707 	lsl.w	r7, r1, r7
   bed6c:	421f      	tst	r7, r3
   bed6e:	4629      	mov	r1, r5
   bed70:	4620      	mov	r0, r4
   bed72:	bf18      	it	ne
   bed74:	f04a 0a02 	orrne.w	sl, sl, #2
   bed78:	1b76      	subs	r6, r6, r5
   bed7a:	f7ff fded 	bl	be958 <rshift>
   bed7e:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bed82:	2702      	movs	r7, #2
   bed84:	f1ba 0f00 	cmp.w	sl, #0
   bed88:	d048      	beq.n	bee1c <__gethex+0x3f4>
   bed8a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bed8e:	2b02      	cmp	r3, #2
   bed90:	d015      	beq.n	bedbe <__gethex+0x396>
   bed92:	2b03      	cmp	r3, #3
   bed94:	d017      	beq.n	bedc6 <__gethex+0x39e>
   bed96:	2b01      	cmp	r3, #1
   bed98:	d109      	bne.n	bedae <__gethex+0x386>
   bed9a:	f01a 0f02 	tst.w	sl, #2
   bed9e:	d006      	beq.n	bedae <__gethex+0x386>
   beda0:	f8d9 0000 	ldr.w	r0, [r9]
   beda4:	ea4a 0a00 	orr.w	sl, sl, r0
   beda8:	f01a 0f01 	tst.w	sl, #1
   bedac:	d10e      	bne.n	bedcc <__gethex+0x3a4>
   bedae:	f047 0710 	orr.w	r7, r7, #16
   bedb2:	e033      	b.n	bee1c <__gethex+0x3f4>
   bedb4:	f04f 0a01 	mov.w	sl, #1
   bedb8:	e7d0      	b.n	bed5c <__gethex+0x334>
   bedba:	2701      	movs	r7, #1
   bedbc:	e7e2      	b.n	bed84 <__gethex+0x35c>
   bedbe:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bedc0:	f1c3 0301 	rsb	r3, r3, #1
   bedc4:	9315      	str	r3, [sp, #84]	; 0x54
   bedc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bedc8:	2b00      	cmp	r3, #0
   bedca:	d0f0      	beq.n	bedae <__gethex+0x386>
   bedcc:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bedd0:	f104 0314 	add.w	r3, r4, #20
   bedd4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bedd8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   beddc:	f04f 0c00 	mov.w	ip, #0
   bede0:	4618      	mov	r0, r3
   bede2:	f853 2b04 	ldr.w	r2, [r3], #4
   bede6:	f1b2 3fff 	cmp.w	r2, #4294967295
   bedea:	d01c      	beq.n	bee26 <__gethex+0x3fe>
   bedec:	3201      	adds	r2, #1
   bedee:	6002      	str	r2, [r0, #0]
   bedf0:	2f02      	cmp	r7, #2
   bedf2:	f104 0314 	add.w	r3, r4, #20
   bedf6:	d13f      	bne.n	bee78 <__gethex+0x450>
   bedf8:	f8d8 2000 	ldr.w	r2, [r8]
   bedfc:	3a01      	subs	r2, #1
   bedfe:	42b2      	cmp	r2, r6
   bee00:	d10a      	bne.n	bee18 <__gethex+0x3f0>
   bee02:	1171      	asrs	r1, r6, #5
   bee04:	2201      	movs	r2, #1
   bee06:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bee0a:	f006 061f 	and.w	r6, r6, #31
   bee0e:	fa02 f606 	lsl.w	r6, r2, r6
   bee12:	421e      	tst	r6, r3
   bee14:	bf18      	it	ne
   bee16:	4617      	movne	r7, r2
   bee18:	f047 0720 	orr.w	r7, r7, #32
   bee1c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bee1e:	601c      	str	r4, [r3, #0]
   bee20:	9b04      	ldr	r3, [sp, #16]
   bee22:	601d      	str	r5, [r3, #0]
   bee24:	e695      	b.n	beb52 <__gethex+0x12a>
   bee26:	4299      	cmp	r1, r3
   bee28:	f843 cc04 	str.w	ip, [r3, #-4]
   bee2c:	d8d8      	bhi.n	bede0 <__gethex+0x3b8>
   bee2e:	68a3      	ldr	r3, [r4, #8]
   bee30:	459b      	cmp	fp, r3
   bee32:	db19      	blt.n	bee68 <__gethex+0x440>
   bee34:	6861      	ldr	r1, [r4, #4]
   bee36:	ee18 0a10 	vmov	r0, s16
   bee3a:	3101      	adds	r1, #1
   bee3c:	f000 f912 	bl	bf064 <_Balloc>
   bee40:	4681      	mov	r9, r0
   bee42:	b918      	cbnz	r0, bee4c <__gethex+0x424>
   bee44:	4b1a      	ldr	r3, [pc, #104]	; (beeb0 <__gethex+0x488>)
   bee46:	4602      	mov	r2, r0
   bee48:	2184      	movs	r1, #132	; 0x84
   bee4a:	e6a8      	b.n	beb9e <__gethex+0x176>
   bee4c:	6922      	ldr	r2, [r4, #16]
   bee4e:	3202      	adds	r2, #2
   bee50:	f104 010c 	add.w	r1, r4, #12
   bee54:	0092      	lsls	r2, r2, #2
   bee56:	300c      	adds	r0, #12
   bee58:	f7fe fd87 	bl	bd96a <memcpy>
   bee5c:	4621      	mov	r1, r4
   bee5e:	ee18 0a10 	vmov	r0, s16
   bee62:	f000 f93f 	bl	bf0e4 <_Bfree>
   bee66:	464c      	mov	r4, r9
   bee68:	6923      	ldr	r3, [r4, #16]
   bee6a:	1c5a      	adds	r2, r3, #1
   bee6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bee70:	6122      	str	r2, [r4, #16]
   bee72:	2201      	movs	r2, #1
   bee74:	615a      	str	r2, [r3, #20]
   bee76:	e7bb      	b.n	bedf0 <__gethex+0x3c8>
   bee78:	6922      	ldr	r2, [r4, #16]
   bee7a:	455a      	cmp	r2, fp
   bee7c:	dd0b      	ble.n	bee96 <__gethex+0x46e>
   bee7e:	2101      	movs	r1, #1
   bee80:	4620      	mov	r0, r4
   bee82:	f7ff fd69 	bl	be958 <rshift>
   bee86:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bee8a:	3501      	adds	r5, #1
   bee8c:	42ab      	cmp	r3, r5
   bee8e:	f6ff aed0 	blt.w	bec32 <__gethex+0x20a>
   bee92:	2701      	movs	r7, #1
   bee94:	e7c0      	b.n	bee18 <__gethex+0x3f0>
   bee96:	f016 061f 	ands.w	r6, r6, #31
   bee9a:	d0fa      	beq.n	bee92 <__gethex+0x46a>
   bee9c:	4453      	add	r3, sl
   bee9e:	f1c6 0620 	rsb	r6, r6, #32
   beea2:	f853 0c04 	ldr.w	r0, [r3, #-4]
   beea6:	f000 f9cf 	bl	bf248 <__hi0bits>
   beeaa:	42b0      	cmp	r0, r6
   beeac:	dbe7      	blt.n	bee7e <__gethex+0x456>
   beeae:	e7f0      	b.n	bee92 <__gethex+0x46a>
   beeb0:	000c13d9 	.word	0x000c13d9

000beeb4 <L_shift>:
   beeb4:	f1c2 0208 	rsb	r2, r2, #8
   beeb8:	0092      	lsls	r2, r2, #2
   beeba:	b570      	push	{r4, r5, r6, lr}
   beebc:	f1c2 0620 	rsb	r6, r2, #32
   beec0:	6843      	ldr	r3, [r0, #4]
   beec2:	6804      	ldr	r4, [r0, #0]
   beec4:	fa03 f506 	lsl.w	r5, r3, r6
   beec8:	432c      	orrs	r4, r5
   beeca:	40d3      	lsrs	r3, r2
   beecc:	6004      	str	r4, [r0, #0]
   beece:	f840 3f04 	str.w	r3, [r0, #4]!
   beed2:	4288      	cmp	r0, r1
   beed4:	d3f4      	bcc.n	beec0 <L_shift+0xc>
   beed6:	bd70      	pop	{r4, r5, r6, pc}

000beed8 <__match>:
   beed8:	b530      	push	{r4, r5, lr}
   beeda:	6803      	ldr	r3, [r0, #0]
   beedc:	3301      	adds	r3, #1
   beede:	f811 4b01 	ldrb.w	r4, [r1], #1
   beee2:	b914      	cbnz	r4, beeea <__match+0x12>
   beee4:	6003      	str	r3, [r0, #0]
   beee6:	2001      	movs	r0, #1
   beee8:	bd30      	pop	{r4, r5, pc}
   beeea:	f813 2b01 	ldrb.w	r2, [r3], #1
   beeee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   beef2:	2d19      	cmp	r5, #25
   beef4:	bf98      	it	ls
   beef6:	3220      	addls	r2, #32
   beef8:	42a2      	cmp	r2, r4
   beefa:	d0f0      	beq.n	beede <__match+0x6>
   beefc:	2000      	movs	r0, #0
   beefe:	e7f3      	b.n	beee8 <__match+0x10>

000bef00 <__hexnan>:
   bef00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bef04:	680b      	ldr	r3, [r1, #0]
   bef06:	115e      	asrs	r6, r3, #5
   bef08:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bef0c:	f013 031f 	ands.w	r3, r3, #31
   bef10:	b087      	sub	sp, #28
   bef12:	bf18      	it	ne
   bef14:	3604      	addne	r6, #4
   bef16:	2500      	movs	r5, #0
   bef18:	1f37      	subs	r7, r6, #4
   bef1a:	4690      	mov	r8, r2
   bef1c:	6802      	ldr	r2, [r0, #0]
   bef1e:	9301      	str	r3, [sp, #4]
   bef20:	4682      	mov	sl, r0
   bef22:	f846 5c04 	str.w	r5, [r6, #-4]
   bef26:	46b9      	mov	r9, r7
   bef28:	463c      	mov	r4, r7
   bef2a:	9502      	str	r5, [sp, #8]
   bef2c:	46ab      	mov	fp, r5
   bef2e:	7851      	ldrb	r1, [r2, #1]
   bef30:	1c53      	adds	r3, r2, #1
   bef32:	9303      	str	r3, [sp, #12]
   bef34:	b341      	cbz	r1, bef88 <__hexnan+0x88>
   bef36:	4608      	mov	r0, r1
   bef38:	9205      	str	r2, [sp, #20]
   bef3a:	9104      	str	r1, [sp, #16]
   bef3c:	f7ff fd5e 	bl	be9fc <__hexdig_fun>
   bef40:	2800      	cmp	r0, #0
   bef42:	d14f      	bne.n	befe4 <__hexnan+0xe4>
   bef44:	9904      	ldr	r1, [sp, #16]
   bef46:	9a05      	ldr	r2, [sp, #20]
   bef48:	2920      	cmp	r1, #32
   bef4a:	d818      	bhi.n	bef7e <__hexnan+0x7e>
   bef4c:	9b02      	ldr	r3, [sp, #8]
   bef4e:	459b      	cmp	fp, r3
   bef50:	dd13      	ble.n	bef7a <__hexnan+0x7a>
   bef52:	454c      	cmp	r4, r9
   bef54:	d206      	bcs.n	bef64 <__hexnan+0x64>
   bef56:	2d07      	cmp	r5, #7
   bef58:	dc04      	bgt.n	bef64 <__hexnan+0x64>
   bef5a:	462a      	mov	r2, r5
   bef5c:	4649      	mov	r1, r9
   bef5e:	4620      	mov	r0, r4
   bef60:	f7ff ffa8 	bl	beeb4 <L_shift>
   bef64:	4544      	cmp	r4, r8
   bef66:	d950      	bls.n	bf00a <__hexnan+0x10a>
   bef68:	2300      	movs	r3, #0
   bef6a:	f1a4 0904 	sub.w	r9, r4, #4
   bef6e:	f844 3c04 	str.w	r3, [r4, #-4]
   bef72:	f8cd b008 	str.w	fp, [sp, #8]
   bef76:	464c      	mov	r4, r9
   bef78:	461d      	mov	r5, r3
   bef7a:	9a03      	ldr	r2, [sp, #12]
   bef7c:	e7d7      	b.n	bef2e <__hexnan+0x2e>
   bef7e:	2929      	cmp	r1, #41	; 0x29
   bef80:	d156      	bne.n	bf030 <__hexnan+0x130>
   bef82:	3202      	adds	r2, #2
   bef84:	f8ca 2000 	str.w	r2, [sl]
   bef88:	f1bb 0f00 	cmp.w	fp, #0
   bef8c:	d050      	beq.n	bf030 <__hexnan+0x130>
   bef8e:	454c      	cmp	r4, r9
   bef90:	d206      	bcs.n	befa0 <__hexnan+0xa0>
   bef92:	2d07      	cmp	r5, #7
   bef94:	dc04      	bgt.n	befa0 <__hexnan+0xa0>
   bef96:	462a      	mov	r2, r5
   bef98:	4649      	mov	r1, r9
   bef9a:	4620      	mov	r0, r4
   bef9c:	f7ff ff8a 	bl	beeb4 <L_shift>
   befa0:	4544      	cmp	r4, r8
   befa2:	d934      	bls.n	bf00e <__hexnan+0x10e>
   befa4:	f1a8 0204 	sub.w	r2, r8, #4
   befa8:	4623      	mov	r3, r4
   befaa:	f853 1b04 	ldr.w	r1, [r3], #4
   befae:	f842 1f04 	str.w	r1, [r2, #4]!
   befb2:	429f      	cmp	r7, r3
   befb4:	d2f9      	bcs.n	befaa <__hexnan+0xaa>
   befb6:	1b3b      	subs	r3, r7, r4
   befb8:	f023 0303 	bic.w	r3, r3, #3
   befbc:	3304      	adds	r3, #4
   befbe:	3401      	adds	r4, #1
   befc0:	3e03      	subs	r6, #3
   befc2:	42b4      	cmp	r4, r6
   befc4:	bf88      	it	hi
   befc6:	2304      	movhi	r3, #4
   befc8:	4443      	add	r3, r8
   befca:	2200      	movs	r2, #0
   befcc:	f843 2b04 	str.w	r2, [r3], #4
   befd0:	429f      	cmp	r7, r3
   befd2:	d2fb      	bcs.n	befcc <__hexnan+0xcc>
   befd4:	683b      	ldr	r3, [r7, #0]
   befd6:	b91b      	cbnz	r3, befe0 <__hexnan+0xe0>
   befd8:	4547      	cmp	r7, r8
   befda:	d127      	bne.n	bf02c <__hexnan+0x12c>
   befdc:	2301      	movs	r3, #1
   befde:	603b      	str	r3, [r7, #0]
   befe0:	2005      	movs	r0, #5
   befe2:	e026      	b.n	bf032 <__hexnan+0x132>
   befe4:	3501      	adds	r5, #1
   befe6:	2d08      	cmp	r5, #8
   befe8:	f10b 0b01 	add.w	fp, fp, #1
   befec:	dd06      	ble.n	beffc <__hexnan+0xfc>
   befee:	4544      	cmp	r4, r8
   beff0:	d9c3      	bls.n	bef7a <__hexnan+0x7a>
   beff2:	2300      	movs	r3, #0
   beff4:	f844 3c04 	str.w	r3, [r4, #-4]
   beff8:	2501      	movs	r5, #1
   beffa:	3c04      	subs	r4, #4
   beffc:	6822      	ldr	r2, [r4, #0]
   beffe:	f000 000f 	and.w	r0, r0, #15
   bf002:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bf006:	6022      	str	r2, [r4, #0]
   bf008:	e7b7      	b.n	bef7a <__hexnan+0x7a>
   bf00a:	2508      	movs	r5, #8
   bf00c:	e7b5      	b.n	bef7a <__hexnan+0x7a>
   bf00e:	9b01      	ldr	r3, [sp, #4]
   bf010:	2b00      	cmp	r3, #0
   bf012:	d0df      	beq.n	befd4 <__hexnan+0xd4>
   bf014:	f04f 32ff 	mov.w	r2, #4294967295
   bf018:	f1c3 0320 	rsb	r3, r3, #32
   bf01c:	fa22 f303 	lsr.w	r3, r2, r3
   bf020:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bf024:	401a      	ands	r2, r3
   bf026:	f846 2c04 	str.w	r2, [r6, #-4]
   bf02a:	e7d3      	b.n	befd4 <__hexnan+0xd4>
   bf02c:	3f04      	subs	r7, #4
   bf02e:	e7d1      	b.n	befd4 <__hexnan+0xd4>
   bf030:	2004      	movs	r0, #4
   bf032:	b007      	add	sp, #28
   bf034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bf038 <__retarget_lock_acquire_recursive>:
   bf038:	4770      	bx	lr

000bf03a <__retarget_lock_release>:
   bf03a:	4770      	bx	lr

000bf03c <__retarget_lock_release_recursive>:
   bf03c:	4770      	bx	lr

000bf03e <__ascii_mbtowc>:
   bf03e:	b082      	sub	sp, #8
   bf040:	b901      	cbnz	r1, bf044 <__ascii_mbtowc+0x6>
   bf042:	a901      	add	r1, sp, #4
   bf044:	b142      	cbz	r2, bf058 <__ascii_mbtowc+0x1a>
   bf046:	b14b      	cbz	r3, bf05c <__ascii_mbtowc+0x1e>
   bf048:	7813      	ldrb	r3, [r2, #0]
   bf04a:	600b      	str	r3, [r1, #0]
   bf04c:	7812      	ldrb	r2, [r2, #0]
   bf04e:	1e10      	subs	r0, r2, #0
   bf050:	bf18      	it	ne
   bf052:	2001      	movne	r0, #1
   bf054:	b002      	add	sp, #8
   bf056:	4770      	bx	lr
   bf058:	4610      	mov	r0, r2
   bf05a:	e7fb      	b.n	bf054 <__ascii_mbtowc+0x16>
   bf05c:	f06f 0001 	mvn.w	r0, #1
   bf060:	e7f8      	b.n	bf054 <__ascii_mbtowc+0x16>
	...

000bf064 <_Balloc>:
   bf064:	b570      	push	{r4, r5, r6, lr}
   bf066:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bf068:	4604      	mov	r4, r0
   bf06a:	460d      	mov	r5, r1
   bf06c:	b976      	cbnz	r6, bf08c <_Balloc+0x28>
   bf06e:	2010      	movs	r0, #16
   bf070:	f7f9 ff52 	bl	b8f18 <malloc>
   bf074:	4602      	mov	r2, r0
   bf076:	6260      	str	r0, [r4, #36]	; 0x24
   bf078:	b920      	cbnz	r0, bf084 <_Balloc+0x20>
   bf07a:	4b18      	ldr	r3, [pc, #96]	; (bf0dc <_Balloc+0x78>)
   bf07c:	4818      	ldr	r0, [pc, #96]	; (bf0e0 <_Balloc+0x7c>)
   bf07e:	2166      	movs	r1, #102	; 0x66
   bf080:	f7f9 ff9a 	bl	b8fb8 <__assert_func>
   bf084:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bf088:	6006      	str	r6, [r0, #0]
   bf08a:	60c6      	str	r6, [r0, #12]
   bf08c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bf08e:	68f3      	ldr	r3, [r6, #12]
   bf090:	b183      	cbz	r3, bf0b4 <_Balloc+0x50>
   bf092:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bf094:	68db      	ldr	r3, [r3, #12]
   bf096:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bf09a:	b9b8      	cbnz	r0, bf0cc <_Balloc+0x68>
   bf09c:	2101      	movs	r1, #1
   bf09e:	fa01 f605 	lsl.w	r6, r1, r5
   bf0a2:	1d72      	adds	r2, r6, #5
   bf0a4:	0092      	lsls	r2, r2, #2
   bf0a6:	4620      	mov	r0, r4
   bf0a8:	f000 fc9d 	bl	bf9e6 <_calloc_r>
   bf0ac:	b160      	cbz	r0, bf0c8 <_Balloc+0x64>
   bf0ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bf0b2:	e00e      	b.n	bf0d2 <_Balloc+0x6e>
   bf0b4:	2221      	movs	r2, #33	; 0x21
   bf0b6:	2104      	movs	r1, #4
   bf0b8:	4620      	mov	r0, r4
   bf0ba:	f000 fc94 	bl	bf9e6 <_calloc_r>
   bf0be:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bf0c0:	60f0      	str	r0, [r6, #12]
   bf0c2:	68db      	ldr	r3, [r3, #12]
   bf0c4:	2b00      	cmp	r3, #0
   bf0c6:	d1e4      	bne.n	bf092 <_Balloc+0x2e>
   bf0c8:	2000      	movs	r0, #0
   bf0ca:	bd70      	pop	{r4, r5, r6, pc}
   bf0cc:	6802      	ldr	r2, [r0, #0]
   bf0ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bf0d2:	2300      	movs	r3, #0
   bf0d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bf0d8:	e7f7      	b.n	bf0ca <_Balloc+0x66>
   bf0da:	bf00      	nop
   bf0dc:	000c11e5 	.word	0x000c11e5
   bf0e0:	000c1484 	.word	0x000c1484

000bf0e4 <_Bfree>:
   bf0e4:	b570      	push	{r4, r5, r6, lr}
   bf0e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bf0e8:	4605      	mov	r5, r0
   bf0ea:	460c      	mov	r4, r1
   bf0ec:	b976      	cbnz	r6, bf10c <_Bfree+0x28>
   bf0ee:	2010      	movs	r0, #16
   bf0f0:	f7f9 ff12 	bl	b8f18 <malloc>
   bf0f4:	4602      	mov	r2, r0
   bf0f6:	6268      	str	r0, [r5, #36]	; 0x24
   bf0f8:	b920      	cbnz	r0, bf104 <_Bfree+0x20>
   bf0fa:	4b09      	ldr	r3, [pc, #36]	; (bf120 <_Bfree+0x3c>)
   bf0fc:	4809      	ldr	r0, [pc, #36]	; (bf124 <_Bfree+0x40>)
   bf0fe:	218a      	movs	r1, #138	; 0x8a
   bf100:	f7f9 ff5a 	bl	b8fb8 <__assert_func>
   bf104:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bf108:	6006      	str	r6, [r0, #0]
   bf10a:	60c6      	str	r6, [r0, #12]
   bf10c:	b13c      	cbz	r4, bf11e <_Bfree+0x3a>
   bf10e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bf110:	6862      	ldr	r2, [r4, #4]
   bf112:	68db      	ldr	r3, [r3, #12]
   bf114:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bf118:	6021      	str	r1, [r4, #0]
   bf11a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bf11e:	bd70      	pop	{r4, r5, r6, pc}
   bf120:	000c11e5 	.word	0x000c11e5
   bf124:	000c1484 	.word	0x000c1484

000bf128 <__multadd>:
   bf128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bf12c:	690d      	ldr	r5, [r1, #16]
   bf12e:	4607      	mov	r7, r0
   bf130:	460c      	mov	r4, r1
   bf132:	461e      	mov	r6, r3
   bf134:	f101 0c14 	add.w	ip, r1, #20
   bf138:	2000      	movs	r0, #0
   bf13a:	f8dc 3000 	ldr.w	r3, [ip]
   bf13e:	b299      	uxth	r1, r3
   bf140:	fb02 6101 	mla	r1, r2, r1, r6
   bf144:	0c1e      	lsrs	r6, r3, #16
   bf146:	0c0b      	lsrs	r3, r1, #16
   bf148:	fb02 3306 	mla	r3, r2, r6, r3
   bf14c:	b289      	uxth	r1, r1
   bf14e:	3001      	adds	r0, #1
   bf150:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bf154:	4285      	cmp	r5, r0
   bf156:	f84c 1b04 	str.w	r1, [ip], #4
   bf15a:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bf15e:	dcec      	bgt.n	bf13a <__multadd+0x12>
   bf160:	b30e      	cbz	r6, bf1a6 <__multadd+0x7e>
   bf162:	68a3      	ldr	r3, [r4, #8]
   bf164:	42ab      	cmp	r3, r5
   bf166:	dc19      	bgt.n	bf19c <__multadd+0x74>
   bf168:	6861      	ldr	r1, [r4, #4]
   bf16a:	4638      	mov	r0, r7
   bf16c:	3101      	adds	r1, #1
   bf16e:	f7ff ff79 	bl	bf064 <_Balloc>
   bf172:	4680      	mov	r8, r0
   bf174:	b928      	cbnz	r0, bf182 <__multadd+0x5a>
   bf176:	4602      	mov	r2, r0
   bf178:	4b0c      	ldr	r3, [pc, #48]	; (bf1ac <__multadd+0x84>)
   bf17a:	480d      	ldr	r0, [pc, #52]	; (bf1b0 <__multadd+0x88>)
   bf17c:	21b5      	movs	r1, #181	; 0xb5
   bf17e:	f7f9 ff1b 	bl	b8fb8 <__assert_func>
   bf182:	6922      	ldr	r2, [r4, #16]
   bf184:	3202      	adds	r2, #2
   bf186:	f104 010c 	add.w	r1, r4, #12
   bf18a:	0092      	lsls	r2, r2, #2
   bf18c:	300c      	adds	r0, #12
   bf18e:	f7fe fbec 	bl	bd96a <memcpy>
   bf192:	4621      	mov	r1, r4
   bf194:	4638      	mov	r0, r7
   bf196:	f7ff ffa5 	bl	bf0e4 <_Bfree>
   bf19a:	4644      	mov	r4, r8
   bf19c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bf1a0:	3501      	adds	r5, #1
   bf1a2:	615e      	str	r6, [r3, #20]
   bf1a4:	6125      	str	r5, [r4, #16]
   bf1a6:	4620      	mov	r0, r4
   bf1a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bf1ac:	000c13d9 	.word	0x000c13d9
   bf1b0:	000c1484 	.word	0x000c1484

000bf1b4 <__s2b>:
   bf1b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bf1b8:	460c      	mov	r4, r1
   bf1ba:	4615      	mov	r5, r2
   bf1bc:	461f      	mov	r7, r3
   bf1be:	2209      	movs	r2, #9
   bf1c0:	3308      	adds	r3, #8
   bf1c2:	4606      	mov	r6, r0
   bf1c4:	fb93 f3f2 	sdiv	r3, r3, r2
   bf1c8:	2100      	movs	r1, #0
   bf1ca:	2201      	movs	r2, #1
   bf1cc:	429a      	cmp	r2, r3
   bf1ce:	db09      	blt.n	bf1e4 <__s2b+0x30>
   bf1d0:	4630      	mov	r0, r6
   bf1d2:	f7ff ff47 	bl	bf064 <_Balloc>
   bf1d6:	b940      	cbnz	r0, bf1ea <__s2b+0x36>
   bf1d8:	4602      	mov	r2, r0
   bf1da:	4b19      	ldr	r3, [pc, #100]	; (bf240 <__s2b+0x8c>)
   bf1dc:	4819      	ldr	r0, [pc, #100]	; (bf244 <__s2b+0x90>)
   bf1de:	21ce      	movs	r1, #206	; 0xce
   bf1e0:	f7f9 feea 	bl	b8fb8 <__assert_func>
   bf1e4:	0052      	lsls	r2, r2, #1
   bf1e6:	3101      	adds	r1, #1
   bf1e8:	e7f0      	b.n	bf1cc <__s2b+0x18>
   bf1ea:	9b08      	ldr	r3, [sp, #32]
   bf1ec:	6143      	str	r3, [r0, #20]
   bf1ee:	2d09      	cmp	r5, #9
   bf1f0:	f04f 0301 	mov.w	r3, #1
   bf1f4:	6103      	str	r3, [r0, #16]
   bf1f6:	dd16      	ble.n	bf226 <__s2b+0x72>
   bf1f8:	f104 0909 	add.w	r9, r4, #9
   bf1fc:	46c8      	mov	r8, r9
   bf1fe:	442c      	add	r4, r5
   bf200:	f818 3b01 	ldrb.w	r3, [r8], #1
   bf204:	4601      	mov	r1, r0
   bf206:	3b30      	subs	r3, #48	; 0x30
   bf208:	220a      	movs	r2, #10
   bf20a:	4630      	mov	r0, r6
   bf20c:	f7ff ff8c 	bl	bf128 <__multadd>
   bf210:	45a0      	cmp	r8, r4
   bf212:	d1f5      	bne.n	bf200 <__s2b+0x4c>
   bf214:	f1a5 0408 	sub.w	r4, r5, #8
   bf218:	444c      	add	r4, r9
   bf21a:	1b2d      	subs	r5, r5, r4
   bf21c:	1963      	adds	r3, r4, r5
   bf21e:	42bb      	cmp	r3, r7
   bf220:	db04      	blt.n	bf22c <__s2b+0x78>
   bf222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bf226:	340a      	adds	r4, #10
   bf228:	2509      	movs	r5, #9
   bf22a:	e7f6      	b.n	bf21a <__s2b+0x66>
   bf22c:	f814 3b01 	ldrb.w	r3, [r4], #1
   bf230:	4601      	mov	r1, r0
   bf232:	3b30      	subs	r3, #48	; 0x30
   bf234:	220a      	movs	r2, #10
   bf236:	4630      	mov	r0, r6
   bf238:	f7ff ff76 	bl	bf128 <__multadd>
   bf23c:	e7ee      	b.n	bf21c <__s2b+0x68>
   bf23e:	bf00      	nop
   bf240:	000c13d9 	.word	0x000c13d9
   bf244:	000c1484 	.word	0x000c1484

000bf248 <__hi0bits>:
   bf248:	0c03      	lsrs	r3, r0, #16
   bf24a:	041b      	lsls	r3, r3, #16
   bf24c:	b9d3      	cbnz	r3, bf284 <__hi0bits+0x3c>
   bf24e:	0400      	lsls	r0, r0, #16
   bf250:	2310      	movs	r3, #16
   bf252:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bf256:	bf04      	itt	eq
   bf258:	0200      	lsleq	r0, r0, #8
   bf25a:	3308      	addeq	r3, #8
   bf25c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bf260:	bf04      	itt	eq
   bf262:	0100      	lsleq	r0, r0, #4
   bf264:	3304      	addeq	r3, #4
   bf266:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bf26a:	bf04      	itt	eq
   bf26c:	0080      	lsleq	r0, r0, #2
   bf26e:	3302      	addeq	r3, #2
   bf270:	2800      	cmp	r0, #0
   bf272:	db05      	blt.n	bf280 <__hi0bits+0x38>
   bf274:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bf278:	f103 0301 	add.w	r3, r3, #1
   bf27c:	bf08      	it	eq
   bf27e:	2320      	moveq	r3, #32
   bf280:	4618      	mov	r0, r3
   bf282:	4770      	bx	lr
   bf284:	2300      	movs	r3, #0
   bf286:	e7e4      	b.n	bf252 <__hi0bits+0xa>

000bf288 <__lo0bits>:
   bf288:	6803      	ldr	r3, [r0, #0]
   bf28a:	f013 0207 	ands.w	r2, r3, #7
   bf28e:	4601      	mov	r1, r0
   bf290:	d00b      	beq.n	bf2aa <__lo0bits+0x22>
   bf292:	07da      	lsls	r2, r3, #31
   bf294:	d423      	bmi.n	bf2de <__lo0bits+0x56>
   bf296:	0798      	lsls	r0, r3, #30
   bf298:	bf49      	itett	mi
   bf29a:	085b      	lsrmi	r3, r3, #1
   bf29c:	089b      	lsrpl	r3, r3, #2
   bf29e:	2001      	movmi	r0, #1
   bf2a0:	600b      	strmi	r3, [r1, #0]
   bf2a2:	bf5c      	itt	pl
   bf2a4:	600b      	strpl	r3, [r1, #0]
   bf2a6:	2002      	movpl	r0, #2
   bf2a8:	4770      	bx	lr
   bf2aa:	b298      	uxth	r0, r3
   bf2ac:	b9a8      	cbnz	r0, bf2da <__lo0bits+0x52>
   bf2ae:	0c1b      	lsrs	r3, r3, #16
   bf2b0:	2010      	movs	r0, #16
   bf2b2:	b2da      	uxtb	r2, r3
   bf2b4:	b90a      	cbnz	r2, bf2ba <__lo0bits+0x32>
   bf2b6:	3008      	adds	r0, #8
   bf2b8:	0a1b      	lsrs	r3, r3, #8
   bf2ba:	071a      	lsls	r2, r3, #28
   bf2bc:	bf04      	itt	eq
   bf2be:	091b      	lsreq	r3, r3, #4
   bf2c0:	3004      	addeq	r0, #4
   bf2c2:	079a      	lsls	r2, r3, #30
   bf2c4:	bf04      	itt	eq
   bf2c6:	089b      	lsreq	r3, r3, #2
   bf2c8:	3002      	addeq	r0, #2
   bf2ca:	07da      	lsls	r2, r3, #31
   bf2cc:	d403      	bmi.n	bf2d6 <__lo0bits+0x4e>
   bf2ce:	085b      	lsrs	r3, r3, #1
   bf2d0:	f100 0001 	add.w	r0, r0, #1
   bf2d4:	d005      	beq.n	bf2e2 <__lo0bits+0x5a>
   bf2d6:	600b      	str	r3, [r1, #0]
   bf2d8:	4770      	bx	lr
   bf2da:	4610      	mov	r0, r2
   bf2dc:	e7e9      	b.n	bf2b2 <__lo0bits+0x2a>
   bf2de:	2000      	movs	r0, #0
   bf2e0:	4770      	bx	lr
   bf2e2:	2020      	movs	r0, #32
   bf2e4:	4770      	bx	lr
	...

000bf2e8 <__i2b>:
   bf2e8:	b510      	push	{r4, lr}
   bf2ea:	460c      	mov	r4, r1
   bf2ec:	2101      	movs	r1, #1
   bf2ee:	f7ff feb9 	bl	bf064 <_Balloc>
   bf2f2:	4602      	mov	r2, r0
   bf2f4:	b928      	cbnz	r0, bf302 <__i2b+0x1a>
   bf2f6:	4b05      	ldr	r3, [pc, #20]	; (bf30c <__i2b+0x24>)
   bf2f8:	4805      	ldr	r0, [pc, #20]	; (bf310 <__i2b+0x28>)
   bf2fa:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bf2fe:	f7f9 fe5b 	bl	b8fb8 <__assert_func>
   bf302:	2301      	movs	r3, #1
   bf304:	6144      	str	r4, [r0, #20]
   bf306:	6103      	str	r3, [r0, #16]
   bf308:	bd10      	pop	{r4, pc}
   bf30a:	bf00      	nop
   bf30c:	000c13d9 	.word	0x000c13d9
   bf310:	000c1484 	.word	0x000c1484

000bf314 <__multiply>:
   bf314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf318:	4691      	mov	r9, r2
   bf31a:	690a      	ldr	r2, [r1, #16]
   bf31c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bf320:	429a      	cmp	r2, r3
   bf322:	bfb8      	it	lt
   bf324:	460b      	movlt	r3, r1
   bf326:	460c      	mov	r4, r1
   bf328:	bfbc      	itt	lt
   bf32a:	464c      	movlt	r4, r9
   bf32c:	4699      	movlt	r9, r3
   bf32e:	6927      	ldr	r7, [r4, #16]
   bf330:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bf334:	68a3      	ldr	r3, [r4, #8]
   bf336:	6861      	ldr	r1, [r4, #4]
   bf338:	eb07 060a 	add.w	r6, r7, sl
   bf33c:	42b3      	cmp	r3, r6
   bf33e:	b085      	sub	sp, #20
   bf340:	bfb8      	it	lt
   bf342:	3101      	addlt	r1, #1
   bf344:	f7ff fe8e 	bl	bf064 <_Balloc>
   bf348:	b930      	cbnz	r0, bf358 <__multiply+0x44>
   bf34a:	4602      	mov	r2, r0
   bf34c:	4b44      	ldr	r3, [pc, #272]	; (bf460 <__multiply+0x14c>)
   bf34e:	4845      	ldr	r0, [pc, #276]	; (bf464 <__multiply+0x150>)
   bf350:	f240 115d 	movw	r1, #349	; 0x15d
   bf354:	f7f9 fe30 	bl	b8fb8 <__assert_func>
   bf358:	f100 0514 	add.w	r5, r0, #20
   bf35c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bf360:	462b      	mov	r3, r5
   bf362:	2200      	movs	r2, #0
   bf364:	4543      	cmp	r3, r8
   bf366:	d321      	bcc.n	bf3ac <__multiply+0x98>
   bf368:	f104 0314 	add.w	r3, r4, #20
   bf36c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bf370:	f109 0314 	add.w	r3, r9, #20
   bf374:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bf378:	9202      	str	r2, [sp, #8]
   bf37a:	1b3a      	subs	r2, r7, r4
   bf37c:	3a15      	subs	r2, #21
   bf37e:	f022 0203 	bic.w	r2, r2, #3
   bf382:	3204      	adds	r2, #4
   bf384:	f104 0115 	add.w	r1, r4, #21
   bf388:	428f      	cmp	r7, r1
   bf38a:	bf38      	it	cc
   bf38c:	2204      	movcc	r2, #4
   bf38e:	9201      	str	r2, [sp, #4]
   bf390:	9a02      	ldr	r2, [sp, #8]
   bf392:	9303      	str	r3, [sp, #12]
   bf394:	429a      	cmp	r2, r3
   bf396:	d80c      	bhi.n	bf3b2 <__multiply+0x9e>
   bf398:	2e00      	cmp	r6, #0
   bf39a:	dd03      	ble.n	bf3a4 <__multiply+0x90>
   bf39c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bf3a0:	2b00      	cmp	r3, #0
   bf3a2:	d05a      	beq.n	bf45a <__multiply+0x146>
   bf3a4:	6106      	str	r6, [r0, #16]
   bf3a6:	b005      	add	sp, #20
   bf3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bf3ac:	f843 2b04 	str.w	r2, [r3], #4
   bf3b0:	e7d8      	b.n	bf364 <__multiply+0x50>
   bf3b2:	f8b3 a000 	ldrh.w	sl, [r3]
   bf3b6:	f1ba 0f00 	cmp.w	sl, #0
   bf3ba:	d024      	beq.n	bf406 <__multiply+0xf2>
   bf3bc:	f104 0e14 	add.w	lr, r4, #20
   bf3c0:	46a9      	mov	r9, r5
   bf3c2:	f04f 0c00 	mov.w	ip, #0
   bf3c6:	f85e 2b04 	ldr.w	r2, [lr], #4
   bf3ca:	f8d9 1000 	ldr.w	r1, [r9]
   bf3ce:	fa1f fb82 	uxth.w	fp, r2
   bf3d2:	b289      	uxth	r1, r1
   bf3d4:	fb0a 110b 	mla	r1, sl, fp, r1
   bf3d8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bf3dc:	f8d9 2000 	ldr.w	r2, [r9]
   bf3e0:	4461      	add	r1, ip
   bf3e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bf3e6:	fb0a c20b 	mla	r2, sl, fp, ip
   bf3ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bf3ee:	b289      	uxth	r1, r1
   bf3f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bf3f4:	4577      	cmp	r7, lr
   bf3f6:	f849 1b04 	str.w	r1, [r9], #4
   bf3fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bf3fe:	d8e2      	bhi.n	bf3c6 <__multiply+0xb2>
   bf400:	9a01      	ldr	r2, [sp, #4]
   bf402:	f845 c002 	str.w	ip, [r5, r2]
   bf406:	9a03      	ldr	r2, [sp, #12]
   bf408:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bf40c:	3304      	adds	r3, #4
   bf40e:	f1b9 0f00 	cmp.w	r9, #0
   bf412:	d020      	beq.n	bf456 <__multiply+0x142>
   bf414:	6829      	ldr	r1, [r5, #0]
   bf416:	f104 0c14 	add.w	ip, r4, #20
   bf41a:	46ae      	mov	lr, r5
   bf41c:	f04f 0a00 	mov.w	sl, #0
   bf420:	f8bc b000 	ldrh.w	fp, [ip]
   bf424:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bf428:	fb09 220b 	mla	r2, r9, fp, r2
   bf42c:	4492      	add	sl, r2
   bf42e:	b289      	uxth	r1, r1
   bf430:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bf434:	f84e 1b04 	str.w	r1, [lr], #4
   bf438:	f85c 2b04 	ldr.w	r2, [ip], #4
   bf43c:	f8be 1000 	ldrh.w	r1, [lr]
   bf440:	0c12      	lsrs	r2, r2, #16
   bf442:	fb09 1102 	mla	r1, r9, r2, r1
   bf446:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bf44a:	4567      	cmp	r7, ip
   bf44c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bf450:	d8e6      	bhi.n	bf420 <__multiply+0x10c>
   bf452:	9a01      	ldr	r2, [sp, #4]
   bf454:	50a9      	str	r1, [r5, r2]
   bf456:	3504      	adds	r5, #4
   bf458:	e79a      	b.n	bf390 <__multiply+0x7c>
   bf45a:	3e01      	subs	r6, #1
   bf45c:	e79c      	b.n	bf398 <__multiply+0x84>
   bf45e:	bf00      	nop
   bf460:	000c13d9 	.word	0x000c13d9
   bf464:	000c1484 	.word	0x000c1484

000bf468 <__pow5mult>:
   bf468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bf46c:	4615      	mov	r5, r2
   bf46e:	f012 0203 	ands.w	r2, r2, #3
   bf472:	4606      	mov	r6, r0
   bf474:	460f      	mov	r7, r1
   bf476:	d007      	beq.n	bf488 <__pow5mult+0x20>
   bf478:	4c25      	ldr	r4, [pc, #148]	; (bf510 <__pow5mult+0xa8>)
   bf47a:	3a01      	subs	r2, #1
   bf47c:	2300      	movs	r3, #0
   bf47e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bf482:	f7ff fe51 	bl	bf128 <__multadd>
   bf486:	4607      	mov	r7, r0
   bf488:	10ad      	asrs	r5, r5, #2
   bf48a:	d03d      	beq.n	bf508 <__pow5mult+0xa0>
   bf48c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bf48e:	b97c      	cbnz	r4, bf4b0 <__pow5mult+0x48>
   bf490:	2010      	movs	r0, #16
   bf492:	f7f9 fd41 	bl	b8f18 <malloc>
   bf496:	4602      	mov	r2, r0
   bf498:	6270      	str	r0, [r6, #36]	; 0x24
   bf49a:	b928      	cbnz	r0, bf4a8 <__pow5mult+0x40>
   bf49c:	4b1d      	ldr	r3, [pc, #116]	; (bf514 <__pow5mult+0xac>)
   bf49e:	481e      	ldr	r0, [pc, #120]	; (bf518 <__pow5mult+0xb0>)
   bf4a0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bf4a4:	f7f9 fd88 	bl	b8fb8 <__assert_func>
   bf4a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bf4ac:	6004      	str	r4, [r0, #0]
   bf4ae:	60c4      	str	r4, [r0, #12]
   bf4b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bf4b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bf4b8:	b94c      	cbnz	r4, bf4ce <__pow5mult+0x66>
   bf4ba:	f240 2171 	movw	r1, #625	; 0x271
   bf4be:	4630      	mov	r0, r6
   bf4c0:	f7ff ff12 	bl	bf2e8 <__i2b>
   bf4c4:	2300      	movs	r3, #0
   bf4c6:	f8c8 0008 	str.w	r0, [r8, #8]
   bf4ca:	4604      	mov	r4, r0
   bf4cc:	6003      	str	r3, [r0, #0]
   bf4ce:	f04f 0900 	mov.w	r9, #0
   bf4d2:	07eb      	lsls	r3, r5, #31
   bf4d4:	d50a      	bpl.n	bf4ec <__pow5mult+0x84>
   bf4d6:	4639      	mov	r1, r7
   bf4d8:	4622      	mov	r2, r4
   bf4da:	4630      	mov	r0, r6
   bf4dc:	f7ff ff1a 	bl	bf314 <__multiply>
   bf4e0:	4639      	mov	r1, r7
   bf4e2:	4680      	mov	r8, r0
   bf4e4:	4630      	mov	r0, r6
   bf4e6:	f7ff fdfd 	bl	bf0e4 <_Bfree>
   bf4ea:	4647      	mov	r7, r8
   bf4ec:	106d      	asrs	r5, r5, #1
   bf4ee:	d00b      	beq.n	bf508 <__pow5mult+0xa0>
   bf4f0:	6820      	ldr	r0, [r4, #0]
   bf4f2:	b938      	cbnz	r0, bf504 <__pow5mult+0x9c>
   bf4f4:	4622      	mov	r2, r4
   bf4f6:	4621      	mov	r1, r4
   bf4f8:	4630      	mov	r0, r6
   bf4fa:	f7ff ff0b 	bl	bf314 <__multiply>
   bf4fe:	6020      	str	r0, [r4, #0]
   bf500:	f8c0 9000 	str.w	r9, [r0]
   bf504:	4604      	mov	r4, r0
   bf506:	e7e4      	b.n	bf4d2 <__pow5mult+0x6a>
   bf508:	4638      	mov	r0, r7
   bf50a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bf50e:	bf00      	nop
   bf510:	000c15f8 	.word	0x000c15f8
   bf514:	000c11e5 	.word	0x000c11e5
   bf518:	000c1484 	.word	0x000c1484

000bf51c <__lshift>:
   bf51c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bf520:	460c      	mov	r4, r1
   bf522:	6849      	ldr	r1, [r1, #4]
   bf524:	6923      	ldr	r3, [r4, #16]
   bf526:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bf52a:	68a3      	ldr	r3, [r4, #8]
   bf52c:	4607      	mov	r7, r0
   bf52e:	4691      	mov	r9, r2
   bf530:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bf534:	f108 0601 	add.w	r6, r8, #1
   bf538:	42b3      	cmp	r3, r6
   bf53a:	db0b      	blt.n	bf554 <__lshift+0x38>
   bf53c:	4638      	mov	r0, r7
   bf53e:	f7ff fd91 	bl	bf064 <_Balloc>
   bf542:	4605      	mov	r5, r0
   bf544:	b948      	cbnz	r0, bf55a <__lshift+0x3e>
   bf546:	4602      	mov	r2, r0
   bf548:	4b2a      	ldr	r3, [pc, #168]	; (bf5f4 <__lshift+0xd8>)
   bf54a:	482b      	ldr	r0, [pc, #172]	; (bf5f8 <__lshift+0xdc>)
   bf54c:	f240 11d9 	movw	r1, #473	; 0x1d9
   bf550:	f7f9 fd32 	bl	b8fb8 <__assert_func>
   bf554:	3101      	adds	r1, #1
   bf556:	005b      	lsls	r3, r3, #1
   bf558:	e7ee      	b.n	bf538 <__lshift+0x1c>
   bf55a:	2300      	movs	r3, #0
   bf55c:	f100 0114 	add.w	r1, r0, #20
   bf560:	f100 0210 	add.w	r2, r0, #16
   bf564:	4618      	mov	r0, r3
   bf566:	4553      	cmp	r3, sl
   bf568:	db37      	blt.n	bf5da <__lshift+0xbe>
   bf56a:	6920      	ldr	r0, [r4, #16]
   bf56c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bf570:	f104 0314 	add.w	r3, r4, #20
   bf574:	f019 091f 	ands.w	r9, r9, #31
   bf578:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bf57c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bf580:	d02f      	beq.n	bf5e2 <__lshift+0xc6>
   bf582:	f1c9 0e20 	rsb	lr, r9, #32
   bf586:	468a      	mov	sl, r1
   bf588:	f04f 0c00 	mov.w	ip, #0
   bf58c:	681a      	ldr	r2, [r3, #0]
   bf58e:	fa02 f209 	lsl.w	r2, r2, r9
   bf592:	ea42 020c 	orr.w	r2, r2, ip
   bf596:	f84a 2b04 	str.w	r2, [sl], #4
   bf59a:	f853 2b04 	ldr.w	r2, [r3], #4
   bf59e:	4298      	cmp	r0, r3
   bf5a0:	fa22 fc0e 	lsr.w	ip, r2, lr
   bf5a4:	d8f2      	bhi.n	bf58c <__lshift+0x70>
   bf5a6:	1b03      	subs	r3, r0, r4
   bf5a8:	3b15      	subs	r3, #21
   bf5aa:	f023 0303 	bic.w	r3, r3, #3
   bf5ae:	3304      	adds	r3, #4
   bf5b0:	f104 0215 	add.w	r2, r4, #21
   bf5b4:	4290      	cmp	r0, r2
   bf5b6:	bf38      	it	cc
   bf5b8:	2304      	movcc	r3, #4
   bf5ba:	f841 c003 	str.w	ip, [r1, r3]
   bf5be:	f1bc 0f00 	cmp.w	ip, #0
   bf5c2:	d001      	beq.n	bf5c8 <__lshift+0xac>
   bf5c4:	f108 0602 	add.w	r6, r8, #2
   bf5c8:	3e01      	subs	r6, #1
   bf5ca:	4638      	mov	r0, r7
   bf5cc:	612e      	str	r6, [r5, #16]
   bf5ce:	4621      	mov	r1, r4
   bf5d0:	f7ff fd88 	bl	bf0e4 <_Bfree>
   bf5d4:	4628      	mov	r0, r5
   bf5d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bf5da:	f842 0f04 	str.w	r0, [r2, #4]!
   bf5de:	3301      	adds	r3, #1
   bf5e0:	e7c1      	b.n	bf566 <__lshift+0x4a>
   bf5e2:	3904      	subs	r1, #4
   bf5e4:	f853 2b04 	ldr.w	r2, [r3], #4
   bf5e8:	f841 2f04 	str.w	r2, [r1, #4]!
   bf5ec:	4298      	cmp	r0, r3
   bf5ee:	d8f9      	bhi.n	bf5e4 <__lshift+0xc8>
   bf5f0:	e7ea      	b.n	bf5c8 <__lshift+0xac>
   bf5f2:	bf00      	nop
   bf5f4:	000c13d9 	.word	0x000c13d9
   bf5f8:	000c1484 	.word	0x000c1484

000bf5fc <__mcmp>:
   bf5fc:	b530      	push	{r4, r5, lr}
   bf5fe:	6902      	ldr	r2, [r0, #16]
   bf600:	690c      	ldr	r4, [r1, #16]
   bf602:	1b12      	subs	r2, r2, r4
   bf604:	d10e      	bne.n	bf624 <__mcmp+0x28>
   bf606:	f100 0314 	add.w	r3, r0, #20
   bf60a:	3114      	adds	r1, #20
   bf60c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bf610:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bf614:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bf618:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bf61c:	42a5      	cmp	r5, r4
   bf61e:	d003      	beq.n	bf628 <__mcmp+0x2c>
   bf620:	d305      	bcc.n	bf62e <__mcmp+0x32>
   bf622:	2201      	movs	r2, #1
   bf624:	4610      	mov	r0, r2
   bf626:	bd30      	pop	{r4, r5, pc}
   bf628:	4283      	cmp	r3, r0
   bf62a:	d3f3      	bcc.n	bf614 <__mcmp+0x18>
   bf62c:	e7fa      	b.n	bf624 <__mcmp+0x28>
   bf62e:	f04f 32ff 	mov.w	r2, #4294967295
   bf632:	e7f7      	b.n	bf624 <__mcmp+0x28>

000bf634 <__mdiff>:
   bf634:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf638:	460c      	mov	r4, r1
   bf63a:	4606      	mov	r6, r0
   bf63c:	4611      	mov	r1, r2
   bf63e:	4620      	mov	r0, r4
   bf640:	4690      	mov	r8, r2
   bf642:	f7ff ffdb 	bl	bf5fc <__mcmp>
   bf646:	1e05      	subs	r5, r0, #0
   bf648:	d110      	bne.n	bf66c <__mdiff+0x38>
   bf64a:	4629      	mov	r1, r5
   bf64c:	4630      	mov	r0, r6
   bf64e:	f7ff fd09 	bl	bf064 <_Balloc>
   bf652:	b930      	cbnz	r0, bf662 <__mdiff+0x2e>
   bf654:	4b3a      	ldr	r3, [pc, #232]	; (bf740 <__mdiff+0x10c>)
   bf656:	4602      	mov	r2, r0
   bf658:	f240 2132 	movw	r1, #562	; 0x232
   bf65c:	4839      	ldr	r0, [pc, #228]	; (bf744 <__mdiff+0x110>)
   bf65e:	f7f9 fcab 	bl	b8fb8 <__assert_func>
   bf662:	2301      	movs	r3, #1
   bf664:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bf668:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bf66c:	bfa4      	itt	ge
   bf66e:	4643      	movge	r3, r8
   bf670:	46a0      	movge	r8, r4
   bf672:	4630      	mov	r0, r6
   bf674:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bf678:	bfa6      	itte	ge
   bf67a:	461c      	movge	r4, r3
   bf67c:	2500      	movge	r5, #0
   bf67e:	2501      	movlt	r5, #1
   bf680:	f7ff fcf0 	bl	bf064 <_Balloc>
   bf684:	b920      	cbnz	r0, bf690 <__mdiff+0x5c>
   bf686:	4b2e      	ldr	r3, [pc, #184]	; (bf740 <__mdiff+0x10c>)
   bf688:	4602      	mov	r2, r0
   bf68a:	f44f 7110 	mov.w	r1, #576	; 0x240
   bf68e:	e7e5      	b.n	bf65c <__mdiff+0x28>
   bf690:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bf694:	6926      	ldr	r6, [r4, #16]
   bf696:	60c5      	str	r5, [r0, #12]
   bf698:	f104 0914 	add.w	r9, r4, #20
   bf69c:	f108 0514 	add.w	r5, r8, #20
   bf6a0:	f100 0e14 	add.w	lr, r0, #20
   bf6a4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bf6a8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bf6ac:	f108 0210 	add.w	r2, r8, #16
   bf6b0:	46f2      	mov	sl, lr
   bf6b2:	2100      	movs	r1, #0
   bf6b4:	f859 3b04 	ldr.w	r3, [r9], #4
   bf6b8:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bf6bc:	fa1f f883 	uxth.w	r8, r3
   bf6c0:	fa11 f18b 	uxtah	r1, r1, fp
   bf6c4:	0c1b      	lsrs	r3, r3, #16
   bf6c6:	eba1 0808 	sub.w	r8, r1, r8
   bf6ca:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bf6ce:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bf6d2:	fa1f f888 	uxth.w	r8, r8
   bf6d6:	1419      	asrs	r1, r3, #16
   bf6d8:	454e      	cmp	r6, r9
   bf6da:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bf6de:	f84a 3b04 	str.w	r3, [sl], #4
   bf6e2:	d8e7      	bhi.n	bf6b4 <__mdiff+0x80>
   bf6e4:	1b33      	subs	r3, r6, r4
   bf6e6:	3b15      	subs	r3, #21
   bf6e8:	f023 0303 	bic.w	r3, r3, #3
   bf6ec:	3304      	adds	r3, #4
   bf6ee:	3415      	adds	r4, #21
   bf6f0:	42a6      	cmp	r6, r4
   bf6f2:	bf38      	it	cc
   bf6f4:	2304      	movcc	r3, #4
   bf6f6:	441d      	add	r5, r3
   bf6f8:	4473      	add	r3, lr
   bf6fa:	469e      	mov	lr, r3
   bf6fc:	462e      	mov	r6, r5
   bf6fe:	4566      	cmp	r6, ip
   bf700:	d30e      	bcc.n	bf720 <__mdiff+0xec>
   bf702:	f10c 0203 	add.w	r2, ip, #3
   bf706:	1b52      	subs	r2, r2, r5
   bf708:	f022 0203 	bic.w	r2, r2, #3
   bf70c:	3d03      	subs	r5, #3
   bf70e:	45ac      	cmp	ip, r5
   bf710:	bf38      	it	cc
   bf712:	2200      	movcc	r2, #0
   bf714:	441a      	add	r2, r3
   bf716:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bf71a:	b17b      	cbz	r3, bf73c <__mdiff+0x108>
   bf71c:	6107      	str	r7, [r0, #16]
   bf71e:	e7a3      	b.n	bf668 <__mdiff+0x34>
   bf720:	f856 8b04 	ldr.w	r8, [r6], #4
   bf724:	fa11 f288 	uxtah	r2, r1, r8
   bf728:	1414      	asrs	r4, r2, #16
   bf72a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bf72e:	b292      	uxth	r2, r2
   bf730:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bf734:	f84e 2b04 	str.w	r2, [lr], #4
   bf738:	1421      	asrs	r1, r4, #16
   bf73a:	e7e0      	b.n	bf6fe <__mdiff+0xca>
   bf73c:	3f01      	subs	r7, #1
   bf73e:	e7ea      	b.n	bf716 <__mdiff+0xe2>
   bf740:	000c13d9 	.word	0x000c13d9
   bf744:	000c1484 	.word	0x000c1484

000bf748 <__ulp>:
   bf748:	b082      	sub	sp, #8
   bf74a:	ed8d 0b00 	vstr	d0, [sp]
   bf74e:	9b01      	ldr	r3, [sp, #4]
   bf750:	4912      	ldr	r1, [pc, #72]	; (bf79c <__ulp+0x54>)
   bf752:	4019      	ands	r1, r3
   bf754:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bf758:	2900      	cmp	r1, #0
   bf75a:	dd05      	ble.n	bf768 <__ulp+0x20>
   bf75c:	2200      	movs	r2, #0
   bf75e:	460b      	mov	r3, r1
   bf760:	ec43 2b10 	vmov	d0, r2, r3
   bf764:	b002      	add	sp, #8
   bf766:	4770      	bx	lr
   bf768:	4249      	negs	r1, r1
   bf76a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bf76e:	ea4f 5021 	mov.w	r0, r1, asr #20
   bf772:	f04f 0200 	mov.w	r2, #0
   bf776:	f04f 0300 	mov.w	r3, #0
   bf77a:	da04      	bge.n	bf786 <__ulp+0x3e>
   bf77c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bf780:	fa41 f300 	asr.w	r3, r1, r0
   bf784:	e7ec      	b.n	bf760 <__ulp+0x18>
   bf786:	f1a0 0114 	sub.w	r1, r0, #20
   bf78a:	291e      	cmp	r1, #30
   bf78c:	bfda      	itte	le
   bf78e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bf792:	fa20 f101 	lsrle.w	r1, r0, r1
   bf796:	2101      	movgt	r1, #1
   bf798:	460a      	mov	r2, r1
   bf79a:	e7e1      	b.n	bf760 <__ulp+0x18>
   bf79c:	7ff00000 	.word	0x7ff00000

000bf7a0 <__b2d>:
   bf7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bf7a2:	6905      	ldr	r5, [r0, #16]
   bf7a4:	f100 0714 	add.w	r7, r0, #20
   bf7a8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bf7ac:	1f2e      	subs	r6, r5, #4
   bf7ae:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bf7b2:	4620      	mov	r0, r4
   bf7b4:	f7ff fd48 	bl	bf248 <__hi0bits>
   bf7b8:	f1c0 0320 	rsb	r3, r0, #32
   bf7bc:	280a      	cmp	r0, #10
   bf7be:	f8df c07c 	ldr.w	ip, [pc, #124]	; bf83c <__b2d+0x9c>
   bf7c2:	600b      	str	r3, [r1, #0]
   bf7c4:	dc14      	bgt.n	bf7f0 <__b2d+0x50>
   bf7c6:	f1c0 0e0b 	rsb	lr, r0, #11
   bf7ca:	fa24 f10e 	lsr.w	r1, r4, lr
   bf7ce:	42b7      	cmp	r7, r6
   bf7d0:	ea41 030c 	orr.w	r3, r1, ip
   bf7d4:	bf34      	ite	cc
   bf7d6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bf7da:	2100      	movcs	r1, #0
   bf7dc:	3015      	adds	r0, #21
   bf7de:	fa04 f000 	lsl.w	r0, r4, r0
   bf7e2:	fa21 f10e 	lsr.w	r1, r1, lr
   bf7e6:	ea40 0201 	orr.w	r2, r0, r1
   bf7ea:	ec43 2b10 	vmov	d0, r2, r3
   bf7ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bf7f0:	42b7      	cmp	r7, r6
   bf7f2:	bf3a      	itte	cc
   bf7f4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bf7f8:	f1a5 0608 	subcc.w	r6, r5, #8
   bf7fc:	2100      	movcs	r1, #0
   bf7fe:	380b      	subs	r0, #11
   bf800:	d017      	beq.n	bf832 <__b2d+0x92>
   bf802:	f1c0 0c20 	rsb	ip, r0, #32
   bf806:	fa04 f500 	lsl.w	r5, r4, r0
   bf80a:	42be      	cmp	r6, r7
   bf80c:	fa21 f40c 	lsr.w	r4, r1, ip
   bf810:	ea45 0504 	orr.w	r5, r5, r4
   bf814:	bf8c      	ite	hi
   bf816:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bf81a:	2400      	movls	r4, #0
   bf81c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bf820:	fa01 f000 	lsl.w	r0, r1, r0
   bf824:	fa24 f40c 	lsr.w	r4, r4, ip
   bf828:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bf82c:	ea40 0204 	orr.w	r2, r0, r4
   bf830:	e7db      	b.n	bf7ea <__b2d+0x4a>
   bf832:	ea44 030c 	orr.w	r3, r4, ip
   bf836:	460a      	mov	r2, r1
   bf838:	e7d7      	b.n	bf7ea <__b2d+0x4a>
   bf83a:	bf00      	nop
   bf83c:	3ff00000 	.word	0x3ff00000

000bf840 <__d2b>:
   bf840:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bf844:	4689      	mov	r9, r1
   bf846:	2101      	movs	r1, #1
   bf848:	ec57 6b10 	vmov	r6, r7, d0
   bf84c:	4690      	mov	r8, r2
   bf84e:	f7ff fc09 	bl	bf064 <_Balloc>
   bf852:	4604      	mov	r4, r0
   bf854:	b930      	cbnz	r0, bf864 <__d2b+0x24>
   bf856:	4602      	mov	r2, r0
   bf858:	4b25      	ldr	r3, [pc, #148]	; (bf8f0 <__d2b+0xb0>)
   bf85a:	4826      	ldr	r0, [pc, #152]	; (bf8f4 <__d2b+0xb4>)
   bf85c:	f240 310a 	movw	r1, #778	; 0x30a
   bf860:	f7f9 fbaa 	bl	b8fb8 <__assert_func>
   bf864:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bf868:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bf86c:	bb35      	cbnz	r5, bf8bc <__d2b+0x7c>
   bf86e:	2e00      	cmp	r6, #0
   bf870:	9301      	str	r3, [sp, #4]
   bf872:	d028      	beq.n	bf8c6 <__d2b+0x86>
   bf874:	4668      	mov	r0, sp
   bf876:	9600      	str	r6, [sp, #0]
   bf878:	f7ff fd06 	bl	bf288 <__lo0bits>
   bf87c:	9900      	ldr	r1, [sp, #0]
   bf87e:	b300      	cbz	r0, bf8c2 <__d2b+0x82>
   bf880:	9a01      	ldr	r2, [sp, #4]
   bf882:	f1c0 0320 	rsb	r3, r0, #32
   bf886:	fa02 f303 	lsl.w	r3, r2, r3
   bf88a:	430b      	orrs	r3, r1
   bf88c:	40c2      	lsrs	r2, r0
   bf88e:	6163      	str	r3, [r4, #20]
   bf890:	9201      	str	r2, [sp, #4]
   bf892:	9b01      	ldr	r3, [sp, #4]
   bf894:	61a3      	str	r3, [r4, #24]
   bf896:	2b00      	cmp	r3, #0
   bf898:	bf14      	ite	ne
   bf89a:	2202      	movne	r2, #2
   bf89c:	2201      	moveq	r2, #1
   bf89e:	6122      	str	r2, [r4, #16]
   bf8a0:	b1d5      	cbz	r5, bf8d8 <__d2b+0x98>
   bf8a2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bf8a6:	4405      	add	r5, r0
   bf8a8:	f8c9 5000 	str.w	r5, [r9]
   bf8ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bf8b0:	f8c8 0000 	str.w	r0, [r8]
   bf8b4:	4620      	mov	r0, r4
   bf8b6:	b003      	add	sp, #12
   bf8b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bf8bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bf8c0:	e7d5      	b.n	bf86e <__d2b+0x2e>
   bf8c2:	6161      	str	r1, [r4, #20]
   bf8c4:	e7e5      	b.n	bf892 <__d2b+0x52>
   bf8c6:	a801      	add	r0, sp, #4
   bf8c8:	f7ff fcde 	bl	bf288 <__lo0bits>
   bf8cc:	9b01      	ldr	r3, [sp, #4]
   bf8ce:	6163      	str	r3, [r4, #20]
   bf8d0:	2201      	movs	r2, #1
   bf8d2:	6122      	str	r2, [r4, #16]
   bf8d4:	3020      	adds	r0, #32
   bf8d6:	e7e3      	b.n	bf8a0 <__d2b+0x60>
   bf8d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bf8dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bf8e0:	f8c9 0000 	str.w	r0, [r9]
   bf8e4:	6918      	ldr	r0, [r3, #16]
   bf8e6:	f7ff fcaf 	bl	bf248 <__hi0bits>
   bf8ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bf8ee:	e7df      	b.n	bf8b0 <__d2b+0x70>
   bf8f0:	000c13d9 	.word	0x000c13d9
   bf8f4:	000c1484 	.word	0x000c1484

000bf8f8 <__ratio>:
   bf8f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bf8fc:	4688      	mov	r8, r1
   bf8fe:	4669      	mov	r1, sp
   bf900:	4681      	mov	r9, r0
   bf902:	f7ff ff4d 	bl	bf7a0 <__b2d>
   bf906:	a901      	add	r1, sp, #4
   bf908:	4640      	mov	r0, r8
   bf90a:	ec55 4b10 	vmov	r4, r5, d0
   bf90e:	f7ff ff47 	bl	bf7a0 <__b2d>
   bf912:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bf916:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bf91a:	eba3 0c02 	sub.w	ip, r3, r2
   bf91e:	e9dd 3200 	ldrd	r3, r2, [sp]
   bf922:	1a9b      	subs	r3, r3, r2
   bf924:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bf928:	ec51 0b10 	vmov	r0, r1, d0
   bf92c:	2b00      	cmp	r3, #0
   bf92e:	bfd6      	itet	le
   bf930:	460a      	movle	r2, r1
   bf932:	462a      	movgt	r2, r5
   bf934:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bf938:	468b      	mov	fp, r1
   bf93a:	462f      	mov	r7, r5
   bf93c:	bfd4      	ite	le
   bf93e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bf942:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bf946:	4620      	mov	r0, r4
   bf948:	ee10 2a10 	vmov	r2, s0
   bf94c:	465b      	mov	r3, fp
   bf94e:	4639      	mov	r1, r7
   bf950:	f7fd fdf0 	bl	bd534 <__aeabi_ddiv>
   bf954:	ec41 0b10 	vmov	d0, r0, r1
   bf958:	b003      	add	sp, #12
   bf95a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bf95e <__copybits>:
   bf95e:	3901      	subs	r1, #1
   bf960:	b570      	push	{r4, r5, r6, lr}
   bf962:	1149      	asrs	r1, r1, #5
   bf964:	6914      	ldr	r4, [r2, #16]
   bf966:	3101      	adds	r1, #1
   bf968:	f102 0314 	add.w	r3, r2, #20
   bf96c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bf970:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bf974:	1f05      	subs	r5, r0, #4
   bf976:	42a3      	cmp	r3, r4
   bf978:	d30c      	bcc.n	bf994 <__copybits+0x36>
   bf97a:	1aa3      	subs	r3, r4, r2
   bf97c:	3b11      	subs	r3, #17
   bf97e:	f023 0303 	bic.w	r3, r3, #3
   bf982:	3211      	adds	r2, #17
   bf984:	42a2      	cmp	r2, r4
   bf986:	bf88      	it	hi
   bf988:	2300      	movhi	r3, #0
   bf98a:	4418      	add	r0, r3
   bf98c:	2300      	movs	r3, #0
   bf98e:	4288      	cmp	r0, r1
   bf990:	d305      	bcc.n	bf99e <__copybits+0x40>
   bf992:	bd70      	pop	{r4, r5, r6, pc}
   bf994:	f853 6b04 	ldr.w	r6, [r3], #4
   bf998:	f845 6f04 	str.w	r6, [r5, #4]!
   bf99c:	e7eb      	b.n	bf976 <__copybits+0x18>
   bf99e:	f840 3b04 	str.w	r3, [r0], #4
   bf9a2:	e7f4      	b.n	bf98e <__copybits+0x30>

000bf9a4 <__any_on>:
   bf9a4:	f100 0214 	add.w	r2, r0, #20
   bf9a8:	6900      	ldr	r0, [r0, #16]
   bf9aa:	114b      	asrs	r3, r1, #5
   bf9ac:	4298      	cmp	r0, r3
   bf9ae:	b510      	push	{r4, lr}
   bf9b0:	db11      	blt.n	bf9d6 <__any_on+0x32>
   bf9b2:	dd0a      	ble.n	bf9ca <__any_on+0x26>
   bf9b4:	f011 011f 	ands.w	r1, r1, #31
   bf9b8:	d007      	beq.n	bf9ca <__any_on+0x26>
   bf9ba:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bf9be:	fa24 f001 	lsr.w	r0, r4, r1
   bf9c2:	fa00 f101 	lsl.w	r1, r0, r1
   bf9c6:	428c      	cmp	r4, r1
   bf9c8:	d10b      	bne.n	bf9e2 <__any_on+0x3e>
   bf9ca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bf9ce:	4293      	cmp	r3, r2
   bf9d0:	d803      	bhi.n	bf9da <__any_on+0x36>
   bf9d2:	2000      	movs	r0, #0
   bf9d4:	bd10      	pop	{r4, pc}
   bf9d6:	4603      	mov	r3, r0
   bf9d8:	e7f7      	b.n	bf9ca <__any_on+0x26>
   bf9da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bf9de:	2900      	cmp	r1, #0
   bf9e0:	d0f5      	beq.n	bf9ce <__any_on+0x2a>
   bf9e2:	2001      	movs	r0, #1
   bf9e4:	e7f6      	b.n	bf9d4 <__any_on+0x30>

000bf9e6 <_calloc_r>:
   bf9e6:	b513      	push	{r0, r1, r4, lr}
   bf9e8:	434a      	muls	r2, r1
   bf9ea:	4611      	mov	r1, r2
   bf9ec:	9201      	str	r2, [sp, #4]
   bf9ee:	f7f9 fad3 	bl	b8f98 <_malloc_r>
   bf9f2:	4604      	mov	r4, r0
   bf9f4:	b118      	cbz	r0, bf9fe <_calloc_r+0x18>
   bf9f6:	9a01      	ldr	r2, [sp, #4]
   bf9f8:	2100      	movs	r1, #0
   bf9fa:	f7fd ffde 	bl	bd9ba <memset>
   bf9fe:	4620      	mov	r0, r4
   bfa00:	b002      	add	sp, #8
   bfa02:	bd10      	pop	{r4, pc}
   bfa04:	0000      	movs	r0, r0
	...

000bfa08 <nan>:
   bfa08:	ed9f 0b01 	vldr	d0, [pc, #4]	; bfa10 <nan+0x8>
   bfa0c:	4770      	bx	lr
   bfa0e:	bf00      	nop
   bfa10:	00000000 	.word	0x00000000
   bfa14:	7ff80000 	.word	0x7ff80000

000bfa18 <__ascii_wctomb>:
   bfa18:	b149      	cbz	r1, bfa2e <__ascii_wctomb+0x16>
   bfa1a:	2aff      	cmp	r2, #255	; 0xff
   bfa1c:	bf85      	ittet	hi
   bfa1e:	238a      	movhi	r3, #138	; 0x8a
   bfa20:	6003      	strhi	r3, [r0, #0]
   bfa22:	700a      	strbls	r2, [r1, #0]
   bfa24:	f04f 30ff 	movhi.w	r0, #4294967295
   bfa28:	bf98      	it	ls
   bfa2a:	2001      	movls	r0, #1
   bfa2c:	4770      	bx	lr
   bfa2e:	4608      	mov	r0, r1
   bfa30:	4770      	bx	lr
	...

000bfa34 <__aeabi_d2lz>:
   bfa34:	b538      	push	{r3, r4, r5, lr}
   bfa36:	2200      	movs	r2, #0
   bfa38:	2300      	movs	r3, #0
   bfa3a:	4604      	mov	r4, r0
   bfa3c:	460d      	mov	r5, r1
   bfa3e:	f7fd fec1 	bl	bd7c4 <__aeabi_dcmplt>
   bfa42:	b928      	cbnz	r0, bfa50 <__aeabi_d2lz+0x1c>
   bfa44:	4620      	mov	r0, r4
   bfa46:	4629      	mov	r1, r5
   bfa48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bfa4c:	f7fd bf52 	b.w	bd8f4 <__aeabi_d2ulz>
   bfa50:	4620      	mov	r0, r4
   bfa52:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   bfa56:	f7fd ff4d 	bl	bd8f4 <__aeabi_d2ulz>
   bfa5a:	4240      	negs	r0, r0
   bfa5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bfa60:	bd38      	pop	{r3, r4, r5, pc}
   bfa62:	bf00      	nop

000bfa64 <dynalib_user>:
   bfa64:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bfa74:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   bfa84:	7620 7269 7574 6c61 5200 6769 7468 7420      virtual.Right t
   bfa94:	6972 6767 7265 6400 6665 7561 746c 0020     rigger.default .
   bfaa4:	534d 0042 534c 0042 533c 4950 6553 7474     MSB.LSB.<SPISett
   bfab4:	6e69 7367 6420 6665 7561 746c 003e 533c     ings default>.<S
   bfac4:	4950 6553 7474 6e69 7367 2520 2573 2075     PISettings %s%u 
   bfad4:	7325 4d20 444f 2545 3e75 6600 6c69 6e65     %s MODE%u>.filen
   bfae4:	6d61 0065 6946 656c 2720 7325 2027 6c61     ame.File '%s' al
   bfaf4:	6572 6461 2079 7865 7369 7374 202c 6564     ready exists, de
   bfb04:	656c 6974 676e 6120 646e 6f20 6576 7772     leting and overw
   bfb14:	6972 6974 676e 5300 6174 7472 6e69 2067     riting.Starting 
   bfb24:	666f 6c66 616f 2064 666f 6620 6c69 3a65     offload of file:
   bfb34:	2520 0073 6966 656c 6f63 706d 5200 6165      %s.filecomp.Rea
   bfb44:	6863 6465 6520 646e 6f20 2066 6966 656c     ched end of file
   bfb54:	203a 7325 6600 6c69 6465 6e6f 0065 6552     : %s.filedone.Re
   bfb64:	6563 7669 6465 6420 6e6f 2065 6f63 6d6d     ceived done comm
   bfb74:	6e61 0064 7325 3025 7832 4200 746f 6431     and.%s%02x.Bot1d
   bfb84:	7461 4300 4243 6425 7768 0061 6576 7463     at.CCB%dhwa.vect
   bfb94:	726f 3a3a 4d5f 725f 6e61 6567 635f 6568     or::_M_range_che
   bfba4:	6b63 203a 5f5f 206e 7728 6968 6863 6920     ck: __n (which i
   bfbb4:	2073 7a25 2975 3e20 203d 6874 7369 3e2d     s %zu) >= this->
   bfbc4:	6973 657a 2928 2820 6877 6369 2068 7369     size() (which is
   bfbd4:	2520 757a 0029 6576 7463 726f 3a3a 4d5f      %zu).vector::_M
   bfbe4:	725f 6165 6c6c 636f 695f 736e 7265 0074     _realloc_insert.
   bfbf4:	6843 6365 736b 6d75 203a 3025 7832 202c     Checksum: %02x, 
   bfc04:	3025 6433 5300 7274 6e69 2067 654c 3a6e     %03d.String Len:
   bfc14:	2520 2c64 4320 6568 6b63 7573 3a6d 2520      %d, Checksum: %
   bfc24:	0064 575b 5241 5d4e 4d20 7365 6173 6567     d.[WARN] Message
   bfc34:	4320 6568 6b63 7573 206d 6f44 7365 4e20      Checksum Does N
   bfc44:	746f 4d20 7461 6863 3a21 2520 0073 6157     ot Match!: %s.Wa
   bfc54:	6e72 6e69 2c67 6320 6568 6b63 7573 206d     rning, checksum 
   bfc64:	6f64 7365 6e20 746f 6d20 7461 6863 4300     does not match.C
   bfc74:	2543 7332 616e 256b 7333 6100 6b63 7300     C%2snak%3s.ack.s
   bfc84:	7075 2500 2075 7525 2520 2073 7325 5300     up.%u %u %s %s.S
   bfc94:	6174 7574 2073 7055 6164 6574 0021 2323     tatus Update!.##
   bfca4:	2323 2323 2323 2323 2323 2323 2323 2323     ################
   bfcb4:	2323 2323 2323 2323 2300 2023 2020 2020     ########.##     
   bfcc4:	5453 5441 5355 5520 4450 5441 2045 2020     STATUS UPDATE   
   bfcd4:	2320 0023 2323 2020 2020 2020 4220 746f      ##.##       Bot
   bfce4:	2320 203a 3125 2064 2020 2020 2320 0023      #: %1d      ##.
   bfcf4:	2323 2020 2020 2020 6142 7474 2520 203a     ##      Batt %: 
   bfd04:	3025 6433 2020 2020 2320 0023 2323 2020     %03d     ##.##  
   bfd14:	2020 544c 2045 4220 454c 2020 4258 6565       LTE  BLE  XBee
   bfd24:	2020 2020 2323 2300 2023 2020 2020 6425         ##.##     %d
   bfd34:	2020 2020 6425 2020 2020 2520 2064 2020         %d     %d   
   bfd44:	2020 2323 2300 2023 4c20 7461 7469 6475       ##.##  Latitud
   bfd54:	2065 6f4c 676e 7469 6475 2065 2320 0023     e Longitude  ##.
   bfd64:	2323 2520 362e 2066 2e25 6636 2320 0023     ## %.6f %.6f ##.
   bfd74:	6f46 6e75 2064 2061 656e 2077 6177 6574     Found a new wate
   bfd84:	2072 6f62 2074 4449 2500 2075 7525 2520     r bot ID.%u %u %
   bfd94:	2066 6625 6e00 6b61 7000 7374 5200 7761     f %f.nak.pts.Raw
   bfda4:	7257 7469 2e65 7874 0074 544c 0045 4258     Write.txt.LTE.XB
   bfdb4:	6565 4200 756c 7465 6f6f 6874 4e00 7765     ee.Bluetooth.New
   bfdc4:	7320 7274 6e69 2067 7266 6d6f 2520 3a73      string from %s:
   bfdd4:	0020 495b 464e 5d4f 5220 6365 6965 6576      .[INFO] Receive
   bfde4:	2064 544c 2045 654d 7373 6761 3a65 2520     d LTE Message: %
   bfdf4:	0073 654e 2077 5442 4320 6d6f 616d 646e     s.New BT Command
   bfe04:	203a 5b00 4e49 4f46 205d 6552 6563 7669     : .[INFO] Receiv
   bfe14:	6465 4220 454c 4d20 7365 6173 6567 203a     ed BLE Message: 
   bfe24:	7325 4e00 7765 5820 6542 2065 6f43 6d6d     %s.New XBee Comm
   bfe34:	6e61 3a64 5b00 4e49 4f46 205d 6552 6563     and:.[INFO] Rece
   bfe44:	7669 6465 5820 6542 2065 654d 7373 6761     ived XBee Messag
   bfe54:	3a65 2520 0073 6f46 6e75 2064 6f42 2074     e: %s.Found Bot 
   bfe64:	3a23 2520 2064 6425 2520 2064 6425 2520     #: %d %d %d %d %
   bfe74:	2064 6425 2520 2064 6425 202c 6573 7672     d %d %d %d, serv
   bfe84:	6369 7365 203a 6425 4600 756f 646e 6e20     ices: %d.Found n
   bfe94:	7765 6220 746f 203a 6425 4300 6e6f 656e     ew bot: %d.Conne
   bfea4:	7463 6465 7420 206f 6f42 2074 6425 2f00     cted to Bot %d./
   bfeb4:	4500 7272 726f 202c 6f63 6c75 2064 6f6e     .Error, could no
   bfec4:	2074 706f 6e65 7220 6f6f 2074 6964 6572     t open root dire
   bfed4:	7463 726f 2079 6e6f 5320 2044 6143 6472     ctory on SD Card
   bfee4:	202e 7349 6920 2074 6e69 6573 7472 6465     . Is it inserted
   bfef4:	003f 4343 2542 6464 706d 5200 7165 6575     ?.CCB%ddmp.Reque
   bff04:	7473 6465 5320 2044 6143 6472 4420 7461     sted SD Card Dat
   bff14:	2061 7266 6d6f 4220 746f 2520 2064 764f     a from Bot %d Ov
   bff24:	7265 4220 454c 000a 7543 7272 6e65 6c74     er BLE..Currentl
   bff34:	2079 6f63 6e6e 6365 6574 2064 6f74 4220     y connected to B
   bff44:	746f 2520 2c66 6e20 6565 2064 6f74 6320     ot %f, need to c
   bff54:	6e6f 656e 7463 7420 206f 6f42 2074 6425     onnect to Bot %d
   bff64:	5300 6375 6563 7373 7566 6c6c 2079 6f63     .Successfully co
   bff74:	6e6e 6365 6574 2064 6f74 4220 746f 2520     nnected to Bot %
   bff84:	0064 7453 7261 6974 676e 6620 6c69 2065     d.Starting file 
   bff94:	7274 6e61 6673 7265 6620 6f72 206d 6f42     transfer from Bo
   bffa4:	2074 6425 4600 6e69 7369 6568 2064 7274     t %d.Finished tr
   bffb4:	6e61 6673 7265 6972 676e 6620 6c69 2065     ansferring file 
   bffc4:	7266 6d6f 4220 746f 2520 0064 3462 3032     from Bot %d.b420
   bffd4:	3936 3031 642d 3463 2d62 3735 3334 632d     6910-dc4b-5743-c
   bffe4:	6238 2d31 3239 3064 3765 3135 3238 3062     8b1-92d0e75182b0
   bfff4:	6200 3234 3630 3139 2d32 6364 6234 352d     .b4206912-dc4b-5
   c0004:	3437 2d33 3863 3162 392d 6432 6530 3537     743-c8b1-92d0e75
   c0014:	3831 6232 0030 3462 3032 3936 3331 642d     182b0.b4206913-d
   c0024:	3463 2d62 3735 3334 632d 6238 2d31 3239     c4b-5743-c8b1-92
   c0034:	3064 3765 3135 3238 3062 6200 3234 3630     d0e75182b0.b4206
   c0044:	3139 2d34 6364 6234 352d 3437 2d33 3863     914-dc4b-5743-c8
   c0054:	3162 392d 6432 6530 3537 3831 6232 0030     b1-92d0e75182b0.
   c0064:	6353 6e61 696e 676e 0020 6f42 7374 203a     Scanning .Bots: 
   c0074:	6425 4100 7272 7961 7320 7a69 3a65 2520     %d.Array size: %
   c0084:	0064 6f46 6e75 2064 2061 6f6c 6163 206c     d.Found a local 
   c0094:	6f62 0074 6f43 6e6e 6365 6974 676e 4300     bot.Connecting.C
   c00a4:	4143 6842 6477 2500 3230 2564 3230 2564     CABhwd.%02d%02d%
   c00b4:	3430 2564 3230 2564 3230 2564 3230 0064     04d%02d%02d%02d.
   c00c4:	6157 6574 4272 746f 5f00 4f4c 2e47 7874     WaterBot._LOG.tx
   c00d4:	0074 7245 6f72 3a72 6320 756f 646c 6e20     t.Error: could n
   c00e4:	746f 6320 6e6f 656e 7463 7420 206f 4453     ot connect to SD
   c00f4:	6320 7261 2164 2000 7453 7261 6974 676e      card!. Starting
   c0104:	0020 4343 4241 7073 4263 6425 4300 4143      .CCABspcB%d.CCA
   c0114:	7342 6370 424e 5300 6c65 6365 6574 2064     BspcNB.Selected 
   c0124:	6f42 3a74 2520 0064                         Bot: %d.

000c012c <_ZTVN8particle11SPISettingsE>:
	...
   c0134:	4359 000b 40cd 000b 4181 000b               YC...@...A..

000c0140 <_ZTV5Timer>:
	...
   c0148:	43dd 000b 4431 000b 41e7 000b               .C..1D...A..

000c0154 <_ZTV4File>:
	...
   c015c:	411b 000b 418f 000b 41cf 000b 41c9 000b     .A...A...A...A..
   c016c:	40cf 000b 41a9 000b 41a3 000b 419d 000b     .@...A...A...A..

000c017c <_ZL4font>:
   c017c:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   c018c:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   c019c:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   c01ac:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   c01bc:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   c01cc:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   c01dc:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   c01ec:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   c01fc:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   c020c:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   c021c:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   c022c:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   c023c:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   c024c:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   c025c:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   c026c:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   c027c:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   c028c:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   c029c:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   c02ac:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   c02bc:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   c02cc:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   c02dc:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   c02ec:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   c02fc:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   c030c:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   c031c:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   c032c:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   c033c:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   c034c:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   c035c:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   c036c:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   c037c:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   c038c:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   c039c:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   c03ac:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   c03bc:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   c03cc:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   c03dc:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   c03ec:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   c03fc:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   c040c:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   c041c:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   c042c:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   c043c:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   c044c:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   c045c:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   c046c:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   c047c:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   c048c:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   c049c:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   c04ac:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   c04bc:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   c04cc:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   c04dc:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   c04ec:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   c04fc:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   c050c:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   c051c:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   c052c:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   c053c:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   c054c:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   c055c:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   c056c:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   c057c:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   c058c:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   c059c:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   c05ac:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   c05bc:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   c05cc:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   c05dc:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   c05ec:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   c05fc:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   c060c:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   c061c:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   c062c:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   c063c:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   c064c:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   c065c:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   c066c:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

000c067c <_ZTV12Adafruit_GFX>:
	...
   c068c:	65d9 000b ba91 000b 40a5 000b 5cc7 000b     .e.......@...\..
   c069c:	5cc9 000b 5cfb 000b 5cd7 000b 5ce9 000b     .\...\...\...\..
   c06ac:	5c09 000b 5cc7 000b 5ef3 000b 5ef1 000b     .\...\...^...^..
   c06bc:	5d13 000b 5d51 000b 5d8b 000b 5dd1 000b     .]..Q]...]...]..
   c06cc:	5ded 000b 5e71 000b                         .]..q^..

000c06d4 <_ZTV16OledWingAdafruit>:
	...
   c06dc:	66e9 000b 6709 000b 65d9 000b ba91 000b     .f...g...e......
   c06ec:	7f31 000b 5cc7 000b 5cc9 000b 5cfb 000b     1....\...\...\..
   c06fc:	5cd7 000b 5ce9 000b 5c09 000b 5cc7 000b     .\...\...\...\..
   c070c:	5ef3 000b 80cf 000b 8677 000b 8629 000b     .^......w...)...
   c071c:	5d8b 000b 5dd1 000b 5ded 000b 5e71 000b     .]...]...]..q^..

000c072c <_ZL12splash1_data>:
   c072c:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   c073c:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   c074c:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   c075c:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   c076c:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   c077c:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   c0794:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   c07a4:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   c07b4:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   c07c4:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   c07d4:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   c07e4:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   c07f4:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   c0804:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   c0814:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   c0824:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   c0834:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   c0844:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   c0854:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   c0864:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   c0874:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   c0884:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   c0894:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   c08a4:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   c08bc:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   c08d4:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   c08e4:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   c08f4:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   c0904:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   c0914:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   c0924:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   c0934:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   c0944:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   c0954:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   c0964:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   c0974:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   c0984:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   c0994:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   c09a4:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   c09b4:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   c09c4:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   c09d4:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   c09e4:	fdff 5b6b 6adb c0fd                         ..k[.j..

000c09ec <_ZL12splash2_data>:
   c09ec:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   c09fc:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   c0a0c:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   c0a28:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   c0a38:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   c0a48:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   c0a58:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   c0a68:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   c0a78:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   c0a88:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   c0a98:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   c0aa8:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   c0ab8:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   c0ac8:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   c0ad8:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   c0ae8:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   c0af8:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   c0b08:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   c0b18:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   c0b28:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   c0b38:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   c0b48:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   c0b58:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   c0b68:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   c0b80:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   c0b90:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   c0ba0:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   c0bb0:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   c0bc0:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000c0bcc <_ZTV16Adafruit_SSD1306>:
	...
   c0bd4:	7f05 000b 7f1d 000b 65d9 000b ba91 000b     .........e......
   c0be4:	7f31 000b 5cc7 000b 5cc9 000b 5cfb 000b     1....\...\...\..
   c0bf4:	5cd7 000b 5ce9 000b 5c09 000b 5cc7 000b     .\...\...\...\..
   c0c04:	5ef3 000b 80cf 000b 8677 000b 8629 000b     .^......w...)...
   c0c14:	5d8b 000b 5dd1 000b 5ded 000b 5e71 000b     .]...]...]..q^..

000c0c24 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   c0c24:	8000 e0c0 f8f0 fefc                         ........

000c0c2c <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   c0c2c:	0100 0703 1f0f 7f3f                         ......?.

000c0c34 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   c0c34:	d5ae a880                                   ....

000c0c38 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   c0c38:	00d3 8d40                                   ..@.

000c0c3c <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   c0c3c:	0020 c8a1                                    ...

000c0c40 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   c0c40:	40db a6a4 af2e                              .@....

000c0c46 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   c0c46:	02da 8f81                                   ....

000c0c4a <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   c0c4a:	12da                                         ...

000c0c4d <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   c0c4d:	02da                                         ...

000c0c50 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   c0c50:	0022 21ff 0000 0000                         "..!....

000c0c58 <_ZTVN5spark13EthernetClassE>:
	...
   c0c60:	9047 000b 903d 000b 9033 000b 9029 000b     G...=...3...)...
   c0c70:	901d 000b 9011 000b c8c1 000b c8c9 000b     ................
   c0c80:	9005 000b 8ffd 000b 8ff3 000b 8fe9 000b     ................
   c0c90:	c8f9 000b                                   ....

000c0c94 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   c0c94:	0800 1810 2820 3830 7341 6573 7472 6f69     .... (08Assertio
   c0ca4:	466e 6961 756c 6572 6620 6c61 6573 7700     nFailure false.w
   c0cb4:	7269 6e69 2e67 6c62 0065 7453 7261 2074     iring.ble.Start 
   c0cc4:	6964 6373 766f 7265 6e69 2067 6573 7672     discovering serv
   c0cd4:	6369 7365 002e 7341 6573 7472 6f69 466e     ices..AssertionF
   c0ce4:	6961 756c 6572 6820 6c61 625f 656c 735f     ailure hal_ble_s
   c0cf4:	6174 6b63 695f 696e 2874 756e 6c6c 7470     tack_init(nullpt
   c0d04:	2972 3d20 203d 5953 5453 4d45 455f 5252     r) == SYSTEM_ERR
   c0d14:	524f 4e5f 4e4f 0045 6550 7265 6420 7665     OR_NONE.Peer dev
   c0d24:	6369 2065 7369 6d20 7369 6973 676e 0021     ice is missing!.
   c0d34:	6146 6c69 6465 7420 206f 6c61 6f6c 6163     Failed to alloca
   c0d44:	6574 6d20 6d65 726f 2179 4600 6961 656c     te memory!.Faile
   c0d54:	2064 6f74 6120 7070 6e65 2064 6570 7265     d to append peer
   c0d64:	4320 6e65 7274 6c61 6420 7665 6369 2e65      Central device.
   c0d74:	4300 6e6f 656e 7463 6465 6220 2079 6543     .Connected by Ce
   c0d84:	746e 6172 206c 6564 6976 6563 002e 6944     ntral device..Di
   c0d94:	6373 6e6f 656e 7463 6465 6220 2079 6572     sconnected by re
   c0da4:	6f6d 6574 6420 7665 6369 2e65 4600 6961     mote device..Fai
   c0db4:	656c 2064 6f74 6120 7070 6e65 2064 6964     led to append di
   c0dc4:	6373 766f 7265 6465 7320 7265 6976 6563     scovered service
   c0dd4:	002e 7453 7261 2074 6964 6373 766f 7265     ..Start discover
   c0de4:	6e69 2067 6863 7261 6361 6574 6972 7473     ing characterist
   c0df4:	6369 2073 666f 7320 7265 6976 6563 203a     ics of service: 
   c0e04:	7325 002e 6143 6e6e 746f 6120 6464 6e20     %s..Cannot add n
   c0e14:	7765 7020 6565 2072 6564 6976 6563 002e     ew peer device..
   c0e24:	654e 2077 6570 6972 6870 7265 6c61 6920     New peripheral i
   c0e34:	2073 6f63 6e6e 6365 6574 2e64 4300 6168     s connected..Cha
   c0e44:	6172 7463 7265 7369 6974 2063 6964 6373     racteristic disc
   c0e54:	766f 7265 6465 002e 6944 6373 766f 7265     overed..Discover
   c0e64:	6465 6320 6168 6172 7463 7265 7369 6974     ed characteristi
   c0e74:	2763 2073 6168 646e 656c 6920 2073 6e69     c's handle is in
   c0e84:	6176 696c 2e64 4600 6961 656c 2064 6f74     valid..Failed to
   c0e94:	6120 7070 6e65 2064 6964 6373 766f 7265      append discover
   c0ea4:	6465 6320 6168 6172 7463 7265 7369 6974     ed characteristi
   c0eb4:	2e63 0000                                   c...

000c0eb8 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c0ec0:	9423 000b 9485 000b 95fb 000b 94af 000b     #...............
   c0ed0:	9425 000b                                   %...

000c0ed4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c0edc:	941f 000b 9493 000b 9421 000b 94b5 000b     ........!.......
   c0eec:	9445 000b                                   E...

000c0ef0 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c0ef8:	941d 000b 94a1 000b a14d 000b 94bb 000b     ........M.......
   c0f08:	9465 000b                                   e...

000c0f0c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   c0f18:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
   c0f28:	0000 7061 0070 5925 252d 2d6d 6425 2554     ..app.%Y-%m-%dT%
   c0f38:	3a48 4d25 253a 2553 007a 7361 7463 6d69     H:%M:%S%z.asctim
   c0f48:	0065 0000                                   e...

000c0f4c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   c0f54:	bee1 000b bee7 000b bf25 000b bef5 000b     ........%.......
   c0f64:	bee3 000b                                   ....

000c0f68 <_ZTV9IPAddress>:
	...
   c0f70:	c421 000b c411 000b c413 000b               !...........

000c0f7c <_ZTV9USBSerial>:
	...
   c0f84:	c507 000b c56f 000b c545 000b ba91 000b     ....o...E.......
   c0f94:	c537 000b c509 000b c519 000b c569 000b     7...........i...
   c0fa4:	c529 000b c501 000b                         ).......

000c0fac <_ZTVN5spark13CellularClassE>:
	...
   c0fb4:	c6bf 000b c6b5 000b c6ab 000b c661 000b     ............a...
   c0fc4:	c69f 000b c693 000b c8c1 000b c8c9 000b     ................
   c0fd4:	c687 000b c67f 000b c675 000b c66b 000b     ........u...k...
   c0fe4:	c8f9 000b                                   ....

000c0fe8 <_ZTV11USARTSerial>:
	...
   c0ff0:	c6f9 000b c765 000b c73d 000b ba91 000b     ....e...=.......
   c1000:	c70d 000b c729 000b c71b 000b c737 000b     ....).......7...
   c1010:	c6fb 000b c6ff 000b                         ........

000c1018 <_ZTV7TwoWire>:
	...
   c1020:	c7d3 000b c81d 000b c7f5 000b c7d5 000b     ................
   c1030:	c7fd 000b c805 000b c80d 000b c815 000b     ................

000c1040 <_ZTVN5spark12NetworkClassE>:
	...
   c1048:	c881 000b c88b 000b c895 000b c89f 000b     ................
   c1058:	c8a9 000b c8b5 000b c8c1 000b c8c9 000b     ................
   c1068:	c8d1 000b c8dd 000b c8e5 000b c8ef 000b     ................
   c1078:	c8f9 000b                                   ....

000c107c <_ZSt7nothrow>:
	...

000c107d <_ZTSSt19_Sp_make_shared_tag>:
   c107d:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   c108d:	6572 5f64 6174 0067 0000                     red_tag....

000c1098 <_ZTISt19_Sp_make_shared_tag>:
   c1098:	114c 000c 107d 000c 6f6e 2074 6e65 756f     L...}...not enou
   c10a8:	6867 7320 6170 6563 6620 726f 6620 726f     gh space for for
   c10b8:	616d 2074 7865 6170 736e 6f69 206e 5028     mat expansion (P
   c10c8:	656c 7361 2065 7573 6d62 7469 6620 6c75     lease submit ful
   c10d8:	206c 7562 2067 6572 6f70 7472 6120 2074     l bug report at 
   c10e8:	7468 7074 3a73 2f2f 6367 2e63 6e67 2e75     https://gcc.gnu.
   c10f8:	726f 2f67 7562 7367 292f 0a3a 2020 2020     org/bugs/):.    
   c1108:	3000 3231 3433 3635 3837 0039               .0123456789.

000c1114 <_ZTIN10__cxxabiv117__class_type_infoE>:
   c1114:	11ac 000c 1120 000c 11d0 000c               .... .......

000c1120 <_ZTSN10__cxxabiv117__class_type_infoE>:
   c1120:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   c1130:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   c1140:	0045 0000                                   E...

000c1144 <_ZTVN10__cxxabiv117__class_type_infoE>:
   c1144:	0000 0000 1114 000c cd91 000b cda5 000b     ................
   c1154:	cf39 000b cf39 000b ce0f 000b cd53 000b     9...9.......S...
   c1164:	cdf7 000b cdb9 000b cd85 000b               ............

000c1170 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   c1170:	11ac 000c 117c 000c 1114 000c               ....|.......

000c117c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   c117c:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   c118c:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   c119c:	666e 456f 0000 0000                         nfoE....

000c11a4 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   c11a4:	0000 0000 1170 000c ce39 000b ce4d 000b     ....p...9...M...
   c11b4:	cf39 000b cf39 000b ce0f 000b cd53 000b     9...9.......S...
   c11c4:	cf0d 000b ce99 000b ce61 000b               ........a...

000c11d0 <_ZTISt9type_info>:
   c11d0:	114c 000c 11d8 000c                         L.......

000c11d8 <_ZTSSt9type_info>:
   c11d8:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   c11e8:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   c11f8:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   c1208:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   c1218:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   c1228:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   c1238:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   c1248:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   c1258:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   c1268:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
   c1278:	6e00 0066 6e69 7469 0079 6e61 0000 0000     .nf.inity.an....

000c1288 <fpi.1>:
   c1288:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   c1298:	0000 0000                                   ....

000c129c <fpinan.0>:
   c129c:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   c12ac:	0000 0000                                   ....

000c12b0 <tinytens>:
   c12b0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   c12c0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   c12d0:	6f43 64ac 0628 1168                         Co.d(.h.

000c12d8 <_ctype_>:
   c12d8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   c12e8:	2020 2020 2020 2020 2020 2020 2020 2020                     
   c12f8:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   c1308:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   c1318:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   c1328:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   c1338:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   c1348:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   c1358:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   c13d8:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   c13e8:	0064 6d2f 746e 772f 726f 736b 6170 6563     d./mnt/workspace
   c13f8:	772f 726f 736b 6170 6563 472f 4343 312d     /workspace/GCC-1
   c1408:	2d30 6970 6570 696c 656e 6a2f 6e65 696b     0-pipeline/jenki
   c1418:	736e 472d 4343 312d 2d30 6970 6570 696c     ns-GCC-10-pipeli
   c1428:	656e 342d 5f38 3032 3032 3131 3432 315f     ne-48_20201124_1
   c1438:	3036 3136 3038 3436 2f31 7273 2f63 656e     606180641/src/ne
   c1448:	6c77 6269 6e2f 7765 696c 2f62 696c 6362     wlib/newlib/libc
   c1458:	732f 6474 696c 2f62 6467 6f74 2d61 6567     /stdlib/gdtoa-ge
   c1468:	6874 7865 632e 0000                         thex.c..

000c1470 <_C_numeric_locale>:
   c1470:	0eb5 000c ff2b 000b db08 2003 0043 4f50     ....+...... C.PO
   c1480:	4953 0058 6d2f 746e 772f 726f 736b 6170     SIX./mnt/workspa
   c1490:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   c14a0:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   c14b0:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   c14c0:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   c14d0:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   c14e0:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   c14f0:	6362 732f 6474 696c 2f62 706d 6572 2e63     bc/stdlib/mprec.
   c1500:	0063 0000 0000 0000                         c.......

000c1508 <__mprec_bigtens>:
   c1508:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   c1518:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   c1528:	bf3c 7f73 4fdd 7515                         <.s..O.u

000c1530 <__mprec_tens>:
   c1530:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   c1540:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   c1550:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   c1560:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   c1570:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   c1580:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   c1590:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   c15a0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   c15b0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   c15c0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   c15d0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   c15e0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   c15f0:	9db4 79d9 7843 44ea                         ...yCx.D

000c15f8 <p05.0>:
   c15f8:	0005 0000 0019 0000 007d 0000               ........}...

000c1604 <link_const_variable_data_end>:
   c1604:	000b544d 	.word	0x000b544d
   c1608:	000b9051 	.word	0x000b9051
   c160c:	000b91f1 	.word	0x000b91f1
   c1610:	000bba81 	.word	0x000bba81
   c1614:	000bbbf1 	.word	0x000bbbf1
   c1618:	000bbd81 	.word	0x000bbd81
   c161c:	000bbd9d 	.word	0x000bbd9d
   c1620:	000bc6c9 	.word	0x000bc6c9
   c1624:	000bc9d1 	.word	0x000bc9d1

000c1628 <link_constructors_end>:
	...
