
/Users/matthewpanizza/Downloads/WaterNet23/WaterNet23CCHub/target/4.0.0/boron/WaterNet23CCHub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000ac50  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000bec70  000bec70  0000ec70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000bec94  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001dc  2003db18  000bec98  0001db18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000afc  2003dcf8  2003dcf8  0002dcf8  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000bee74  000bee74  0001ee74  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000bee9c  000bee9c  0001ee9c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001891b1  00000000  00000000  0001eea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001910e  00000000  00000000  001a8051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00047316  00000000  00000000  001c115f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003420  00000000  00000000  00208475  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000c7d0  00000000  00000000  0020b895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000442fe  00000000  00000000  00218065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000561fb  00000000  00000000  0025c363  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00144c6f  00000000  00000000  002b255e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000a118  00000000  00000000  003f71d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f007 fe16 	bl	bbc62 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f007 fe38 	bl	bbcb2 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003db18 	.word	0x2003db18
   b404c:	000bec98 	.word	0x000bec98
   b4050:	2003dcf4 	.word	0x2003dcf4
   b4054:	2003dcf8 	.word	0x2003dcf8
   b4058:	2003e7f1 	.word	0x2003e7f1

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f006 fea3 	bl	badac <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000bec44 	.word	0x000bec44
   b4080:	000bec68 	.word	0x000bec68

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f001 b820 	b.w	b50c8 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f001 f995 	bl	b53b8 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f006 be43 	b.w	bad1c <_post_loop>

000b4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4096:	f003 b9bd 	b.w	b7414 <malloc>

000b409a <_Znaj>:
   b409a:	f003 b9bb 	b.w	b7414 <malloc>

000b409e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409e:	f003 b9c1 	b.w	b7424 <free>

000b40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40a2:	7800      	ldrb	r0, [r0, #0]
   b40a4:	fab0 f080 	clz	r0, r0
   b40a8:	0940      	lsrs	r0, r0, #5
   b40aa:	4770      	bx	lr

000b40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40ac:	2301      	movs	r3, #1
   b40ae:	7003      	strb	r3, [r0, #0]
   b40b0:	4770      	bx	lr

000b40b2 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b40b2:	4770      	bx	lr

000b40b4 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   b40b4:	7c03      	ldrb	r3, [r0, #16]
   b40b6:	f013 0308 	ands.w	r3, r3, #8
   b40ba:	bf1e      	ittt	ne
   b40bc:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   b40be:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   b40c0:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   b40c2:	2b00      	cmp	r3, #0
  }
   b40c4:	bfac      	ite	ge
   b40c6:	4618      	movge	r0, r3
   b40c8:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   b40cc:	4770      	bx	lr
	...

000b40d0 <_Z12actionTimer5v>:
        Serial1.println(outStr);
    }
}

void actionTimer5(){
    postStatus = true;
   b40d0:	4b01      	ldr	r3, [pc, #4]	; (b40d8 <_Z12actionTimer5v+0x8>)
   b40d2:	2201      	movs	r2, #1
   b40d4:	701a      	strb	r2, [r3, #0]
    for(WaterBot w: WaterBots){
        w.timeoutCount++;
    }
    //if(!BLE.connected)
}
   b40d6:	4770      	bx	lr
   b40d8:	2003dee4 	.word	0x2003dee4

000b40dc <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   b40dc:	4770      	bx	lr

000b40de <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b40de:	b510      	push	{r4, lr}
  }
   b40e0:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b40e2:	4604      	mov	r4, r0
  }
   b40e4:	f7ff ffdb 	bl	b409e <_ZdlPvj>
   b40e8:	4620      	mov	r0, r4
   b40ea:	bd10      	pop	{r4, pc}

000b40ec <_ZN4FileD0Ev>:
   b40ec:	b510      	push	{r4, lr}
   b40ee:	2134      	movs	r1, #52	; 0x34
   b40f0:	4604      	mov	r4, r0
   b40f2:	f7ff ffd4 	bl	b409e <_ZdlPvj>
   b40f6:	4620      	mov	r0, r4
   b40f8:	bd10      	pop	{r4, pc}

000b40fa <_ZN4File5flushEv>:
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   b40fa:	3010      	adds	r0, #16
   b40fc:	f001 bcd4 	b.w	b5aa8 <_ZN7FatFile4syncEv>

000b4100 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   b4100:	3010      	adds	r0, #16
   b4102:	f001 bbf2 	b.w	b58ea <_ZN7FatFile4peekEv>

000b4106 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   b4106:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   b4108:	2201      	movs	r2, #1
   b410a:	f10d 0107 	add.w	r1, sp, #7
   b410e:	3010      	adds	r0, #16
   b4110:	f001 fb3d 	bl	b578e <_ZN7FatFile4readEPvj>
   b4114:	2801      	cmp	r0, #1
   b4116:	bf0c      	ite	eq
   b4118:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b411c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    return FatFile::read();
  }
   b4120:	b003      	add	sp, #12
   b4122:	f85d fb04 	ldr.w	pc, [sp], #4

000b4126 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   b4126:	3010      	adds	r0, #16
   b4128:	f001 bd58 	b.w	b5bdc <_ZN7FatFile5writeEPKvj>

000b412c <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   b412c:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   b412e:	2201      	movs	r2, #1
   b4130:	f88d 1007 	strb.w	r1, [sp, #7]
   b4134:	3010      	adds	r0, #16
   b4136:	f10d 0107 	add.w	r1, sp, #7
   b413a:	f001 fd4f 	bl	b5bdc <_ZN7FatFile5writeEPKvj>
  }
   b413e:	b003      	add	sp, #12
   b4140:	f85d fb04 	ldr.w	pc, [sp], #4

000b4144 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   b4144:	6943      	ldr	r3, [r0, #20]
   b4146:	b113      	cbz	r3, b414e <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b4148:	6983      	ldr	r3, [r0, #24]
   b414a:	300c      	adds	r0, #12
   b414c:	4718      	bx	r3
            callback();
        }
    }
   b414e:	4770      	bx	lr

000b4150 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   b4150:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   b4152:	2100      	movs	r1, #0
   b4154:	4604      	mov	r4, r0
   b4156:	4608      	mov	r0, r1
   b4158:	f002 feb8 	bl	b6ecc <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   b415c:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   b415e:	4620      	mov	r0, r4
   b4160:	a901      	add	r1, sp, #4
            void* id = nullptr;
   b4162:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   b4164:	f002 feca 	bl	b6efc <os_timer_get_id>
            t = static_cast<Timer*>(id);
   b4168:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   b416a:	b10c      	cbz	r4, b4170 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   b416c:	2301      	movs	r3, #1
   b416e:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   b4170:	2100      	movs	r1, #0
   b4172:	2001      	movs	r0, #1
   b4174:	f002 feaa 	bl	b6ecc <os_thread_scheduling>
            }
        }
        if (t) {
   b4178:	b12c      	cbz	r4, b4186 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   b417a:	6823      	ldr	r3, [r4, #0]
   b417c:	4620      	mov	r0, r4
   b417e:	689b      	ldr	r3, [r3, #8]
   b4180:	4798      	blx	r3
            t->running = false;
   b4182:	2300      	movs	r3, #0
   b4184:	7123      	strb	r3, [r4, #4]
        }
    }
   b4186:	b002      	add	sp, #8
   b4188:	bd10      	pop	{r4, pc}
	...

000b418c <_Z13actionTimer60v>:
      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
      : _M_current(__i) { }
   b418c:	4b0b      	ldr	r3, [pc, #44]	; (b41bc <_Z13actionTimer60v+0x30>)
   b418e:	e9d3 3000 	ldrd	r3, r0, [r3]

void actionTimer60(){
    bool reqLTEStatus = false;
   b4192:	2200      	movs	r2, #0
    for(WaterBot w: WaterBots){
   b4194:	4283      	cmp	r3, r0
   b4196:	d005      	beq.n	b41a4 <_Z13actionTimer60v+0x18>
        if(w.timeoutCount > XBEE_BLE_MAX_TIMEOUT){
   b4198:	6959      	ldr	r1, [r3, #20]
            reqLTEStatus = true;
   b419a:	2925      	cmp	r1, #37	; 0x25
   b419c:	bf28      	it	cs
   b419e:	2201      	movcs	r2, #1
      operator->() const _GLIBCXX_NOEXCEPT
      { return _M_current; }

      _GLIBCXX20_CONSTEXPR
      __normal_iterator&
      operator++() _GLIBCXX_NOEXCEPT
   b41a0:	3318      	adds	r3, #24
      {
	++_M_current;
	return *this;
   b41a2:	e7f7      	b.n	b4194 <_Z13actionTimer60v+0x8>
            w.timeoutCount = 0;            
        }
    }
    if(reqLTEStatus && LTEStatuses < MAX_LTE_STATUSES){
   b41a4:	b142      	cbz	r2, b41b8 <_Z13actionTimer60v+0x2c>
   b41a6:	4a06      	ldr	r2, [pc, #24]	; (b41c0 <_Z13actionTimer60v+0x34>)
   b41a8:	7813      	ldrb	r3, [r2, #0]
   b41aa:	2b18      	cmp	r3, #24
   b41ac:	d804      	bhi.n	b41b8 <_Z13actionTimer60v+0x2c>
        LTEStatuses++;
   b41ae:	3301      	adds	r3, #1
   b41b0:	7013      	strb	r3, [r2, #0]
        statusTimeout = true;
   b41b2:	4b04      	ldr	r3, [pc, #16]	; (b41c4 <_Z13actionTimer60v+0x38>)
   b41b4:	2201      	movs	r2, #1
   b41b6:	701a      	strb	r2, [r3, #0]
    }
   b41b8:	4770      	bx	lr
   b41ba:	bf00      	nop
   b41bc:	2003dd34 	.word	0x2003dd34
   b41c0:	2003dd18 	.word	0x2003dd18
   b41c4:	2003e63d 	.word	0x2003e63d

000b41c8 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
   b41c8:	2a01      	cmp	r2, #1
   b41ca:	d102      	bne.n	b41d2 <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xa>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b41cc:	6001      	str	r1, [r0, #0]
      }
   b41ce:	2000      	movs	r0, #0
   b41d0:	4770      	bx	lr
	  switch (__op)
   b41d2:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   b41d4:	bf04      	itt	eq
   b41d6:	680b      	ldreq	r3, [r1, #0]
   b41d8:	6003      	streq	r3, [r0, #0]
	      break;
   b41da:	e7f8      	b.n	b41ce <_ZNSt17_Function_handlerIFvvEPS0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x6>

000b41dc <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b41dc:	6803      	ldr	r3, [r0, #0]
   b41de:	4718      	bx	r3

000b41e0 <_ZN5Timer4stopEj.isra.0>:
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   b41e0:	b507      	push	{r0, r1, r2, lr}
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   b41e2:	6880      	ldr	r0, [r0, #8]
   b41e4:	b130      	cbz	r0, b41f4 <_ZN5Timer4stopEj.isra.0+0x14>
   b41e6:	2300      	movs	r3, #0
   b41e8:	e9cd 1300 	strd	r1, r3, [sp]
   b41ec:	461a      	mov	r2, r3
   b41ee:	2102      	movs	r1, #2
   b41f0:	f002 fe8c 	bl	b6f0c <os_timer_change>
    bool stop(unsigned block=default_wait) { return _stop(block, false); }
   b41f4:	b003      	add	sp, #12
   b41f6:	f85d fb04 	ldr.w	pc, [sp], #4

000b41fa <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b41fa:	b40e      	push	{r1, r2, r3}
   b41fc:	b503      	push	{r0, r1, lr}
   b41fe:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b4200:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4202:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4206:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4208:	f006 f987 	bl	ba51a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b420c:	b002      	add	sp, #8
   b420e:	f85d eb04 	ldr.w	lr, [sp], #4
   b4212:	b003      	add	sp, #12
   b4214:	4770      	bx	lr
	...

000b4218 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4218:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b421a:	4604      	mov	r4, r0
   b421c:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b421e:	7922      	ldrb	r2, [r4, #4]
   b4220:	68a3      	ldr	r3, [r4, #8]
   b4222:	b132      	cbz	r2, b4232 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b4224:	b9a3      	cbnz	r3, b4250 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b4226:	490b      	ldr	r1, [pc, #44]	; (b4254 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4228:	b002      	add	sp, #8
   b422a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b422e:	f006 b939 	b.w	ba4a4 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4232:	4a09      	ldr	r2, [pc, #36]	; (b4258 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b4234:	7b26      	ldrb	r6, [r4, #12]
   b4236:	4d09      	ldr	r5, [pc, #36]	; (b425c <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4238:	4909      	ldr	r1, [pc, #36]	; (b4260 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b423a:	7b64      	ldrb	r4, [r4, #13]
   b423c:	2e01      	cmp	r6, #1
   b423e:	bf18      	it	ne
   b4240:	4629      	movne	r1, r5
   b4242:	e9cd 1400 	strd	r1, r4, [sp]
   b4246:	4907      	ldr	r1, [pc, #28]	; (b4264 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4248:	f7ff ffd7 	bl	b41fa <_ZN5Print6printfEPKcz>
  }
   b424c:	b002      	add	sp, #8
   b424e:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4250:	4a05      	ldr	r2, [pc, #20]	; (b4268 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b4252:	e7ef      	b.n	b4234 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b4254:	000bdd81 	.word	0x000bdd81
   b4258:	000be1c9 	.word	0x000be1c9
   b425c:	000bdd7d 	.word	0x000bdd7d
   b4260:	000bdd79 	.word	0x000bdd79
   b4264:	000bdd97 	.word	0x000bdd97
   b4268:	000bdd70 	.word	0x000bdd70

000b426c <_ZN5Print8printlnfEPKcz>:

    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b426c:	b40e      	push	{r1, r2, r3}
   b426e:	b503      	push	{r0, r1, lr}
   b4270:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(true, format, args);
   b4272:	2101      	movs	r1, #1
    size_t printlnf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4274:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b4278:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(true, format, args);
   b427a:	f006 f94e 	bl	ba51a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b427e:	b002      	add	sp, #8
   b4280:	f85d eb04 	ldr.w	lr, [sp], #4
   b4284:	b003      	add	sp, #12
   b4286:	4770      	bx	lr

000b4288 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4288:	b510      	push	{r4, lr}
      if (_M_manager)
   b428a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b428c:	4604      	mov	r4, r0
      if (_M_manager)
   b428e:	b113      	cbz	r3, b4296 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4290:	2203      	movs	r2, #3
   b4292:	4601      	mov	r1, r0
   b4294:	4798      	blx	r3
    }
   b4296:	4620      	mov	r0, r4
   b4298:	bd10      	pop	{r4, pc}
	...

000b429c <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   b429c:	b538      	push	{r3, r4, r5, lr}
   b429e:	4b0f      	ldr	r3, [pc, #60]	; (b42dc <_ZN5TimerD1Ev+0x40>)
   b42a0:	6003      	str	r3, [r0, #0]
        if (handle) {
   b42a2:	6883      	ldr	r3, [r0, #8]
    virtual ~Timer() {
   b42a4:	4604      	mov	r4, r0
        if (handle) {
   b42a6:	b19b      	cbz	r3, b42d0 <_ZN5TimerD1Ev+0x34>
            stop();
   b42a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b42ac:	f7ff ff98 	bl	b41e0 <_ZN5Timer4stopEj.isra.0>
            os_timer_set_id(handle, nullptr);
   b42b0:	68a0      	ldr	r0, [r4, #8]
   b42b2:	2100      	movs	r1, #0
   b42b4:	f002 fe4a 	bl	b6f4c <os_timer_set_id>
            while (running) {
   b42b8:	7923      	ldrb	r3, [r4, #4]
   b42ba:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   b42be:	b113      	cbz	r3, b42c6 <_ZN5TimerD1Ev+0x2a>
                os_thread_yield();
   b42c0:	f002 fdfc 	bl	b6ebc <os_thread_yield>
            while (running) {
   b42c4:	e7f8      	b.n	b42b8 <_ZN5TimerD1Ev+0x1c>
            os_timer_destroy(handle, nullptr);
   b42c6:	68a0      	ldr	r0, [r4, #8]
   b42c8:	4629      	mov	r1, r5
   b42ca:	f002 fe0f 	bl	b6eec <os_timer_destroy>
            handle = nullptr;
   b42ce:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   b42d0:	f104 000c 	add.w	r0, r4, #12
   b42d4:	f7ff ffd8 	bl	b4288 <_ZNSt14_Function_baseD1Ev>
    }
   b42d8:	4620      	mov	r0, r4
   b42da:	bd38      	pop	{r3, r4, r5, pc}
   b42dc:	000be344 	.word	0x000be344

000b42e0 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   b42e0:	b510      	push	{r4, lr}
   b42e2:	4604      	mov	r4, r0
    }
   b42e4:	f7ff ffda 	bl	b429c <_ZN5TimerD1Ev>
   b42e8:	4620      	mov	r0, r4
   b42ea:	211c      	movs	r1, #28
   b42ec:	f7ff fed7 	bl	b409e <_ZdlPvj>
   b42f0:	4620      	mov	r0, r4
   b42f2:	bd10      	pop	{r4, pc}

000b42f4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b42f4:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b42f6:	6843      	ldr	r3, [r0, #4]
   b42f8:	3b01      	subs	r3, #1
    {
   b42fa:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b42fc:	6043      	str	r3, [r0, #4]
   b42fe:	b963      	cbnz	r3, b431a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b4300:	6803      	ldr	r3, [r0, #0]
   b4302:	689b      	ldr	r3, [r3, #8]
   b4304:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4306:	68a3      	ldr	r3, [r4, #8]
   b4308:	3b01      	subs	r3, #1
   b430a:	60a3      	str	r3, [r4, #8]
   b430c:	b92b      	cbnz	r3, b431a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b430e:	6823      	ldr	r3, [r4, #0]
   b4310:	4620      	mov	r0, r4
   b4312:	68db      	ldr	r3, [r3, #12]
        }
    }
   b4314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b4318:	4718      	bx	r3
    }
   b431a:	bd10      	pop	{r4, pc}

000b431c <_ZN5TimerC1EjSt8functionIFvvEEb>:
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   b431c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b431e:	468c      	mov	ip, r1
   b4320:	2500      	movs	r5, #0
   b4322:	4914      	ldr	r1, [pc, #80]	; (b4374 <_ZN5TimerC1EjSt8functionIFvvEEb+0x58>)
   b4324:	7105      	strb	r5, [r0, #4]
   b4326:	4604      	mov	r4, r0
   b4328:	6085      	str	r5, [r0, #8]
   b432a:	6001      	str	r1, [r0, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b432c:	e892 0003 	ldmia.w	r2, {r0, r1}
   b4330:	b085      	sub	sp, #20
   b4332:	af02      	add	r7, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   b4334:	f104 060c 	add.w	r6, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4338:	e887 0003 	stmia.w	r7, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b433c:	e896 0003 	ldmia.w	r6, {r0, r1}
   b4340:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b4344:	e897 0003 	ldmia.w	r7, {r0, r1}
   b4348:	e886 0003 	stmia.w	r6, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b434c:	6891      	ldr	r1, [r2, #8]
      __a = _GLIBCXX_MOVE(__b);
   b434e:	69a0      	ldr	r0, [r4, #24]
      __b = _GLIBCXX_MOVE(__tmp);
   b4350:	6161      	str	r1, [r4, #20]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b4352:	68d1      	ldr	r1, [r2, #12]
      __a = _GLIBCXX_MOVE(__b);
   b4354:	6095      	str	r5, [r2, #8]
   b4356:	60d0      	str	r0, [r2, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b4358:	61a1      	str	r1, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   b435a:	e9cd 3500 	strd	r3, r5, [sp]
   b435e:	4a06      	ldr	r2, [pc, #24]	; (b4378 <_ZN5TimerC1EjSt8functionIFvvEEb+0x5c>)
   b4360:	4623      	mov	r3, r4
   b4362:	4661      	mov	r1, ip
   b4364:	f104 0008 	add.w	r0, r4, #8
   b4368:	f002 fdb8 	bl	b6edc <os_timer_create>
    }
   b436c:	4620      	mov	r0, r4
   b436e:	b005      	add	sp, #20
   b4370:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b4372:	bf00      	nop
   b4374:	000be344 	.word	0x000be344
   b4378:	000b4151 	.word	0x000b4151

000b437c <_ZN7FatFile4openEPKci>:
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
   b437c:	4613      	mov	r3, r2
    return open(m_cwd, path, oflag);
   b437e:	460a      	mov	r2, r1
   b4380:	4901      	ldr	r1, [pc, #4]	; (b4388 <_ZN7FatFile4openEPKci+0xc>)
   b4382:	6809      	ldr	r1, [r1, #0]
   b4384:	f001 bbcd 	b.w	b5b22 <_ZN7FatFile4openEPS_PKci>
   b4388:	2003e644 	.word	0x2003e644

000b438c <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void offloadDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b438c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b438e:	b095      	sub	sp, #84	; 0x54
   b4390:	4604      	mov	r4, r0
   b4392:	af00      	add	r7, sp, #0
   b4394:	460d      	mov	r5, r1
    memset(fileCommand,0,8 + MAX_FILENAME_LEN);
   b4396:	221e      	movs	r2, #30
   b4398:	2100      	movs	r1, #0
   b439a:	f107 0030 	add.w	r0, r7, #48	; 0x30
   b439e:	f007 fc88 	bl	bbcb2 <memset>
    memcpy(fileCommand,data,8);
   b43a2:	6820      	ldr	r0, [r4, #0]
   b43a4:	6861      	ldr	r1, [r4, #4]
   b43a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
   b43aa:	c303      	stmia	r3!, {r0, r1}
    if(fileCommand[0] == 'f'){
   b43ac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   b43b0:	2b66      	cmp	r3, #102	; 0x66
    Serial.println(dataStr);
   b43b2:	466e      	mov	r6, sp
    if(fileCommand[0] == 'f'){
   b43b4:	d168      	bne.n	b4488 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfc>
        if(!strcmp(fileCommand,"filename")){
   b43b6:	493e      	ldr	r1, [pc, #248]	; (b44b0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x124>)
   b43b8:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b43bc:	f007 fcbf 	bl	bbd3e <strcmp>
   b43c0:	2800      	cmp	r0, #0
   b43c2:	d13e      	bne.n	b4442 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xb6>
    return m_attr;
   b43c4:	483b      	ldr	r0, [pc, #236]	; (b44b4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x128>)
            if(myFile.isOpen()) myFile.close();
   b43c6:	7c03      	ldrb	r3, [r0, #16]
   b43c8:	b113      	cbz	r3, b43d0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x44>
   b43ca:	3010      	adds	r0, #16
   b43cc:	f001 fba2 	bl	b5b14 <_ZN7FatFile5closeEv>
            memcpy(fileCommand,data,8 + MAX_FILENAME_LEN);
   b43d0:	4623      	mov	r3, r4
   b43d2:	f107 0228 	add.w	r2, r7, #40	; 0x28
   b43d6:	f104 0520 	add.w	r5, r4, #32
   b43da:	6818      	ldr	r0, [r3, #0]
   b43dc:	6859      	ldr	r1, [r3, #4]
   b43de:	4614      	mov	r4, r2
   b43e0:	c403      	stmia	r4!, {r0, r1}
   b43e2:	3308      	adds	r3, #8
   b43e4:	42ab      	cmp	r3, r5
   b43e6:	4622      	mov	r2, r4
   b43e8:	d1f7      	bne.n	b43da <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4e>
   b43ea:	6818      	ldr	r0, [r3, #0]
   b43ec:	6020      	str	r0, [r4, #0]
   b43ee:	889b      	ldrh	r3, [r3, #4]
   b43f0:	80a3      	strh	r3, [r4, #4]
            strncpy(offloadFilename,fileCommand+8,MAX_FILENAME_LEN);
   b43f2:	221e      	movs	r2, #30
   b43f4:	f107 0130 	add.w	r1, r7, #48	; 0x30
   b43f8:	482f      	ldr	r0, [pc, #188]	; (b44b8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b43fa:	f007 fcec 	bl	bbdd6 <strncpy>
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b43fe:	2300      	movs	r3, #0
    return file.open(this, path, O_RDONLY);
   b4400:	4a2d      	ldr	r2, [pc, #180]	; (b44b8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b4402:	492e      	ldr	r1, [pc, #184]	; (b44bc <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x130>)
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b4404:	607b      	str	r3, [r7, #4]
    return file.open(this, path, O_RDONLY);
   b4406:	1d38      	adds	r0, r7, #4
   b4408:	f001 fb8b 	bl	b5b22 <_ZN7FatFile4openEPS_PKci>
            if(sd.exists(offloadFilename)){
   b440c:	b148      	cbz	r0, b4422 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x96>
                Serial.printlnf("File '%s' already exists, deleting and overwriting",offloadFilename);
   b440e:	f006 fc3d 	bl	bac8c <_Z16_fetch_usbserialv>
   b4412:	492b      	ldr	r1, [pc, #172]	; (b44c0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x134>)
   b4414:	4a28      	ldr	r2, [pc, #160]	; (b44b8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b4416:	f7ff ff29 	bl	b426c <_ZN5Print8printlnfEPKcz>
  *
  * \return The value true is returned for success and
  * the value false is returned for failure.
  */
  bool remove(const char* path) {
    return FatFile::remove(vwd(), path);
   b441a:	4927      	ldr	r1, [pc, #156]	; (b44b8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b441c:	4827      	ldr	r0, [pc, #156]	; (b44bc <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x130>)
   b441e:	f001 fbcc 	bl	b5bba <_ZN7FatFile6removeEPS_PKc>
            Serial.printlnf("Starting offload of file: %s",offloadFilename);
   b4422:	f006 fc33 	bl	bac8c <_Z16_fetch_usbserialv>
   b4426:	4a24      	ldr	r2, [pc, #144]	; (b44b8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b4428:	4926      	ldr	r1, [pc, #152]	; (b44c4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x138>)
   b442a:	f7ff ff1f 	bl	b426c <_ZN5Print8printlnfEPKcz>
            myFile.open(offloadFilename, O_RDWR | O_CREAT | O_AT_END);
   b442e:	4922      	ldr	r1, [pc, #136]	; (b44b8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b4430:	4825      	ldr	r0, [pc, #148]	; (b44c8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x13c>)
   b4432:	f244 2202 	movw	r2, #16898	; 0x4202
   b4436:	f7ff ffa1 	bl	b437c <_ZN7FatFile4openEPKci>
}
   b443a:	3754      	adds	r7, #84	; 0x54
   b443c:	46b5      	mov	sp, r6
   b443e:	46bd      	mov	sp, r7
   b4440:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if(!strcmp(fileCommand,"filecomp")){
   b4442:	4922      	ldr	r1, [pc, #136]	; (b44cc <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x140>)
   b4444:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b4448:	f007 fc79 	bl	bbd3e <strcmp>
   b444c:	b968      	cbnz	r0, b446a <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xde>
            Serial.printlnf("Reached end of file: %s",offloadFilename);
   b444e:	f006 fc1d 	bl	bac8c <_Z16_fetch_usbserialv>
   b4452:	4a19      	ldr	r2, [pc, #100]	; (b44b8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x12c>)
   b4454:	491e      	ldr	r1, [pc, #120]	; (b44d0 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x144>)
   b4456:	f7ff ff09 	bl	b426c <_ZN5Print8printlnfEPKcz>
    return m_attr;
   b445a:	4b16      	ldr	r3, [pc, #88]	; (b44b4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x128>)
            if(myFile.isOpen()) myFile.close();
   b445c:	7c1b      	ldrb	r3, [r3, #16]
   b445e:	2b00      	cmp	r3, #0
   b4460:	d0eb      	beq.n	b443a <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xae>
   b4462:	4819      	ldr	r0, [pc, #100]	; (b44c8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x13c>)
   b4464:	f001 fb56 	bl	b5b14 <_ZN7FatFile5closeEv>
   b4468:	e7e7      	b.n	b443a <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xae>
        else if(!strcmp(fileCommand,"filedone")){
   b446a:	491a      	ldr	r1, [pc, #104]	; (b44d4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x148>)
   b446c:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b4470:	f007 fc65 	bl	bbd3e <strcmp>
   b4474:	b940      	cbnz	r0, b4488 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xfc>
            Serial.println("Received done command");
   b4476:	f006 fc09 	bl	bac8c <_Z16_fetch_usbserialv>
   b447a:	4917      	ldr	r1, [pc, #92]	; (b44d8 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14c>)
   b447c:	f006 f825 	bl	ba4ca <_ZN5Print7printlnEPKc>
            offloadingDone = true;
   b4480:	4b16      	ldr	r3, [pc, #88]	; (b44dc <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x150>)
   b4482:	2201      	movs	r2, #1
   b4484:	701a      	strb	r2, [r3, #0]
   b4486:	e7e8      	b.n	b445a <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xce>
    char dataStr[len];
   b4488:	1deb      	adds	r3, r5, #7
   b448a:	f023 0307 	bic.w	r3, r3, #7
   b448e:	ebad 0d03 	sub.w	sp, sp, r3
    memcpy(dataStr,data,len);
   b4492:	462a      	mov	r2, r5
   b4494:	4621      	mov	r1, r4
   b4496:	4668      	mov	r0, sp
   b4498:	f007 fbe3 	bl	bbc62 <memcpy>
    myFile.print(dataStr);
   b449c:	4669      	mov	r1, sp
   b449e:	4805      	ldr	r0, [pc, #20]	; (b44b4 <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x128>)
   b44a0:	f006 f800 	bl	ba4a4 <_ZN5Print5printEPKc>
    Serial.println(dataStr);
   b44a4:	f006 fbf2 	bl	bac8c <_Z16_fetch_usbserialv>
   b44a8:	4669      	mov	r1, sp
   b44aa:	f006 f80e 	bl	ba4ca <_ZN5Print7printlnEPKc>
   b44ae:	e7c4      	b.n	b443a <_Z19offloadDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0xae>
   b44b0:	000bddb4 	.word	0x000bddb4
   b44b4:	2003de70 	.word	0x2003de70
   b44b8:	2003dea4 	.word	0x2003dea4
   b44bc:	2003e5f4 	.word	0x2003e5f4
   b44c0:	000bddbd 	.word	0x000bddbd
   b44c4:	000bddf0 	.word	0x000bddf0
   b44c8:	2003de80 	.word	0x2003de80
   b44cc:	000bde0d 	.word	0x000bde0d
   b44d0:	000bde16 	.word	0x000bde16
   b44d4:	000bde2e 	.word	0x000bde2e
   b44d8:	000bde37 	.word	0x000bde37
   b44dc:	2003dec2 	.word	0x2003dec2

000b44e0 <_Z8sendDataPKchbbb>:
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b44e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b44e4:	b084      	sub	sp, #16
   b44e6:	af02      	add	r7, sp, #8
   b44e8:	4680      	mov	r8, r0
   b44ea:	4691      	mov	r9, r2
   b44ec:	461e      	mov	r6, r3
   b44ee:	460d      	mov	r5, r1
    char outStr[strlen(dataOut)+2];
   b44f0:	f007 fc55 	bl	bbd9e <strlen>
   b44f4:	3009      	adds	r0, #9
   b44f6:	f020 0107 	bic.w	r1, r0, #7
   b44fa:	ebad 0d01 	sub.w	sp, sp, r1
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b44fe:	4640      	mov	r0, r8
   b4500:	f007 fc4d 	bl	bbd9e <strlen>
void sendData(const char *dataOut, uint8_t sendMode, bool sendBLE, bool sendXBee, bool sendLTE){
   b4504:	f897 a028 	ldrb.w	sl, [r7, #40]	; 0x28
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b4508:	4926      	ldr	r1, [pc, #152]	; (b45a4 <_Z8sendDataPKchbbb+0xc4>)
    char outStr[strlen(dataOut)+2];
   b450a:	ac02      	add	r4, sp, #8
    sprintf(outStr,"%s%02x",dataOut,strlen(dataOut));
   b450c:	4603      	mov	r3, r0
   b450e:	4642      	mov	r2, r8
   b4510:	4620      	mov	r0, r4
   b4512:	f002 ff97 	bl	b7444 <sprintf>
    if(sendLTE || sendMode == 4){
   b4516:	f1ba 0f00 	cmp.w	sl, #0
   b451a:	d101      	bne.n	b4520 <_Z8sendDataPKchbbb+0x40>
   b451c:	2d04      	cmp	r5, #4
   b451e:	d10d      	bne.n	b453c <_Z8sendDataPKchbbb+0x5c>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(ValueT val) :
   b4520:	4b21      	ldr	r3, [pc, #132]	; (b45a8 <_Z8sendDataPKchbbb+0xc8>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b4522:	4922      	ldr	r1, [pc, #136]	; (b45ac <_Z8sendDataPKchbbb+0xcc>)
   b4524:	781b      	ldrb	r3, [r3, #0]
   b4526:	f88d 3000 	strb.w	r3, [sp]
   b452a:	4638      	mov	r0, r7
   b452c:	233c      	movs	r3, #60	; 0x3c
   b452e:	4622      	mov	r2, r4
   b4530:	f005 fc88 	bl	b9e44 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b4534:	6878      	ldr	r0, [r7, #4]
   b4536:	b108      	cbz	r0, b453c <_Z8sendDataPKchbbb+0x5c>
	  _M_pi->_M_release();
   b4538:	f7ff fedc 	bl	b42f4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
    if((sendBLE || sendMode == 1) && BLE.connected()){
   b453c:	f1b9 0f00 	cmp.w	r9, #0
   b4540:	d101      	bne.n	b4546 <_Z8sendDataPKchbbb+0x66>
   b4542:	2d01      	cmp	r5, #1
   b4544:	d121      	bne.n	b458a <_Z8sendDataPKchbbb+0xaa>
   b4546:	f003 fce7 	bl	b7f18 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b454a:	f003 fd75 	bl	b8038 <_ZNK8particle14BleLocalDevice9connectedEv>
   b454e:	b1e0      	cbz	r0, b458a <_Z8sendDataPKchbbb+0xaa>
        uint8_t txBuf_tmp[strlen(outStr)];
   b4550:	4620      	mov	r0, r4
   b4552:	f007 fc24 	bl	bbd9e <strlen>
   b4556:	3007      	adds	r0, #7
   b4558:	f020 0007 	bic.w	r0, r0, #7
        peerRxCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b455c:	46e8      	mov	r8, sp
        uint8_t txBuf_tmp[strlen(outStr)];
   b455e:	ebad 0d00 	sub.w	sp, sp, r0
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b4562:	4620      	mov	r0, r4
   b4564:	f007 fc1b 	bl	bbd9e <strlen>
        uint8_t txBuf_tmp[strlen(outStr)];
   b4568:	f10d 0908 	add.w	r9, sp, #8
        memcpy(txBuf_tmp,outStr,strlen(outStr));
   b456c:	4602      	mov	r2, r0
   b456e:	4621      	mov	r1, r4
   b4570:	4648      	mov	r0, r9
   b4572:	f007 fb76 	bl	bbc62 <memcpy>
        peerRxCharacteristic.setValue(txBuf_tmp, strlen(outStr));
   b4576:	4620      	mov	r0, r4
   b4578:	f007 fc11 	bl	bbd9e <strlen>
   b457c:	2300      	movs	r3, #0
   b457e:	4602      	mov	r2, r0
   b4580:	4649      	mov	r1, r9
   b4582:	480b      	ldr	r0, [pc, #44]	; (b45b0 <_Z8sendDataPKchbbb+0xd0>)
   b4584:	f003 fb62 	bl	b7c4c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
   b4588:	46c5      	mov	sp, r8
    if(sendXBee || sendMode == 2){
   b458a:	b90e      	cbnz	r6, b4590 <_Z8sendDataPKchbbb+0xb0>
   b458c:	2d02      	cmp	r5, #2
   b458e:	d104      	bne.n	b459a <_Z8sendDataPKchbbb+0xba>
        Serial1.println(outStr);
   b4590:	f006 fd28 	bl	bafe4 <_Z22__fetch_global_Serial1v>
   b4594:	4621      	mov	r1, r4
   b4596:	f005 ff98 	bl	ba4ca <_ZN5Print7printlnEPKc>
}
   b459a:	3708      	adds	r7, #8
   b459c:	46bd      	mov	sp, r7
   b459e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b45a2:	bf00      	nop
   b45a4:	000bde4d 	.word	0x000bde4d
   b45a8:	2003dd7c 	.word	0x2003dd7c
   b45ac:	000bde54 	.word	0x000bde54
   b45b0:	2003ded4 	.word	0x2003ded4

000b45b4 <_Z14XBeeLTEPairSetv>:
void XBeeLTEPairSet(){
   b45b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      : _M_current(__i) { }
   b45b8:	4d0e      	ldr	r5, [pc, #56]	; (b45f4 <_Z14XBeeLTEPairSetv+0x40>)
        sprintf(replyStr,"CCB%dhwa",p.botNum);
   b45ba:	4f0f      	ldr	r7, [pc, #60]	; (b45f8 <_Z14XBeeLTEPairSetv+0x44>)
   b45bc:	e9d5 4800 	ldrd	r4, r8, [r5]
void XBeeLTEPairSet(){
   b45c0:	b088      	sub	sp, #32
    for(WaterBot p: PairBots){
   b45c2:	45a0      	cmp	r8, r4
   b45c4:	d013      	beq.n	b45ee <_Z14XBeeLTEPairSetv+0x3a>
   b45c6:	7923      	ldrb	r3, [r4, #4]
   b45c8:	78e6      	ldrb	r6, [r4, #3]
        sprintf(replyStr,"CCB%dhwa",p.botNum);
   b45ca:	f814 2b18 	ldrb.w	r2, [r4], #24
    for(WaterBot p: PairBots){
   b45ce:	9303      	str	r3, [sp, #12]
        sprintf(replyStr,"CCB%dhwa",p.botNum);
   b45d0:	4639      	mov	r1, r7
   b45d2:	a805      	add	r0, sp, #20
   b45d4:	f002 ff36 	bl	b7444 <sprintf>
        sendData(replyStr,0,false,p.XBeeAvail,p.LTEAvail);
   b45d8:	2200      	movs	r2, #0
   b45da:	9b03      	ldr	r3, [sp, #12]
   b45dc:	9600      	str	r6, [sp, #0]
   b45de:	4611      	mov	r1, r2
   b45e0:	a805      	add	r0, sp, #20
   b45e2:	f7ff ff7d 	bl	b44e0 <_Z8sendDataPKchbbb>
       */
      void
      pop_back() _GLIBCXX_NOEXCEPT
      {
	__glibcxx_requires_nonempty();
	--this->_M_impl._M_finish;
   b45e6:	686b      	ldr	r3, [r5, #4]
   b45e8:	3b18      	subs	r3, #24
   b45ea:	606b      	str	r3, [r5, #4]
	return *this;
   b45ec:	e7e9      	b.n	b45c2 <_Z14XBeeLTEPairSetv+0xe>
}
   b45ee:	b008      	add	sp, #32
   b45f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b45f4:	2003dd1c 	.word	0x2003dd1c
   b45f8:	000bde5c 	.word	0x000bde5c

000b45fc <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   b45fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4600:	e9d0 8900 	ldrd	r8, r9, [r0]
   b4604:	4b29      	ldr	r3, [pc, #164]	; (b46ac <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb0>)
   b4606:	eba9 0408 	sub.w	r4, r9, r8
   b460a:	10e4      	asrs	r4, r4, #3
   b460c:	435c      	muls	r4, r3

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
   b460e:	4b28      	ldr	r3, [pc, #160]	; (b46b0 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb4>)
   b4610:	429c      	cmp	r4, r3
   b4612:	4607      	mov	r7, r0
   b4614:	468a      	mov	sl, r1
   b4616:	4693      	mov	fp, r2
   b4618:	d102      	bne.n	b4620 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x24>
	  __throw_length_error(__N(__s));
   b461a:	4826      	ldr	r0, [pc, #152]	; (b46b4 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xb8>)
   b461c:	f006 fd08 	bl	bb030 <_ZSt20__throw_length_errorPKc>
   b4620:	2c01      	cmp	r4, #1
   b4622:	4622      	mov	r2, r4
   b4624:	bf38      	it	cc
   b4626:	2201      	movcc	r2, #1
   b4628:	18a4      	adds	r4, r4, r2
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
   b462a:	eba1 0508 	sub.w	r5, r1, r8

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b462e:	d238      	bcs.n	b46a2 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa6>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4630:	b3cc      	cbz	r4, b46a6 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xaa>
   b4632:	429c      	cmp	r4, r3
   b4634:	bf28      	it	cs
   b4636:	461c      	movcs	r4, r3
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4638:	2018      	movs	r0, #24
   b463a:	4360      	muls	r0, r4
   b463c:	f7ff fd2b 	bl	b4096 <_Znwj>
   b4640:	4606      	mov	r6, r0
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b4642:	eb16 0c05 	adds.w	ip, r6, r5
   b4646:	bf1f      	itttt	ne
   b4648:	e8bb 000f 	ldmiane.w	fp!, {r0, r1, r2, r3}
   b464c:	e8ac 000f 	stmiane.w	ip!, {r0, r1, r2, r3}
   b4650:	e9db 0100 	ldrdne	r0, r1, [fp]
   b4654:	e9cc 0100 	strdne	r0, r1, [ip]
    inline __enable_if_t<std::__is_bitwise_relocatable<_Tp>::value, _Tp*>
    __relocate_a_1(_Tp* __first, _Tp* __last,
		   _Tp* __result, allocator<_Up>&) noexcept
    {
      ptrdiff_t __count = __last - __first;
      if (__count > 0)
   b4658:	2d00      	cmp	r5, #0
   b465a:	dd04      	ble.n	b4666 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x6a>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b465c:	462a      	mov	r2, r5
   b465e:	4641      	mov	r1, r8
   b4660:	4630      	mov	r0, r6
   b4662:	f007 fb0c 	bl	bbc7e <memmove>
      ptrdiff_t __count = __last - __first;
   b4666:	eba9 090a 	sub.w	r9, r9, sl
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
   b466a:	3518      	adds	r5, #24
      if (__count > 0)
   b466c:	f1b9 0f00 	cmp.w	r9, #0
   b4670:	4435      	add	r5, r6
   b4672:	dd04      	ble.n	b467e <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x82>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b4674:	464a      	mov	r2, r9
   b4676:	4651      	mov	r1, sl
   b4678:	4628      	mov	r0, r5
   b467a:	f007 faf2 	bl	bbc62 <memcpy>
      return __result + __count;
   b467e:	444d      	add	r5, r9
	if (__p)
   b4680:	f1b8 0f00 	cmp.w	r8, #0
   b4684:	d005      	beq.n	b4692 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x96>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
   b4686:	68b9      	ldr	r1, [r7, #8]
	::operator delete(__p
   b4688:	4640      	mov	r0, r8
   b468a:	eba1 0108 	sub.w	r1, r1, r8
   b468e:	f7ff fd06 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b4692:	2018      	movs	r0, #24
   b4694:	fb00 6404 	mla	r4, r0, r4, r6
      this->_M_impl._M_finish = __new_finish;
   b4698:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b469c:	60bc      	str	r4, [r7, #8]
    }
   b469e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b46a2:	461c      	mov	r4, r3
   b46a4:	e7c8      	b.n	b4638 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3c>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b46a6:	4626      	mov	r6, r4
   b46a8:	e7cb      	b.n	b4642 <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
   b46aa:	bf00      	nop
   b46ac:	aaaaaaab 	.word	0xaaaaaaab
   b46b0:	05555555 	.word	0x05555555
   b46b4:	000bde65 	.word	0x000bde65

000b46b8 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
   b46b8:	b570      	push	{r4, r5, r6, lr}
   b46ba:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b46bc:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b46c0:	4299      	cmp	r1, r3
      push_back(const value_type& __x)
   b46c2:	4606      	mov	r6, r0
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b46c4:	d00c      	beq.n	b46e0 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_+0x28>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b46c6:	b139      	cbz	r1, b46d8 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_+0x20>
   b46c8:	4615      	mov	r5, r2
   b46ca:	460c      	mov	r4, r1
   b46cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b46ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b46d0:	e895 0003 	ldmia.w	r5, {r0, r1}
   b46d4:	e884 0003 	stmia.w	r4, {r0, r1}
	    ++this->_M_impl._M_finish;
   b46d8:	6873      	ldr	r3, [r6, #4]
   b46da:	3318      	adds	r3, #24
   b46dc:	6073      	str	r3, [r6, #4]
      }
   b46de:	bd70      	pop	{r4, r5, r6, pc}
	  _M_realloc_insert(end(), __x);
   b46e0:	f7ff ff8c 	bl	b45fc <_ZNSt6vectorI8WaterBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
   b46e4:	e7fb      	b.n	b46de <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_+0x26>
	...

000b46e8 <_Z14processCommandPKchb>:
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b46e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b46ec:	b09d      	sub	sp, #116	; 0x74
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
   b46ee:	7883      	ldrb	r3, [r0, #2]
   b46f0:	2b41      	cmp	r3, #65	; 0x41
void processCommand(const char *command, uint8_t mode, bool sendAck){
   b46f2:	af02      	add	r7, sp, #8
   b46f4:	4606      	mov	r6, r0
   b46f6:	468a      	mov	sl, r1
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
   b46f8:	d15d      	bne.n	b47b6 <_Z14processCommandPKchb+0xce>
   b46fa:	78c3      	ldrb	r3, [r0, #3]
   b46fc:	2b42      	cmp	r3, #66	; 0x42
   b46fe:	f040 8179 	bne.w	b49f4 <_Z14processCommandPKchb+0x30c>
        char dataStr[strlen(command)-8];
   b4702:	4630      	mov	r0, r6
   b4704:	f007 fb4b 	bl	bbd9e <strlen>
   b4708:	3801      	subs	r0, #1
   b470a:	f020 0007 	bic.w	r0, r0, #7
        }
   b470e:	46e8      	mov	r8, sp
        char dataStr[strlen(command)-8];
   b4710:	ebad 0d00 	sub.w	sp, sp, r0
        dataStr[strlen(command)-9] = '\0';
   b4714:	4630      	mov	r0, r6
   b4716:	f007 fb42 	bl	bbd9e <strlen>
        char dataStr[strlen(command)-8];
   b471a:	ad02      	add	r5, sp, #8
        dataStr[strlen(command)-9] = '\0';
   b471c:	4428      	add	r0, r5
   b471e:	f04f 0900 	mov.w	r9, #0
        rxIDBuf[0] = command[1];
   b4722:	7873      	ldrb	r3, [r6, #1]
        dataStr[strlen(command)-9] = '\0';
   b4724:	f800 9c09 	strb.w	r9, [r0, #-9]
        uint8_t rxBotID = atoi(rxIDBuf);
   b4728:	f107 0018 	add.w	r0, r7, #24
        rxIDBuf[0] = command[1];
   b472c:	763b      	strb	r3, [r7, #24]
        uint8_t rxBotID = atoi(rxIDBuf);
   b472e:	f007 fa84 	bl	bbc3a <atoi>
   b4732:	4604      	mov	r4, r0
        checkStr[0] = command[strlen(command)-2];
   b4734:	4630      	mov	r0, r6
        cmdStr[3] = '\0';
   b4736:	f887 9023 	strb.w	r9, [r7, #35]	; 0x23
        checkStr[0] = command[strlen(command)-2];
   b473a:	f007 fb30 	bl	bbd9e <strlen>
   b473e:	4430      	add	r0, r6
   b4740:	f810 3c02 	ldrb.w	r3, [r0, #-2]
   b4744:	773b      	strb	r3, [r7, #28]
        checkStr[1] = command[strlen(command)-1];
   b4746:	4630      	mov	r0, r6
   b4748:	f007 fb29 	bl	bbd9e <strlen>
   b474c:	4430      	add	r0, r6
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b474e:	4649      	mov	r1, r9
        checkStr[1] = command[strlen(command)-1];
   b4750:	f810 3c01 	ldrb.w	r3, [r0, #-1]
   b4754:	777b      	strb	r3, [r7, #29]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b4756:	2210      	movs	r2, #16
   b4758:	f107 001c 	add.w	r0, r7, #28
        checkStr[2] = '\0';
   b475c:	f887 901e 	strb.w	r9, [r7, #30]
        checksum = (uint8_t)strtol(checkStr, NULL, 16);       // number base 16
   b4760:	f008 fa0a 	bl	bcb78 <strtol>
   b4764:	4683      	mov	fp, r0
        Serial.printlnf("Checksum: %02x, %03d",checksum,checksum);
   b4766:	fa5f fb8b 	uxtb.w	fp, fp
   b476a:	f006 fa8f 	bl	bac8c <_Z16_fetch_usbserialv>
   b476e:	49c8      	ldr	r1, [pc, #800]	; (b4a90 <_Z14processCommandPKchb+0x3a8>)
   b4770:	465b      	mov	r3, fp
   b4772:	465a      	mov	r2, fp
   b4774:	f7ff fd7a 	bl	b426c <_ZN5Print8printlnfEPKcz>
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b4778:	f04f 0904 	mov.w	r9, #4
   b477c:	4630      	mov	r0, r6
   b477e:	f007 fb0e 	bl	bbd9e <strlen>
   b4782:	3802      	subs	r0, #2
   b4784:	4581      	cmp	r9, r0
   b4786:	d21c      	bcs.n	b47c2 <_Z14processCommandPKchb+0xda>
            if(i < 7) cmdStr[i-4] = command[i];
   b4788:	f1b9 0f06 	cmp.w	r9, #6
   b478c:	bf9b      	ittet	ls
   b478e:	f107 0368 	addls.w	r3, r7, #104	; 0x68
   b4792:	444b      	addls	r3, r9
            else dataStr[i-7] = command[i];
   b4794:	eb05 0309 	addhi.w	r3, r5, r9
            if(i < 7) cmdStr[i-4] = command[i];
   b4798:	f816 2009 	ldrbls.w	r2, [r6, r9]
            else dataStr[i-7] = command[i];
   b479c:	bf8c      	ite	hi
   b479e:	f816 2009 	ldrbhi.w	r2, [r6, r9]
            if(i < 7) cmdStr[i-4] = command[i];
   b47a2:	f803 2c4c 	strbls.w	r2, [r3, #-76]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b47a6:	f109 0901 	add.w	r9, r9, #1
            else dataStr[i-7] = command[i];
   b47aa:	bf88      	it	hi
   b47ac:	f803 2c07 	strbhi.w	r2, [r3, #-7]
        for(uint8_t i = 4; i < strlen(command)-2;i++){
   b47b0:	fa5f f989 	uxtb.w	r9, r9
   b47b4:	e7e2      	b.n	b477c <_Z14processCommandPKchb+0x94>
    if((command[2] == 'A' && command[3] == 'B') || (command[2] == 'C' && command[3] == 'C')){
   b47b6:	2b43      	cmp	r3, #67	; 0x43
   b47b8:	f040 811c 	bne.w	b49f4 <_Z14processCommandPKchb+0x30c>
   b47bc:	78c3      	ldrb	r3, [r0, #3]
   b47be:	2b43      	cmp	r3, #67	; 0x43
   b47c0:	e79d      	b.n	b46fe <_Z14processCommandPKchb+0x16>
        if(checksum != strlen(command)-2){
   b47c2:	4558      	cmp	r0, fp
   b47c4:	d042      	beq.n	b484c <_Z14processCommandPKchb+0x164>
            Serial.printlnf("String Len: %d, Checksum: %d",strlen(command)-2,checksum);
   b47c6:	f006 fa61 	bl	bac8c <_Z16_fetch_usbserialv>
   b47ca:	4604      	mov	r4, r0
   b47cc:	4630      	mov	r0, r6
   b47ce:	f007 fae6 	bl	bbd9e <strlen>
   b47d2:	1e82      	subs	r2, r0, #2
   b47d4:	4620      	mov	r0, r4
   b47d6:	4caf      	ldr	r4, [pc, #700]	; (b4a94 <_Z14processCommandPKchb+0x3ac>)
   b47d8:	49af      	ldr	r1, [pc, #700]	; (b4a98 <_Z14processCommandPKchb+0x3b0>)
   b47da:	465b      	mov	r3, fp
   b47dc:	f7ff fd46 	bl	b426c <_ZN5Print8printlnfEPKcz>
            if(!logFile.isOpen()){
   b47e0:	7c23      	ldrb	r3, [r4, #16]
   b47e2:	bb6b      	cbnz	r3, b4840 <_Z14processCommandPKchb+0x158>
                logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b47e4:	49ad      	ldr	r1, [pc, #692]	; (b4a9c <_Z14processCommandPKchb+0x3b4>)
   b47e6:	f244 2202 	movw	r2, #16898	; 0x4202
   b47ea:	f104 0010 	add.w	r0, r4, #16
   b47ee:	f7ff fdc5 	bl	b437c <_ZN7FatFile4openEPKci>
                logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b47f2:	49ab      	ldr	r1, [pc, #684]	; (b4aa0 <_Z14processCommandPKchb+0x3b8>)
   b47f4:	4632      	mov	r2, r6
   b47f6:	4620      	mov	r0, r4
   b47f8:	f7ff fd38 	bl	b426c <_ZN5Print8printlnfEPKcz>
                logFile.close();
   b47fc:	f104 0010 	add.w	r0, r4, #16
   b4800:	f001 f988 	bl	b5b14 <_ZN7FatFile5closeEv>
            Serial.println("Warning, checksum does not match");
   b4804:	f006 fa42 	bl	bac8c <_Z16_fetch_usbserialv>
   b4808:	49a6      	ldr	r1, [pc, #664]	; (b4aa4 <_Z14processCommandPKchb+0x3bc>)
   b480a:	f005 fe5e 	bl	ba4ca <_ZN5Print7printlnEPKc>
            if((command[1] >= '0' && command[1] <= '9') || command[1] == 'C'){
   b480e:	7873      	ldrb	r3, [r6, #1]
   b4810:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   b4814:	2a09      	cmp	r2, #9
   b4816:	d902      	bls.n	b481e <_Z14processCommandPKchb+0x136>
   b4818:	2b43      	cmp	r3, #67	; 0x43
   b481a:	f040 80ea 	bne.w	b49f2 <_Z14processCommandPKchb+0x30a>
                rxBotNum[0] = command[0];
   b481e:	7832      	ldrb	r2, [r6, #0]
   b4820:	f887 2038 	strb.w	r2, [r7, #56]	; 0x38
                rxBotNum[1] = command[1];
   b4824:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
                sprintf(errBuf,"CC%2snak%3s",rxBotNum,cmdStr);
   b4828:	499f      	ldr	r1, [pc, #636]	; (b4aa8 <_Z14processCommandPKchb+0x3c0>)
   b482a:	48a0      	ldr	r0, [pc, #640]	; (b4aac <_Z14processCommandPKchb+0x3c4>)
   b482c:	f107 0320 	add.w	r3, r7, #32
   b4830:	f107 0238 	add.w	r2, r7, #56	; 0x38
   b4834:	f002 fe06 	bl	b7444 <sprintf>
                errModeReply = mode;
   b4838:	4b9d      	ldr	r3, [pc, #628]	; (b4ab0 <_Z14processCommandPKchb+0x3c8>)
            errCmdMode = mode;
   b483a:	f883 a000 	strb.w	sl, [r3]
   b483e:	e0d8      	b.n	b49f2 <_Z14processCommandPKchb+0x30a>
            else logFile.printlnf("[WARN] Message Checksum Does Not Match!: %s",command);
   b4840:	4997      	ldr	r1, [pc, #604]	; (b4aa0 <_Z14processCommandPKchb+0x3b8>)
   b4842:	4632      	mov	r2, r6
   b4844:	4620      	mov	r0, r4
   b4846:	f7ff fd11 	bl	b426c <_ZN5Print8printlnfEPKcz>
   b484a:	e7db      	b.n	b4804 <_Z14processCommandPKchb+0x11c>
        if(!strcmp(cmdStr,"ack")){  //Acknowledgement for XBee and BLE
   b484c:	4999      	ldr	r1, [pc, #612]	; (b4ab4 <_Z14processCommandPKchb+0x3cc>)
   b484e:	f107 0020 	add.w	r0, r7, #32
   b4852:	f007 fa74 	bl	bbd3e <strcmp>
   b4856:	2800      	cmp	r0, #0
   b4858:	f000 80cb 	beq.w	b49f2 <_Z14processCommandPKchb+0x30a>
        else if(!strcmp(cmdStr,"sup")){
   b485c:	4996      	ldr	r1, [pc, #600]	; (b4ab8 <_Z14processCommandPKchb+0x3d0>)
   b485e:	f107 0020 	add.w	r0, r7, #32
        uint8_t rxBotID = atoi(rxIDBuf);
   b4862:	b2e4      	uxtb	r4, r4
        else if(!strcmp(cmdStr,"sup")){
   b4864:	f007 fa6b 	bl	bbd3e <strcmp>
   b4868:	2800      	cmp	r0, #0
   b486a:	f040 80c7 	bne.w	b49fc <_Z14processCommandPKchb+0x314>
      : _M_current(__i) { }
   b486e:	4b93      	ldr	r3, [pc, #588]	; (b4abc <_Z14processCommandPKchb+0x3d4>)
                    Serial.println("##########################");
   b4870:	f8df 9290 	ldr.w	r9, [pc, #656]	; b4b04 <_Z14processCommandPKchb+0x41c>
   b4874:	685a      	ldr	r2, [r3, #4]
   b4876:	681e      	ldr	r6, [r3, #0]
   b4878:	617a      	str	r2, [r7, #20]
            bool newBot = true;
   b487a:	2301      	movs	r3, #1
            for(WaterBot w: WaterBots){
   b487c:	697a      	ldr	r2, [r7, #20]
   b487e:	42b2      	cmp	r2, r6
   b4880:	d074      	beq.n	b496c <_Z14processCommandPKchb+0x284>
   b4882:	7832      	ldrb	r2, [r6, #0]
                if(rxBotID == w.botNum){
   b4884:	4294      	cmp	r4, r2
   b4886:	d16f      	bne.n	b4968 <_Z14processCommandPKchb+0x280>
                    sscanf(dataStr,"%u %u %s %s",&battpct,&statflags,testLat,testLon);
   b4888:	f107 0a38 	add.w	sl, r7, #56	; 0x38
   b488c:	f107 0b28 	add.w	fp, r7, #40	; 0x28
   b4890:	f107 0324 	add.w	r3, r7, #36	; 0x24
   b4894:	f107 021b 	add.w	r2, r7, #27
   b4898:	4989      	ldr	r1, [pc, #548]	; (b4ac0 <_Z14processCommandPKchb+0x3d8>)
   b489a:	f8cd a004 	str.w	sl, [sp, #4]
   b489e:	f8cd b000 	str.w	fp, [sp]
   b48a2:	4628      	mov	r0, r5
   b48a4:	f002 fdd6 	bl	b7454 <sscanf>
                    latRX = atof(testLat);
   b48a8:	4658      	mov	r0, fp
   b48aa:	f007 f9c3 	bl	bbc34 <atof>
                    lonRX = atof(testLon);
   b48ae:	4650      	mov	r0, sl
                    latRX = atof(testLat);
   b48b0:	ed87 0b02 	vstr	d0, [r7, #8]
                    lonRX = atof(testLon);
   b48b4:	f007 f9be 	bl	bbc34 <atof>
                    w.LTEAvail = statflags & 1;
   b48b8:	f897 a024 	ldrb.w	sl, [r7, #36]	; 0x24
                    w.battPercent = battpct;
   b48bc:	f897 b01b 	ldrb.w	fp, [r7, #27]
                    lonRX = atof(testLon);
   b48c0:	ed87 0b00 	vstr	d0, [r7]
                    Serial.println("Status Update!");
   b48c4:	f006 f9e2 	bl	bac8c <_Z16_fetch_usbserialv>
   b48c8:	497e      	ldr	r1, [pc, #504]	; (b4ac4 <_Z14processCommandPKchb+0x3dc>)
   b48ca:	f005 fdfe 	bl	ba4ca <_ZN5Print7printlnEPKc>
                    Serial.println("##########################");
   b48ce:	f006 f9dd 	bl	bac8c <_Z16_fetch_usbserialv>
   b48d2:	4649      	mov	r1, r9
   b48d4:	f005 fdf9 	bl	ba4ca <_ZN5Print7printlnEPKc>
                    Serial.println("##     STATUS UPDATE    ##");
   b48d8:	f006 f9d8 	bl	bac8c <_Z16_fetch_usbserialv>
   b48dc:	497a      	ldr	r1, [pc, #488]	; (b4ac8 <_Z14processCommandPKchb+0x3e0>)
   b48de:	f005 fdf4 	bl	ba4ca <_ZN5Print7printlnEPKc>
                    Serial.printlnf("##       Bot #: %1d      ##",w.botNum);
   b48e2:	f006 f9d3 	bl	bac8c <_Z16_fetch_usbserialv>
   b48e6:	4979      	ldr	r1, [pc, #484]	; (b4acc <_Z14processCommandPKchb+0x3e4>)
   b48e8:	4622      	mov	r2, r4
   b48ea:	f7ff fcbf 	bl	b426c <_ZN5Print8printlnfEPKcz>
                    Serial.printlnf("##      Batt %: %03d     ##",w.battPercent);
   b48ee:	f006 f9cd 	bl	bac8c <_Z16_fetch_usbserialv>
   b48f2:	465a      	mov	r2, fp
   b48f4:	4976      	ldr	r1, [pc, #472]	; (b4ad0 <_Z14processCommandPKchb+0x3e8>)
   b48f6:	f7ff fcb9 	bl	b426c <_ZN5Print8printlnfEPKcz>
                    Serial.println("##    LTE  BLE  XBee    ##");
   b48fa:	f006 f9c7 	bl	bac8c <_Z16_fetch_usbserialv>
   b48fe:	4975      	ldr	r1, [pc, #468]	; (b4ad4 <_Z14processCommandPKchb+0x3ec>)
   b4900:	f005 fde3 	bl	ba4ca <_ZN5Print7printlnEPKc>
                    Serial.printlnf("##     %d    %d     %d     ##",w.LTEAvail,w.BLEAvail,w.XBeeAvail);
   b4904:	f006 f9c2 	bl	bac8c <_Z16_fetch_usbserialv>
   b4908:	f3ca 0340 	ubfx	r3, sl, #1, #1
   b490c:	f00a 0201 	and.w	r2, sl, #1
   b4910:	4971      	ldr	r1, [pc, #452]	; (b4ad8 <_Z14processCommandPKchb+0x3f0>)
   b4912:	9300      	str	r3, [sp, #0]
   b4914:	f3ca 0380 	ubfx	r3, sl, #2, #1
   b4918:	f7ff fca8 	bl	b426c <_ZN5Print8printlnfEPKcz>
                    Serial.println("##  Latitude Longitude  ##");
   b491c:	f006 f9b6 	bl	bac8c <_Z16_fetch_usbserialv>
   b4920:	496e      	ldr	r1, [pc, #440]	; (b4adc <_Z14processCommandPKchb+0x3f4>)
   b4922:	f005 fdd2 	bl	ba4ca <_ZN5Print7printlnEPKc>
                    Serial.printlnf("## %.6f %.6f ##",w.GPSLat,w.GPSLon);
   b4926:	f006 f9b1 	bl	bac8c <_Z16_fetch_usbserialv>
   b492a:	4682      	mov	sl, r0
                    latRX = atof(testLat);
   b492c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
   b4930:	f007 f90c 	bl	bbb4c <__aeabi_d2f>
                    Serial.printlnf("## %.6f %.6f ##",w.GPSLat,w.GPSLon);
   b4934:	f006 fdf8 	bl	bb528 <__aeabi_f2d>
   b4938:	4602      	mov	r2, r0
   b493a:	460b      	mov	r3, r1
                    lonRX = atof(testLon);
   b493c:	e9d7 0100 	ldrd	r0, r1, [r7]
                    Serial.printlnf("## %.6f %.6f ##",w.GPSLat,w.GPSLon);
   b4940:	e9c7 2302 	strd	r2, r3, [r7, #8]
                    lonRX = atof(testLon);
   b4944:	f007 f902 	bl	bbb4c <__aeabi_d2f>
                    Serial.printlnf("## %.6f %.6f ##",w.GPSLat,w.GPSLon);
   b4948:	f006 fdee 	bl	bb528 <__aeabi_f2d>
   b494c:	e9cd 0100 	strd	r0, r1, [sp]
   b4950:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
   b4954:	4962      	ldr	r1, [pc, #392]	; (b4ae0 <_Z14processCommandPKchb+0x3f8>)
   b4956:	4650      	mov	r0, sl
   b4958:	f7ff fc88 	bl	b426c <_ZN5Print8printlnfEPKcz>
                    Serial.println("##########################");
   b495c:	f006 f996 	bl	bac8c <_Z16_fetch_usbserialv>
   b4960:	4649      	mov	r1, r9
   b4962:	f005 fdb2 	bl	ba4ca <_ZN5Print7printlnEPKc>
                    newBot = false;
   b4966:	2300      	movs	r3, #0
      operator++() _GLIBCXX_NOEXCEPT
   b4968:	3618      	adds	r6, #24
	return *this;
   b496a:	e787      	b.n	b487c <_Z14processCommandPKchb+0x194>
            if(newBot){
   b496c:	2b00      	cmp	r3, #0
   b496e:	d040      	beq.n	b49f2 <_Z14processCommandPKchb+0x30a>
                Serial.println("Found a new water bot ID");
   b4970:	f006 f98c 	bl	bac8c <_Z16_fetch_usbserialv>
   b4974:	495b      	ldr	r1, [pc, #364]	; (b4ae4 <_Z14processCommandPKchb+0x3fc>)
   b4976:	f005 fda8 	bl	ba4ca <_ZN5Print7printlnEPKc>
                newWaterbot.BLEAvail = true;
   b497a:	2301      	movs	r3, #1
   b497c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
                sscanf(dataStr,"%u %u %f %f",&battpct,&statflags,&latRX,&lonRX);
   b4980:	f107 0328 	add.w	r3, r7, #40	; 0x28
                newWaterbot.botNum = rxBotID;
   b4984:	f887 4038 	strb.w	r4, [r7, #56]	; 0x38
                sscanf(dataStr,"%u %u %f %f",&battpct,&statflags,&latRX,&lonRX);
   b4988:	9301      	str	r3, [sp, #4]
   b498a:	f107 0324 	add.w	r3, r7, #36	; 0x24
   b498e:	4956      	ldr	r1, [pc, #344]	; (b4ae8 <_Z14processCommandPKchb+0x400>)
   b4990:	9300      	str	r3, [sp, #0]
   b4992:	f107 021a 	add.w	r2, r7, #26
   b4996:	f107 031b 	add.w	r3, r7, #27
   b499a:	4628      	mov	r0, r5
   b499c:	f002 fd5a 	bl	b7454 <sscanf>
                newWaterbot.battPercent = battpct;
   b49a0:	7ebb      	ldrb	r3, [r7, #26]
   b49a2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
                newWaterbot.LTEAvail = statflags & 1;
   b49a6:	7efb      	ldrb	r3, [r7, #27]
                WaterBots.push_back(newWaterbot);
   b49a8:	4844      	ldr	r0, [pc, #272]	; (b4abc <_Z14processCommandPKchb+0x3d4>)
                newWaterbot.LTEAvail = statflags & 1;
   b49aa:	f003 0201 	and.w	r2, r3, #1
   b49ae:	f887 203b 	strb.w	r2, [r7, #59]	; 0x3b
                newWaterbot.XBeeAvail = (statflags >> 1) & 1;
   b49b2:	f3c3 0240 	ubfx	r2, r3, #1, #1
   b49b6:	f887 203c 	strb.w	r2, [r7, #60]	; 0x3c
                newWaterbot.BLEAvail = (statflags >> 2) & 1;
   b49ba:	f3c3 0280 	ubfx	r2, r3, #2, #1
   b49be:	f887 203a 	strb.w	r2, [r7, #58]	; 0x3a
                newWaterbot.offloading = (statflags >> 3) & 1;
   b49c2:	f3c3 02c0 	ubfx	r2, r3, #3, #1
   b49c6:	f887 2040 	strb.w	r2, [r7, #64]	; 0x40
                newWaterbot.manualRC = (statflags >> 4) & 1;
   b49ca:	f3c3 1200 	ubfx	r2, r3, #4, #1
   b49ce:	f887 203d 	strb.w	r2, [r7, #61]	; 0x3d
                newWaterbot.lowBatt = (statflags >> 5) & 1;
   b49d2:	f3c3 1240 	ubfx	r2, r3, #5, #1
                newWaterbot.dataRecording = (statflags >> 6) & 1;
   b49d6:	f3c3 1380 	ubfx	r3, r3, #6, #1
   b49da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                newWaterbot.GPSLat = latRX;
   b49de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   b49e0:	647b      	str	r3, [r7, #68]	; 0x44
                WaterBots.push_back(newWaterbot);
   b49e2:	f107 0138 	add.w	r1, r7, #56	; 0x38
                newWaterbot.GPSLon = lonRX;
   b49e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
                newWaterbot.lowBatt = (statflags >> 5) & 1;
   b49e8:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
                newWaterbot.GPSLon = lonRX;
   b49ec:	64bb      	str	r3, [r7, #72]	; 0x48
                WaterBots.push_back(newWaterbot);
   b49ee:	f7ff fe63 	bl	b46b8 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
   b49f2:	46c5      	mov	sp, r8
}
   b49f4:	376c      	adds	r7, #108	; 0x6c
   b49f6:	46bd      	mov	sp, r7
   b49f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if(!strcmp(cmdStr,"nak")){  //Acknowledgement for XBee and BLE
   b49fc:	493b      	ldr	r1, [pc, #236]	; (b4aec <_Z14processCommandPKchb+0x404>)
   b49fe:	f107 0020 	add.w	r0, r7, #32
   b4a02:	f007 f99c 	bl	bbd3e <strcmp>
   b4a06:	b930      	cbnz	r0, b4a16 <_Z14processCommandPKchb+0x32e>
            strncpy(errCmdStr,dataStr,3);
   b4a08:	4839      	ldr	r0, [pc, #228]	; (b4af0 <_Z14processCommandPKchb+0x408>)
   b4a0a:	2203      	movs	r2, #3
   b4a0c:	4629      	mov	r1, r5
   b4a0e:	f007 f9e2 	bl	bbdd6 <strncpy>
            errCmdMode = mode;
   b4a12:	4b38      	ldr	r3, [pc, #224]	; (b4af4 <_Z14processCommandPKchb+0x40c>)
   b4a14:	e711      	b.n	b483a <_Z14processCommandPKchb+0x152>
        else if(!strcmp(cmdStr,"hwd")){  //Hello World! - Received startup pairing message
   b4a16:	4938      	ldr	r1, [pc, #224]	; (b4af8 <_Z14processCommandPKchb+0x410>)
   b4a18:	f107 0020 	add.w	r0, r7, #32
   b4a1c:	f007 f98f 	bl	bbd3e <strcmp>
   b4a20:	2800      	cmp	r0, #0
   b4a22:	d171      	bne.n	b4b08 <_Z14processCommandPKchb+0x420>
      : _M_current(__i) { }
   b4a24:	4b25      	ldr	r3, [pc, #148]	; (b4abc <_Z14processCommandPKchb+0x3d4>)
   b4a26:	e9d3 2000 	ldrd	r2, r0, [r3]
            bool newBot = true;
   b4a2a:	2301      	movs	r3, #1
            for(WaterBot w: WaterBots){
   b4a2c:	4282      	cmp	r2, r0
   b4a2e:	d005      	beq.n	b4a3c <_Z14processCommandPKchb+0x354>
                if(rxBotID == w.botNum) newBot = false;
   b4a30:	f812 1b18 	ldrb.w	r1, [r2], #24
   b4a34:	42a1      	cmp	r1, r4
   b4a36:	bf08      	it	eq
   b4a38:	2300      	moveq	r3, #0
	return *this;
   b4a3a:	e7f7      	b.n	b4a2c <_Z14processCommandPKchb+0x344>
            if(newBot){
   b4a3c:	b1ab      	cbz	r3, b4a6a <_Z14processCommandPKchb+0x382>
                Serial.println("Found a new water bot ID");
   b4a3e:	f006 f925 	bl	bac8c <_Z16_fetch_usbserialv>
   b4a42:	4928      	ldr	r1, [pc, #160]	; (b4ae4 <_Z14processCommandPKchb+0x3fc>)
   b4a44:	f005 fd41 	bl	ba4ca <_ZN5Print7printlnEPKc>
                if(mode == 1) newWaterbot.BLEAvail = true;
   b4a48:	f1ba 0f01 	cmp.w	sl, #1
   b4a4c:	d111      	bne.n	b4a72 <_Z14processCommandPKchb+0x38a>
   b4a4e:	f887 a03a 	strb.w	sl, [r7, #58]	; 0x3a
                WaterBots.push_back(newWaterbot);
   b4a52:	481a      	ldr	r0, [pc, #104]	; (b4abc <_Z14processCommandPKchb+0x3d4>)
                newWaterbot.botNum = rxBotID;
   b4a54:	f887 4038 	strb.w	r4, [r7, #56]	; 0x38
                WaterBots.push_back(newWaterbot);
   b4a58:	f107 0138 	add.w	r1, r7, #56	; 0x38
   b4a5c:	f7ff fe2c 	bl	b46b8 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
                PairBots.push_back(newWaterbot);
   b4a60:	4826      	ldr	r0, [pc, #152]	; (b4afc <_Z14processCommandPKchb+0x414>)
   b4a62:	f107 0138 	add.w	r1, r7, #56	; 0x38
   b4a66:	f7ff fe27 	bl	b46b8 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
            botPairRx = true;
   b4a6a:	4b25      	ldr	r3, [pc, #148]	; (b4b00 <_Z14processCommandPKchb+0x418>)
   b4a6c:	2201      	movs	r2, #1
   b4a6e:	701a      	strb	r2, [r3, #0]
   b4a70:	e7bf      	b.n	b49f2 <_Z14processCommandPKchb+0x30a>
                else if(mode == 2) newWaterbot.XBeeAvail = true;
   b4a72:	f1ba 0f02 	cmp.w	sl, #2
   b4a76:	f04f 0301 	mov.w	r3, #1
   b4a7a:	d102      	bne.n	b4a82 <_Z14processCommandPKchb+0x39a>
   b4a7c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
   b4a80:	e7e7      	b.n	b4a52 <_Z14processCommandPKchb+0x36a>
                else if(mode == 3) newWaterbot.LTEAvail = true;
   b4a82:	f1ba 0f03 	cmp.w	sl, #3
   b4a86:	bf08      	it	eq
   b4a88:	f887 303b 	strbeq.w	r3, [r7, #59]	; 0x3b
   b4a8c:	e7e1      	b.n	b4a52 <_Z14processCommandPKchb+0x36a>
   b4a8e:	bf00      	nop
   b4a90:	000bde7f 	.word	0x000bde7f
   b4a94:	2003de38 	.word	0x2003de38
   b4a98:	000bde94 	.word	0x000bde94
   b4a9c:	2003dde1 	.word	0x2003dde1
   b4aa0:	000bdeb1 	.word	0x000bdeb1
   b4aa4:	000bdedd 	.word	0x000bdedd
   b4aa8:	000bdefe 	.word	0x000bdefe
   b4aac:	2003ddcd 	.word	0x2003ddcd
   b4ab0:	2003dde0 	.word	0x2003dde0
   b4ab4:	000bdf0a 	.word	0x000bdf0a
   b4ab8:	000bdf0e 	.word	0x000bdf0e
   b4abc:	2003dd34 	.word	0x2003dd34
   b4ac0:	000bdf12 	.word	0x000bdf12
   b4ac4:	000bdf1e 	.word	0x000bdf1e
   b4ac8:	000bdf48 	.word	0x000bdf48
   b4acc:	000bdf63 	.word	0x000bdf63
   b4ad0:	000bdf7f 	.word	0x000bdf7f
   b4ad4:	000bdf9b 	.word	0x000bdf9b
   b4ad8:	000bdfb6 	.word	0x000bdfb6
   b4adc:	000bdfd4 	.word	0x000bdfd4
   b4ae0:	000bdfef 	.word	0x000bdfef
   b4ae4:	000bdfff 	.word	0x000bdfff
   b4ae8:	000be018 	.word	0x000be018
   b4aec:	000be024 	.word	0x000be024
   b4af0:	2003dddd 	.word	0x2003dddd
   b4af4:	2003dddc 	.word	0x2003dddc
   b4af8:	000be0fd 	.word	0x000be0fd
   b4afc:	2003dd1c 	.word	0x2003dd1c
   b4b00:	2003ddcc 	.word	0x2003ddcc
   b4b04:	000bdf2d 	.word	0x000bdf2d
        else if(!strcmp(cmdStr,"pts")){
   b4b08:	4925      	ldr	r1, [pc, #148]	; (b4ba0 <_Z14processCommandPKchb+0x4b8>)
   b4b0a:	f107 0020 	add.w	r0, r7, #32
   b4b0e:	f007 f916 	bl	bbd3e <strcmp>
   b4b12:	2800      	cmp	r0, #0
   b4b14:	f47f af6d 	bne.w	b49f2 <_Z14processCommandPKchb+0x30a>
            Serial.println(dataStr);
   b4b18:	f006 f8b8 	bl	bac8c <_Z16_fetch_usbserialv>
   b4b1c:	4629      	mov	r1, r5
   b4b1e:	f005 fcd4 	bl	ba4ca <_ZN5Print7printlnEPKc>
            myFile.open("RawWrite.txt", O_RDWR | O_CREAT | O_AT_END);
   b4b22:	f244 2202 	movw	r2, #16898	; 0x4202
   b4b26:	491f      	ldr	r1, [pc, #124]	; (b4ba4 <_Z14processCommandPKchb+0x4bc>)
   b4b28:	481f      	ldr	r0, [pc, #124]	; (b4ba8 <_Z14processCommandPKchb+0x4c0>)
   b4b2a:	f7ff fc27 	bl	b437c <_ZN7FatFile4openEPKci>
            String modeStr[3] = {"LTE", "XBee", "Bluetooth"};
   b4b2e:	491f      	ldr	r1, [pc, #124]	; (b4bac <_Z14processCommandPKchb+0x4c4>)
   b4b30:	f107 0038 	add.w	r0, r7, #56	; 0x38
   b4b34:	f005 fe65 	bl	ba802 <_ZN6StringC1EPK19__FlashStringHelper>
   b4b38:	491d      	ldr	r1, [pc, #116]	; (b4bb0 <_Z14processCommandPKchb+0x4c8>)
   b4b3a:	f107 0048 	add.w	r0, r7, #72	; 0x48
   b4b3e:	f005 fe60 	bl	ba802 <_ZN6StringC1EPK19__FlashStringHelper>
   b4b42:	491c      	ldr	r1, [pc, #112]	; (b4bb4 <_Z14processCommandPKchb+0x4cc>)
   b4b44:	f107 0058 	add.w	r0, r7, #88	; 0x58
   b4b48:	f005 fe5b 	bl	ba802 <_ZN6StringC1EPK19__FlashStringHelper>
            myFile.printf("New string from %s: ", modeStr[mode]);
   b4b4c:	f107 0338 	add.w	r3, r7, #56	; 0x38
   b4b50:	eb03 110a 	add.w	r1, r3, sl, lsl #4
   b4b54:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b4b58:	f005 fe9e 	bl	ba898 <_ZN6StringC1ERKS_>
   b4b5c:	f107 0228 	add.w	r2, r7, #40	; 0x28
   b4b60:	4915      	ldr	r1, [pc, #84]	; (b4bb8 <_Z14processCommandPKchb+0x4d0>)
   b4b62:	4816      	ldr	r0, [pc, #88]	; (b4bbc <_Z14processCommandPKchb+0x4d4>)
   b4b64:	f7ff fb49 	bl	b41fa <_ZN5Print6printfEPKcz>
   b4b68:	f107 0028 	add.w	r0, r7, #40	; 0x28
   b4b6c:	f005 fdfe 	bl	ba76c <_ZN6StringD1Ev>
            myFile.println(dataStr);
   b4b70:	4629      	mov	r1, r5
   b4b72:	4812      	ldr	r0, [pc, #72]	; (b4bbc <_Z14processCommandPKchb+0x4d4>)
   b4b74:	f005 fca9 	bl	ba4ca <_ZN5Print7printlnEPKc>
            delay(5);
   b4b78:	2005      	movs	r0, #5
   b4b7a:	f002 fcb3 	bl	b74e4 <delay>
            myFile.close();
   b4b7e:	480a      	ldr	r0, [pc, #40]	; (b4ba8 <_Z14processCommandPKchb+0x4c0>)
   b4b80:	f000 ffc8 	bl	b5b14 <_ZN7FatFile5closeEv>
            String modeStr[3] = {"LTE", "XBee", "Bluetooth"};
   b4b84:	f107 0058 	add.w	r0, r7, #88	; 0x58
   b4b88:	f005 fdf0 	bl	ba76c <_ZN6StringD1Ev>
   b4b8c:	f107 0048 	add.w	r0, r7, #72	; 0x48
   b4b90:	f005 fdec 	bl	ba76c <_ZN6StringD1Ev>
   b4b94:	f107 0038 	add.w	r0, r7, #56	; 0x38
   b4b98:	f005 fde8 	bl	ba76c <_ZN6StringD1Ev>
        if(sendAck){    //Transmit out acknowledgement if needed
   b4b9c:	e729      	b.n	b49f2 <_Z14processCommandPKchb+0x30a>
   b4b9e:	bf00      	nop
   b4ba0:	000be028 	.word	0x000be028
   b4ba4:	000be02c 	.word	0x000be02c
   b4ba8:	2003de80 	.word	0x2003de80
   b4bac:	000be039 	.word	0x000be039
   b4bb0:	000be03d 	.word	0x000be03d
   b4bb4:	000be042 	.word	0x000be042
   b4bb8:	000be04c 	.word	0x000be04c
   b4bbc:	2003de70 	.word	0x2003de70

000b4bc0 <_Z14dataLTEHandlerPKcS0_>:
void dataLTEHandler(const char *event, const char *data){
   b4bc0:	b510      	push	{r4, lr}
   b4bc2:	460c      	mov	r4, r1
    processCommand(data, 4,false);
   b4bc4:	2200      	movs	r2, #0
   b4bc6:	2104      	movs	r1, #4
   b4bc8:	4620      	mov	r0, r4
   b4bca:	f7ff fd8d 	bl	b46e8 <_Z14processCommandPKchb>
    if(logMessages){
   b4bce:	4b0b      	ldr	r3, [pc, #44]	; (b4bfc <_Z14dataLTEHandlerPKcS0_+0x3c>)
   b4bd0:	781b      	ldrb	r3, [r3, #0]
   b4bd2:	b193      	cbz	r3, b4bfa <_Z14dataLTEHandlerPKcS0_+0x3a>
   b4bd4:	480a      	ldr	r0, [pc, #40]	; (b4c00 <_Z14dataLTEHandlerPKcS0_+0x40>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4bd6:	7c03      	ldrb	r3, [r0, #16]
   b4bd8:	b92b      	cbnz	r3, b4be6 <_Z14dataLTEHandlerPKcS0_+0x26>
   b4bda:	490a      	ldr	r1, [pc, #40]	; (b4c04 <_Z14dataLTEHandlerPKcS0_+0x44>)
   b4bdc:	f244 2202 	movw	r2, #16898	; 0x4202
   b4be0:	3010      	adds	r0, #16
   b4be2:	f7ff fbcb 	bl	b437c <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received LTE Message: %s",data);
   b4be6:	4622      	mov	r2, r4
   b4be8:	4907      	ldr	r1, [pc, #28]	; (b4c08 <_Z14dataLTEHandlerPKcS0_+0x48>)
   b4bea:	4805      	ldr	r0, [pc, #20]	; (b4c00 <_Z14dataLTEHandlerPKcS0_+0x40>)
   b4bec:	f7ff fb3e 	bl	b426c <_ZN5Print8printlnfEPKcz>
}
   b4bf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        logFile.close();
   b4bf4:	4805      	ldr	r0, [pc, #20]	; (b4c0c <_Z14dataLTEHandlerPKcS0_+0x4c>)
   b4bf6:	f000 bf8d 	b.w	b5b14 <_ZN7FatFile5closeEv>
}
   b4bfa:	bd10      	pop	{r4, pc}
   b4bfc:	2003de6c 	.word	0x2003de6c
   b4c00:	2003de38 	.word	0x2003de38
   b4c04:	2003dde1 	.word	0x2003dde1
   b4c08:	000be061 	.word	0x000be061
   b4c0c:	2003de48 	.word	0x2003de48

000b4c10 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4c10:	b5b0      	push	{r4, r5, r7, lr}
    char btBuf[len+1];
   b4c12:	f101 0308 	add.w	r3, r1, #8
   b4c16:	f023 0307 	bic.w	r3, r3, #7
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4c1a:	af00      	add	r7, sp, #0
    char btBuf[len+1];
   b4c1c:	ebad 0d03 	sub.w	sp, sp, r3
static void BLEDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) {
   b4c20:	460c      	mov	r4, r1
    for (size_t ii = 0; ii < len; ii++) btBuf[ii] = data[ii];
   b4c22:	460a      	mov	r2, r1
   b4c24:	4601      	mov	r1, r0
   b4c26:	4668      	mov	r0, sp
   b4c28:	f007 f81b 	bl	bbc62 <memcpy>
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b4c2c:	eb0d 0304 	add.w	r3, sp, r4
    char btBuf[len+1];
   b4c30:	466d      	mov	r5, sp
    if(btBuf[len-1] != '\0') btBuf[len] = '\0';
   b4c32:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   b4c36:	b113      	cbz	r3, b4c3e <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e>
   b4c38:	2300      	movs	r3, #0
   b4c3a:	f80d 3004 	strb.w	r3, [sp, r4]
    Serial.print("New BT Command: ");
   b4c3e:	f006 f825 	bl	bac8c <_Z16_fetch_usbserialv>
   b4c42:	4911      	ldr	r1, [pc, #68]	; (b4c88 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x78>)
   b4c44:	f005 fc2e 	bl	ba4a4 <_ZN5Print5printEPKc>
    Serial.println(btBuf);
   b4c48:	f006 f820 	bl	bac8c <_Z16_fetch_usbserialv>
   b4c4c:	4629      	mov	r1, r5
   b4c4e:	f005 fc3c 	bl	ba4ca <_ZN5Print7printlnEPKc>
    processCommand(btBuf,1,true);
   b4c52:	2201      	movs	r2, #1
   b4c54:	4611      	mov	r1, r2
   b4c56:	4628      	mov	r0, r5
   b4c58:	f7ff fd46 	bl	b46e8 <_Z14processCommandPKchb>
    if(logMessages){
   b4c5c:	4b0b      	ldr	r3, [pc, #44]	; (b4c8c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7c>)
   b4c5e:	781b      	ldrb	r3, [r3, #0]
   b4c60:	b183      	cbz	r3, b4c84 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x74>
   b4c62:	480b      	ldr	r0, [pc, #44]	; (b4c90 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x80>)
        if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4c64:	7c03      	ldrb	r3, [r0, #16]
   b4c66:	b92b      	cbnz	r3, b4c74 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x64>
   b4c68:	490a      	ldr	r1, [pc, #40]	; (b4c94 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x84>)
   b4c6a:	f244 2202 	movw	r2, #16898	; 0x4202
   b4c6e:	3010      	adds	r0, #16
   b4c70:	f7ff fb84 	bl	b437c <_ZN7FatFile4openEPKci>
        logFile.printlnf("[INFO] Received BLE Message: %s",btBuf);
   b4c74:	4908      	ldr	r1, [pc, #32]	; (b4c98 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x88>)
   b4c76:	4806      	ldr	r0, [pc, #24]	; (b4c90 <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x80>)
   b4c78:	462a      	mov	r2, r5
   b4c7a:	f7ff faf7 	bl	b426c <_ZN5Print8printlnfEPKcz>
        logFile.close();
   b4c7e:	4807      	ldr	r0, [pc, #28]	; (b4c9c <_ZL15BLEDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8c>)
   b4c80:	f000 ff48 	bl	b5b14 <_ZN7FatFile5closeEv>
}
   b4c84:	46bd      	mov	sp, r7
   b4c86:	bdb0      	pop	{r4, r5, r7, pc}
   b4c88:	000be081 	.word	0x000be081
   b4c8c:	2003de6c 	.word	0x2003de6c
   b4c90:	2003de38 	.word	0x2003de38
   b4c94:	2003dde1 	.word	0x2003dde1
   b4c98:	000be092 	.word	0x000be092
   b4c9c:	2003de48 	.word	0x2003de48

000b4ca0 <_Z11XBeeHandlerv>:
void XBeeHandler(){  
   b4ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        Serial.println("New XBee Command:");
   b4ca4:	f8df 80c8 	ldr.w	r8, [pc, #200]	; b4d70 <_Z11XBeeHandlerv+0xd0>
        if(logMessages){
   b4ca8:	f8df 90c8 	ldr.w	r9, [pc, #200]	; b4d74 <_Z11XBeeHandlerv+0xd4>
   b4cac:	4d2c      	ldr	r5, [pc, #176]	; (b4d60 <_Z11XBeeHandlerv+0xc0>)
void XBeeHandler(){  
   b4cae:	b088      	sub	sp, #32
   b4cb0:	af00      	add	r7, sp, #0
    while(Serial1.available()){
   b4cb2:	f006 f997 	bl	bafe4 <_Z22__fetch_global_Serial1v>
   b4cb6:	6803      	ldr	r3, [r0, #0]
   b4cb8:	691b      	ldr	r3, [r3, #16]
   b4cba:	4798      	blx	r3
   b4cbc:	2800      	cmp	r0, #0
   b4cbe:	d04b      	beq.n	b4d58 <_Z11XBeeHandlerv+0xb8>
        String data = Serial1.readStringUntil('\n');
   b4cc0:	f006 f990 	bl	bafe4 <_Z22__fetch_global_Serial1v>
   b4cc4:	220a      	movs	r2, #10
   b4cc6:	4601      	mov	r1, r0
   b4cc8:	4638      	mov	r0, r7
   b4cca:	f005 fd37 	bl	ba73c <_ZN6Stream15readStringUntilEc>
        char buffer[data.length()];
   b4cce:	68bb      	ldr	r3, [r7, #8]
   b4cd0:	3307      	adds	r3, #7
   b4cd2:	f023 0307 	bic.w	r3, r3, #7
    }
   b4cd6:	466e      	mov	r6, sp
        char buffer[data.length()];
   b4cd8:	ebad 0d03 	sub.w	sp, sp, r3
   b4cdc:	46ea      	mov	sl, sp
        for(int i = 0 ; i < data.length(); i++) buffer[i] = data.charAt(i);
   b4cde:	2400      	movs	r4, #0
   b4ce0:	68bb      	ldr	r3, [r7, #8]
   b4ce2:	42a3      	cmp	r3, r4
   b4ce4:	d907      	bls.n	b4cf6 <_Z11XBeeHandlerv+0x56>
   b4ce6:	4621      	mov	r1, r4
   b4ce8:	4638      	mov	r0, r7
   b4cea:	f005 fe41 	bl	ba970 <_ZNK6String6charAtEj>
   b4cee:	f80a 0004 	strb.w	r0, [sl, r4]
   b4cf2:	3401      	adds	r4, #1
   b4cf4:	e7f4      	b.n	b4ce0 <_Z11XBeeHandlerv+0x40>
        processCommand(buffer,2,true);
   b4cf6:	2201      	movs	r2, #1
   b4cf8:	2102      	movs	r1, #2
   b4cfa:	4650      	mov	r0, sl
   b4cfc:	f7ff fcf4 	bl	b46e8 <_Z14processCommandPKchb>
        Serial.println("New XBee Command:");
   b4d00:	f005 ffc4 	bl	bac8c <_Z16_fetch_usbserialv>
   b4d04:	4641      	mov	r1, r8
   b4d06:	f005 fbe0 	bl	ba4ca <_ZN5Print7printlnEPKc>
        Serial.println(data); 
   b4d0a:	f005 ffbf 	bl	bac8c <_Z16_fetch_usbserialv>
   b4d0e:	6839      	ldr	r1, [r7, #0]
   b4d10:	f005 fbdb 	bl	ba4ca <_ZN5Print7printlnEPKc>
        if(logMessages){
   b4d14:	f899 3000 	ldrb.w	r3, [r9]
   b4d18:	b1cb      	cbz	r3, b4d4e <_Z11XBeeHandlerv+0xae>
            if(!logFile.isOpen()) logFile.open(filenameMessages, O_RDWR | O_CREAT | O_AT_END);
   b4d1a:	7c2b      	ldrb	r3, [r5, #16]
   b4d1c:	b92b      	cbnz	r3, b4d2a <_Z11XBeeHandlerv+0x8a>
   b4d1e:	4911      	ldr	r1, [pc, #68]	; (b4d64 <_Z11XBeeHandlerv+0xc4>)
   b4d20:	4811      	ldr	r0, [pc, #68]	; (b4d68 <_Z11XBeeHandlerv+0xc8>)
   b4d22:	f244 2202 	movw	r2, #16898	; 0x4202
   b4d26:	f7ff fb29 	bl	b437c <_ZN7FatFile4openEPKci>
            logFile.printlnf("[INFO] Received XBee Message: %s",data);
   b4d2a:	4639      	mov	r1, r7
   b4d2c:	f107 0010 	add.w	r0, r7, #16
   b4d30:	f005 fdb2 	bl	ba898 <_ZN6StringC1ERKS_>
   b4d34:	490d      	ldr	r1, [pc, #52]	; (b4d6c <_Z11XBeeHandlerv+0xcc>)
   b4d36:	f107 0210 	add.w	r2, r7, #16
   b4d3a:	4628      	mov	r0, r5
   b4d3c:	f7ff fa96 	bl	b426c <_ZN5Print8printlnfEPKcz>
   b4d40:	f107 0010 	add.w	r0, r7, #16
   b4d44:	f005 fd12 	bl	ba76c <_ZN6StringD1Ev>
            logFile.close();
   b4d48:	4807      	ldr	r0, [pc, #28]	; (b4d68 <_Z11XBeeHandlerv+0xc8>)
   b4d4a:	f000 fee3 	bl	b5b14 <_ZN7FatFile5closeEv>
        String data = Serial1.readStringUntil('\n');
   b4d4e:	4638      	mov	r0, r7
   b4d50:	f005 fd0c 	bl	ba76c <_ZN6StringD1Ev>
   b4d54:	46b5      	mov	sp, r6
    while(Serial1.available()){
   b4d56:	e7ac      	b.n	b4cb2 <_Z11XBeeHandlerv+0x12>
}
   b4d58:	3720      	adds	r7, #32
   b4d5a:	46bd      	mov	sp, r7
   b4d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b4d60:	2003de38 	.word	0x2003de38
   b4d64:	2003dde1 	.word	0x2003dde1
   b4d68:	2003de48 	.word	0x2003de48
   b4d6c:	000be0c4 	.word	0x000be0c4
   b4d70:	000be0b2 	.word	0x000be0b2
   b4d74:	2003de6c 	.word	0x2003de6c

000b4d78 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
   b4d78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4d7c:	e9d0 8900 	ldrd	r8, r9, [r0]
   b4d80:	4693      	mov	fp, r2
	if (max_size() - size() < __n)
   b4d82:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4d86:	eba9 0208 	sub.w	r2, r9, r8
	if (max_size() - size() < __n)
   b4d8a:	ebb3 0fe2 	cmp.w	r3, r2, asr #3
   b4d8e:	4607      	mov	r7, r0
   b4d90:	468a      	mov	sl, r1
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4d92:	ea4f 04e2 	mov.w	r4, r2, asr #3
	if (max_size() - size() < __n)
   b4d96:	d102      	bne.n	b4d9e <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x26>
	  __throw_length_error(__N(__s));
   b4d98:	4820      	ldr	r0, [pc, #128]	; (b4e1c <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xa4>)
   b4d9a:	f006 f949 	bl	bb030 <_ZSt20__throw_length_errorPKc>
   b4d9e:	2c01      	cmp	r4, #1
   b4da0:	4622      	mov	r2, r4
   b4da2:	bf38      	it	cc
   b4da4:	2201      	movcc	r2, #1
   b4da6:	18a4      	adds	r4, r4, r2
    { return __lhs.base() - __rhs.base(); }
   b4da8:	eba1 0508 	sub.w	r5, r1, r8
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b4dac:	d231      	bcs.n	b4e12 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9a>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4dae:	b394      	cbz	r4, b4e16 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x9e>
   b4db0:	429c      	cmp	r4, r3
   b4db2:	bf28      	it	cs
   b4db4:	461c      	movcs	r4, r3
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4db6:	00e0      	lsls	r0, r4, #3
   b4db8:	f7ff f96d 	bl	b4096 <_Znwj>
   b4dbc:	4606      	mov	r6, r0
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b4dbe:	1973      	adds	r3, r6, r5
   b4dc0:	bf1c      	itt	ne
   b4dc2:	e9db 0100 	ldrdne	r0, r1, [fp]
   b4dc6:	e9c3 0100 	strdne	r0, r1, [r3]
      if (__count > 0)
   b4dca:	2d00      	cmp	r5, #0
   b4dcc:	dd04      	ble.n	b4dd8 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x60>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b4dce:	462a      	mov	r2, r5
   b4dd0:	4641      	mov	r1, r8
   b4dd2:	4630      	mov	r0, r6
   b4dd4:	f006 ff53 	bl	bbc7e <memmove>
      ptrdiff_t __count = __last - __first;
   b4dd8:	eba9 090a 	sub.w	r9, r9, sl
	      ++__new_finish;
   b4ddc:	3508      	adds	r5, #8
      if (__count > 0)
   b4dde:	f1b9 0f00 	cmp.w	r9, #0
   b4de2:	4435      	add	r5, r6
   b4de4:	dd04      	ble.n	b4df0 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x78>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
   b4de6:	464a      	mov	r2, r9
   b4de8:	4651      	mov	r1, sl
   b4dea:	4628      	mov	r0, r5
   b4dec:	f006 ff39 	bl	bbc62 <memcpy>
      return __result + __count;
   b4df0:	444d      	add	r5, r9
	if (__p)
   b4df2:	f1b8 0f00 	cmp.w	r8, #0
   b4df6:	d005      	beq.n	b4e04 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x8c>
		    this->_M_impl._M_end_of_storage - __old_start);
   b4df8:	68b9      	ldr	r1, [r7, #8]
	::operator delete(__p
   b4dfa:	4640      	mov	r0, r8
   b4dfc:	eba1 0108 	sub.w	r1, r1, r8
   b4e00:	f7ff f94d 	bl	b409e <_ZdlPvj>
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b4e04:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
      this->_M_impl._M_finish = __new_finish;
   b4e08:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
   b4e0c:	60bc      	str	r4, [r7, #8]
    }
   b4e0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   b4e12:	461c      	mov	r4, r3
   b4e14:	e7cf      	b.n	b4db6 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x3e>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   b4e16:	4626      	mov	r6, r4
   b4e18:	e7d1      	b.n	b4dbe <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x46>
   b4e1a:	bf00      	nop
   b4e1c:	000bde65 	.word	0x000bde65

000b4e20 <_Z7BLEScani>:
void BLEScan(int BotNumber){
   b4e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4e24:	b099      	sub	sp, #100	; 0x64
   b4e26:	4605      	mov	r5, r0
    size_t count = BLE.scan(scanResults, SCAN_RESULT_COUNT);
   b4e28:	f003 f876 	bl	b7f18 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4e2c:	4960      	ldr	r1, [pc, #384]	; (b4fb0 <_Z7BLEScani+0x190>)
   b4e2e:	2214      	movs	r2, #20
   b4e30:	f003 f94c 	bl	b80cc <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>
	if (count > 0) {
   b4e34:	4606      	mov	r6, r0
   b4e36:	2800      	cmp	r0, #0
   b4e38:	f000 80b6 	beq.w	b4fa8 <_Z7BLEScani+0x188>
    const BleAddress& address() const {
        return address_;
    }

    const BleAdvertisingData& advertisingData() const {
        return advertisingData_;
   b4e3c:	4f5c      	ldr	r7, [pc, #368]	; (b4fb0 <_Z7BLEScani+0x190>)
            if (svcCount > 0 && foundServiceUuid == serviceUuid) {
   b4e3e:	f8df a1a8 	ldr.w	sl, [pc, #424]	; b4fe8 <_Z7BLEScani+0x1c8>
		for (uint8_t ii = 0; ii < count; ii++) {
   b4e42:	2400      	movs	r4, #0
            scanResults->advertisingData().customData(BLECustomData,CUSTOM_DATA_LEN);
   b4e44:	f107 0908 	add.w	r9, r7, #8
			BleUuid foundServiceUuid;
   b4e48:	eb04 0bc4 	add.w	fp, r4, r4, lsl #3
   b4e4c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
   b4e50:	f10b 0808 	add.w	r8, fp, #8
   b4e54:	a805      	add	r0, sp, #20
   b4e56:	44b8      	add	r8, r7
   b4e58:	f002 fcc2 	bl	b77e0 <_ZN8particle7BleUuidC1Ev>
			size_t svcCount = scanResults[ii].advertisingData().serviceUUID(&foundServiceUuid, 1);
   b4e5c:	2201      	movs	r2, #1
   b4e5e:	a905      	add	r1, sp, #20
   b4e60:	4640      	mov	r0, r8
   b4e62:	f003 fffb 	bl	b8e5c <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>
            scanResults->advertisingData().customData(BLECustomData,CUSTOM_DATA_LEN);
   b4e66:	2208      	movs	r2, #8
			size_t svcCount = scanResults[ii].advertisingData().serviceUUID(&foundServiceUuid, 1);
   b4e68:	9001      	str	r0, [sp, #4]
            scanResults->advertisingData().customData(BLECustomData,CUSTOM_DATA_LEN);
   b4e6a:	a903      	add	r1, sp, #12
   b4e6c:	4648      	mov	r0, r9
   b4e6e:	f002 fe6f 	bl	b7b50 <_ZNK8particle18BleAdvertisingData10customDataEPhj>
            if (svcCount > 0 && foundServiceUuid == serviceUuid) {
   b4e72:	9b01      	ldr	r3, [sp, #4]
   b4e74:	b32b      	cbz	r3, b4ec2 <_Z7BLEScani+0xa2>
   b4e76:	4651      	mov	r1, sl
   b4e78:	a805      	add	r0, sp, #20
   b4e7a:	f002 fd0c 	bl	b7896 <_ZNK8particle7BleUuideqERKS0_>
   b4e7e:	b300      	cbz	r0, b4ec2 <_Z7BLEScani+0xa2>
                if(BotNumber == -2){
   b4e80:	1caa      	adds	r2, r5, #2
   b4e82:	d129      	bne.n	b4ed8 <_Z7BLEScani+0xb8>
      : _M_current(__i) { }
   b4e84:	4a4b      	ldr	r2, [pc, #300]	; (b4fb4 <_Z7BLEScani+0x194>)
                        if(BLECustomData[0] == p.botNum){
   b4e86:	f89d 100c 	ldrb.w	r1, [sp, #12]
   b4e8a:	f8d2 e004 	ldr.w	lr, [r2, #4]
   b4e8e:	6813      	ldr	r3, [r2, #0]
                    for(PairBot p: BLEPair){
   b4e90:	4573      	cmp	r3, lr
   b4e92:	d005      	beq.n	b4ea0 <_Z7BLEScani+0x80>
                        if(BLECustomData[0] == p.botNum){
   b4e94:	f813 cb08 	ldrb.w	ip, [r3], #8
                            newBot = false;
   b4e98:	458c      	cmp	ip, r1
   b4e9a:	bf08      	it	eq
   b4e9c:	2000      	moveq	r0, #0
	return *this;
   b4e9e:	e7f7      	b.n	b4e90 <_Z7BLEScani+0x70>
                    if(newBot){
   b4ea0:	b178      	cbz	r0, b4ec2 <_Z7BLEScani+0xa2>
                        NewBot.botNum = BLECustomData[0];
   b4ea2:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   b4ea6:	6891      	ldr	r1, [r2, #8]
                        NewBot.rssi = scanResults->rssi();
   b4ea8:	f997 0020 	ldrsb.w	r0, [r7, #32]
   b4eac:	9011      	str	r0, [sp, #68]	; 0x44
   b4eae:	428b      	cmp	r3, r1
   b4eb0:	d00c      	beq.n	b4ecc <_Z7BLEScani+0xac>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b4eb2:	b11b      	cbz	r3, b4ebc <_Z7BLEScani+0x9c>
   b4eb4:	4601      	mov	r1, r0
   b4eb6:	9810      	ldr	r0, [sp, #64]	; 0x40
   b4eb8:	e883 0003 	stmia.w	r3, {r0, r1}
	    ++this->_M_impl._M_finish;
   b4ebc:	6853      	ldr	r3, [r2, #4]
   b4ebe:	3308      	adds	r3, #8
   b4ec0:	6053      	str	r3, [r2, #4]
		for (uint8_t ii = 0; ii < count; ii++) {
   b4ec2:	3401      	adds	r4, #1
   b4ec4:	b2e4      	uxtb	r4, r4
   b4ec6:	42b4      	cmp	r4, r6
   b4ec8:	d3be      	bcc.n	b4e48 <_Z7BLEScani+0x28>
   b4eca:	e06d      	b.n	b4fa8 <_Z7BLEScani+0x188>
	  _M_realloc_insert(end(), __x);
   b4ecc:	4839      	ldr	r0, [pc, #228]	; (b4fb4 <_Z7BLEScani+0x194>)
   b4ece:	aa10      	add	r2, sp, #64	; 0x40
   b4ed0:	4619      	mov	r1, r3
   b4ed2:	f7ff ff51 	bl	b4d78 <_ZNSt6vectorI7PairBotSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
   b4ed6:	e7f4      	b.n	b4ec2 <_Z7BLEScani+0xa2>
                if(BotNumber == -1 || BotNumber == BLECustomData[0]){   //Check if a particular bot number was specified
   b4ed8:	1c6b      	adds	r3, r5, #1
   b4eda:	d003      	beq.n	b4ee4 <_Z7BLEScani+0xc4>
   b4edc:	f89d 300c 	ldrb.w	r3, [sp, #12]
   b4ee0:	42ab      	cmp	r3, r5
   b4ee2:	d1ee      	bne.n	b4ec2 <_Z7BLEScani+0xa2>
                    peer = BLE.connect(scanResults[ii].address());
   b4ee4:	f003 f818 	bl	b7f18 <_ZN8particle14BleLocalDevice11getInstanceEv>
	  _M_refcount._M_swap(__r._M_refcount);
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b4ee8:	4d33      	ldr	r5, [pc, #204]	; (b4fb8 <_Z7BLEScani+0x198>)
   b4eea:	4601      	mov	r1, r0
   b4eec:	2301      	movs	r3, #1
   b4eee:	eb07 020b 	add.w	r2, r7, fp
   b4ef2:	a810      	add	r0, sp, #64	; 0x40
   b4ef4:	f004 fbea 	bl	b96cc <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
   b4ef8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   b4efa:	9c11      	ldr	r4, [sp, #68]	; 0x44
   b4efc:	602b      	str	r3, [r5, #0]
	if (__tmp != _M_pi)
   b4efe:	686b      	ldr	r3, [r5, #4]
   b4f00:	429c      	cmp	r4, r3
   b4f02:	d008      	beq.n	b4f16 <_Z7BLEScani+0xf6>
	    if (__tmp != 0)
   b4f04:	b114      	cbz	r4, b4f0c <_Z7BLEScani+0xec>
    { ++_M_use_count; }
   b4f06:	6863      	ldr	r3, [r4, #4]
   b4f08:	3301      	adds	r3, #1
   b4f0a:	6063      	str	r3, [r4, #4]
	    if (_M_pi != 0)
   b4f0c:	6868      	ldr	r0, [r5, #4]
   b4f0e:	b108      	cbz	r0, b4f14 <_Z7BLEScani+0xf4>
	      _M_pi->_M_release();
   b4f10:	f7ff f9f0 	bl	b42f4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b4f14:	606c      	str	r4, [r5, #4]
   b4f16:	a810      	add	r0, sp, #64	; 0x40
   b4f18:	f003 f94f 	bl	b81ba <_ZN8particle13BlePeerDeviceD1Ev>
				    if (peer.connected()) {
   b4f1c:	4826      	ldr	r0, [pc, #152]	; (b4fb8 <_Z7BLEScani+0x198>)
   b4f1e:	f002 ff6d 	bl	b7dfc <_ZNK8particle13BlePeerDevice9connectedEv>
   b4f22:	4604      	mov	r4, r0
   b4f24:	2800      	cmp	r0, #0
   b4f26:	d03f      	beq.n	b4fa8 <_Z7BLEScani+0x188>
                        meshPair = false;
   b4f28:	4b24      	ldr	r3, [pc, #144]	; (b4fbc <_Z7BLEScani+0x19c>)
      : _M_current(__i) { }
   b4f2a:	4d25      	ldr	r5, [pc, #148]	; (b4fc0 <_Z7BLEScani+0x1a0>)
   b4f2c:	2200      	movs	r2, #0
   b4f2e:	701a      	strb	r2, [r3, #0]
                        scanResults[ii].advertisingData().customData(bufName, BLE_MAX_ADV_DATA_LEN);
   b4f30:	a910      	add	r1, sp, #64	; 0x40
   b4f32:	221f      	movs	r2, #31
   b4f34:	4640      	mov	r0, r8
   b4f36:	f002 fe0b 	bl	b7b50 <_ZNK8particle18BleAdvertisingData10customDataEPhj>
					    peer.getCharacteristicByUUID(peerTxCharacteristic, txUuid);
   b4f3a:	4a22      	ldr	r2, [pc, #136]	; (b4fc4 <_Z7BLEScani+0x1a4>)
   b4f3c:	4922      	ldr	r1, [pc, #136]	; (b4fc8 <_Z7BLEScani+0x1a8>)
   b4f3e:	481e      	ldr	r0, [pc, #120]	; (b4fb8 <_Z7BLEScani+0x198>)
   b4f40:	f004 f858 	bl	b8ff4 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
					    peer.getCharacteristicByUUID(peerRxCharacteristic, rxUuid);
   b4f44:	4a21      	ldr	r2, [pc, #132]	; (b4fcc <_Z7BLEScani+0x1ac>)
   b4f46:	4922      	ldr	r1, [pc, #136]	; (b4fd0 <_Z7BLEScani+0x1b0>)
   b4f48:	481b      	ldr	r0, [pc, #108]	; (b4fb8 <_Z7BLEScani+0x198>)
   b4f4a:	f004 f853 	bl	b8ff4 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        peer.getCharacteristicByUUID(peerOffloadCharacteristic, offldUuid);
   b4f4e:	4a21      	ldr	r2, [pc, #132]	; (b4fd4 <_Z7BLEScani+0x1b4>)
   b4f50:	4921      	ldr	r1, [pc, #132]	; (b4fd8 <_Z7BLEScani+0x1b8>)
   b4f52:	4819      	ldr	r0, [pc, #100]	; (b4fb8 <_Z7BLEScani+0x198>)
   b4f54:	f004 f84e 	bl	b8ff4 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
						Serial.printlnf("Connected to Bot %d",bufName[0]);
   b4f58:	f005 fe98 	bl	bac8c <_Z16_fetch_usbserialv>
   b4f5c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   b4f60:	491e      	ldr	r1, [pc, #120]	; (b4fdc <_Z7BLEScani+0x1bc>)
   b4f62:	f7ff f983 	bl	b426c <_ZN5Print8printlnfEPKcz>
   b4f66:	6868      	ldr	r0, [r5, #4]
                            if(bufName[0] == w.botNum){
   b4f68:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   b4f6c:	682b      	ldr	r3, [r5, #0]
                        for(WaterBot w: WaterBots){
   b4f6e:	4298      	cmp	r0, r3
   b4f70:	d005      	beq.n	b4f7e <_Z7BLEScani+0x15e>
                            if(bufName[0] == w.botNum){
   b4f72:	f813 1b18 	ldrb.w	r1, [r3], #24
                                newBot = false;
   b4f76:	4291      	cmp	r1, r2
   b4f78:	bf08      	it	eq
   b4f7a:	2400      	moveq	r4, #0
	return *this;
   b4f7c:	e7f7      	b.n	b4f6e <_Z7BLEScani+0x14e>
                        if(newBot){
   b4f7e:	b19c      	cbz	r4, b4fa8 <_Z7BLEScani+0x188>
                            Serial.println("Found a new water bot ID");
   b4f80:	f005 fe84 	bl	bac8c <_Z16_fetch_usbserialv>
   b4f84:	4916      	ldr	r1, [pc, #88]	; (b4fe0 <_Z7BLEScani+0x1c0>)
   b4f86:	f005 faa0 	bl	ba4ca <_ZN5Print7printlnEPKc>
                            newWaterbot.BLEAvail = true;
   b4f8a:	2301      	movs	r3, #1
   b4f8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
                            WaterBots.push_back(newWaterbot);
   b4f90:	480b      	ldr	r0, [pc, #44]	; (b4fc0 <_Z7BLEScani+0x1a0>)
                            newWaterbot.botNum = bufName[0];
   b4f92:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   b4f96:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
                            WaterBots.push_back(newWaterbot);
   b4f9a:	a90a      	add	r1, sp, #40	; 0x28
   b4f9c:	f7ff fb8c 	bl	b46b8 <_ZNSt6vectorI8WaterBotSaIS0_EE9push_backERKS0_>
      { return __normal_iterator(_M_current - __n); }
   b4fa0:	686b      	ldr	r3, [r5, #4]
                            BLEBot = &WaterBots.back();
   b4fa2:	4a10      	ldr	r2, [pc, #64]	; (b4fe4 <_Z7BLEScani+0x1c4>)
   b4fa4:	3b18      	subs	r3, #24
   b4fa6:	6013      	str	r3, [r2, #0]
}
   b4fa8:	b019      	add	sp, #100	; 0x64
   b4faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b4fae:	bf00      	nop
   b4fb0:	2003dee8 	.word	0x2003dee8
   b4fb4:	2003dd08 	.word	0x2003dd08
   b4fb8:	2003dec4 	.word	0x2003dec4
   b4fbc:	2003de6d 	.word	0x2003de6d
   b4fc0:	2003dd34 	.word	0x2003dd34
   b4fc4:	2003dd68 	.word	0x2003dd68
   b4fc8:	2003dedc 	.word	0x2003dedc
   b4fcc:	2003dd54 	.word	0x2003dd54
   b4fd0:	2003ded4 	.word	0x2003ded4
   b4fd4:	2003dd80 	.word	0x2003dd80
   b4fd8:	2003decc 	.word	0x2003decc
   b4fdc:	000be0e5 	.word	0x000be0e5
   b4fe0:	000bdfff 	.word	0x000bdfff
   b4fe4:	2003dd04 	.word	0x2003dd04
   b4fe8:	2003dd40 	.word	0x2003dd40

000b4fec <_Z11startupPairv>:
void startupPair(){
   b4fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    startConnect = false;
   b4ff0:	4f2d      	ldr	r7, [pc, #180]	; (b50a8 <_Z11startupPairv+0xbc>)
      : _M_current(__i) { }
   b4ff2:	f8df 80c4 	ldr.w	r8, [pc, #196]	; b50b8 <_Z11startupPairv+0xcc>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   b4ff6:	f8df 90c4 	ldr.w	r9, [pc, #196]	; b50bc <_Z11startupPairv+0xd0>
   b4ffa:	2300      	movs	r3, #0
void startupPair(){
   b4ffc:	b085      	sub	sp, #20
    startConnect = false;
   b4ffe:	703b      	strb	r3, [r7, #0]
    while(!startConnect){
   b5000:	783b      	ldrb	r3, [r7, #0]
   b5002:	2b00      	cmp	r3, #0
   b5004:	d14d      	bne.n	b50a2 <_Z11startupPairv+0xb6>
        BLEScan(-2);
   b5006:	f06f 0001 	mvn.w	r0, #1
   b500a:	f7ff ff09 	bl	b4e20 <_Z7BLEScani>
        XBeeHandler();
   b500e:	f7ff fe47 	bl	b4ca0 <_Z11XBeeHandlerv>
        XBeeLTEPairSet();
   b5012:	f7ff facf 	bl	b45b4 <_Z14XBeeLTEPairSetv>
        delay(100);
   b5016:	2064      	movs	r0, #100	; 0x64
   b5018:	f002 fa64 	bl	b74e4 <delay>
        if(digitalRead(PAIR_BUTTON)){
   b501c:	2003      	movs	r0, #3
   b501e:	f005 ff5f 	bl	baee0 <digitalRead>
   b5022:	2800      	cmp	r0, #0
   b5024:	d0ec      	beq.n	b5000 <_Z11startupPairv+0x14>
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
   b5026:	e9d8 3000 	ldrd	r3, r0, [r8]
            int minRSSI = -999;
   b502a:	4a20      	ldr	r2, [pc, #128]	; (b50ac <_Z11startupPairv+0xc0>)
            int selectedBot = -1;
   b502c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
            for(PairBot pb: BLEPair){
   b5030:	4298      	cmp	r0, r3
   b5032:	d007      	beq.n	b5044 <_Z11startupPairv+0x58>
   b5034:	6859      	ldr	r1, [r3, #4]
   b5036:	781c      	ldrb	r4, [r3, #0]
                if(pb.rssi > minRSSI){
   b5038:	428a      	cmp	r2, r1
                    selectedBot = pb.botNum;
   b503a:	bfbc      	itt	lt
   b503c:	4625      	movlt	r5, r4
   b503e:	460a      	movlt	r2, r1
      operator++() _GLIBCXX_NOEXCEPT
   b5040:	3308      	adds	r3, #8
	return *this;
   b5042:	e7f5      	b.n	b5030 <_Z11startupPairv+0x44>
            if(selectedBot > 0){
   b5044:	2d00      	cmp	r5, #0
   b5046:	4e1a      	ldr	r6, [pc, #104]	; (b50b0 <_Z11startupPairv+0xc4>)
                meshPair = true;    //Did we find any bots over BLE
   b5048:	f8df a074 	ldr.w	sl, [pc, #116]	; b50c0 <_Z11startupPairv+0xd4>
   b504c:	f8df b074 	ldr.w	fp, [pc, #116]	; b50c4 <_Z11startupPairv+0xd8>
   b5050:	bfc4      	itt	gt
   b5052:	2301      	movgt	r3, #1
   b5054:	7033      	strbgt	r3, [r6, #0]
   b5056:	2400      	movs	r4, #0
            while(meshPair){
   b5058:	7833      	ldrb	r3, [r6, #0]
   b505a:	2b00      	cmp	r3, #0
   b505c:	d0d0      	beq.n	b5000 <_Z11startupPairv+0x14>
                BLEScan(selectedBot);
   b505e:	4628      	mov	r0, r5
   b5060:	f7ff fede 	bl	b4e20 <_Z7BLEScani>
                if(WaterBots.size() == 0 && BLETimeout == LTE_BKP_Time) Particle.publish("Bot1dat", "CCABhwd", PRIVATE);
   b5064:	e9d9 3200 	ldrd	r3, r2, [r9]
                BLETimeout++;
   b5068:	3401      	adds	r4, #1
                if(WaterBots.size() == 0 && BLETimeout == LTE_BKP_Time) Particle.publish("Bot1dat", "CCABhwd", PRIVATE);
   b506a:	429a      	cmp	r2, r3
                BLETimeout++;
   b506c:	b2e4      	uxtb	r4, r4
                if(WaterBots.size() == 0 && BLETimeout == LTE_BKP_Time) Particle.publish("Bot1dat", "CCABhwd", PRIVATE);
   b506e:	d113      	bne.n	b5098 <_Z11startupPairv+0xac>
   b5070:	2c64      	cmp	r4, #100	; 0x64
   b5072:	d111      	bne.n	b5098 <_Z11startupPairv+0xac>
   b5074:	f89a 3000 	ldrb.w	r3, [sl]
   b5078:	f88d 3000 	strb.w	r3, [sp]
   b507c:	a802      	add	r0, sp, #8
   b507e:	490d      	ldr	r1, [pc, #52]	; (b50b4 <_Z11startupPairv+0xc8>)
   b5080:	233c      	movs	r3, #60	; 0x3c
   b5082:	465a      	mov	r2, fp
   b5084:	f004 fede 	bl	b9e44 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	if (_M_pi != nullptr)
   b5088:	9803      	ldr	r0, [sp, #12]
   b508a:	b108      	cbz	r0, b5090 <_Z11startupPairv+0xa4>
	  _M_pi->_M_release();
   b508c:	f7ff f932 	bl	b42f4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
                delay(100);
   b5090:	2064      	movs	r0, #100	; 0x64
   b5092:	f002 fa27 	bl	b74e4 <delay>
            while(meshPair){
   b5096:	e7df      	b.n	b5058 <_Z11startupPairv+0x6c>
                if(BLETimeout > BLE_MAX_CONN_TIME) meshPair = false;
   b5098:	2cc8      	cmp	r4, #200	; 0xc8
   b509a:	bf84      	itt	hi
   b509c:	2300      	movhi	r3, #0
   b509e:	7033      	strbhi	r3, [r6, #0]
   b50a0:	e7f6      	b.n	b5090 <_Z11startupPairv+0xa4>
}
   b50a2:	b005      	add	sp, #20
   b50a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b50a8:	2003e63c 	.word	0x2003e63c
   b50ac:	fffffc19 	.word	0xfffffc19
   b50b0:	2003de6d 	.word	0x2003de6d
   b50b4:	000bde54 	.word	0x000bde54
   b50b8:	2003dd08 	.word	0x2003dd08
   b50bc:	2003dd34 	.word	0x2003dd34
   b50c0:	2003dd7c 	.word	0x2003dd7c
   b50c4:	000be0f9 	.word	0x000be0f9

000b50c8 <setup>:
void setup() {
   b50c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b50cc:	b090      	sub	sp, #64	; 0x40
    Serial.begin(115200);
   b50ce:	f005 fddd 	bl	bac8c <_Z16_fetch_usbserialv>
   b50d2:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b50d6:	f005 fdcd 	bl	bac74 <_ZN9USBSerial5beginEl>
    pinMode(D7, OUTPUT);
   b50da:	2101      	movs	r1, #1
   b50dc:	2007      	movs	r0, #7
   b50de:	f005 fed5 	bl	bae8c <pinMode>
	BLE.on();
   b50e2:	f002 ff19 	bl	b7f18 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b50e6:	f002 ff61 	bl	b7fac <_ZNK8particle14BleLocalDevice2onEv>
    peerTxCharacteristic.onDataReceived(BLEDataReceived, &peerTxCharacteristic);
   b50ea:	4a4d      	ldr	r2, [pc, #308]	; (b5220 <setup+0x158>)
   b50ec:	494d      	ldr	r1, [pc, #308]	; (b5224 <setup+0x15c>)
    logMessages = true;
   b50ee:	4f4e      	ldr	r7, [pc, #312]	; (b5228 <setup+0x160>)
    peerTxCharacteristic.onDataReceived(BLEDataReceived, &peerTxCharacteristic);
   b50f0:	4610      	mov	r0, r2
   b50f2:	f003 ffa9 	bl	b9048 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    peerOffloadCharacteristic.onDataReceived(offloadDataReceived, &peerOffloadCharacteristic);
   b50f6:	4a4d      	ldr	r2, [pc, #308]	; (b522c <setup+0x164>)
   b50f8:	494d      	ldr	r1, [pc, #308]	; (b5230 <setup+0x168>)
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   b50fa:	2400      	movs	r4, #0
   b50fc:	4610      	mov	r0, r2
   b50fe:	f003 ffa3 	bl	b9048 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
   b5102:	4622      	mov	r2, r4
   b5104:	494b      	ldr	r1, [pc, #300]	; (b5234 <setup+0x16c>)
   b5106:	484c      	ldr	r0, [pc, #304]	; (b5238 <setup+0x170>)
   b5108:	e9cd 4400 	strd	r4, r4, [sp]
   b510c:	2301      	movs	r3, #1
   b510e:	f002 f909 	bl	b7324 <spark_subscribe>
    offloadingMode = false;
   b5112:	4b4a      	ldr	r3, [pc, #296]	; (b523c <setup+0x174>)
   b5114:	701c      	strb	r4, [r3, #0]
    offloadingDone = false;
   b5116:	4b4a      	ldr	r3, [pc, #296]	; (b5240 <setup+0x178>)
   b5118:	701c      	strb	r4, [r3, #0]
    postStatus = false;
   b511a:	4b4a      	ldr	r3, [pc, #296]	; (b5244 <setup+0x17c>)
   b511c:	701c      	strb	r4, [r3, #0]
    statusTimeout = false;
   b511e:	4b4a      	ldr	r3, [pc, #296]	; (b5248 <setup+0x180>)
    logMessages = true;
   b5120:	2501      	movs	r5, #1
    statusTimeout = false;
   b5122:	701c      	strb	r4, [r3, #0]
    logMessages = true;
   b5124:	703d      	strb	r5, [r7, #0]
    snprintf(timestamp,16,"%02d%02d%04d%02d%02d%02d",Time.month(),Time.day(),Time.year(),Time.hour(),Time.minute(),Time.second());
   b5126:	f005 fce3 	bl	baaf0 <_ZN9TimeClass5monthEv>
   b512a:	9007      	str	r0, [sp, #28]
   b512c:	f005 fcd4 	bl	baad8 <_ZN9TimeClass3dayEv>
   b5130:	4606      	mov	r6, r0
   b5132:	f005 fce5 	bl	bab00 <_ZN9TimeClass4yearEv>
   b5136:	4680      	mov	r8, r0
   b5138:	f005 fcaa 	bl	baa90 <_ZN9TimeClass4hourEv>
   b513c:	4681      	mov	r9, r0
   b513e:	f005 fcb3 	bl	baaa8 <_ZN9TimeClass6minuteEv>
   b5142:	4682      	mov	sl, r0
   b5144:	f005 fcbc 	bl	baac0 <_ZN9TimeClass6secondEv>
   b5148:	9b07      	ldr	r3, [sp, #28]
   b514a:	4a40      	ldr	r2, [pc, #256]	; (b524c <setup+0x184>)
   b514c:	9600      	str	r6, [sp, #0]
   b514e:	e9cd a003 	strd	sl, r0, [sp, #12]
   b5152:	2110      	movs	r1, #16
   b5154:	e9cd 8901 	strd	r8, r9, [sp, #4]
   b5158:	a808      	add	r0, sp, #32
   b515a:	f002 f983 	bl	b7464 <snprintf>
    strcpy(filenameMessages,DEF_FILENAME);
   b515e:	493c      	ldr	r1, [pc, #240]	; (b5250 <setup+0x188>)
   b5160:	483c      	ldr	r0, [pc, #240]	; (b5254 <setup+0x18c>)
   b5162:	f006 fdf6 	bl	bbd52 <strcpy>
    strcat(filenameMessages,timestamp);
   b5166:	a908      	add	r1, sp, #32
   b5168:	483a      	ldr	r0, [pc, #232]	; (b5254 <setup+0x18c>)
   b516a:	f006 fdd9 	bl	bbd20 <strcat>
    strcat(filenameMessages,"_LOG.txt");
   b516e:	493a      	ldr	r1, [pc, #232]	; (b5258 <setup+0x190>)
   b5170:	4838      	ldr	r0, [pc, #224]	; (b5254 <setup+0x18c>)
   b5172:	f006 fdd5 	bl	bbd20 <strcat>
class SPISettings : public Printable {
   b5176:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b517a:	4c38      	ldr	r4, [pc, #224]	; (b525c <setup+0x194>)
   b517c:	4b38      	ldr	r3, [pc, #224]	; (b5260 <setup+0x198>)
   b517e:	930c      	str	r3, [sp, #48]	; 0x30
   b5180:	f504 668c 	add.w	r6, r4, #1120	; 0x460
   b5184:	4b37      	ldr	r3, [pc, #220]	; (b5264 <setup+0x19c>)
   b5186:	930e      	str	r3, [sp, #56]	; 0x38
   b5188:	2208      	movs	r2, #8
   b518a:	ab0c      	add	r3, sp, #48	; 0x30
   b518c:	f204 416c 	addw	r1, r4, #1132	; 0x46c
   b5190:	4630      	mov	r0, r6
   b5192:	f8ad 503c 	strh.w	r5, [sp, #60]	; 0x3c
   b5196:	f001 fbe3 	bl	b6960 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   b519a:	2800      	cmp	r0, #0
   b519c:	d038      	beq.n	b5210 <setup+0x148>
    m_blockDev = blockDev;
   b519e:	6026      	str	r6, [r4, #0]
    vwd()->close();
   b51a0:	f204 403c 	addw	r0, r4, #1084	; 0x43c
   b51a4:	f000 fcb6 	bl	b5b14 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   b51a8:	4629      	mov	r1, r5
   b51aa:	4620      	mov	r0, r4
   b51ac:	f001 fa82 	bl	b66b4 <_ZN9FatVolume4initEh>
   b51b0:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   b51b4:	4601      	mov	r1, r0
   b51b6:	b330      	cbz	r0, b5206 <setup+0x13e>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   b51b8:	4928      	ldr	r1, [pc, #160]	; (b525c <setup+0x194>)
   b51ba:	f201 403c 	addw	r0, r1, #1084	; 0x43c
   b51be:	f000 fae0 	bl	b5782 <_ZN7FatFile8openRootEP9FatVolume>
   b51c2:	b328      	cbz	r0, b5210 <setup+0x148>
    if (!dir->isDir()) {
   b51c4:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   b51c8:	f013 0f70 	tst.w	r3, #112	; 0x70
   b51cc:	d020      	beq.n	b5210 <setup+0x148>
    m_cwd = dir;
   b51ce:	4b26      	ldr	r3, [pc, #152]	; (b5268 <setup+0x1a0>)
   b51d0:	601d      	str	r5, [r3, #0]
        stop(fromISR);
   b51d2:	4c26      	ldr	r4, [pc, #152]	; (b526c <setup+0x1a4>)
    startupPair();
   b51d4:	f7ff ff0a 	bl	b4fec <_Z11startupPairv>
   b51d8:	4620      	mov	r0, r4
   b51da:	2100      	movs	r1, #0
   b51dc:	f7ff f800 	bl	b41e0 <_ZN5Timer4stopEj.isra.0>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_START, fromISR, 0, block, nullptr) : false;
   b51e0:	68a0      	ldr	r0, [r4, #8]
   b51e2:	b140      	cbz	r0, b51f6 <setup+0x12e>
   b51e4:	2300      	movs	r3, #0
   b51e6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   b51ea:	e9cd 2300 	strd	r2, r3, [sp]
   b51ee:	4619      	mov	r1, r3
   b51f0:	461a      	mov	r2, r3
   b51f2:	f001 fe8b 	bl	b6f0c <os_timer_change>
    at2.stop();
   b51f6:	481e      	ldr	r0, [pc, #120]	; (b5270 <setup+0x1a8>)
   b51f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   b51fc:	f7fe fff0 	bl	b41e0 <_ZN5Timer4stopEj.isra.0>
}
   b5200:	b010      	add	sp, #64	; 0x40
   b5202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return (part ? init(part) : init(1) || init(0))
   b5206:	4620      	mov	r0, r4
   b5208:	f001 fa54 	bl	b66b4 <_ZN9FatVolume4initEh>
   b520c:	2800      	cmp	r0, #0
   b520e:	d1d3      	bne.n	b51b8 <setup+0xf0>
        Serial.println("Error: could not connect to SD card!");
   b5210:	f005 fd3c 	bl	bac8c <_Z16_fetch_usbserialv>
   b5214:	4917      	ldr	r1, [pc, #92]	; (b5274 <setup+0x1ac>)
   b5216:	f005 f958 	bl	ba4ca <_ZN5Print7printlnEPKc>
        logMessages = false;
   b521a:	2300      	movs	r3, #0
   b521c:	703b      	strb	r3, [r7, #0]
   b521e:	e7d8      	b.n	b51d2 <setup+0x10a>
   b5220:	2003dedc 	.word	0x2003dedc
   b5224:	000b4c11 	.word	0x000b4c11
   b5228:	2003de6c 	.word	0x2003de6c
   b522c:	2003decc 	.word	0x2003decc
   b5230:	000b438d 	.word	0x000b438d
   b5234:	000b4bc1 	.word	0x000b4bc1
   b5238:	000bde54 	.word	0x000bde54
   b523c:	2003dec3 	.word	0x2003dec3
   b5240:	2003dec2 	.word	0x2003dec2
   b5244:	2003dee4 	.word	0x2003dee4
   b5248:	2003e63d 	.word	0x2003e63d
   b524c:	000be101 	.word	0x000be101
   b5250:	000be11a 	.word	0x000be11a
   b5254:	2003dde1 	.word	0x2003dde1
   b5258:	000be123 	.word	0x000be123
   b525c:	2003e1b8 	.word	0x2003e1b8
   b5260:	000be330 	.word	0x000be330
   b5264:	003d0900 	.word	0x003d0900
   b5268:	2003e644 	.word	0x2003e644
   b526c:	2003dd94 	.word	0x2003dd94
   b5270:	2003ddb0 	.word	0x2003ddb0
   b5274:	000be12c 	.word	0x000be12c

000b5278 <_Z13DataOffloaderv>:
void DataOffloader(){
   b5278:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (!logDir.open("/")) {
   b527a:	4940      	ldr	r1, [pc, #256]	; (b537c <_Z13DataOffloaderv+0x104>)
   b527c:	4840      	ldr	r0, [pc, #256]	; (b5380 <_Z13DataOffloaderv+0x108>)
void DataOffloader(){
   b527e:	b087      	sub	sp, #28
    if (!logDir.open("/")) {
   b5280:	2200      	movs	r2, #0
   b5282:	f7ff f87b 	bl	b437c <_ZN7FatFile4openEPKci>
   b5286:	2401      	movs	r4, #1
   b5288:	b948      	cbnz	r0, b529e <_Z13DataOffloaderv+0x26>
        offloadingDone = true;
   b528a:	4b3e      	ldr	r3, [pc, #248]	; (b5384 <_Z13DataOffloaderv+0x10c>)
   b528c:	701c      	strb	r4, [r3, #0]
        Serial.println("Error, could not open root directory on SD Card. Is it inserted?");
   b528e:	f005 fcfd 	bl	bac8c <_Z16_fetch_usbserialv>
   b5292:	493d      	ldr	r1, [pc, #244]	; (b5388 <_Z13DataOffloaderv+0x110>)
}
   b5294:	b007      	add	sp, #28
   b5296:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        Serial.println("Error, could not open root directory on SD Card. Is it inserted?");
   b529a:	f005 b916 	b.w	ba4ca <_ZN5Print7printlnEPKc>
   b529e:	4e3b      	ldr	r6, [pc, #236]	; (b538c <_Z13DataOffloaderv+0x114>)
        Serial.printlnf("Requested SD Card Data from Bot %d Over BLE\n",BLEBot->botNum);
   b52a0:	4d3b      	ldr	r5, [pc, #236]	; (b5390 <_Z13DataOffloaderv+0x118>)
   b52a2:	e9d6 2300 	ldrd	r2, r3, [r6]
   b52a6:	1a9b      	subs	r3, r3, r2
   b52a8:	4a3a      	ldr	r2, [pc, #232]	; (b5394 <_Z13DataOffloaderv+0x11c>)
   b52aa:	10db      	asrs	r3, r3, #3
   b52ac:	4353      	muls	r3, r2
    while(OffloadingBot <= WaterBots.size()){
   b52ae:	429c      	cmp	r4, r3
   b52b0:	d859      	bhi.n	b5366 <_Z13DataOffloaderv+0xee>
        snprintf(OffloadCommand,10,"CCB%ddmp",OffloadingBot);
   b52b2:	466f      	mov	r7, sp
   b52b4:	4a38      	ldr	r2, [pc, #224]	; (b5398 <_Z13DataOffloaderv+0x120>)
   b52b6:	4623      	mov	r3, r4
   b52b8:	210a      	movs	r1, #10
   b52ba:	4638      	mov	r0, r7
   b52bc:	f002 f8d2 	bl	b7464 <snprintf>
        memcpy(OffloadBuf,OffloadCommand,10);
   b52c0:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   b52c4:	ab03      	add	r3, sp, #12
   b52c6:	c303      	stmia	r3!, {r0, r1}
        peerRxCharacteristic.setValue(OffloadBuf,10);
   b52c8:	a903      	add	r1, sp, #12
        memcpy(OffloadBuf,OffloadCommand,10);
   b52ca:	801a      	strh	r2, [r3, #0]
        peerRxCharacteristic.setValue(OffloadBuf,10);
   b52cc:	4833      	ldr	r0, [pc, #204]	; (b539c <_Z13DataOffloaderv+0x124>)
   b52ce:	2300      	movs	r3, #0
   b52d0:	220a      	movs	r2, #10
   b52d2:	f002 fcbb 	bl	b7c4c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
        Serial.printlnf("Requested SD Card Data from Bot %d Over BLE\n",BLEBot->botNum);
   b52d6:	f005 fcd9 	bl	bac8c <_Z16_fetch_usbserialv>
   b52da:	682b      	ldr	r3, [r5, #0]
   b52dc:	4930      	ldr	r1, [pc, #192]	; (b53a0 <_Z13DataOffloaderv+0x128>)
   b52de:	781a      	ldrb	r2, [r3, #0]
   b52e0:	f7fe ffc4 	bl	b426c <_ZN5Print8printlnfEPKcz>
        delay(1000);
   b52e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b52e8:	f002 f8fc 	bl	b74e4 <delay>
        if(BLEBot->botNum != OffloadingBot){
   b52ec:	682b      	ldr	r3, [r5, #0]
   b52ee:	781b      	ldrb	r3, [r3, #0]
   b52f0:	42a3      	cmp	r3, r4
   b52f2:	d01e      	beq.n	b5332 <_Z13DataOffloaderv+0xba>
            Serial.printlnf("Currently connected to Bot %f, need to connect to Bot %d",BLEBot->botNum,OffloadingBot);
   b52f4:	f005 fcca 	bl	bac8c <_Z16_fetch_usbserialv>
   b52f8:	682a      	ldr	r2, [r5, #0]
   b52fa:	492a      	ldr	r1, [pc, #168]	; (b53a4 <_Z13DataOffloaderv+0x12c>)
   b52fc:	7812      	ldrb	r2, [r2, #0]
   b52fe:	4623      	mov	r3, r4
   b5300:	f7fe ffb4 	bl	b426c <_ZN5Print8printlnfEPKcz>
            BLE.disconnect();
   b5304:	f002 fe08 	bl	b7f18 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5308:	f003 fc06 	bl	b8b18 <_ZNK8particle14BleLocalDevice10disconnectEv>
            while(!BLE.connected()){
   b530c:	f002 fe04 	bl	b7f18 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5310:	f002 fe92 	bl	b8038 <_ZNK8particle14BleLocalDevice9connectedEv>
   b5314:	b930      	cbnz	r0, b5324 <_Z13DataOffloaderv+0xac>
                BLEScan(OffloadingBot);
   b5316:	4620      	mov	r0, r4
   b5318:	f7ff fd82 	bl	b4e20 <_Z7BLEScani>
                delay(50);
   b531c:	2032      	movs	r0, #50	; 0x32
   b531e:	f002 f8e1 	bl	b74e4 <delay>
            while(!BLE.connected()){
   b5322:	e7f3      	b.n	b530c <_Z13DataOffloaderv+0x94>
            Serial.printlnf("Successfully connected to Bot %d", BLEBot->botNum);
   b5324:	f005 fcb2 	bl	bac8c <_Z16_fetch_usbserialv>
   b5328:	682b      	ldr	r3, [r5, #0]
   b532a:	491f      	ldr	r1, [pc, #124]	; (b53a8 <_Z13DataOffloaderv+0x130>)
   b532c:	781a      	ldrb	r2, [r3, #0]
   b532e:	f7fe ff9d 	bl	b426c <_ZN5Print8printlnfEPKcz>
        Serial.printlnf("Starting file transfer from Bot %d",BLEBot->botNum);
   b5332:	f005 fcab 	bl	bac8c <_Z16_fetch_usbserialv>
   b5336:	682b      	ldr	r3, [r5, #0]
   b5338:	491c      	ldr	r1, [pc, #112]	; (b53ac <_Z13DataOffloaderv+0x134>)
   b533a:	781a      	ldrb	r2, [r3, #0]
        offloadingDone = false;
   b533c:	4f11      	ldr	r7, [pc, #68]	; (b5384 <_Z13DataOffloaderv+0x10c>)
        Serial.printlnf("Starting file transfer from Bot %d",BLEBot->botNum);
   b533e:	f7fe ff95 	bl	b426c <_ZN5Print8printlnfEPKcz>
        offloadingDone = false;
   b5342:	2300      	movs	r3, #0
   b5344:	703b      	strb	r3, [r7, #0]
        while(!offloadingDone) delay(100);
   b5346:	2064      	movs	r0, #100	; 0x64
   b5348:	f002 f8cc 	bl	b74e4 <delay>
   b534c:	783b      	ldrb	r3, [r7, #0]
   b534e:	2b00      	cmp	r3, #0
   b5350:	d0f9      	beq.n	b5346 <_Z13DataOffloaderv+0xce>
        Serial.printlnf("Finished transferring file from Bot %d",BLEBot->botNum);
   b5352:	f005 fc9b 	bl	bac8c <_Z16_fetch_usbserialv>
   b5356:	682b      	ldr	r3, [r5, #0]
   b5358:	4915      	ldr	r1, [pc, #84]	; (b53b0 <_Z13DataOffloaderv+0x138>)
   b535a:	781a      	ldrb	r2, [r3, #0]
        OffloadingBot++;
   b535c:	3401      	adds	r4, #1
        Serial.printlnf("Finished transferring file from Bot %d",BLEBot->botNum);
   b535e:	f7fe ff85 	bl	b426c <_ZN5Print8printlnfEPKcz>
        OffloadingBot++;
   b5362:	b2e4      	uxtb	r4, r4
    while(OffloadingBot <= WaterBots.size()){
   b5364:	e79d      	b.n	b52a2 <_Z13DataOffloaderv+0x2a>
    return m_attr;
   b5366:	4813      	ldr	r0, [pc, #76]	; (b53b4 <_Z13DataOffloaderv+0x13c>)
    if(logDir.isOpen()) logDir.close();
   b5368:	7c03      	ldrb	r3, [r0, #16]
   b536a:	b12b      	cbz	r3, b5378 <_Z13DataOffloaderv+0x100>
   b536c:	3010      	adds	r0, #16
}
   b536e:	b007      	add	sp, #28
   b5370:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    if(logDir.isOpen()) logDir.close();
   b5374:	f000 bbce 	b.w	b5b14 <_ZN7FatFile5closeEv>
}
   b5378:	b007      	add	sp, #28
   b537a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b537c:	000be151 	.word	0x000be151
   b5380:	2003de14 	.word	0x2003de14
   b5384:	2003dec2 	.word	0x2003dec2
   b5388:	000be153 	.word	0x000be153
   b538c:	2003dd34 	.word	0x2003dd34
   b5390:	2003dd04 	.word	0x2003dd04
   b5394:	aaaaaaab 	.word	0xaaaaaaab
   b5398:	000be194 	.word	0x000be194
   b539c:	2003ded4 	.word	0x2003ded4
   b53a0:	000be19d 	.word	0x000be19d
   b53a4:	000be1ca 	.word	0x000be1ca
   b53a8:	000be203 	.word	0x000be203
   b53ac:	000be224 	.word	0x000be224
   b53b0:	000be247 	.word	0x000be247
   b53b4:	2003de04 	.word	0x2003de04

000b53b8 <loop>:
void loop() {
   b53b8:	b570      	push	{r4, r5, r6, lr}
    if(postStatus){
   b53ba:	4d39      	ldr	r5, [pc, #228]	; (b54a0 <loop+0xe8>)
   b53bc:	782b      	ldrb	r3, [r5, #0]
void loop() {
   b53be:	b08a      	sub	sp, #40	; 0x28
    if(postStatus){
   b53c0:	b1a3      	cbz	r3, b53ec <loop+0x34>
        if(ControlledBot != NULL) sprintf(statusStr,"CCABspcB%d",ControlledBot->botNum);
   b53c2:	4b38      	ldr	r3, [pc, #224]	; (b54a4 <loop+0xec>)
   b53c4:	681b      	ldr	r3, [r3, #0]
   b53c6:	2b00      	cmp	r3, #0
   b53c8:	d051      	beq.n	b546e <loop+0xb6>
   b53ca:	781a      	ldrb	r2, [r3, #0]
   b53cc:	4936      	ldr	r1, [pc, #216]	; (b54a8 <loop+0xf0>)
   b53ce:	a802      	add	r0, sp, #8
   b53d0:	f002 f838 	bl	b7444 <sprintf>
        sendData(statusStr,0,true,true,statusTimeout);                                  
   b53d4:	4c35      	ldr	r4, [pc, #212]	; (b54ac <loop+0xf4>)
   b53d6:	7823      	ldrb	r3, [r4, #0]
   b53d8:	9300      	str	r3, [sp, #0]
   b53da:	2301      	movs	r3, #1
   b53dc:	461a      	mov	r2, r3
   b53de:	2100      	movs	r1, #0
   b53e0:	a802      	add	r0, sp, #8
   b53e2:	f7ff f87d 	bl	b44e0 <_Z8sendDataPKchbbb>
        postStatus = false;
   b53e6:	2300      	movs	r3, #0
   b53e8:	702b      	strb	r3, [r5, #0]
        statusTimeout = false;
   b53ea:	7023      	strb	r3, [r4, #0]
    if (BLE.connected()) {
   b53ec:	f002 fd94 	bl	b7f18 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b53f0:	f002 fe22 	bl	b8038 <_ZNK8particle14BleLocalDevice9connectedEv>
   b53f4:	4601      	mov	r1, r0
   b53f6:	2800      	cmp	r0, #0
   b53f8:	d03e      	beq.n	b5478 <loop+0xc0>
        sprintf(sendStr,"CCB1mtr%03d%03d",analogRead(JOYV_ADC)/22.75,analogRead(JOYV_ADC)/22.75);
   b53fa:	2012      	movs	r0, #18
   b53fc:	f005 fd83 	bl	baf06 <analogRead>
   b5400:	4604      	mov	r4, r0
   b5402:	2012      	movs	r0, #18
   b5404:	f005 fd7f 	bl	baf06 <analogRead>
   b5408:	4606      	mov	r6, r0
   b540a:	4620      	mov	r0, r4
   b540c:	f006 f87a 	bl	bb504 <__aeabi_i2d>
   b5410:	4b27      	ldr	r3, [pc, #156]	; (b54b0 <loop+0xf8>)
   b5412:	2200      	movs	r2, #0
   b5414:	f006 fa0a 	bl	bb82c <__aeabi_ddiv>
   b5418:	4604      	mov	r4, r0
   b541a:	4630      	mov	r0, r6
   b541c:	460d      	mov	r5, r1
   b541e:	f006 f871 	bl	bb504 <__aeabi_i2d>
   b5422:	4b23      	ldr	r3, [pc, #140]	; (b54b0 <loop+0xf8>)
   b5424:	2200      	movs	r2, #0
   b5426:	f006 fa01 	bl	bb82c <__aeabi_ddiv>
   b542a:	4622      	mov	r2, r4
   b542c:	e9cd 0100 	strd	r0, r1, [sp]
   b5430:	462b      	mov	r3, r5
   b5432:	4920      	ldr	r1, [pc, #128]	; (b54b4 <loop+0xfc>)
   b5434:	a802      	add	r0, sp, #8
   b5436:	f002 f805 	bl	b7444 <sprintf>
        sendData(sendStr,0,true,false,false);
   b543a:	2300      	movs	r3, #0
   b543c:	4619      	mov	r1, r3
   b543e:	9300      	str	r3, [sp, #0]
   b5440:	2201      	movs	r2, #1
   b5442:	a802      	add	r0, sp, #8
   b5444:	f7ff f84c 	bl	b44e0 <_Z8sendDataPKchbbb>
        digitalWrite(D7,HIGH);
   b5448:	2007      	movs	r0, #7
   b544a:	2101      	movs	r1, #1
   b544c:	f005 fd2f 	bl	baeae <digitalWrite>
        delay(250);
   b5450:	20fa      	movs	r0, #250	; 0xfa
   b5452:	f002 f847 	bl	b74e4 <delay>
    if(offloadingMode) DataOffloader();
   b5456:	4b18      	ldr	r3, [pc, #96]	; (b54b8 <loop+0x100>)
   b5458:	781b      	ldrb	r3, [r3, #0]
   b545a:	b10b      	cbz	r3, b5460 <loop+0xa8>
   b545c:	f7ff ff0c 	bl	b5278 <_Z13DataOffloaderv>
    XBeeHandler();
   b5460:	f7ff fc1e 	bl	b4ca0 <_Z11XBeeHandlerv>
}
   b5464:	b00a      	add	sp, #40	; 0x28
   b5466:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    XBeeLTEPairSet();
   b546a:	f7ff b8a3 	b.w	b45b4 <_Z14XBeeLTEPairSetv>
        else sprintf(statusStr,"CCABspcNB");
   b546e:	4913      	ldr	r1, [pc, #76]	; (b54bc <loop+0x104>)
   b5470:	a802      	add	r0, sp, #8
   b5472:	f006 fc6e 	bl	bbd52 <strcpy>
   b5476:	e7ad      	b.n	b53d4 <loop+0x1c>
        digitalWrite(D7,LOW);
   b5478:	2007      	movs	r0, #7
    	if (millis() - lastScan >= SCAN_PERIOD_MS) {
   b547a:	4c11      	ldr	r4, [pc, #68]	; (b54c0 <loop+0x108>)
        digitalWrite(D7,LOW);
   b547c:	f005 fd17 	bl	baeae <digitalWrite>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5480:	f001 fd84 	bl	b6f8c <HAL_Timer_Get_Milli_Seconds>
    	if (millis() - lastScan >= SCAN_PERIOD_MS) {
   b5484:	6823      	ldr	r3, [r4, #0]
   b5486:	1ac0      	subs	r0, r0, r3
   b5488:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   b548c:	d3e3      	bcc.n	b5456 <loop+0x9e>
   b548e:	f001 fd7d 	bl	b6f8c <HAL_Timer_Get_Milli_Seconds>
    		lastScan = millis();
   b5492:	6020      	str	r0, [r4, #0]
    		BLEScan(-1);
   b5494:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b5498:	f7ff fcc2 	bl	b4e20 <_Z7BLEScani>
   b549c:	e7db      	b.n	b5456 <loop+0x9e>
   b549e:	bf00      	nop
   b54a0:	2003dee4 	.word	0x2003dee4
   b54a4:	2003dd14 	.word	0x2003dd14
   b54a8:	000be26e 	.word	0x000be26e
   b54ac:	2003e63d 	.word	0x2003e63d
   b54b0:	4036c000 	.word	0x4036c000
   b54b4:	000be283 	.word	0x000be283
   b54b8:	2003dec3 	.word	0x2003dec3
   b54bc:	000be279 	.word	0x000be279
   b54c0:	2003de00 	.word	0x2003de00

000b54c4 <_GLOBAL__sub_I_SystemMode>:
   b54c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        val_(val) {
   b54c6:	4b51      	ldr	r3, [pc, #324]	; (b560c <_GLOBAL__sub_I_SystemMode+0x148>)
   b54c8:	4c51      	ldr	r4, [pc, #324]	; (b5610 <_GLOBAL__sub_I_SystemMode+0x14c>)
   b54ca:	2201      	movs	r2, #1
   b54cc:	701a      	strb	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b54ce:	4b51      	ldr	r3, [pc, #324]	; (b5614 <_GLOBAL__sub_I_SystemMode+0x150>)
   b54d0:	2200      	movs	r2, #0
   b54d2:	e9c3 2200 	strd	r2, r2, [r3]
    SleepResult() {}
   b54d6:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b54da:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b54dc:	2003      	movs	r0, #3
   b54de:	f001 fecd 	bl	b727c <set_system_mode>
const BleUuid serviceUuid("b4206910-dc4b-5743-c8b1-92d0e75182b0");
   b54e2:	494d      	ldr	r1, [pc, #308]	; (b5618 <_GLOBAL__sub_I_SystemMode+0x154>)
   b54e4:	484d      	ldr	r0, [pc, #308]	; (b561c <_GLOBAL__sub_I_SystemMode+0x158>)
   b54e6:	f002 fa55 	bl	b7994 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("b4206912-dc4b-5743-c8b1-92d0e75182b0");
   b54ea:	494d      	ldr	r1, [pc, #308]	; (b5620 <_GLOBAL__sub_I_SystemMode+0x15c>)
   b54ec:	484d      	ldr	r0, [pc, #308]	; (b5624 <_GLOBAL__sub_I_SystemMode+0x160>)
   b54ee:	f002 fa51 	bl	b7994 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("b4206913-dc4b-5743-c8b1-92d0e75182b0");
   b54f2:	494d      	ldr	r1, [pc, #308]	; (b5628 <_GLOBAL__sub_I_SystemMode+0x164>)
   b54f4:	484d      	ldr	r0, [pc, #308]	; (b562c <_GLOBAL__sub_I_SystemMode+0x168>)
   b54f6:	f002 fa4d 	bl	b7994 <_ZN8particle7BleUuidC1EPKc>
const BleUuid offldUuid("b4206914-dc4b-5743-c8b1-92d0e75182b0");
   b54fa:	494d      	ldr	r1, [pc, #308]	; (b5630 <_GLOBAL__sub_I_SystemMode+0x16c>)
   b54fc:	484d      	ldr	r0, [pc, #308]	; (b5634 <_GLOBAL__sub_I_SystemMode+0x170>)
   b54fe:	f002 fa49 	bl	b7994 <_ZN8particle7BleUuidC1EPKc>
   b5502:	2514      	movs	r5, #20
            : rssi_(BLE_RSSI_INVALID) {
   b5504:	267f      	movs	r6, #127	; 0x7f
   b5506:	4620      	mov	r0, r4
   b5508:	f002 f95f 	bl	b77ca <_ZN8particle10BleAddressC1Ev>
   b550c:	f104 0008 	add.w	r0, r4, #8
   b5510:	f003 f96d 	bl	b87ee <_ZN8particle18BleAdvertisingDataC1Ev>
   b5514:	f104 0014 	add.w	r0, r4, #20
   b5518:	f003 f969 	bl	b87ee <_ZN8particle18BleAdvertisingDataC1Ev>
BleScanResult scanResults[SCAN_RESULT_COUNT];
   b551c:	3d01      	subs	r5, #1
   b551e:	f884 6020 	strb.w	r6, [r4, #32]
   b5522:	f104 0424 	add.w	r4, r4, #36	; 0x24
   b5526:	d1ee      	bne.n	b5506 <_GLOBAL__sub_I_SystemMode+0x42>
BleCharacteristic peerTxCharacteristic;
   b5528:	4843      	ldr	r0, [pc, #268]	; (b5638 <_GLOBAL__sub_I_SystemMode+0x174>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b552a:	4c44      	ldr	r4, [pc, #272]	; (b563c <_GLOBAL__sub_I_SystemMode+0x178>)
   b552c:	f002 fb68 	bl	b7c00 <_ZN8particle17BleCharacteristicC1Ev>
BleCharacteristic peerRxCharacteristic;
   b5530:	4843      	ldr	r0, [pc, #268]	; (b5640 <_GLOBAL__sub_I_SystemMode+0x17c>)
   b5532:	f002 fb65 	bl	b7c00 <_ZN8particle17BleCharacteristicC1Ev>
BleCharacteristic peerOffloadCharacteristic;
   b5536:	4843      	ldr	r0, [pc, #268]	; (b5644 <_GLOBAL__sub_I_SystemMode+0x180>)
   b5538:	f002 fb62 	bl	b7c00 <_ZN8particle17BleCharacteristicC1Ev>
BlePeerDevice peer;
   b553c:	4842      	ldr	r0, [pc, #264]	; (b5648 <_GLOBAL__sub_I_SystemMode+0x184>)
   b553e:	f002 fc3b 	bl	b7db8 <_ZN8particle13BlePeerDeviceC1Ev>
   b5542:	7823      	ldrb	r3, [r4, #0]
   b5544:	f3bf 8f5b 	dmb	ish
   b5548:	07db      	lsls	r3, r3, #31
   b554a:	d40a      	bmi.n	b5562 <_GLOBAL__sub_I_SystemMode+0x9e>
   b554c:	4620      	mov	r0, r4
   b554e:	f7fe fda8 	bl	b40a2 <__cxa_guard_acquire>
   b5552:	b130      	cbz	r0, b5562 <_GLOBAL__sub_I_SystemMode+0x9e>
   b5554:	483d      	ldr	r0, [pc, #244]	; (b564c <_GLOBAL__sub_I_SystemMode+0x188>)
   b5556:	2101      	movs	r1, #1
   b5558:	f005 f81c 	bl	ba594 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b555c:	4620      	mov	r0, r4
   b555e:	f7fe fda5 	bl	b40ac <__cxa_guard_release>
  explicit SdFat(SPIClass* spiPort) {
   b5562:	4b3b      	ldr	r3, [pc, #236]	; (b5650 <_GLOBAL__sub_I_SystemMode+0x18c>)
	    _M_invoker = &_My_handler::_M_invoke;
   b5564:	4e3b      	ldr	r6, [pc, #236]	; (b5654 <_GLOBAL__sub_I_SystemMode+0x190>)
	    _M_manager = &_My_handler::_M_manager;
   b5566:	4d3c      	ldr	r5, [pc, #240]	; (b5658 <_GLOBAL__sub_I_SystemMode+0x194>)
Timer at1(5000,actionTimer5);
   b5568:	483c      	ldr	r0, [pc, #240]	; (b565c <_GLOBAL__sub_I_SystemMode+0x198>)
	    _M_invoker = &_My_handler::_M_invoke;
   b556a:	9603      	str	r6, [sp, #12]
   b556c:	2264      	movs	r2, #100	; 0x64
   b556e:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
  {
   b5572:	4a3b      	ldr	r2, [pc, #236]	; (b5660 <_GLOBAL__sub_I_SystemMode+0x19c>)
   b5574:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   b5578:	2201      	movs	r2, #1
   b557a:	2400      	movs	r4, #0
   b557c:	f883 2474 	strb.w	r2, [r3, #1140]	; 0x474
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   b5580:	4a32      	ldr	r2, [pc, #200]	; (b564c <_GLOBAL__sub_I_SystemMode+0x188>)
   b5582:	605c      	str	r4, [r3, #4]
   b5584:	f8c3 443c 	str.w	r4, [r3, #1084]	; 0x43c
   b5588:	f8c3 4468 	str.w	r4, [r3, #1128]	; 0x468
   b558c:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
   b5590:	f8a3 447c 	strh.w	r4, [r3, #1148]	; 0x47c
   b5594:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
    Print() : write_error(0) {}
   b5598:	4b32      	ldr	r3, [pc, #200]	; (b5664 <_GLOBAL__sub_I_SystemMode+0x1a0>)
  File() {}
   b559a:	4a33      	ldr	r2, [pc, #204]	; (b5668 <_GLOBAL__sub_I_SystemMode+0x1a4>)
   b559c:	605c      	str	r4, [r3, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b559e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b55a2:	6099      	str	r1, [r3, #8]
   b55a4:	601a      	str	r2, [r3, #0]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b55a6:	611c      	str	r4, [r3, #16]
   b55a8:	4b30      	ldr	r3, [pc, #192]	; (b566c <_GLOBAL__sub_I_SystemMode+0x1a8>)
   b55aa:	e9c3 4101 	strd	r4, r1, [r3, #4]
   b55ae:	601a      	str	r2, [r3, #0]
   b55b0:	611c      	str	r4, [r3, #16]
   b55b2:	4b2f      	ldr	r3, [pc, #188]	; (b5670 <_GLOBAL__sub_I_SystemMode+0x1ac>)
   b55b4:	e9c3 4101 	strd	r4, r1, [r3, #4]
   b55b8:	601a      	str	r2, [r3, #0]
   b55ba:	611c      	str	r4, [r3, #16]
	: _M_start(), _M_finish(), _M_end_of_storage()
   b55bc:	4b2d      	ldr	r3, [pc, #180]	; (b5674 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   b55be:	e9c3 4400 	strd	r4, r4, [r3]
   b55c2:	609c      	str	r4, [r3, #8]
   b55c4:	4b2c      	ldr	r3, [pc, #176]	; (b5678 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   b55c6:	e9c3 4400 	strd	r4, r4, [r3]
   b55ca:	609c      	str	r4, [r3, #8]
   b55cc:	4b2b      	ldr	r3, [pc, #172]	; (b567c <_GLOBAL__sub_I_SystemMode+0x1b8>)
   b55ce:	e9c3 4400 	strd	r4, r4, [r3]
   b55d2:	609c      	str	r4, [r3, #8]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b55d4:	4b2a      	ldr	r3, [pc, #168]	; (b5680 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   b55d6:	9300      	str	r3, [sp, #0]
   b55d8:	466a      	mov	r2, sp
   b55da:	4623      	mov	r3, r4
   b55dc:	f241 3188 	movw	r1, #5000	; 0x1388
	    _M_manager = &_My_handler::_M_manager;
   b55e0:	9502      	str	r5, [sp, #8]
   b55e2:	f7fe fe9b 	bl	b431c <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b55e6:	4668      	mov	r0, sp
   b55e8:	f7fe fe4e 	bl	b4288 <_ZNSt14_Function_baseD1Ev>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   b55ec:	4b25      	ldr	r3, [pc, #148]	; (b5684 <_GLOBAL__sub_I_SystemMode+0x1c0>)
   b55ee:	9300      	str	r3, [sp, #0]
Timer at2(60000,actionTimer60);
   b55f0:	466a      	mov	r2, sp
   b55f2:	4623      	mov	r3, r4
   b55f4:	f64e 2160 	movw	r1, #60000	; 0xea60
   b55f8:	4823      	ldr	r0, [pc, #140]	; (b5688 <_GLOBAL__sub_I_SystemMode+0x1c4>)
	    _M_manager = &_My_handler::_M_manager;
   b55fa:	e9cd 5602 	strd	r5, r6, [sp, #8]
   b55fe:	f7fe fe8d 	bl	b431c <_ZN5TimerC1EjSt8functionIFvvEEb>
    class function<_Res(_ArgTypes...)>
   b5602:	4668      	mov	r0, sp
   b5604:	f7fe fe40 	bl	b4288 <_ZNSt14_Function_baseD1Ev>
   b5608:	b004      	add	sp, #16
   b560a:	bd70      	pop	{r4, r5, r6, pc}
   b560c:	2003dd7c 	.word	0x2003dd7c
   b5610:	2003dee8 	.word	0x2003dee8
   b5614:	2003dd28 	.word	0x2003dd28
   b5618:	000be293 	.word	0x000be293
   b561c:	2003dd40 	.word	0x2003dd40
   b5620:	000be2b8 	.word	0x000be2b8
   b5624:	2003dd54 	.word	0x2003dd54
   b5628:	000be2dd 	.word	0x000be2dd
   b562c:	2003dd68 	.word	0x2003dd68
   b5630:	000be302 	.word	0x000be302
   b5634:	2003dd80 	.word	0x2003dd80
   b5638:	2003dedc 	.word	0x2003dedc
   b563c:	2003dcf8 	.word	0x2003dcf8
   b5640:	2003ded4 	.word	0x2003ded4
   b5644:	2003decc 	.word	0x2003decc
   b5648:	2003dec4 	.word	0x2003dec4
   b564c:	2003dcfc 	.word	0x2003dcfc
   b5650:	2003e1b8 	.word	0x2003e1b8
   b5654:	000b41dd 	.word	0x000b41dd
   b5658:	000b41c9 	.word	0x000b41c9
   b565c:	2003dd94 	.word	0x2003dd94
   b5660:	000be330 	.word	0x000be330
   b5664:	2003de70 	.word	0x2003de70
   b5668:	000be358 	.word	0x000be358
   b566c:	2003de38 	.word	0x2003de38
   b5670:	2003de04 	.word	0x2003de04
   b5674:	2003dd34 	.word	0x2003dd34
   b5678:	2003dd1c 	.word	0x2003dd1c
   b567c:	2003dd08 	.word	0x2003dd08
   b5680:	000b40d1 	.word	0x000b40d1
   b5684:	000b418d 	.word	0x000b418d
   b5688:	2003ddb0 	.word	0x2003ddb0

000b568c <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   b568c:	b538      	push	{r3, r4, r5, lr}
   b568e:	4604      	mov	r4, r0
   b5690:	460d      	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   b5692:	2224      	movs	r2, #36	; 0x24
   b5694:	2100      	movs	r1, #0
   b5696:	f006 fb0c 	bl	bbcb2 <memset>

  m_vol = vol;
   b569a:	60a5      	str	r5, [r4, #8]
  uint32_t fatStartBlock() const {
    return m_fatStartBlock;
  }
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType() const {
    return m_fatType;
   b569c:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
   b569e:	2b10      	cmp	r3, #16
   b56a0:	d003      	beq.n	b56aa <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
   b56a2:	2b20      	cmp	r3, #32
   b56a4:	d006      	beq.n	b56b4 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
   b56a6:	2000      	movs	r0, #0
  m_flags = F_READ;
  return true;

fail:
  return false;
}
   b56a8:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
   b56aa:	2320      	movs	r3, #32
  m_flags = F_READ;
   b56ac:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
   b56ae:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b56b0:	70a0      	strb	r0, [r4, #2]
  return true;
   b56b2:	e7f9      	b.n	b56a8 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
   b56b4:	2340      	movs	r3, #64	; 0x40
   b56b6:	e7f9      	b.n	b56ac <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

000b56b8 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   b56b8:	b510      	push	{r4, lr}
   b56ba:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b56bc:	3024      	adds	r0, #36	; 0x24
   b56be:	f000 feeb 	bl	b6498 <_ZN8FatCache4syncEv>
   b56c2:	b128      	cbz	r0, b56d0 <_ZN9FatVolume9cacheSyncEv+0x18>
   b56c4:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   b56c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b56cc:	f000 bee4 	b.w	b6498 <_ZN8FatCache4syncEv>
  }
   b56d0:	bd10      	pop	{r4, pc}

000b56d2 <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
   b56d2:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b56d4:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   b56d6:	f043 0304 	orr.w	r3, r3, #4
   b56da:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b56dc:	f100 0210 	add.w	r2, r0, #16
   b56e0:	6880      	ldr	r0, [r0, #8]
   b56e2:	f000 bf8f 	b.w	b6604 <_ZN9FatVolume15allocateClusterEmPm>
	...

000b56e8 <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
   b56e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
   b56ec:	7801      	ldrb	r1, [r0, #0]
   b56ee:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   b56f2:	4604      	mov	r4, r0
  if (isRootFixed()) {
   b56f4:	d003      	beq.n	b56fe <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
   b56f6:	2600      	movs	r6, #0
}
   b56f8:	4630      	mov	r0, r6
   b56fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   b56fe:	6942      	ldr	r2, [r0, #20]
   b5700:	4b17      	ldr	r3, [pc, #92]	; (b5760 <_ZN7FatFile13addDirClusterEv+0x78>)
   b5702:	429a      	cmp	r2, r3
   b5704:	d2f7      	bcs.n	b56f6 <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   b5706:	f7ff ffe4 	bl	b56d2 <_ZN7FatFile10addClusterEv>
   b570a:	4606      	mov	r6, r0
   b570c:	2800      	cmp	r0, #0
   b570e:	d0f2      	beq.n	b56f6 <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   b5710:	6921      	ldr	r1, [r4, #16]
   b5712:	68a0      	ldr	r0, [r4, #8]
   b5714:	f000 ff0b 	bl	b652e <_ZNK9FatVolume17clusterFirstBlockEm>
   b5718:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   b571a:	68a0      	ldr	r0, [r4, #8]
   b571c:	2205      	movs	r2, #5
   b571e:	4639      	mov	r1, r7
   b5720:	3024      	adds	r0, #36	; 0x24
   b5722:	f000 fee1 	bl	b64e8 <_ZN8FatCache4readEmh>
  if (!pc) {
   b5726:	4680      	mov	r8, r0
   b5728:	2800      	cmp	r0, #0
   b572a:	d0e4      	beq.n	b56f6 <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   b572c:	4629      	mov	r1, r5
   b572e:	f44f 7200 	mov.w	r2, #512	; 0x200
   b5732:	f006 fabe 	bl	bbcb2 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b5736:	2501      	movs	r5, #1
   b5738:	68a3      	ldr	r3, [r4, #8]
    return m_blocksPerCluster;
   b573a:	791a      	ldrb	r2, [r3, #4]
   b573c:	42aa      	cmp	r2, r5
   b573e:	d909      	bls.n	b5754 <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   b5740:	6818      	ldr	r0, [r3, #0]
   b5742:	4642      	mov	r2, r8
   b5744:	19e9      	adds	r1, r5, r7
   b5746:	f001 fa3c 	bl	b6bc2 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   b574a:	2800      	cmp	r0, #0
   b574c:	d0d3      	beq.n	b56f6 <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b574e:	3501      	adds	r5, #1
   b5750:	b2ed      	uxtb	r5, r5
   b5752:	e7f1      	b.n	b5738 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   b5754:	6963      	ldr	r3, [r4, #20]
   b5756:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   b575a:	6163      	str	r3, [r4, #20]
  return true;
   b575c:	e7cc      	b.n	b56f8 <_ZN7FatFile13addDirClusterEv+0x10>
   b575e:	bf00      	nop
   b5760:	001ffe00 	.word	0x001ffe00

000b5764 <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   b5764:	b510      	push	{r4, lr}
   b5766:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   b5768:	6880      	ldr	r0, [r0, #8]
   b576a:	460a      	mov	r2, r1
   b576c:	3024      	adds	r0, #36	; 0x24
   b576e:	69a1      	ldr	r1, [r4, #24]
   b5770:	f000 feba 	bl	b64e8 <_ZN8FatCache4readEmh>
  if (!pc) {
   b5774:	b120      	cbz	r0, b5780 <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
   b5776:	88a3      	ldrh	r3, [r4, #4]
   b5778:	f003 030f 	and.w	r3, r3, #15
   b577c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
   b5780:	bd10      	pop	{r4, pc}

000b5782 <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
   b5782:	7803      	ldrb	r3, [r0, #0]
   b5784:	b90b      	cbnz	r3, b578a <_ZN7FatFile8openRootEP9FatVolume+0x8>
   b5786:	f7ff bf81 	b.w	b568c <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
   b578a:	2000      	movs	r0, #0
   b578c:	4770      	bx	lr

000b578e <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   b578e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return m_attr;
   b5792:	7803      	ldrb	r3, [r0, #0]
   b5794:	4604      	mov	r4, r0
   b5796:	4688      	mov	r8, r1
   b5798:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   b579a:	2b00      	cmp	r3, #0
   b579c:	d05d      	beq.n	b585a <_ZN7FatFile4readEPvj+0xcc>
   b579e:	7882      	ldrb	r2, [r0, #2]
   b57a0:	07d1      	lsls	r1, r2, #31
   b57a2:	d55a      	bpl.n	b585a <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   b57a4:	071a      	lsls	r2, r3, #28
   b57a6:	d52d      	bpl.n	b5804 <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   b57a8:	69c3      	ldr	r3, [r0, #28]
   b57aa:	6942      	ldr	r2, [r0, #20]
   b57ac:	1a9b      	subs	r3, r3, r2
   b57ae:	429d      	cmp	r5, r3
   b57b0:	bf28      	it	cs
   b57b2:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   b57b4:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   b57b6:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b57ba:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   b57be:	2e00      	cmp	r6, #0
   b57c0:	f000 808f 	beq.w	b58e2 <_ZN7FatFile4readEPvj+0x154>
    return m_attr & FILE_ATTR_ROOT_FIXED;
   b57c4:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   b57c6:	6963      	ldr	r3, [r4, #20]
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b57c8:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   b57ca:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   b57cc:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b57d0:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   b57d4:	d51f      	bpl.n	b5816 <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b57d6:	6a00      	ldr	r0, [r0, #32]
   b57d8:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   b57da:	68a0      	ldr	r0, [r4, #8]
   b57dc:	f1ba 0f00 	cmp.w	sl, #0
   b57e0:	d142      	bne.n	b5868 <_ZN7FatFile4readEPvj+0xda>
   b57e2:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b57e6:	d33f      	bcc.n	b5868 <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
   b57e8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b57ea:	4299      	cmp	r1, r3
   b57ec:	d03c      	beq.n	b5868 <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   b57ee:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b57f2:	d252      	bcs.n	b589a <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   b57f4:	6800      	ldr	r0, [r0, #0]
   b57f6:	4642      	mov	r2, r8
   b57f8:	f001 f95a 	bl	b6ab0 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   b57fc:	b368      	cbz	r0, b585a <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   b57fe:	f44f 7700 	mov.w	r7, #512	; 0x200
   b5802:	e044      	b.n	b588e <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   b5804:	069b      	lsls	r3, r3, #26
   b5806:	d5d5      	bpl.n	b57b4 <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   b5808:	6883      	ldr	r3, [r0, #8]
   b580a:	891a      	ldrh	r2, [r3, #8]
   b580c:	6943      	ldr	r3, [r0, #20]
   b580e:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   b5812:	b29b      	uxth	r3, r3
   b5814:	e7cb      	b.n	b57ae <_ZN7FatFile4readEPvj+0x20>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   b5816:	f890 9005 	ldrb.w	r9, [r0, #5]
   b581a:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   b581e:	f1ba 0f00 	cmp.w	sl, #0
   b5822:	d108      	bne.n	b5836 <_ZN7FatFile4readEPvj+0xa8>
   b5824:	f1b9 0f00 	cmp.w	r9, #0
   b5828:	d105      	bne.n	b5836 <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   b582a:	b95b      	cbnz	r3, b5844 <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b582c:	0651      	lsls	r1, r2, #25
    return m_rootDirStart;
   b582e:	bf4c      	ite	mi
   b5830:	6a03      	ldrmi	r3, [r0, #32]
   b5832:	6a23      	ldrpl	r3, [r4, #32]
   b5834:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b5836:	6921      	ldr	r1, [r4, #16]
   b5838:	68a0      	ldr	r0, [r4, #8]
   b583a:	f000 fe78 	bl	b652e <_ZNK9FatVolume17clusterFirstBlockEm>
   b583e:	eb09 0100 	add.w	r1, r9, r0
   b5842:	e7ca      	b.n	b57da <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b5844:	6921      	ldr	r1, [r4, #16]
   b5846:	465a      	mov	r2, fp
   b5848:	f000 fe77 	bl	b653a <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   b584c:	2800      	cmp	r0, #0
   b584e:	db04      	blt.n	b585a <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   b5850:	d1f1      	bne.n	b5836 <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   b5852:	7823      	ldrb	r3, [r4, #0]
   b5854:	f013 0f70 	tst.w	r3, #112	; 0x70
   b5858:	d143      	bne.n	b58e2 <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   b585a:	7863      	ldrb	r3, [r4, #1]
   b585c:	f043 0302 	orr.w	r3, r3, #2
   b5860:	7063      	strb	r3, [r4, #1]
  return -1;
   b5862:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b5866:	e03d      	b.n	b58e4 <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   b5868:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   b586c:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   b586e:	f04f 0200 	mov.w	r2, #0
   b5872:	f100 0024 	add.w	r0, r0, #36	; 0x24
   b5876:	bf28      	it	cs
   b5878:	4637      	movcs	r7, r6
   b587a:	f000 fe35 	bl	b64e8 <_ZN8FatCache4readEmh>
      if (!pc) {
   b587e:	2800      	cmp	r0, #0
   b5880:	d0eb      	beq.n	b585a <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   b5882:	eb00 010a 	add.w	r1, r0, sl
   b5886:	463a      	mov	r2, r7
   b5888:	4640      	mov	r0, r8
   b588a:	f006 f9ea 	bl	bbc62 <memcpy>
    m_curPosition += n;
   b588e:	6963      	ldr	r3, [r4, #20]
   b5890:	443b      	add	r3, r7
    dst += n;
   b5892:	44b8      	add	r8, r7
    m_curPosition += n;
   b5894:	6163      	str	r3, [r4, #20]
    toRead -= n;
   b5896:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   b5898:	e791      	b.n	b57be <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   b589a:	7822      	ldrb	r2, [r4, #0]
   b589c:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   b589e:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   b58a2:	d406      	bmi.n	b58b2 <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   b58a4:	7902      	ldrb	r2, [r0, #4]
   b58a6:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   b58aa:	b2d2      	uxtb	r2, r2
   b58ac:	4592      	cmp	sl, r2
   b58ae:	bf28      	it	cs
   b58b0:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b58b2:	4299      	cmp	r1, r3
      n = 512*nb;
   b58b4:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b58b8:	d208      	bcs.n	b58cc <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   b58ba:	68a0      	ldr	r0, [r4, #8]
   b58bc:	4653      	mov	r3, sl
   b58be:	6800      	ldr	r0, [r0, #0]
   b58c0:	4642      	mov	r2, r8
   b58c2:	f001 f93d 	bl	b6b40 <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   b58c6:	2800      	cmp	r0, #0
   b58c8:	d1e1      	bne.n	b588e <_ZN7FatFile4readEPvj+0x100>
   b58ca:	e7c6      	b.n	b585a <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b58cc:	4453      	add	r3, sl
   b58ce:	428b      	cmp	r3, r1
   b58d0:	d9f3      	bls.n	b58ba <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   b58d2:	3024      	adds	r0, #36	; 0x24
   b58d4:	9101      	str	r1, [sp, #4]
   b58d6:	f000 fddf 	bl	b6498 <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   b58da:	9901      	ldr	r1, [sp, #4]
   b58dc:	2800      	cmp	r0, #0
   b58de:	d1ec      	bne.n	b58ba <_ZN7FatFile4readEPvj+0x12c>
   b58e0:	e7bb      	b.n	b585a <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   b58e2:	1ba8      	subs	r0, r5, r6
}
   b58e4:	b003      	add	sp, #12
   b58e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b58ea <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   b58ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   b58ec:	2201      	movs	r2, #1
   b58ee:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   b58f2:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   b58f6:	4604      	mov	r4, r0
   b58f8:	f7ff ff49 	bl	b578e <_ZN7FatFile4readEPvj>
   b58fc:	2801      	cmp	r0, #1
   b58fe:	bf0a      	itet	eq
   b5900:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b5904:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   b5908:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   b590c:	b002      	add	sp, #8
   b590e:	bd70      	pop	{r4, r5, r6, pc}

000b5910 <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b5910:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b5912:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   b5914:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b5918:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b591a:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   b591e:	d000      	beq.n	b5922 <_ZN7FatFile12readDirCacheEb+0x12>
   b5920:	b999      	cbnz	r1, b594a <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   b5922:	2201      	movs	r2, #1
   b5924:	f10d 0107 	add.w	r1, sp, #7
   b5928:	4620      	mov	r0, r4
   b592a:	f7ff ff30 	bl	b578e <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   b592e:	b240      	sxtb	r0, r0
   b5930:	2801      	cmp	r0, #1
   b5932:	d002      	beq.n	b593a <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   b5934:	2000      	movs	r0, #0
}
   b5936:	b003      	add	sp, #12
   b5938:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   b593a:	6963      	ldr	r3, [r4, #20]
   b593c:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   b593e:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   b5940:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   b5942:	3030      	adds	r0, #48	; 0x30
   b5944:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   b5948:	e7f5      	b.n	b5936 <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   b594a:	3320      	adds	r3, #32
   b594c:	e7f7      	b.n	b593e <_ZN7FatFile12readDirCacheEb+0x2e>

000b594e <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   b594e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
   b5952:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   b5954:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   b5956:	4604      	mov	r4, r0
   b5958:	460d      	mov	r5, r1
  if (!isOpen()) {
   b595a:	b162      	cbz	r2, b5976 <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   b595c:	6940      	ldr	r0, [r0, #20]
   b595e:	4288      	cmp	r0, r1
   b5960:	d002      	beq.n	b5968 <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   b5962:	b919      	cbnz	r1, b596c <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   b5964:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   b5966:	6165      	str	r5, [r4, #20]
    return true;
   b5968:	2001      	movs	r0, #1
   b596a:	e006      	b.n	b597a <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   b596c:	0716      	lsls	r6, r2, #28
   b596e:	d506      	bpl.n	b597e <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   b5970:	69e3      	ldr	r3, [r4, #28]
   b5972:	428b      	cmp	r3, r1
   b5974:	d20b      	bcs.n	b598e <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   b5976:	6127      	str	r7, [r4, #16]
  return false;
   b5978:	2000      	movs	r0, #0
}
   b597a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   b597e:	0691      	lsls	r1, r2, #26
   b5980:	d505      	bpl.n	b598e <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
   b5982:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   b5984:	891b      	ldrh	r3, [r3, #8]
   b5986:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   b598a:	d9ec      	bls.n	b5966 <_ZN7FatFile7seekSetEm+0x18>
   b598c:	e7f3      	b.n	b5976 <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b598e:	f8d4 c008 	ldr.w	ip, [r4, #8]
   b5992:	f89c 6006 	ldrb.w	r6, [ip, #6]
   b5996:	1e43      	subs	r3, r0, #1
   b5998:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b599c:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b599e:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b59a0:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   b59a2:	42b3      	cmp	r3, r6
   b59a4:	d800      	bhi.n	b59a8 <_ZN7FatFile7seekSetEm+0x5a>
   b59a6:	b998      	cbnz	r0, b59d0 <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b59a8:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
   b59aa:	bf4c      	ite	mi
   b59ac:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   b59b0:	6a23      	ldrpl	r3, [r4, #32]
   b59b2:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b59b4:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   b59b8:	2e00      	cmp	r6, #0
   b59ba:	d0d4      	beq.n	b5966 <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b59bc:	6921      	ldr	r1, [r4, #16]
   b59be:	68a0      	ldr	r0, [r4, #8]
   b59c0:	4642      	mov	r2, r8
   b59c2:	f000 fdba 	bl	b653a <_ZN9FatVolume6fatGetEmPm>
   b59c6:	2800      	cmp	r0, #0
   b59c8:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   b59cc:	dcf4      	bgt.n	b59b8 <_ZN7FatFile7seekSetEm+0x6a>
   b59ce:	e7d2      	b.n	b5976 <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   b59d0:	1af6      	subs	r6, r6, r3
   b59d2:	e7ef      	b.n	b59b4 <_ZN7FatFile7seekSetEm+0x66>

000b59d4 <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   b59d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b59d6:	460f      	mov	r7, r1
   b59d8:	4604      	mov	r4, r0
   b59da:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
   b59dc:	2100      	movs	r1, #0
   b59de:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   b59e0:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
   b59e2:	f006 f966 	bl	bbcb2 <memset>
  m_vol = dirFile->m_vol;
   b59e6:	68b8      	ldr	r0, [r7, #8]
   b59e8:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   b59ea:	80a5      	strh	r5, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   b59ec:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
   b59f0:	6a3b      	ldr	r3, [r7, #32]
   b59f2:	60e3      	str	r3, [r4, #12]
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for a normal file or subdirectory else false.
 */
static inline uint8_t DIR_IS_FILE_OR_SUBDIR(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
   b59f4:	016a      	lsls	r2, r5, #5
   b59f6:	eb00 1545 	add.w	r5, r0, r5, lsl #5
   b59fa:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   b59fe:	071f      	lsls	r7, r3, #28
   b5a00:	d444      	bmi.n	b5a8c <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   b5a02:	f003 0317 	and.w	r3, r3, #23
   b5a06:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   b5a08:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
   b5a0c:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   b5a10:	bf04      	itt	eq
   b5a12:	f043 0308 	orreq.w	r3, r3, #8
   b5a16:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   b5a18:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b5a1c:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   b5a1e:	f006 0303 	and.w	r3, r6, #3
   b5a22:	2b01      	cmp	r3, #1
   b5a24:	d02c      	beq.n	b5a80 <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
   b5a26:	2b02      	cmp	r3, #2
   b5a28:	d028      	beq.n	b5a7c <_ZN7FatFile15openCachedEntryEPS_tih+0xa8>
   b5a2a:	bb7b      	cbnz	r3, b5a8c <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      if (oflag & O_TRUNC) {
   b5a2c:	0571      	lsls	r1, r6, #21
   b5a2e:	d42d      	bmi.n	b5a8c <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      m_flags = F_READ;
   b5a30:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   b5a32:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   b5a34:	78a1      	ldrb	r1, [r4, #2]
   b5a36:	078b      	lsls	r3, r1, #30
   b5a38:	d504      	bpl.n	b5a44 <_ZN7FatFile15openCachedEntryEPS_tih+0x70>
    return m_attr & FILE_ATTR_SUBDIR;
   b5a3a:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
   b5a3c:	06df      	lsls	r7, r3, #27
   b5a3e:	d425      	bmi.n	b5a8c <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
   b5a40:	07dd      	lsls	r5, r3, #31
   b5a42:	d423      	bmi.n	b5a8c <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   b5a44:	11b3      	asrs	r3, r6, #6
   b5a46:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   b5a4a:	f006 0508 	and.w	r5, r6, #8
   b5a4e:	432b      	orrs	r3, r5
   b5a50:	430b      	orrs	r3, r1
   b5a52:	70a3      	strb	r3, [r4, #2]
    return m_lbn;
   b5a54:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   b5a56:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b5a58:	1883      	adds	r3, r0, r2
   b5a5a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   b5a5e:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b5a62:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   b5a66:	0572      	lsls	r2, r6, #21
   b5a68:	d513      	bpl.n	b5a92 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b5a6a:	b959      	cbnz	r1, b5a84 <_ZN7FatFile15openCachedEntryEPS_tih+0xb0>
    m_flags |= F_FILE_DIR_DIRTY;
   b5a6c:	78a3      	ldrb	r3, [r4, #2]
   b5a6e:	f043 0304 	orr.w	r3, r3, #4
   b5a72:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b5a74:	0473      	lsls	r3, r6, #17
   b5a76:	d410      	bmi.n	b5a9a <_ZN7FatFile15openCachedEntryEPS_tih+0xc6>
  return true;
   b5a78:	2001      	movs	r0, #1
}
   b5a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   b5a7c:	2303      	movs	r3, #3
   b5a7e:	e7d8      	b.n	b5a32 <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
      m_flags = F_WRITE;
   b5a80:	2302      	movs	r3, #2
   b5a82:	e7d6      	b.n	b5a32 <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b5a84:	f000 fdf9 	bl	b667a <_ZN9FatVolume9freeChainEm>
   b5a88:	2800      	cmp	r0, #0
   b5a8a:	d1ef      	bne.n	b5a6c <_ZN7FatFile15openCachedEntryEPS_tih+0x98>
  m_attr = FILE_ATTR_CLOSED;
   b5a8c:	2000      	movs	r0, #0
   b5a8e:	7020      	strb	r0, [r4, #0]
  return false;
   b5a90:	e7f3      	b.n	b5a7a <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_firstCluster = firstCluster;
   b5a92:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   b5a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b5a96:	61e3      	str	r3, [r4, #28]
   b5a98:	e7ec      	b.n	b5a74 <_ZN7FatFile15openCachedEntryEPS_tih+0xa0>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b5a9a:	69e1      	ldr	r1, [r4, #28]
   b5a9c:	4620      	mov	r0, r4
   b5a9e:	f7ff ff56 	bl	b594e <_ZN7FatFile7seekSetEm>
   b5aa2:	2800      	cmp	r0, #0
   b5aa4:	d1e8      	bne.n	b5a78 <_ZN7FatFile15openCachedEntryEPS_tih+0xa4>
   b5aa6:	e7f1      	b.n	b5a8c <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>

000b5aa8 <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   b5aa8:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   b5aaa:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   b5aac:	4604      	mov	r4, r0
  if (!isOpen()) {
   b5aae:	b90b      	cbnz	r3, b5ab4 <_ZN7FatFile4syncEv+0xc>
    return true;
   b5ab0:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   b5ab2:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   b5ab4:	7883      	ldrb	r3, [r0, #2]
   b5ab6:	075a      	lsls	r2, r3, #29
   b5ab8:	d523      	bpl.n	b5b02 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b5aba:	2101      	movs	r1, #1
   b5abc:	f7ff fe52 	bl	b5764 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b5ac0:	4605      	mov	r5, r0
   b5ac2:	b928      	cbnz	r0, b5ad0 <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   b5ac4:	7863      	ldrb	r3, [r4, #1]
   b5ac6:	f043 0301 	orr.w	r3, r3, #1
   b5aca:	7063      	strb	r3, [r4, #1]
  return false;
   b5acc:	2000      	movs	r0, #0
   b5ace:	e7f0      	b.n	b5ab2 <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b5ad0:	7803      	ldrb	r3, [r0, #0]
   b5ad2:	2be5      	cmp	r3, #229	; 0xe5
   b5ad4:	d0f6      	beq.n	b5ac4 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   b5ad6:	7823      	ldrb	r3, [r4, #0]
   b5ad8:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   b5ada:	bf44      	itt	mi
   b5adc:	69e3      	ldrmi	r3, [r4, #28]
   b5ade:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   b5ae0:	6a23      	ldr	r3, [r4, #32]
   b5ae2:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   b5ae4:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b5ae6:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   b5ae8:	4b09      	ldr	r3, [pc, #36]	; (b5b10 <_ZN7FatFile4syncEv+0x68>)
   b5aea:	681b      	ldr	r3, [r3, #0]
   b5aec:	b12b      	cbz	r3, b5afa <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   b5aee:	f100 0116 	add.w	r1, r0, #22
   b5af2:	3018      	adds	r0, #24
   b5af4:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   b5af6:	8b2b      	ldrh	r3, [r5, #24]
   b5af8:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   b5afa:	78a3      	ldrb	r3, [r4, #2]
   b5afc:	f023 0304 	bic.w	r3, r3, #4
   b5b00:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   b5b02:	68a0      	ldr	r0, [r4, #8]
   b5b04:	f7ff fdd8 	bl	b56b8 <_ZN9FatVolume9cacheSyncEv>
   b5b08:	2800      	cmp	r0, #0
   b5b0a:	d0db      	beq.n	b5ac4 <_ZN7FatFile4syncEv+0x1c>
   b5b0c:	e7d0      	b.n	b5ab0 <_ZN7FatFile4syncEv+0x8>
   b5b0e:	bf00      	nop
   b5b10:	2003e640 	.word	0x2003e640

000b5b14 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   b5b14:	b510      	push	{r4, lr}
   b5b16:	4604      	mov	r4, r0
  bool rtn = sync();
   b5b18:	f7ff ffc6 	bl	b5aa8 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   b5b1c:	2300      	movs	r3, #0
   b5b1e:	7023      	strb	r3, [r4, #0]
}
   b5b20:	bd10      	pop	{r4, pc}

000b5b22 <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b5b22:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5b24:	b093      	sub	sp, #76	; 0x4c
   b5b26:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b5b28:	2300      	movs	r3, #0
   b5b2a:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   b5b2c:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b5b2e:	9201      	str	r2, [sp, #4]
   b5b30:	4606      	mov	r6, r0
   b5b32:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   b5b34:	b113      	cbz	r3, b5b3c <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
   b5b36:	2000      	movs	r0, #0
}
   b5b38:	b013      	add	sp, #76	; 0x4c
   b5b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   b5b3c:	780b      	ldrb	r3, [r1, #0]
   b5b3e:	f013 0f70 	tst.w	r3, #112	; 0x70
   b5b42:	d0f8      	beq.n	b5b36 <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
   b5b44:	7813      	ldrb	r3, [r2, #0]
   b5b46:	2b2f      	cmp	r3, #47	; 0x2f
   b5b48:	d112      	bne.n	b5b70 <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
   b5b4a:	9a01      	ldr	r2, [sp, #4]
   b5b4c:	7813      	ldrb	r3, [r2, #0]
   b5b4e:	2b2f      	cmp	r3, #47	; 0x2f
   b5b50:	d102      	bne.n	b5b58 <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
   b5b52:	3201      	adds	r2, #1
   b5b54:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   b5b56:	e7f8      	b.n	b5b4a <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
   b5b58:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
   b5b5a:	b91b      	cbnz	r3, b5b64 <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
   b5b5c:	4630      	mov	r0, r6
   b5b5e:	f7ff fe10 	bl	b5782 <_ZN7FatFile8openRootEP9FatVolume>
   b5b62:	e7e9      	b.n	b5b38 <_ZN7FatFile4openEPS_PKci+0x16>
    return m_attr;
   b5b64:	a809      	add	r0, sp, #36	; 0x24
   b5b66:	f7ff fd91 	bl	b568c <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   b5b6a:	2800      	cmp	r0, #0
   b5b6c:	d0e3      	beq.n	b5b36 <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
   b5b6e:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   b5b70:	9801      	ldr	r0, [sp, #4]
   b5b72:	aa01      	add	r2, sp, #4
   b5b74:	a903      	add	r1, sp, #12
   b5b76:	f000 f931 	bl	b5ddc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   b5b7a:	2800      	cmp	r0, #0
   b5b7c:	d0db      	beq.n	b5b36 <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
   b5b7e:	9b01      	ldr	r3, [sp, #4]
   b5b80:	781b      	ldrb	r3, [r3, #0]
   b5b82:	b19b      	cbz	r3, b5bac <_ZN7FatFile4openEPS_PKci+0x8a>
    if (!open(dirFile, &fname, O_RDONLY)) {
   b5b84:	2300      	movs	r3, #0
   b5b86:	aa03      	add	r2, sp, #12
   b5b88:	4621      	mov	r1, r4
   b5b8a:	4630      	mov	r0, r6
   b5b8c:	f000 faba 	bl	b6104 <_ZN7FatFile4openEPS_P7fname_ti>
   b5b90:	2800      	cmp	r0, #0
   b5b92:	d0d0      	beq.n	b5b36 <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir = *this;
   b5b94:	4635      	mov	r5, r6
   b5b96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5b98:	ac09      	add	r4, sp, #36	; 0x24
   b5b9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5b9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5b9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5ba0:	682b      	ldr	r3, [r5, #0]
   b5ba2:	6023      	str	r3, [r4, #0]
    close();
   b5ba4:	4630      	mov	r0, r6
   b5ba6:	f7ff ffb5 	bl	b5b14 <_ZN7FatFile5closeEv>
  while (1) {
   b5baa:	e7e0      	b.n	b5b6e <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
   b5bac:	463b      	mov	r3, r7
   b5bae:	aa03      	add	r2, sp, #12
   b5bb0:	4621      	mov	r1, r4
   b5bb2:	4630      	mov	r0, r6
   b5bb4:	f000 faa6 	bl	b6104 <_ZN7FatFile4openEPS_P7fname_ti>
   b5bb8:	e7be      	b.n	b5b38 <_ZN7FatFile4openEPS_PKci+0x16>

000b5bba <_ZN7FatFile6removeEPS_PKc>:
bool FatFile::remove(FatFile* dirFile, const char* path) {
   b5bba:	b500      	push	{lr}
   b5bbc:	b08b      	sub	sp, #44	; 0x2c
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b5bbe:	2300      	movs	r3, #0
   b5bc0:	460a      	mov	r2, r1
   b5bc2:	9301      	str	r3, [sp, #4]
  if (!file.open(dirFile, path, O_WRONLY)) {
   b5bc4:	4601      	mov	r1, r0
   b5bc6:	2301      	movs	r3, #1
   b5bc8:	a801      	add	r0, sp, #4
   b5bca:	f7ff ffaa 	bl	b5b22 <_ZN7FatFile4openEPS_PKci>
   b5bce:	b110      	cbz	r0, b5bd6 <_ZN7FatFile6removeEPS_PKc+0x1c>
  return file.remove();
   b5bd0:	a801      	add	r0, sp, #4
   b5bd2:	f000 f9e1 	bl	b5f98 <_ZN7FatFile6removeEv>
}
   b5bd6:	b00b      	add	sp, #44	; 0x2c
   b5bd8:	f85d fb04 	ldr.w	pc, [sp], #4

000b5bdc <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   b5bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   b5be0:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   b5be2:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   b5be4:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   b5be6:	4604      	mov	r4, r0
   b5be8:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   b5bea:	d55b      	bpl.n	b5ca4 <_ZN7FatFile5writeEPKvj+0xc8>
   b5bec:	7883      	ldrb	r3, [r0, #2]
   b5bee:	079a      	lsls	r2, r3, #30
   b5bf0:	d558      	bpl.n	b5ca4 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   b5bf2:	071b      	lsls	r3, r3, #28
   b5bf4:	d451      	bmi.n	b5c9a <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   b5bf6:	6963      	ldr	r3, [r4, #20]
   b5bf8:	43db      	mvns	r3, r3
   b5bfa:	42bb      	cmp	r3, r7
   b5bfc:	d352      	bcc.n	b5ca4 <_ZN7FatFile5writeEPKvj+0xc8>
   b5bfe:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b5c00:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b5c04:	6966      	ldr	r6, [r4, #20]
  while (nToWrite) {
   b5c06:	f1b8 0f00 	cmp.w	r8, #0
   b5c0a:	f000 8091 	beq.w	b5d30 <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b5c0e:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   b5c10:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   b5c12:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   b5c16:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   b5c1a:	d10e      	bne.n	b5c3a <_ZN7FatFile5writeEPKvj+0x5e>
   b5c1c:	b96d      	cbnz	r5, b5c3a <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
   b5c1e:	6921      	ldr	r1, [r4, #16]
   b5c20:	2900      	cmp	r1, #0
   b5c22:	d046      	beq.n	b5cb2 <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b5c24:	4652      	mov	r2, sl
   b5c26:	f000 fc88 	bl	b653a <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   b5c2a:	2800      	cmp	r0, #0
   b5c2c:	db3a      	blt.n	b5ca4 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   b5c2e:	d104      	bne.n	b5c3a <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   b5c30:	4620      	mov	r0, r4
   b5c32:	f7ff fd4e 	bl	b56d2 <_ZN7FatFile10addClusterEv>
   b5c36:	2800      	cmp	r0, #0
   b5c38:	d034      	beq.n	b5ca4 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b5c3a:	6921      	ldr	r1, [r4, #16]
   b5c3c:	68a0      	ldr	r0, [r4, #8]
   b5c3e:	f000 fc76 	bl	b652e <_ZNK9FatVolume17clusterFirstBlockEm>
   b5c42:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   b5c44:	68a0      	ldr	r0, [r4, #8]
   b5c46:	b915      	cbnz	r5, b5c4e <_ZN7FatFile5writeEPKvj+0x72>
   b5c48:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   b5c4c:	d23f      	bcs.n	b5cce <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   b5c4e:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   b5c52:	4546      	cmp	r6, r8
   b5c54:	bf28      	it	cs
   b5c56:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   b5c58:	2d00      	cmp	r5, #0
   b5c5a:	d136      	bne.n	b5cca <_ZN7FatFile5writeEPKvj+0xee>
   b5c5c:	6962      	ldr	r2, [r4, #20]
   b5c5e:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   b5c60:	429a      	cmp	r2, r3
   b5c62:	bf34      	ite	cc
   b5c64:	2201      	movcc	r2, #1
   b5c66:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   b5c68:	3024      	adds	r0, #36	; 0x24
   b5c6a:	f000 fc3d 	bl	b64e8 <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   b5c6e:	b1c8      	cbz	r0, b5ca4 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   b5c70:	4428      	add	r0, r5
   b5c72:	4632      	mov	r2, r6
   b5c74:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   b5c76:	4435      	add	r5, r6
      memcpy(dst, src, n);
   b5c78:	f005 fff3 	bl	bbc62 <memcpy>
      if (512 == (n + blockOffset)) {
   b5c7c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   b5c80:	d104      	bne.n	b5c8c <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   b5c82:	68a0      	ldr	r0, [r4, #8]
   b5c84:	3024      	adds	r0, #36	; 0x24
   b5c86:	f000 fc07 	bl	b6498 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   b5c8a:	b158      	cbz	r0, b5ca4 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   b5c8c:	6963      	ldr	r3, [r4, #20]
   b5c8e:	4433      	add	r3, r6
   b5c90:	6163      	str	r3, [r4, #20]
    src += n;
   b5c92:	44b1      	add	r9, r6
    nToWrite -= n;
   b5c94:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   b5c98:	e7b4      	b.n	b5c04 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   b5c9a:	69c1      	ldr	r1, [r0, #28]
   b5c9c:	f7ff fe57 	bl	b594e <_ZN7FatFile7seekSetEm>
   b5ca0:	2800      	cmp	r0, #0
   b5ca2:	d1a8      	bne.n	b5bf6 <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   b5ca4:	7863      	ldrb	r3, [r4, #1]
   b5ca6:	f043 0301 	orr.w	r3, r3, #1
   b5caa:	7063      	strb	r3, [r4, #1]
  return -1;
   b5cac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b5cb0:	e050      	b.n	b5d54 <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   b5cb2:	6a23      	ldr	r3, [r4, #32]
   b5cb4:	b93b      	cbnz	r3, b5cc6 <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   b5cb6:	4620      	mov	r0, r4
   b5cb8:	f7ff fd0b 	bl	b56d2 <_ZN7FatFile10addClusterEv>
   b5cbc:	2800      	cmp	r0, #0
   b5cbe:	d0f1      	beq.n	b5ca4 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   b5cc0:	6923      	ldr	r3, [r4, #16]
   b5cc2:	6223      	str	r3, [r4, #32]
   b5cc4:	e7b9      	b.n	b5c3a <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   b5cc6:	6123      	str	r3, [r4, #16]
   b5cc8:	e7b7      	b.n	b5c3a <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   b5cca:	2201      	movs	r2, #1
   b5ccc:	e7cc      	b.n	b5c68 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   b5cce:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
   b5cd2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   b5cd4:	d31b      	bcc.n	b5d0e <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   b5cd6:	f890 c004 	ldrb.w	ip, [r0, #4]
   b5cda:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   b5cde:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   b5ce0:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   b5ce4:	4573      	cmp	r3, lr
   b5ce6:	bf28      	it	cs
   b5ce8:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b5cea:	4291      	cmp	r1, r2
      n = 512*nb;
   b5cec:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b5cf0:	d307      	bcc.n	b5d02 <_ZN7FatFile5writeEPKvj+0x126>
   b5cf2:	441a      	add	r2, r3
   b5cf4:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   b5cf6:	bf82      	ittt	hi
   b5cf8:	f04f 32ff 	movhi.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
   b5cfc:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b5d00:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeBlocks(block, src, nb);
   b5d02:	68a5      	ldr	r5, [r4, #8]
   b5d04:	464a      	mov	r2, r9
   b5d06:	6828      	ldr	r0, [r5, #0]
   b5d08:	f000 ffd1 	bl	b6cae <_ZN9SdSpiCard11writeBlocksEmPKhj>
   b5d0c:	e7bd      	b.n	b5c8a <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   b5d0e:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   b5d10:	bf02      	ittt	eq
   b5d12:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
   b5d16:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b5d1a:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeBlock(block, src);
   b5d1c:	68a3      	ldr	r3, [r4, #8]
   b5d1e:	464a      	mov	r2, r9
   b5d20:	6818      	ldr	r0, [r3, #0]
   b5d22:	f000 ff4e 	bl	b6bc2 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(block, src)) {
   b5d26:	2800      	cmp	r0, #0
   b5d28:	d0bc      	beq.n	b5ca4 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   b5d2a:	f44f 7600 	mov.w	r6, #512	; 0x200
   b5d2e:	e7ad      	b.n	b5c8c <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   b5d30:	69e2      	ldr	r2, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b5d32:	78a3      	ldrb	r3, [r4, #2]
  if (m_curPosition > m_fileSize) {
   b5d34:	42b2      	cmp	r2, r6
   b5d36:	d204      	bcs.n	b5d42 <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   b5d38:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b5d3a:	f043 0304 	orr.w	r3, r3, #4
   b5d3e:	70a3      	strb	r3, [r4, #2]
   b5d40:	e003      	b.n	b5d4a <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   b5d42:	4a08      	ldr	r2, [pc, #32]	; (b5d64 <_ZN7FatFile5writeEPKvj+0x188>)
   b5d44:	6812      	ldr	r2, [r2, #0]
   b5d46:	2a00      	cmp	r2, #0
   b5d48:	d1f7      	bne.n	b5d3a <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   b5d4a:	f994 3002 	ldrsb.w	r3, [r4, #2]
   b5d4e:	2b00      	cmp	r3, #0
   b5d50:	db02      	blt.n	b5d58 <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   b5d52:	4638      	mov	r0, r7
}
   b5d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   b5d58:	4620      	mov	r0, r4
   b5d5a:	f7ff fea5 	bl	b5aa8 <_ZN7FatFile4syncEv>
   b5d5e:	2800      	cmp	r0, #0
   b5d60:	d1f7      	bne.n	b5d52 <_ZN7FatFile5writeEPKvj+0x176>
   b5d62:	e79f      	b.n	b5ca4 <_ZN7FatFile5writeEPKvj+0xc8>
   b5d64:	2003e640 	.word	0x2003e640

000b5d68 <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   b5d68:	2904      	cmp	r1, #4
   b5d6a:	d804      	bhi.n	b5d76 <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
   b5d6c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   b5d70:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   b5d74:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b5d76:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   b5d78:	bf9b      	ittet	ls
   b5d7a:	f101 31ff 	addls.w	r1, r1, #4294967295	; 0xffffffff
   b5d7e:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b5d82:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   b5d84:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b5d86:	bf84      	itt	hi
   b5d88:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
   b5d8c:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
   b5d8e:	4770      	bx	lr

000b5d90 <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
   b5d90:	1e41      	subs	r1, r0, #1
   b5d92:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   b5d96:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b5d98:	0842      	lsrs	r2, r0, #1
   b5d9a:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   b5d9e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b5da2:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   b5da6:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b5da8:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   b5daa:	d1f5      	bne.n	b5d98 <_ZN7FatFile11lfnChecksumEPh+0x8>
}
   b5dac:	4770      	bx	lr

000b5dae <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
   b5dae:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
   b5db0:	68cb      	ldr	r3, [r1, #12]
bool FatFile::openCluster(FatFile* file) {
   b5db2:	4604      	mov	r4, r0
   b5db4:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
   b5db6:	b923      	cbnz	r3, b5dc2 <_ZN7FatFile11openClusterEPS_+0x14>
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
   b5db8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return openRoot(file->m_vol);
   b5dbc:	6889      	ldr	r1, [r1, #8]
   b5dbe:	f7ff bce0 	b.w	b5782 <_ZN7FatFile8openRootEP9FatVolume>
  memset(this, 0, sizeof(FatFile));
   b5dc2:	2224      	movs	r2, #36	; 0x24
   b5dc4:	2100      	movs	r1, #0
   b5dc6:	f005 ff74 	bl	bbcb2 <memset>
  m_attr = FILE_ATTR_SUBDIR;
   b5dca:	2310      	movs	r3, #16
  m_flags = F_READ;
   b5dcc:	2001      	movs	r0, #1
  m_attr = FILE_ATTR_SUBDIR;
   b5dce:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b5dd0:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
   b5dd2:	68ab      	ldr	r3, [r5, #8]
   b5dd4:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
   b5dd6:	68eb      	ldr	r3, [r5, #12]
   b5dd8:	6223      	str	r3, [r4, #32]
}
   b5dda:	bd38      	pop	{r3, r4, r5, pc}

000b5ddc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   b5ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b5de0:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   b5de2:	f810 3b01 	ldrb.w	r3, [r0], #1
   b5de6:	2b20      	cmp	r3, #32
   b5de8:	d0fa      	beq.n	b5de0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b5dea:	4d6a      	ldr	r5, [pc, #424]	; (b5f94 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
    path++;
  }
  fname->lfn = path;
   b5dec:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   b5dee:	2400      	movs	r4, #0
    c = path[len];
   b5df0:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   b5df2:	b1c3      	cbz	r3, b5e26 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   b5df4:	2b2f      	cmp	r3, #47	; 0x2f
   b5df6:	d016      	beq.n	b5e26 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b5df8:	2b5c      	cmp	r3, #92	; 0x5c
   b5dfa:	d102      	bne.n	b5e02 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   b5dfc:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   b5dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b5e02:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   b5e06:	b2c0      	uxtb	r0, r0
   b5e08:	281d      	cmp	r0, #29
   b5e0a:	d803      	bhi.n	b5e14 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   b5e0c:	fa25 f000 	lsr.w	r0, r5, r0
   b5e10:	07c0      	lsls	r0, r0, #31
   b5e12:	d4f3      	bmi.n	b5dfc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   b5e14:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   b5e18:	283c      	cmp	r0, #60	; 0x3c
   b5e1a:	d0ef      	beq.n	b5dfc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   b5e1c:	3b20      	subs	r3, #32
   b5e1e:	2b5e      	cmp	r3, #94	; 0x5e
   b5e20:	d8ec      	bhi.n	b5dfc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   b5e22:	3401      	adds	r4, #1
    c = path[len];
   b5e24:	e7e4      	b.n	b5df0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   b5e26:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   b5e28:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   b5e2a:	4607      	mov	r7, r0
   b5e2c:	f810 5b01 	ldrb.w	r5, [r0], #1
   b5e30:	2d20      	cmp	r5, #32
   b5e32:	d0fa      	beq.n	b5e2a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   b5e34:	2d2f      	cmp	r5, #47	; 0x2f
   b5e36:	d0f8      	beq.n	b5e2a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   b5e38:	6017      	str	r7, [r2, #0]
  while (len) {
   b5e3a:	b14c      	cbz	r4, b5e50 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   b5e3c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   b5e40:	2a2e      	cmp	r2, #46	; 0x2e
   b5e42:	d001      	beq.n	b5e48 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   b5e44:	2a20      	cmp	r2, #32
   b5e46:	d101      	bne.n	b5e4c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   b5e48:	3c01      	subs	r4, #1
  while (len) {
   b5e4a:	e7f6      	b.n	b5e3a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   b5e4c:	2cff      	cmp	r4, #255	; 0xff
   b5e4e:	dcd5      	bgt.n	b5dfc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
   b5e50:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
   b5e54:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
   b5e58:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
   b5e5a:	f8c1 300d 	str.w	r3, [r1, #13]
   b5e5e:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b5e60:	f04f 0800 	mov.w	r8, #0
   b5e64:	f816 3008 	ldrb.w	r3, [r6, r8]
   b5e68:	2b2e      	cmp	r3, #46	; 0x2e
   b5e6a:	d001      	beq.n	b5e70 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
   b5e6c:	2b20      	cmp	r3, #32
   b5e6e:	d102      	bne.n	b5e76 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
   b5e70:	f108 0801 	add.w	r8, r8, #1
   b5e74:	e7f6      	b.n	b5e64 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
   b5e76:	fab8 f088 	clz	r0, r8
   b5e7a:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b5e7c:	1e65      	subs	r5, r4, #1
   b5e7e:	1c6b      	adds	r3, r5, #1
   b5e80:	d002      	beq.n	b5e88 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
   b5e82:	5d73      	ldrb	r3, [r6, r5]
   b5e84:	2b2e      	cmp	r3, #46	; 0x2e
   b5e86:	d114      	bne.n	b5eb2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b5e88:	f04f 0900 	mov.w	r9, #0
   b5e8c:	2707      	movs	r7, #7
   b5e8e:	464a      	mov	r2, r9
   b5e90:	46ca      	mov	sl, r9
   b5e92:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   b5e96:	45a0      	cmp	r8, r4
   b5e98:	da68      	bge.n	b5f6c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
   b5e9a:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   b5e9e:	2b20      	cmp	r3, #32
   b5ea0:	d003      	beq.n	b5eaa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   b5ea2:	2b2e      	cmp	r3, #46	; 0x2e
   b5ea4:	d107      	bne.n	b5eb6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
   b5ea6:	45a8      	cmp	r8, r5
   b5ea8:	d012      	beq.n	b5ed0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
   b5eaa:	2000      	movs	r0, #0
  for (; si < len; si++) {
   b5eac:	f108 0801 	add.w	r8, r8, #1
   b5eb0:	e7f1      	b.n	b5e96 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b5eb2:	3d01      	subs	r5, #1
   b5eb4:	e7e3      	b.n	b5e7e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
   b5eb6:	2b22      	cmp	r3, #34	; 0x22
   b5eb8:	d008      	beq.n	b5ecc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
   b5eba:	2b7c      	cmp	r3, #124	; 0x7c
   b5ebc:	d006      	beq.n	b5ecc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   b5ebe:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   b5ec2:	f1bc 0f05 	cmp.w	ip, #5
   b5ec6:	d80a      	bhi.n	b5ede <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
   b5ec8:	2b2d      	cmp	r3, #45	; 0x2d
   b5eca:	d012      	beq.n	b5ef2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
   b5ecc:	45a8      	cmp	r8, r5
   b5ece:	d15b      	bne.n	b5f88 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
   b5ed0:	2f0a      	cmp	r7, #10
   b5ed2:	d04a      	beq.n	b5f6a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
   b5ed4:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b5ed6:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b5ed8:	f04f 0e10 	mov.w	lr, #16
   b5edc:	e7e6      	b.n	b5eac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
   b5ede:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   b5ee2:	f1bc 0f05 	cmp.w	ip, #5
   b5ee6:	d9f1      	bls.n	b5ecc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
   b5ee8:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   b5eec:	f1bc 0f02 	cmp.w	ip, #2
   b5ef0:	d9ec      	bls.n	b5ecc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
   b5ef2:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   b5ef6:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   b5efa:	d8e7      	bhi.n	b5ecc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
   b5efc:	45a8      	cmp	r8, r5
   b5efe:	d0e7      	beq.n	b5ed0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   b5f00:	42ba      	cmp	r2, r7
   b5f02:	d830      	bhi.n	b5f66 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
   b5f04:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   b5f08:	f1bc 0f19 	cmp.w	ip, #25
   b5f0c:	d81a      	bhi.n	b5f44 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
   b5f0e:	3b20      	subs	r3, #32
        lc |= bit;
   b5f10:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   b5f14:	b2db      	uxtb	r3, r3
        lc |= bit;
   b5f16:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   b5f1a:	f102 0c01 	add.w	ip, r2, #1
   b5f1e:	fa5f fc8c 	uxtb.w	ip, ip
   b5f22:	440a      	add	r2, r1
      if (i < 7) {
   b5f24:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   b5f28:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   b5f2a:	d801      	bhi.n	b5f30 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
   b5f2c:	f881 c00c 	strb.w	ip, [r1, #12]
   b5f30:	4662      	mov	r2, ip
   b5f32:	e7bb      	b.n	b5eac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
   b5f34:	45a8      	cmp	r8, r5
   b5f36:	dc18      	bgt.n	b5f6a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
   b5f38:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   b5f3a:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b5f3c:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b5f3e:	f04f 0e10 	mov.w	lr, #16
   b5f42:	e7b2      	b.n	b5eaa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
   b5f44:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   b5f48:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   b5f4c:	bf98      	it	ls
   b5f4e:	ea4e 0a0a 	orrls.w	sl, lr, sl
   b5f52:	e7e2      	b.n	b5f1a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->sfn[fname->seqPos] = '~';
   b5f54:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   b5f56:	2001      	movs	r0, #1
   b5f58:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   b5f5a:	4419      	add	r1, r3
   b5f5c:	237e      	movs	r3, #126	; 0x7e
   b5f5e:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   b5f60:	2331      	movs	r3, #49	; 0x31
   b5f62:	738b      	strb	r3, [r1, #14]
   b5f64:	e74b      	b.n	b5dfe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   b5f66:	2f0a      	cmp	r7, #10
   b5f68:	d1e4      	bne.n	b5f34 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
   b5f6a:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   b5f6c:	7b4b      	ldrb	r3, [r1, #13]
   b5f6e:	2b20      	cmp	r3, #32
   b5f70:	f43f af44 	beq.w	b5dfc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   b5f74:	2800      	cmp	r0, #0
   b5f76:	d0ed      	beq.n	b5f54 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   b5f78:	ea1a 0f09 	tst.w	sl, r9
   b5f7c:	bf18      	it	ne
   b5f7e:	f04f 0902 	movne.w	r9, #2
   b5f82:	f881 9000 	strb.w	r9, [r1]
   b5f86:	e73a      	b.n	b5dfe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   b5f88:	42ba      	cmp	r2, r7
   b5f8a:	d8ec      	bhi.n	b5f66 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
   b5f8c:	2000      	movs	r0, #0
      c = '_';
   b5f8e:	235f      	movs	r3, #95	; 0x5f
   b5f90:	e7c3      	b.n	b5f1a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
   b5f92:	bf00      	nop
   b5f94:	31000101 	.word	0x31000101

000b5f98 <_ZN7FatFile6removeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::remove() {
   b5f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5f9c:	b08a      	sub	sp, #40	; 0x28
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b5f9e:	2300      	movs	r3, #0
   b5fa0:	9301      	str	r3, [sp, #4]
  FatFile dirFile;
  dir_t* dir;
  ldir_t* ldir;

  // Cant' remove not open for write.
  if (!isFile() || !(m_flags & F_WRITE)) {
   b5fa2:	7803      	ldrb	r3, [r0, #0]
   b5fa4:	0719      	lsls	r1, r3, #28
bool FatFile::remove() {
   b5fa6:	4604      	mov	r4, r0
  if (!isFile() || !(m_flags & F_WRITE)) {
   b5fa8:	d50a      	bpl.n	b5fc0 <_ZN7FatFile6removeEv+0x28>
   b5faa:	7883      	ldrb	r3, [r0, #2]
   b5fac:	079a      	lsls	r2, r3, #30
   b5fae:	d507      	bpl.n	b5fc0 <_ZN7FatFile6removeEv+0x28>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Free any clusters.
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   b5fb0:	6a01      	ldr	r1, [r0, #32]
   b5fb2:	b939      	cbnz	r1, b5fc4 <_ZN7FatFile6removeEv+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Cache directory entry.
  dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b5fb4:	2101      	movs	r1, #1
   b5fb6:	4620      	mov	r0, r4
   b5fb8:	f7ff fbd4 	bl	b5764 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
   b5fbc:	4605      	mov	r5, r0
   b5fbe:	b938      	cbnz	r0, b5fd0 <_ZN7FatFile6removeEv+0x38>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  return false;
   b5fc0:	2000      	movs	r0, #0
   b5fc2:	e048      	b.n	b6056 <_ZN7FatFile6removeEv+0xbe>
  if (m_firstCluster && !m_vol->freeChain(m_firstCluster)) {
   b5fc4:	6880      	ldr	r0, [r0, #8]
   b5fc6:	f000 fb58 	bl	b667a <_ZN9FatVolume9freeChainEm>
   b5fca:	2800      	cmp	r0, #0
   b5fcc:	d1f2      	bne.n	b5fb4 <_ZN7FatFile6removeEv+0x1c>
   b5fce:	e7f7      	b.n	b5fc0 <_ZN7FatFile6removeEv+0x28>
  chksum = lfnChecksum(dir->name);
   b5fd0:	f7ff fede 	bl	b5d90 <_ZN7FatFile11lfnChecksumEPh>
  dir->name[0] = DIR_NAME_DELETED;
   b5fd4:	27e5      	movs	r7, #229	; 0xe5
   b5fd6:	702f      	strb	r7, [r5, #0]
  m_attr = FILE_ATTR_CLOSED;
   b5fd8:	2300      	movs	r3, #0
  chksum = lfnChecksum(dir->name);
   b5fda:	4606      	mov	r6, r0
  m_attr = FILE_ATTR_CLOSED;
   b5fdc:	7023      	strb	r3, [r4, #0]
  if (!m_vol->cacheSync()) {
   b5fde:	68a0      	ldr	r0, [r4, #8]
   b5fe0:	f7ff fb6a 	bl	b56b8 <_ZN9FatVolume9cacheSyncEv>
   b5fe4:	2800      	cmp	r0, #0
   b5fe6:	d0eb      	beq.n	b5fc0 <_ZN7FatFile6removeEv+0x28>
  if (!isLFN()) {
   b5fe8:	78e3      	ldrb	r3, [r4, #3]
   b5fea:	2b00      	cmp	r3, #0
   b5fec:	d033      	beq.n	b6056 <_ZN7FatFile6removeEv+0xbe>
  if (!dirFile.openCluster(this)) {
   b5fee:	4621      	mov	r1, r4
   b5ff0:	a801      	add	r0, sp, #4
   b5ff2:	f7ff fedc 	bl	b5dae <_ZN7FatFile11openClusterEPS_>
   b5ff6:	2800      	cmp	r0, #0
   b5ff8:	d0e2      	beq.n	b5fc0 <_ZN7FatFile6removeEv+0x28>
   b5ffa:	2501      	movs	r5, #1
  for (ord = 1; ord <= m_lfnOrd; ord++) {
   b5ffc:	78e3      	ldrb	r3, [r4, #3]
   b5ffe:	fa5f f885 	uxtb.w	r8, r5
   b6002:	4543      	cmp	r3, r8
   b6004:	d3dc      	bcc.n	b5fc0 <_ZN7FatFile6removeEv+0x28>
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
   b6006:	88a1      	ldrh	r1, [r4, #4]
   b6008:	1b49      	subs	r1, r1, r5
   b600a:	0149      	lsls	r1, r1, #5
   b600c:	a801      	add	r0, sp, #4
   b600e:	f7ff fc9e 	bl	b594e <_ZN7FatFile7seekSetEm>
   b6012:	2800      	cmp	r0, #0
   b6014:	d0d4      	beq.n	b5fc0 <_ZN7FatFile6removeEv+0x28>
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
   b6016:	2100      	movs	r1, #0
   b6018:	a801      	add	r0, sp, #4
   b601a:	f7ff fc79 	bl	b5910 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b601e:	2800      	cmp	r0, #0
   b6020:	d0ce      	beq.n	b5fc0 <_ZN7FatFile6removeEv+0x28>
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   b6022:	7ac3      	ldrb	r3, [r0, #11]
   b6024:	2b0f      	cmp	r3, #15
   b6026:	d1cb      	bne.n	b5fc0 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   b6028:	7802      	ldrb	r2, [r0, #0]
    if (ldir->attr != DIR_ATT_LONG_NAME ||
   b602a:	f002 031f 	and.w	r3, r2, #31
   b602e:	4543      	cmp	r3, r8
   b6030:	d1c6      	bne.n	b5fc0 <_ZN7FatFile6removeEv+0x28>
        ord != (ldir->ord & 0X1F) ||
   b6032:	7b43      	ldrb	r3, [r0, #13]
   b6034:	42b3      	cmp	r3, r6
   b6036:	d1c3      	bne.n	b5fc0 <_ZN7FatFile6removeEv+0x28>
    ldir->ord = DIR_NAME_DELETED;
   b6038:	7007      	strb	r7, [r0, #0]
    m_vol->cacheDirty();
   b603a:	68a1      	ldr	r1, [r4, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b603c:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
   b6040:	f043 0301 	orr.w	r3, r3, #1
   b6044:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
    if (last) {
   b6048:	0653      	lsls	r3, r2, #25
   b604a:	f105 0501 	add.w	r5, r5, #1
   b604e:	d5d5      	bpl.n	b5ffc <_ZN7FatFile6removeEv+0x64>
      if (!m_vol->cacheSync()) {
   b6050:	68a0      	ldr	r0, [r4, #8]
   b6052:	f7ff fb31 	bl	b56b8 <_ZN9FatVolume9cacheSyncEv>
}
   b6056:	b00a      	add	sp, #40	; 0x28
   b6058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b605c <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b605c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   b6060:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b6064:	4606      	mov	r6, r0
   b6066:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   b6068:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   b606a:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b606c:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   b6070:	6861      	ldr	r1, [r4, #4]
   b6072:	68a2      	ldr	r2, [r4, #8]
   b6074:	186b      	adds	r3, r5, r1
   b6076:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b6078:	4411      	add	r1, r2
   b607a:	4291      	cmp	r1, r2
   b607c:	d006      	beq.n	b608c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   b607e:	f812 0b01 	ldrb.w	r0, [r2], #1
   b6082:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   b6086:	4043      	eors	r3, r0
   b6088:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b608a:	e7f6      	b.n	b607a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   b608c:	f1b9 0f03 	cmp.w	r9, #3
   b6090:	bf28      	it	cs
   b6092:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b6096:	f109 0204 	add.w	r2, r9, #4
   b609a:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   b609c:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b60a0:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b60a2:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b60a4:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b60a6:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b60a8:	bf94      	ite	ls
   b60aa:	3130      	addls	r1, #48	; 0x30
   b60ac:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b60ae:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b60b0:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   b60b2:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b60b6:	d1f1      	bne.n	b609c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   b60b8:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   b60bc:	2100      	movs	r1, #0
   b60be:	735f      	strb	r7, [r3, #13]
   b60c0:	4630      	mov	r0, r6
   b60c2:	f7ff fc44 	bl	b594e <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   b60c6:	2101      	movs	r1, #1
   b60c8:	4630      	mov	r0, r6
   b60ca:	f7ff fc21 	bl	b5910 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   b60ce:	4601      	mov	r1, r0
   b60d0:	b928      	cbnz	r0, b60de <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   b60d2:	7870      	ldrb	r0, [r6, #1]
   b60d4:	fab0 f080 	clz	r0, r0
   b60d8:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   b60da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   b60de:	7803      	ldrb	r3, [r0, #0]
   b60e0:	b16b      	cbz	r3, b60fe <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b60e2:	7ac3      	ldrb	r3, [r0, #11]
   b60e4:	071b      	lsls	r3, r3, #28
   b60e6:	d4ee      	bmi.n	b60c6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   b60e8:	220b      	movs	r2, #11
   b60ea:	4640      	mov	r0, r8
   b60ec:	f005 fda9 	bl	bbc42 <memcmp>
   b60f0:	2800      	cmp	r0, #0
   b60f2:	d1e8      	bne.n	b60c6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   b60f4:	3501      	adds	r5, #1
   b60f6:	b2ad      	uxth	r5, r5
   b60f8:	2d64      	cmp	r5, #100	; 0x64
   b60fa:	d1b9      	bne.n	b6070 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   b60fc:	e7ed      	b.n	b60da <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   b60fe:	2001      	movs	r0, #1
   b6100:	e7eb      	b.n	b60da <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000b6104 <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b6104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6108:	ed2d 8b02 	vpush	{d8}
   b610c:	b08b      	sub	sp, #44	; 0x2c
   b610e:	460d      	mov	r5, r1
   b6110:	9306      	str	r3, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   b6112:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b6114:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
   b6116:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b611a:	4617      	mov	r7, r2
  if (!dirFile->isDir() || isOpen()) {
   b611c:	d105      	bne.n	b612a <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   b611e:	2000      	movs	r0, #0
}
   b6120:	b00b      	add	sp, #44	; 0x2c
   b6122:	ecbd 8b02 	vpop	{d8}
   b6126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_attr;
   b612a:	9b07      	ldr	r3, [sp, #28]
   b612c:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
   b612e:	2b00      	cmp	r3, #0
   b6130:	d1f5      	bne.n	b611e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   b6132:	6853      	ldr	r3, [r2, #4]
   b6134:	9305      	str	r3, [sp, #20]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   b6136:	7813      	ldrb	r3, [r2, #0]
   b6138:	079c      	lsls	r4, r3, #30
   b613a:	bf1f      	itttt	ne
   b613c:	9b05      	ldrne	r3, [sp, #20]
   b613e:	330c      	addne	r3, #12
   b6140:	220d      	movne	r2, #13
   b6142:	fbb3 f3f2 	udivne	r3, r3, r2
   b6146:	bf1a      	itte	ne
   b6148:	3301      	addne	r3, #1
   b614a:	b2db      	uxtbne	r3, r3
   b614c:	2301      	moveq	r3, #1
    seekSet(0);
   b614e:	2100      	movs	r1, #0
   b6150:	4628      	mov	r0, r5
   b6152:	9303      	str	r3, [sp, #12]
   b6154:	f7ff fbfb 	bl	b594e <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b6158:	f107 030d 	add.w	r3, r7, #13
  }
   b615c:	f04f 0b00 	mov.w	fp, #0
   b6160:	ee08 3a10 	vmov	s16, r3
   b6164:	46da      	mov	sl, fp
   b6166:	465c      	mov	r4, fp
   b6168:	465e      	mov	r6, fp
   b616a:	f8cd b010 	str.w	fp, [sp, #16]
   b616e:	46d9      	mov	r9, fp
    curIndex = dirFile->m_curPosition/32;
   b6170:	696b      	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
   b6172:	2101      	movs	r1, #1
   b6174:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   b6176:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
   b617a:	f7ff fbc9 	bl	b5910 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b617e:	4603      	mov	r3, r0
   b6180:	2800      	cmp	r0, #0
   b6182:	d171      	bne.n	b6268 <_ZN7FatFile4openEPS_P7fname_ti+0x164>
      if (dirFile->getError()) {
   b6184:	786b      	ldrb	r3, [r5, #1]
   b6186:	2b00      	cmp	r3, #0
   b6188:	d1c9      	bne.n	b611e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   b618a:	9b06      	ldr	r3, [sp, #24]
   b618c:	059a      	lsls	r2, r3, #22
   b618e:	d5c6      	bpl.n	b611e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   b6190:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   b6194:	3b01      	subs	r3, #1
   b6196:	2b01      	cmp	r3, #1
   b6198:	d8c1      	bhi.n	b611e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   b619a:	9b04      	ldr	r3, [sp, #16]
   b619c:	2c00      	cmp	r4, #0
   b619e:	bf08      	it	eq
   b61a0:	4643      	moveq	r3, r8
   b61a2:	9304      	str	r3, [sp, #16]
  while (freeFound < freeNeed) {
   b61a4:	9b03      	ldr	r3, [sp, #12]
   b61a6:	429c      	cmp	r4, r3
   b61a8:	f0c0 80f1 	bcc.w	b638e <_ZN7FatFile4openEPS_P7fname_ti+0x28a>
  if (fnameFound) {
   b61ac:	f1b9 0f00 	cmp.w	r9, #0
   b61b0:	f040 810a 	bne.w	b63c8 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   b61b4:	9b04      	ldr	r3, [sp, #16]
   b61b6:	4628      	mov	r0, r5
   b61b8:	0159      	lsls	r1, r3, #5
   b61ba:	f7ff fbc8 	bl	b594e <_ZN7FatFile7seekSetEm>
   b61be:	2800      	cmp	r0, #0
   b61c0:	d0ad      	beq.n	b611e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   b61c2:	9b03      	ldr	r3, [sp, #12]
   b61c4:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
   b61c8:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b61cc:	464e      	mov	r6, r9
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b61ce:	f04f 0a00 	mov.w	sl, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   b61d2:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b61d6:	2e00      	cmp	r6, #0
   b61d8:	f000 810d 	beq.w	b63f6 <_ZN7FatFile4openEPS_P7fname_ti+0x2f2>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b61dc:	2100      	movs	r1, #0
   b61de:	4628      	mov	r0, r5
   b61e0:	f7ff fb96 	bl	b5910 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b61e4:	4604      	mov	r4, r0
   b61e6:	2800      	cmp	r0, #0
   b61e8:	d099      	beq.n	b611e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   b61ea:	68aa      	ldr	r2, [r5, #8]
   b61ec:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   b61f0:	454e      	cmp	r6, r9
   b61f2:	f043 0301 	orr.w	r3, r3, #1
   b61f6:	bf0c      	ite	eq
   b61f8:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   b61fc:	46b3      	movne	fp, r6
   b61fe:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   b6202:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   b6206:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   b620a:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   b620e:	f107 000d 	add.w	r0, r7, #13
   b6212:	f7ff fdbd 	bl	b5d90 <_ZN7FatFile11lfnChecksumEPh>
    ldir->mustBeZero = 0;
   b6216:	f884 a01a 	strb.w	sl, [r4, #26]
    ldir->chksum = lfnChecksum(fname->sfn);
   b621a:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   b621c:	f884 a01b 	strb.w	sl, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b6220:	f00b 031f 	and.w	r3, fp, #31
   b6224:	220d      	movs	r2, #13
   b6226:	3b01      	subs	r3, #1
    lfnPutName(ldir, fname->lfn, len);
   b6228:	f8d7 c008 	ldr.w	ip, [r7, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b622c:	4353      	muls	r3, r2
   b622e:	2200      	movs	r2, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b6230:	9905      	ldr	r1, [sp, #20]
   b6232:	4299      	cmp	r1, r3
   b6234:	f240 80d0 	bls.w	b63d8 <_ZN7FatFile4openEPS_P7fname_ti+0x2d4>
   b6238:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
   b623c:	2a04      	cmp	r2, #4
   b623e:	fa5f fe82 	uxtb.w	lr, r2
   b6242:	f102 0001 	add.w	r0, r2, #1
   b6246:	f200 80cd 	bhi.w	b63e4 <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
    ldir->name1[i] = c;
   b624a:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   b624e:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   b6252:	280d      	cmp	r0, #13
   b6254:	f103 0301 	add.w	r3, r3, #1
   b6258:	4602      	mov	r2, r0
   b625a:	d1e9      	bne.n	b6230 <_ZN7FatFile4openEPS_P7fname_ti+0x12c>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b625c:	3e01      	subs	r6, #1
   b625e:	b2f6      	uxtb	r6, r6
   b6260:	e7b9      	b.n	b61d6 <_ZN7FatFile4openEPS_P7fname_ti+0xd2>
        fnameFound = true;
   b6262:	f04f 0901 	mov.w	r9, #1
   b6266:	e783      	b.n	b6170 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   b6268:	7802      	ldrb	r2, [r0, #0]
   b626a:	2ae5      	cmp	r2, #229	; 0xe5
   b626c:	d000      	beq.n	b6270 <_ZN7FatFile4openEPS_P7fname_ti+0x16c>
   b626e:	b97a      	cbnz	r2, b6290 <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
    curIndex = dirFile->m_curPosition/32;
   b6270:	9904      	ldr	r1, [sp, #16]
   b6272:	2c00      	cmp	r4, #0
   b6274:	bf08      	it	eq
   b6276:	4641      	moveq	r1, r8
   b6278:	9104      	str	r1, [sp, #16]
      if (freeFound < freeNeed) {
   b627a:	9903      	ldr	r1, [sp, #12]
   b627c:	428c      	cmp	r4, r1
        freeFound++;
   b627e:	bf3c      	itt	cc
   b6280:	3401      	addcc	r4, #1
   b6282:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   b6284:	2a00      	cmp	r2, #0
   b6286:	d080      	beq.n	b618a <_ZN7FatFile4openEPS_P7fname_ti+0x86>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b6288:	2ae5      	cmp	r2, #229	; 0xe5
   b628a:	d105      	bne.n	b6298 <_ZN7FatFile4openEPS_P7fname_ti+0x194>
      lfnOrd = 0;
   b628c:	2600      	movs	r6, #0
   b628e:	e76f      	b.n	b6170 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   b6290:	9903      	ldr	r1, [sp, #12]
   b6292:	428c      	cmp	r4, r1
   b6294:	bf38      	it	cc
   b6296:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b6298:	2a2e      	cmp	r2, #46	; 0x2e
   b629a:	d0f7      	beq.n	b628c <_ZN7FatFile4openEPS_P7fname_ti+0x188>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for part of a long name else false.
 */
static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {
  return dir->attributes == DIR_ATT_LONG_NAME;
   b629c:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
   b629e:	290f      	cmp	r1, #15
   b62a0:	d14a      	bne.n	b6338 <_ZN7FatFile4openEPS_P7fname_ti+0x234>
      if (!lfnOrd) {
   b62a2:	bb16      	cbnz	r6, b62ea <_ZN7FatFile4openEPS_P7fname_ti+0x1e6>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   b62a4:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   b62a8:	f43f af62 	beq.w	b6170 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   b62ac:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   b62b0:	f893 b00d 	ldrb.w	fp, [r3, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   b62b4:	46b2      	mov	sl, r6
      size_t k = 13*(ord - 1);
   b62b6:	220d      	movs	r2, #13
   b62b8:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
   b62bc:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
   b62c0:	9a05      	ldr	r2, [sp, #20]
   b62c2:	4542      	cmp	r2, r8
   b62c4:	d9e2      	bls.n	b628c <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b62c6:	eba2 0208 	sub.w	r2, r2, r8
   b62ca:	9208      	str	r2, [sp, #32]
   b62cc:	2200      	movs	r2, #0
   b62ce:	eb02 0108 	add.w	r1, r2, r8
   b62d2:	9109      	str	r1, [sp, #36]	; 0x24
        uint16_t u = lfnGetChar(ldir, i);
   b62d4:	4618      	mov	r0, r3
   b62d6:	b2d1      	uxtb	r1, r2
   b62d8:	f7ff fd46 	bl	b5d68 <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
   b62dc:	9908      	ldr	r1, [sp, #32]
   b62de:	428a      	cmp	r2, r1
   b62e0:	d10d      	bne.n	b62fe <_ZN7FatFile4openEPS_P7fname_ti+0x1fa>
            lfnOrd = 0;
   b62e2:	2800      	cmp	r0, #0
   b62e4:	bf18      	it	ne
   b62e6:	2600      	movne	r6, #0
   b62e8:	e742      	b.n	b6170 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   b62ea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   b62ee:	fa5f fa8a 	uxtb.w	sl, sl
   b62f2:	4552      	cmp	r2, sl
   b62f4:	d1ca      	bne.n	b628c <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b62f6:	7b5a      	ldrb	r2, [r3, #13]
   b62f8:	455a      	cmp	r2, fp
   b62fa:	d0dc      	beq.n	b62b6 <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   b62fc:	e7c6      	b.n	b628c <_ZN7FatFile4openEPS_P7fname_ti+0x188>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b62fe:	28ff      	cmp	r0, #255	; 0xff
   b6300:	d8c4      	bhi.n	b628c <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b6302:	fa5f fe80 	uxtb.w	lr, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b6306:	f1ae 0141 	sub.w	r1, lr, #65	; 0x41
   b630a:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b630c:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b630e:	bf9c      	itt	ls
   b6310:	f10e 0020 	addls.w	r0, lr, #32
   b6314:	fa5f fe80 	uxtbls.w	lr, r0
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b6318:	4608      	mov	r0, r1
   b631a:	9909      	ldr	r1, [sp, #36]	; 0x24
   b631c:	5c41      	ldrb	r1, [r0, r1]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b631e:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   b6322:	f1bc 0f19 	cmp.w	ip, #25
   b6326:	bf9c      	itt	ls
   b6328:	3120      	addls	r1, #32
   b632a:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b632c:	4571      	cmp	r1, lr
   b632e:	d1ad      	bne.n	b628c <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      for (uint8_t i = 0; i < 13; i++) {
   b6330:	3201      	adds	r2, #1
   b6332:	2a0d      	cmp	r2, #13
   b6334:	d1cb      	bne.n	b62ce <_ZN7FatFile4openEPS_P7fname_ti+0x1ca>
   b6336:	e71b      	b.n	b6170 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b6338:	0708      	lsls	r0, r1, #28
   b633a:	d4a7      	bmi.n	b628c <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      if (lfnOrd) {
   b633c:	b15e      	cbz	r6, b6356 <_ZN7FatFile4openEPS_P7fname_ti+0x252>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   b633e:	f1ba 0f01 	cmp.w	sl, #1
   b6342:	f47f aeec 	bne.w	b611e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b6346:	4618      	mov	r0, r3
   b6348:	f7ff fd22 	bl	b5d90 <_ZN7FatFile11lfnChecksumEPh>
   b634c:	4558      	cmp	r0, fp
   b634e:	f47f aee6 	bne.w	b611e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b6352:	46b1      	mov	r9, r6
   b6354:	e00e      	b.n	b6374 <_ZN7FatFile4openEPS_P7fname_ti+0x270>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b6356:	ee18 1a10 	vmov	r1, s16
   b635a:	220b      	movs	r2, #11
   b635c:	4618      	mov	r0, r3
   b635e:	f005 fc70 	bl	bbc42 <memcmp>
   b6362:	2800      	cmp	r0, #0
   b6364:	f47f af04 	bne.w	b6170 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   b6368:	f897 9000 	ldrb.w	r9, [r7]
   b636c:	f019 0901 	ands.w	r9, r9, #1
   b6370:	f47f af77 	bne.w	b6262 <_ZN7FatFile4openEPS_P7fname_ti+0x15e>
  if (oflag & O_EXCL) {
   b6374:	9b06      	ldr	r3, [sp, #24]
   b6376:	0519      	lsls	r1, r3, #20
   b6378:	f53f aed1 	bmi.w	b611e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   b637c:	9b06      	ldr	r3, [sp, #24]
   b637e:	9807      	ldr	r0, [sp, #28]
   b6380:	f8cd 9000 	str.w	r9, [sp]
   b6384:	4642      	mov	r2, r8
   b6386:	4629      	mov	r1, r5
   b6388:	f7ff fb24 	bl	b59d4 <_ZN7FatFile15openCachedEntryEPS_tih>
   b638c:	e6c8      	b.n	b6120 <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   b638e:	2100      	movs	r1, #0
   b6390:	4628      	mov	r0, r5
   b6392:	f7ff fabd 	bl	b5910 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b6396:	b9a0      	cbnz	r0, b63c2 <_ZN7FatFile4openEPS_P7fname_ti+0x2be>
      if (dirFile->getError()) {
   b6398:	786b      	ldrb	r3, [r5, #1]
   b639a:	2b00      	cmp	r3, #0
   b639c:	f47f aebf 	bne.w	b611e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   b63a0:	4628      	mov	r0, r5
   b63a2:	f7ff f9a1 	bl	b56e8 <_ZN7FatFile13addDirClusterEv>
   b63a6:	2800      	cmp	r0, #0
   b63a8:	f43f aeb9 	beq.w	b611e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    return m_blocksPerCluster;
   b63ac:	68ab      	ldr	r3, [r5, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   b63ae:	791b      	ldrb	r3, [r3, #4]
   b63b0:	2b01      	cmp	r3, #1
   b63b2:	f63f aefb 	bhi.w	b61ac <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
  while (freeFound < freeNeed) {
   b63b6:	9b03      	ldr	r3, [sp, #12]
    freeFound += 16;
   b63b8:	3410      	adds	r4, #16
   b63ba:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b63bc:	42a3      	cmp	r3, r4
   b63be:	d8ef      	bhi.n	b63a0 <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
   b63c0:	e6f4      	b.n	b61ac <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   b63c2:	3401      	adds	r4, #1
   b63c4:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b63c6:	e6ed      	b.n	b61a4 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
    if (!dirFile->lfnUniqueSfn(fname)) {
   b63c8:	4639      	mov	r1, r7
   b63ca:	4628      	mov	r0, r5
   b63cc:	f7ff fe46 	bl	b605c <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   b63d0:	2800      	cmp	r0, #0
   b63d2:	f47f aeef 	bne.w	b61b4 <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   b63d6:	e6a2      	b.n	b611e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b63d8:	bf14      	ite	ne
   b63da:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   b63de:	2100      	moveq	r1, #0
   b63e0:	b289      	uxth	r1, r1
   b63e2:	e72b      	b.n	b623c <_ZN7FatFile4openEPS_P7fname_ti+0x138>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b63e4:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   b63e8:	bf94      	ite	ls
   b63ea:	eb04 0242 	addls.w	r2, r4, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   b63ee:	eb04 0240 	addhi.w	r2, r4, r0, lsl #1
   b63f2:	8091      	strh	r1, [r2, #4]
   b63f4:	e72d      	b.n	b6252 <_ZN7FatFile4openEPS_P7fname_ti+0x14e>
  dir = dirFile->readDirCache();
   b63f6:	4631      	mov	r1, r6
   b63f8:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   b63fa:	f8d5 8014 	ldr.w	r8, [r5, #20]
  dir = dirFile->readDirCache();
   b63fe:	f7ff fa87 	bl	b5910 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   b6402:	4604      	mov	r4, r0
   b6404:	2800      	cmp	r0, #0
   b6406:	f43f ae8a 	beq.w	b611e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   b640a:	2220      	movs	r2, #32
   b640c:	4631      	mov	r1, r6
   b640e:	f005 fc50 	bl	bbcb2 <memset>
  memcpy(dir->name, fname->sfn, 11);
   b6412:	f8d7 300d 	ldr.w	r3, [r7, #13]
   b6416:	6023      	str	r3, [r4, #0]
   b6418:	f8d7 3011 	ldr.w	r3, [r7, #17]
   b641c:	6063      	str	r3, [r4, #4]
   b641e:	f8b7 3015 	ldrh.w	r3, [r7, #21]
   b6422:	8123      	strh	r3, [r4, #8]
   b6424:	7dfb      	ldrb	r3, [r7, #23]
   b6426:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   b6428:	783b      	ldrb	r3, [r7, #0]
   b642a:	f003 0318 	and.w	r3, r3, #24
   b642e:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   b6430:	4b0f      	ldr	r3, [pc, #60]	; (b6470 <_ZN7FatFile4openEPS_P7fname_ti+0x36c>)
   b6432:	681b      	ldr	r3, [r3, #0]
   b6434:	b19b      	cbz	r3, b645e <_ZN7FatFile4openEPS_P7fname_ti+0x35a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   b6436:	f104 010e 	add.w	r1, r4, #14
   b643a:	f104 0010 	add.w	r0, r4, #16
   b643e:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   b6440:	8a23      	ldrh	r3, [r4, #16]
   b6442:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   b6444:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   b6446:	89e3      	ldrh	r3, [r4, #14]
   b6448:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   b644a:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b644c:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   b6450:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   b6454:	f3c8 184f 	ubfx	r8, r8, #5, #16
   b6458:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  }
   b645c:	e78e      	b.n	b637c <_ZN7FatFile4openEPS_P7fname_ti+0x278>
    dir->creationDate = FAT_DEFAULT_DATE;
   b645e:	2321      	movs	r3, #33	; 0x21
   b6460:	7423      	strb	r3, [r4, #16]
   b6462:	2328      	movs	r3, #40	; 0x28
   b6464:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   b6466:	2308      	movs	r3, #8
   b6468:	73a6      	strb	r6, [r4, #14]
   b646a:	73e3      	strb	r3, [r4, #15]
   b646c:	e7e8      	b.n	b6440 <_ZN7FatFile4openEPS_P7fname_ti+0x33c>
   b646e:	bf00      	nop
   b6470:	2003e640 	.word	0x2003e640

000b6474 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b6474:	b513      	push	{r0, r1, r4, lr}
   b6476:	4604      	mov	r4, r0
    }
   b6478:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b647a:	b159      	cbz	r1, b6494 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b647c:	9101      	str	r1, [sp, #4]
   b647e:	f005 fc8e 	bl	bbd9e <strlen>
   b6482:	6823      	ldr	r3, [r4, #0]
   b6484:	9901      	ldr	r1, [sp, #4]
   b6486:	68db      	ldr	r3, [r3, #12]
   b6488:	4602      	mov	r2, r0
   b648a:	4620      	mov	r0, r4
    }
   b648c:	b002      	add	sp, #8
   b648e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b6492:	4718      	bx	r3
    }
   b6494:	b002      	add	sp, #8
   b6496:	bd10      	pop	{r4, pc}

000b6498 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   b6498:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   b649a:	7803      	ldrb	r3, [r0, #0]
   b649c:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   b649e:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   b64a0:	d520      	bpl.n	b64e4 <_ZN8FatCache4syncEv+0x4c>
    return m_blockDev->writeBlock(block, src);
   b64a2:	6843      	ldr	r3, [r0, #4]
   b64a4:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   b64a6:	f100 020c 	add.w	r2, r0, #12
   b64aa:	6818      	ldr	r0, [r3, #0]
   b64ac:	9201      	str	r2, [sp, #4]
   b64ae:	f000 fb88 	bl	b6bc2 <_ZN9SdSpiCard10writeBlockEmPKh>
   b64b2:	9a01      	ldr	r2, [sp, #4]
   b64b4:	4605      	mov	r5, r0
   b64b6:	b918      	cbnz	r0, b64c0 <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   b64b8:	2500      	movs	r5, #0
}
   b64ba:	4628      	mov	r0, r5
   b64bc:	b003      	add	sp, #12
   b64be:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   b64c0:	7823      	ldrb	r3, [r4, #0]
   b64c2:	079b      	lsls	r3, r3, #30
   b64c4:	d404      	bmi.n	b64d0 <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   b64c6:	7823      	ldrb	r3, [r4, #0]
   b64c8:	f023 0301 	bic.w	r3, r3, #1
   b64cc:	7023      	strb	r3, [r4, #0]
   b64ce:	e7f4      	b.n	b64ba <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   b64d0:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   b64d4:	6919      	ldr	r1, [r3, #16]
   b64d6:	4401      	add	r1, r0
   b64d8:	6818      	ldr	r0, [r3, #0]
   b64da:	f000 fb72 	bl	b6bc2 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   b64de:	2800      	cmp	r0, #0
   b64e0:	d1f1      	bne.n	b64c6 <_ZN8FatCache4syncEv+0x2e>
   b64e2:	e7e9      	b.n	b64b8 <_ZN8FatCache4syncEv+0x20>
  return true;
   b64e4:	2501      	movs	r5, #1
   b64e6:	e7e8      	b.n	b64ba <_ZN8FatCache4syncEv+0x22>

000b64e8 <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b64e8:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   b64ea:	6883      	ldr	r3, [r0, #8]
   b64ec:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b64ee:	4604      	mov	r4, r0
   b64f0:	460e      	mov	r6, r1
   b64f2:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   b64f4:	d009      	beq.n	b650a <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   b64f6:	f7ff ffcf 	bl	b6498 <_ZN8FatCache4syncEv>
   b64fa:	b908      	cbnz	r0, b6500 <_ZN8FatCache4readEmh+0x18>
  return 0;
   b64fc:	2000      	movs	r0, #0
}
   b64fe:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   b6500:	076b      	lsls	r3, r5, #29
   b6502:	d50a      	bpl.n	b651a <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   b6504:	2300      	movs	r3, #0
   b6506:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   b6508:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   b650a:	7822      	ldrb	r2, [r4, #0]
   b650c:	f005 0503 	and.w	r5, r5, #3
   b6510:	4620      	mov	r0, r4
   b6512:	4315      	orrs	r5, r2
   b6514:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   b6518:	e7f1      	b.n	b64fe <_ZN8FatCache4readEmh+0x16>
    return m_blockDev->readBlock(block, dst);
   b651a:	6863      	ldr	r3, [r4, #4]
   b651c:	f104 020c 	add.w	r2, r4, #12
   b6520:	6818      	ldr	r0, [r3, #0]
   b6522:	4631      	mov	r1, r6
   b6524:	f000 fac4 	bl	b6ab0 <_ZN9SdSpiCard9readBlockEmPh>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   b6528:	2800      	cmp	r0, #0
   b652a:	d1eb      	bne.n	b6504 <_ZN8FatCache4readEmh+0x1c>
   b652c:	e7e6      	b.n	b64fc <_ZN8FatCache4readEmh+0x14>

000b652e <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   b652e:	7983      	ldrb	r3, [r0, #6]
   b6530:	6940      	ldr	r0, [r0, #20]
   b6532:	3902      	subs	r1, #2
   b6534:	4099      	lsls	r1, r3
}
   b6536:	4408      	add	r0, r1
   b6538:	4770      	bx	lr

000b653a <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b653a:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   b653c:	b570      	push	{r4, r5, r6, lr}
   b653e:	4605      	mov	r5, r0
   b6540:	460c      	mov	r4, r1
   b6542:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b6544:	d802      	bhi.n	b654c <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   b6546:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b654a:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b654c:	69c3      	ldr	r3, [r0, #28]
   b654e:	428b      	cmp	r3, r1
   b6550:	d3f9      	bcc.n	b6546 <_ZN9FatVolume6fatGetEmPm+0xc>
    return m_fatType;
   b6552:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b6554:	2b20      	cmp	r3, #32
   b6556:	d116      	bne.n	b6586 <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   b6558:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b655a:	2202      	movs	r2, #2
   b655c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b6560:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b6564:	f7ff ffc0 	bl	b64e8 <_ZN8FatCache4readEmh>
    if (!pc) {
   b6568:	2800      	cmp	r0, #0
   b656a:	d0ec      	beq.n	b6546 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   b656c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b6570:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   b6574:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   b6578:	69ea      	ldr	r2, [r5, #28]
   b657a:	429a      	cmp	r2, r3
  *value = next;
   b657c:	bf26      	itte	cs
   b657e:	6033      	strcs	r3, [r6, #0]
  return 1;
   b6580:	2001      	movcs	r0, #1
    return 0;
   b6582:	2000      	movcc	r0, #0
   b6584:	e7e1      	b.n	b654a <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   b6586:	2b10      	cmp	r3, #16
   b6588:	d1dd      	bne.n	b6546 <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b658a:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b658e:	6981      	ldr	r1, [r0, #24]
   b6590:	2202      	movs	r2, #2
   b6592:	4419      	add	r1, r3
   b6594:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b6598:	f7ff ffa6 	bl	b64e8 <_ZN8FatCache4readEmh>
    if (!pc) {
   b659c:	2800      	cmp	r0, #0
   b659e:	d0d2      	beq.n	b6546 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   b65a0:	b2e4      	uxtb	r4, r4
   b65a2:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   b65a6:	e7e7      	b.n	b6578 <_ZN9FatVolume6fatGetEmPm+0x3e>

000b65a8 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b65a8:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   b65aa:	b538      	push	{r3, r4, r5, lr}
   b65ac:	460c      	mov	r4, r1
   b65ae:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b65b0:	d801      	bhi.n	b65b6 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   b65b2:	2000      	movs	r0, #0
}
   b65b4:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b65b6:	69c3      	ldr	r3, [r0, #28]
   b65b8:	428b      	cmp	r3, r1
   b65ba:	d3fa      	bcc.n	b65b2 <_ZN9FatVolume6fatPutEmm+0xa>
    return m_fatType;
   b65bc:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b65be:	2b20      	cmp	r3, #32
   b65c0:	d10f      	bne.n	b65e2 <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   b65c2:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b65c4:	2203      	movs	r2, #3
   b65c6:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b65ca:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b65ce:	f7ff ff8b 	bl	b64e8 <_ZN8FatCache4readEmh>
    if (!pc) {
   b65d2:	2800      	cmp	r0, #0
   b65d4:	d0ed      	beq.n	b65b2 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   b65d6:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b65da:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   b65de:	2001      	movs	r0, #1
   b65e0:	e7e8      	b.n	b65b4 <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   b65e2:	2b10      	cmp	r3, #16
   b65e4:	d1e5      	bne.n	b65b2 <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b65e6:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b65ea:	6981      	ldr	r1, [r0, #24]
   b65ec:	2203      	movs	r2, #3
   b65ee:	4419      	add	r1, r3
   b65f0:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b65f4:	f7ff ff78 	bl	b64e8 <_ZN8FatCache4readEmh>
    if (!pc) {
   b65f8:	2800      	cmp	r0, #0
   b65fa:	d0da      	beq.n	b65b2 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   b65fc:	b2e4      	uxtb	r4, r4
   b65fe:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   b6602:	e7ec      	b.n	b65de <_ZN9FatVolume6fatPutEmm+0x36>

000b6604 <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b6604:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   b6608:	68c4      	ldr	r4, [r0, #12]
   b660a:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b660c:	4605      	mov	r5, r0
   b660e:	460e      	mov	r6, r1
   b6610:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   b6612:	d301      	bcc.n	b6618 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   b6614:	2701      	movs	r7, #1
   b6616:	e001      	b.n	b661c <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b6618:	460c      	mov	r4, r1
    setStart = false;
   b661a:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   b661c:	69eb      	ldr	r3, [r5, #28]
    find++;
   b661e:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   b6620:	42a3      	cmp	r3, r4
   b6622:	d202      	bcs.n	b662a <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   b6624:	b9c7      	cbnz	r7, b6658 <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   b6626:	68ec      	ldr	r4, [r5, #12]
   b6628:	e7f4      	b.n	b6614 <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   b662a:	42a6      	cmp	r6, r4
   b662c:	d014      	beq.n	b6658 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   b662e:	aa01      	add	r2, sp, #4
   b6630:	4621      	mov	r1, r4
   b6632:	4628      	mov	r0, r5
   b6634:	f7ff ff81 	bl	b653a <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b6638:	2800      	cmp	r0, #0
   b663a:	db0d      	blt.n	b6658 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   b663c:	d0ee      	beq.n	b661c <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b663e:	9b01      	ldr	r3, [sp, #4]
   b6640:	2b00      	cmp	r3, #0
   b6642:	d1eb      	bne.n	b661c <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   b6644:	b107      	cbz	r7, b6648 <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   b6646:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   b6648:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   b664c:	4621      	mov	r1, r4
   b664e:	4628      	mov	r0, r5
   b6650:	f7ff ffaa 	bl	b65a8 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   b6654:	4607      	mov	r7, r0
   b6656:	b920      	cbnz	r0, b6662 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   b6658:	2700      	movs	r7, #0
}
   b665a:	4638      	mov	r0, r7
   b665c:	b002      	add	sp, #8
   b665e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   b6662:	b916      	cbnz	r6, b666a <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   b6664:	f8c8 4000 	str.w	r4, [r8]
  return true;
   b6668:	e7f7      	b.n	b665a <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   b666a:	4622      	mov	r2, r4
   b666c:	4631      	mov	r1, r6
   b666e:	4628      	mov	r0, r5
   b6670:	f7ff ff9a 	bl	b65a8 <_ZN9FatVolume6fatPutEmm>
   b6674:	2800      	cmp	r0, #0
   b6676:	d1f5      	bne.n	b6664 <_ZN9FatVolume15allocateClusterEmPm+0x60>
   b6678:	e7ee      	b.n	b6658 <_ZN9FatVolume15allocateClusterEmPm+0x54>

000b667a <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   b667a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b667c:	4605      	mov	r5, r0
   b667e:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   b6680:	aa01      	add	r2, sp, #4
   b6682:	4621      	mov	r1, r4
   b6684:	4628      	mov	r0, r5
   b6686:	f7ff ff58 	bl	b653a <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b668a:	1e06      	subs	r6, r0, #0
   b668c:	db10      	blt.n	b66b0 <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   b668e:	2200      	movs	r2, #0
   b6690:	4621      	mov	r1, r4
   b6692:	4628      	mov	r0, r5
   b6694:	f7ff ff88 	bl	b65a8 <_ZN9FatVolume6fatPutEmm>
   b6698:	b150      	cbz	r0, b66b0 <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   b669a:	68eb      	ldr	r3, [r5, #12]
   b669c:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   b669e:	bf24      	itt	cs
   b66a0:	f104 34ff 	addcs.w	r4, r4, #4294967295	; 0xffffffff
   b66a4:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   b66a6:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   b66a8:	2e00      	cmp	r6, #0
   b66aa:	d1e9      	bne.n	b6680 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   b66ac:	b002      	add	sp, #8
   b66ae:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b66b0:	2000      	movs	r0, #0
   b66b2:	e7fb      	b.n	b66ac <_ZN9FatVolume9freeChainEm+0x32>

000b66b4 <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   b66b4:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   b66b6:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   b66b8:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   b66ba:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   b66bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
bool FatVolume::init(uint8_t part) {
   b66c0:	4604      	mov	r4, r0
  m_fatType = 0;
   b66c2:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   b66c4:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   b66c8:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   b66ca:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b66ce:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   b66d0:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   b66d4:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   b66d8:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   b66dc:	460d      	mov	r5, r1
   b66de:	b1b9      	cbz	r1, b6710 <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   b66e0:	2904      	cmp	r1, #4
   b66e2:	d901      	bls.n	b66e8 <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   b66e4:	2000      	movs	r0, #0
}
   b66e6:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   b66e8:	4611      	mov	r1, r2
   b66ea:	4630      	mov	r0, r6
   b66ec:	f7ff fefc 	bl	b64e8 <_ZN8FatCache4readEmh>
    if (!pc) {
   b66f0:	2800      	cmp	r0, #0
   b66f2:	d0f7      	beq.n	b66e4 <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   b66f4:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   b66f8:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   b66fc:	065b      	lsls	r3, r3, #25
   b66fe:	d1f1      	bne.n	b66e4 <_ZN9FatVolume4initEh+0x30>
   b6700:	f105 011b 	add.w	r1, r5, #27
   b6704:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   b6708:	f8d0 5006 	ldr.w	r5, [r0, #6]
   b670c:	2d00      	cmp	r5, #0
   b670e:	d0e9      	beq.n	b66e4 <_ZN9FatVolume4initEh+0x30>
   b6710:	2200      	movs	r2, #0
   b6712:	4629      	mov	r1, r5
   b6714:	4630      	mov	r0, r6
   b6716:	f7ff fee7 	bl	b64e8 <_ZN8FatCache4readEmh>
  if (!pc) {
   b671a:	2800      	cmp	r0, #0
   b671c:	d0e2      	beq.n	b66e4 <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   b671e:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   b6722:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   b6726:	d1dd      	bne.n	b66e4 <_ZN9FatVolume4initEh+0x30>
   b6728:	7c03      	ldrb	r3, [r0, #16]
   b672a:	2b02      	cmp	r3, #2
   b672c:	d1da      	bne.n	b66e4 <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   b672e:	89c3      	ldrh	r3, [r0, #14]
   b6730:	2b00      	cmp	r3, #0
   b6732:	d0d7      	beq.n	b66e4 <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   b6734:	7b41      	ldrb	r1, [r0, #13]
   b6736:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   b6738:	1e4b      	subs	r3, r1, #1
   b673a:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   b673c:	2300      	movs	r3, #0
   b673e:	71a3      	strb	r3, [r4, #6]
   b6740:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b6742:	2301      	movs	r3, #1
   b6744:	4299      	cmp	r1, r3
   b6746:	d007      	beq.n	b6758 <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   b6748:	3e01      	subs	r6, #1
   b674a:	d0cb      	beq.n	b66e4 <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b674c:	79a2      	ldrb	r2, [r4, #6]
   b674e:	005b      	lsls	r3, r3, #1
   b6750:	3201      	adds	r2, #1
   b6752:	b2db      	uxtb	r3, r3
   b6754:	71a2      	strb	r2, [r4, #6]
   b6756:	e7f5      	b.n	b6744 <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   b6758:	8ac1      	ldrh	r1, [r0, #22]
   b675a:	b901      	cbnz	r1, b675e <_ZN9FatVolume4initEh+0xaa>
   b675c:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b675e:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   b6760:	89c3      	ldrh	r3, [r0, #14]
   b6762:	442b      	add	r3, r5
   b6764:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   b6766:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   b676a:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   b676c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   b6770:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   b6772:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   b6776:	0149      	lsls	r1, r1, #5
   b6778:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   b677c:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   b6780:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   b6782:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   b6786:	b902      	cbnz	r2, b678a <_ZN9FatVolume4initEh+0xd6>
   b6788:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b678a:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   b678c:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b678e:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   b6790:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   b6792:	1c4b      	adds	r3, r1, #1
   b6794:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   b6796:	f640 73f4 	movw	r3, #4084	; 0xff4
   b679a:	4299      	cmp	r1, r3
   b679c:	d802      	bhi.n	b67a4 <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   b679e:	230c      	movs	r3, #12
   b67a0:	71e3      	strb	r3, [r4, #7]
   b67a2:	e79f      	b.n	b66e4 <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   b67a4:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   b67a8:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   b67aa:	bf85      	ittet	hi
   b67ac:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   b67ae:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   b67b0:	2310      	movls	r3, #16
    m_fatType = 32;
   b67b2:	2320      	movhi	r3, #32
   b67b4:	71e3      	strb	r3, [r4, #7]
  return true;
   b67b6:	2001      	movs	r0, #1
   b67b8:	e795      	b.n	b66e6 <_ZN9FatVolume4initEh+0x32>

000b67ba <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   b67ba:	f000 bacb 	b.w	b6d54 <_ZN14SdSpiAltDriver4sendEh>

000b67be <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spiDriver->receive();
   b67be:	f000 baae 	b.w	b6d1e <_ZN14SdSpiAltDriver7receiveEv>
	...

000b67c4 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b67c4:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b67c6:	4e0e      	ldr	r6, [pc, #56]	; (b6800 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b67c8:	460d      	mov	r5, r1
   b67ca:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b67cc:	f000 fbd6 	bl	b6f7c <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b67d0:	6833      	ldr	r3, [r6, #0]
   b67d2:	1ac0      	subs	r0, r0, r3
   b67d4:	4b0b      	ldr	r3, [pc, #44]	; (b6804 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   b67d6:	4298      	cmp	r0, r3
   b67d8:	d908      	bls.n	b67ec <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b67da:	f000 fbd7 	bl	b6f8c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b67de:	4b0a      	ldr	r3, [pc, #40]	; (b6808 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   b67e0:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   b67e2:	f000 fd87 	bl	b72f4 <spark_process>
   b67e6:	f000 fbc9 	bl	b6f7c <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   b67ea:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b67ec:	f000 fbce 	bl	b6f8c <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   b67f0:	b280      	uxth	r0, r0
   b67f2:	1b40      	subs	r0, r0, r5
}
   b67f4:	42a0      	cmp	r0, r4
   b67f6:	bfd4      	ite	le
   b67f8:	2000      	movle	r0, #0
   b67fa:	2001      	movgt	r0, #1
   b67fc:	bd70      	pop	{r4, r5, r6, pc}
   b67fe:	bf00      	nop
   b6800:	2003e648 	.word	0x2003e648
   b6804:	000186a0 	.word	0x000186a0
   b6808:	2003e72c 	.word	0x2003e72c

000b680c <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   b680c:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   b680e:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   b6810:	4604      	mov	r4, r0
  if (!m_spiActive) {
   b6812:	b94d      	cbnz	r5, b6828 <_ZN9SdSpiCard8spiStartEv+0x1c>
    m_spiDriver->activate();
   b6814:	6840      	ldr	r0, [r0, #4]
   b6816:	f000 fa6b 	bl	b6cf0 <_ZN14SdSpiAltDriver8activateEv>
     digitalWrite(m_csPin, LOW);
   b681a:	6863      	ldr	r3, [r4, #4]
   b681c:	4629      	mov	r1, r5
   b681e:	7d18      	ldrb	r0, [r3, #20]
   b6820:	f004 fb45 	bl	baeae <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   b6824:	2301      	movs	r3, #1
   b6826:	7223      	strb	r3, [r4, #8]
  }
}
   b6828:	bd38      	pop	{r3, r4, r5, pc}

000b682a <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   b682a:	b510      	push	{r4, lr}
  if (m_spiActive) {
   b682c:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   b682e:	4604      	mov	r4, r0
  if (m_spiActive) {
   b6830:	b16b      	cbz	r3, b684e <_ZN9SdSpiCard7spiStopEv+0x24>
    digitalWrite(m_csPin, HIGH);
   b6832:	6843      	ldr	r3, [r0, #4]
   b6834:	2101      	movs	r1, #1
   b6836:	7d18      	ldrb	r0, [r3, #20]
   b6838:	f004 fb39 	bl	baeae <digitalWrite>
    spiUnselect();
    spiSend(0XFF);
   b683c:	6860      	ldr	r0, [r4, #4]
   b683e:	21ff      	movs	r1, #255	; 0xff
   b6840:	f7ff ffbb 	bl	b67ba <_ZN9SdSpiCard7spiSendEh.isra.0>
    m_spiDriver->deactivate();
   b6844:	6860      	ldr	r0, [r4, #4]
   b6846:	f000 fa67 	bl	b6d18 <_ZN14SdSpiAltDriver10deactivateEv>
    spiDeactivate();
    m_spiActive = false;
   b684a:	2300      	movs	r3, #0
   b684c:	7223      	strb	r3, [r4, #8]
  }
}
   b684e:	bd10      	pop	{r4, pc}

000b6850 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   b6850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6852:	4604      	mov	r4, r0
   b6854:	460d      	mov	r5, r1
   b6856:	4616      	mov	r6, r2
   b6858:	f000 fb98 	bl	b6f8c <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   b685c:	b287      	uxth	r7, r0
  while ((m_status = spiReceive()) == 0XFF) {
   b685e:	6860      	ldr	r0, [r4, #4]
   b6860:	f7ff ffad 	bl	b67be <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6864:	28ff      	cmp	r0, #255	; 0xff
   b6866:	7260      	strb	r0, [r4, #9]
   b6868:	d10e      	bne.n	b6888 <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   b686a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b686e:	4639      	mov	r1, r7
   b6870:	4620      	mov	r0, r4
   b6872:	f7ff ffa7 	bl	b67c4 <_ZN9SdSpiCard10isTimedOutEtt>
   b6876:	2800      	cmp	r0, #0
   b6878:	d0f1      	beq.n	b685e <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   b687a:	2355      	movs	r3, #85	; 0x55
  spiStop();
   b687c:	4620      	mov	r0, r4
   b687e:	7023      	strb	r3, [r4, #0]
   b6880:	f7ff ffd3 	bl	b682a <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6884:	2000      	movs	r0, #0
}
   b6886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   b6888:	28fe      	cmp	r0, #254	; 0xfe
   b688a:	d001      	beq.n	b6890 <_ZN9SdSpiCard8readDataEPhj+0x40>
   b688c:	2350      	movs	r3, #80	; 0x50
   b688e:	e7f5      	b.n	b687c <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   b6890:	6860      	ldr	r0, [r4, #4]
   b6892:	4632      	mov	r2, r6
   b6894:	4629      	mov	r1, r5
   b6896:	f000 fa47 	bl	b6d28 <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   b689a:	7260      	strb	r0, [r4, #9]
   b689c:	b108      	cbz	r0, b68a2 <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   b689e:	2360      	movs	r3, #96	; 0x60
   b68a0:	e7ec      	b.n	b687c <_ZN9SdSpiCard8readDataEPhj+0x2c>
  spiReceive();
   b68a2:	6860      	ldr	r0, [r4, #4]
   b68a4:	f7ff ff8b 	bl	b67be <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
   b68a8:	6860      	ldr	r0, [r4, #4]
   b68aa:	f7ff ff88 	bl	b67be <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
   b68ae:	2001      	movs	r0, #1
   b68b0:	e7e9      	b.n	b6886 <_ZN9SdSpiCard8readDataEPhj+0x36>

000b68b2 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   b68b2:	b570      	push	{r4, r5, r6, lr}
   b68b4:	4604      	mov	r4, r0
   b68b6:	460e      	mov	r6, r1
   b68b8:	f000 fb68 	bl	b6f8c <HAL_Timer_Get_Milli_Seconds>
   b68bc:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   b68be:	4632      	mov	r2, r6
   b68c0:	4629      	mov	r1, r5
   b68c2:	4620      	mov	r0, r4
   b68c4:	f7ff ff7e 	bl	b67c4 <_ZN9SdSpiCard10isTimedOutEtt>
   b68c8:	b930      	cbnz	r0, b68d8 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
    if (spiReceive() == 0XFF) {
   b68ca:	6860      	ldr	r0, [r4, #4]
   b68cc:	f7ff ff77 	bl	b67be <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b68d0:	28ff      	cmp	r0, #255	; 0xff
   b68d2:	d1f4      	bne.n	b68be <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   b68d4:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   b68d6:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b68d8:	2000      	movs	r0, #0
   b68da:	e7fc      	b.n	b68d6 <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000b68dc <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b68dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   b68de:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b68e0:	9201      	str	r2, [sp, #4]
   b68e2:	4604      	mov	r4, r0
   b68e4:	460d      	mov	r5, r1
  if (!m_spiActive) {
   b68e6:	b90b      	cbnz	r3, b68ec <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   b68e8:	f7ff ff90 	bl	b680c <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   b68ec:	b125      	cbz	r5, b68f8 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   b68ee:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b68f2:	4620      	mov	r0, r4
   b68f4:	f7ff ffdd 	bl	b68b2 <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
   b68f8:	6860      	ldr	r0, [r4, #4]
   b68fa:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   b68fe:	f7ff ff5c 	bl	b67ba <_ZN9SdSpiCard7spiSendEh.isra.0>
   b6902:	2603      	movs	r6, #3
    spiSend(pa[i]);
   b6904:	af01      	add	r7, sp, #4
   b6906:	5db9      	ldrb	r1, [r7, r6]
   b6908:	6860      	ldr	r0, [r4, #4]
   b690a:	f7ff ff56 	bl	b67ba <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
   b690e:	3e01      	subs	r6, #1
   b6910:	d2f9      	bcs.n	b6906 <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   b6912:	2d00      	cmp	r5, #0
   b6914:	6860      	ldr	r0, [r4, #4]
   b6916:	bf0c      	ite	eq
   b6918:	2195      	moveq	r1, #149	; 0x95
   b691a:	2187      	movne	r1, #135	; 0x87
   b691c:	f7ff ff4d 	bl	b67ba <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiReceive();
   b6920:	6860      	ldr	r0, [r4, #4]
   b6922:	f7ff ff4c 	bl	b67be <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6926:	250b      	movs	r5, #11
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   b6928:	6860      	ldr	r0, [r4, #4]
   b692a:	f7ff ff48 	bl	b67be <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b692e:	0603      	lsls	r3, r0, #24
   b6930:	7260      	strb	r0, [r4, #9]
   b6932:	d503      	bpl.n	b693c <_ZN9SdSpiCard11cardCommandEhm+0x60>
   b6934:	3d01      	subs	r5, #1
   b6936:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b693a:	d1f5      	bne.n	b6928 <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   b693c:	b003      	add	sp, #12
   b693e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6940 <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   b6940:	b570      	push	{r4, r5, r6, lr}
   b6942:	4604      	mov	r4, r0
   b6944:	460d      	mov	r5, r1
   b6946:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   b6948:	2137      	movs	r1, #55	; 0x37
   b694a:	2200      	movs	r2, #0
   b694c:	f7ff ffc6 	bl	b68dc <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   b6950:	4632      	mov	r2, r6
   b6952:	4629      	mov	r1, r5
   b6954:	4620      	mov	r0, r4
  }
   b6956:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   b695a:	f7ff bfbf 	b.w	b68dc <_ZN9SdSpiCard11cardCommandEhm>
	...

000b6960 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b6960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   b6964:	2500      	movs	r5, #0
   b6966:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   b6968:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   b696a:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   b696c:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b696e:	4604      	mov	r4, r0
   b6970:	4690      	mov	r8, r2
   b6972:	461e      	mov	r6, r3
   b6974:	f000 fb0a 	bl	b6f8c <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   b6978:	4641      	mov	r1, r8
   b697a:	4607      	mov	r7, r0
   b697c:	6860      	ldr	r0, [r4, #4]
   b697e:	f000 f9bb 	bl	b6cf8 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   b6982:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   b6984:	4a49      	ldr	r2, [pc, #292]	; (b6aac <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   b6986:	721d      	strb	r5, [r3, #8]
   b6988:	2501      	movs	r5, #1
   b698a:	60da      	str	r2, [r3, #12]
   b698c:	821d      	strh	r5, [r3, #16]
  spiStart();
   b698e:	4620      	mov	r0, r4
   b6990:	f7ff ff3c 	bl	b680c <_ZN9SdSpiCard8spiStartEv>
   b6994:	6863      	ldr	r3, [r4, #4]
   b6996:	4629      	mov	r1, r5
   b6998:	7d18      	ldrb	r0, [r3, #20]
   b699a:	f004 fa88 	bl	baeae <digitalWrite>
   b699e:	250a      	movs	r5, #10
    spiSend(0XFF);
   b69a0:	6860      	ldr	r0, [r4, #4]
   b69a2:	21ff      	movs	r1, #255	; 0xff
  for (uint8_t i = 0; i < 10; i++) {
   b69a4:	3d01      	subs	r5, #1
    spiSend(0XFF);
   b69a6:	f7ff ff08 	bl	b67ba <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
   b69aa:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b69ae:	d1f7      	bne.n	b69a0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
     digitalWrite(m_csPin, LOW);
   b69b0:	6863      	ldr	r3, [r4, #4]
   b69b2:	4629      	mov	r1, r5
   b69b4:	7d18      	ldrb	r0, [r3, #20]
   b69b6:	f004 fa7a 	bl	baeae <digitalWrite>
  }
   b69ba:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   b69bc:	2200      	movs	r2, #0
   b69be:	4611      	mov	r1, r2
   b69c0:	4620      	mov	r0, r4
   b69c2:	f7ff ff8b 	bl	b68dc <_ZN9SdSpiCard11cardCommandEhm>
   b69c6:	2801      	cmp	r0, #1
   b69c8:	4680      	mov	r8, r0
   b69ca:	d018      	beq.n	b69fe <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   b69cc:	3d01      	subs	r5, #1
   b69ce:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b69d2:	d107      	bne.n	b69e4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   b69d4:	2320      	movs	r3, #32
  spiStop();
   b69d6:	4620      	mov	r0, r4
   b69d8:	7023      	strb	r3, [r4, #0]
   b69da:	f7ff ff26 	bl	b682a <_ZN9SdSpiCard7spiStopEv>
  return false;
   b69de:	2000      	movs	r0, #0
}
   b69e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiSend(STOP_TRAN_TOKEN);
   b69e4:	6860      	ldr	r0, [r4, #4]
   b69e6:	21fd      	movs	r1, #253	; 0xfd
   b69e8:	f7ff fee7 	bl	b67ba <_ZN9SdSpiCard7spiSendEh.isra.0>
   b69ec:	f44f 7802 	mov.w	r8, #520	; 0x208
      spiReceive();
   b69f0:	6860      	ldr	r0, [r4, #4]
   b69f2:	f7ff fee4 	bl	b67be <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (int i = 0; i < 520; i++) {
   b69f6:	f1b8 0801 	subs.w	r8, r8, #1
   b69fa:	d1f9      	bne.n	b69f0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   b69fc:	e7de      	b.n	b69bc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   b69fe:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   b6a02:	2108      	movs	r1, #8
   b6a04:	4620      	mov	r0, r4
   b6a06:	f7ff ff69 	bl	b68dc <_ZN9SdSpiCard11cardCommandEhm>
   b6a0a:	2805      	cmp	r0, #5
   b6a0c:	d114      	bne.n	b6a38 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   b6a0e:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b6a12:	2500      	movs	r5, #0
   b6a14:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   b6a16:	462a      	mov	r2, r5
   b6a18:	2129      	movs	r1, #41	; 0x29
   b6a1a:	4620      	mov	r0, r4
   b6a1c:	f7ff ff90 	bl	b6940 <_ZN9SdSpiCard8cardAcmdEhm>
   b6a20:	4602      	mov	r2, r0
   b6a22:	b1d8      	cbz	r0, b6a5c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   b6a24:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   b6a28:	4639      	mov	r1, r7
   b6a2a:	4620      	mov	r0, r4
   b6a2c:	f7ff feca 	bl	b67c4 <_ZN9SdSpiCard10isTimedOutEtt>
   b6a30:	2800      	cmp	r0, #0
   b6a32:	d0f0      	beq.n	b6a16 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   b6a34:	2343      	movs	r3, #67	; 0x43
   b6a36:	e7ce      	b.n	b69d6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   b6a38:	2504      	movs	r5, #4
      m_status = spiReceive();
   b6a3a:	6860      	ldr	r0, [r4, #4]
   b6a3c:	f7ff febf 	bl	b67be <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
   b6a40:	3d01      	subs	r5, #1
   b6a42:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   b6a46:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   b6a48:	d1f7      	bne.n	b6a3a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   b6a4a:	28aa      	cmp	r0, #170	; 0xaa
   b6a4c:	d104      	bne.n	b6a58 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   b6a4e:	2302      	movs	r3, #2
   b6a50:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b6a52:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   b6a56:	e7dd      	b.n	b6a14 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   b6a58:	2325      	movs	r3, #37	; 0x25
   b6a5a:	e7bc      	b.n	b69d6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   b6a5c:	7aa3      	ldrb	r3, [r4, #10]
   b6a5e:	2b02      	cmp	r3, #2
   b6a60:	d118      	bne.n	b6a94 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   b6a62:	213a      	movs	r1, #58	; 0x3a
   b6a64:	4620      	mov	r0, r4
   b6a66:	f7ff ff39 	bl	b68dc <_ZN9SdSpiCard11cardCommandEhm>
   b6a6a:	b108      	cbz	r0, b6a70 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   b6a6c:	2337      	movs	r3, #55	; 0x37
   b6a6e:	e7b2      	b.n	b69d6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    if ((spiReceive() & 0XC0) == 0XC0) {
   b6a70:	6860      	ldr	r0, [r4, #4]
   b6a72:	f7ff fea4 	bl	b67be <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6a76:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   b6a7a:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   b6a7c:	bf04      	itt	eq
   b6a7e:	2303      	moveq	r3, #3
   b6a80:	72a3      	strbeq	r3, [r4, #10]
      spiReceive();
   b6a82:	6860      	ldr	r0, [r4, #4]
   b6a84:	f7ff fe9b 	bl	b67be <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6a88:	6860      	ldr	r0, [r4, #4]
   b6a8a:	f7ff fe98 	bl	b67be <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6a8e:	6860      	ldr	r0, [r4, #4]
   b6a90:	f7ff fe95 	bl	b67be <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiStop();
   b6a94:	4620      	mov	r0, r4
   b6a96:	f7ff fec8 	bl	b682a <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   b6a9a:	6863      	ldr	r3, [r4, #4]
   b6a9c:	7930      	ldrb	r0, [r6, #4]
   b6a9e:	68b1      	ldr	r1, [r6, #8]
   b6aa0:	89b2      	ldrh	r2, [r6, #12]
   b6aa2:	821a      	strh	r2, [r3, #16]
   b6aa4:	7218      	strb	r0, [r3, #8]
   b6aa6:	60d9      	str	r1, [r3, #12]
  return true;
   b6aa8:	2001      	movs	r0, #1
   b6aaa:	e799      	b.n	b69e0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   b6aac:	0003d090 	.word	0x0003d090

000b6ab0 <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b6ab0:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b6ab2:	7a83      	ldrb	r3, [r0, #10]
   b6ab4:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b6ab6:	bf18      	it	ne
   b6ab8:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b6aba:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   b6abc:	460a      	mov	r2, r1
   b6abe:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b6ac0:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   b6ac2:	f7ff ff0b 	bl	b68dc <_ZN9SdSpiCard11cardCommandEhm>
   b6ac6:	b130      	cbz	r0, b6ad6 <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   b6ac8:	2330      	movs	r3, #48	; 0x30
   b6aca:	7023      	strb	r3, [r4, #0]
  spiStop();
   b6acc:	4620      	mov	r0, r4
   b6ace:	f7ff feac 	bl	b682a <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6ad2:	2500      	movs	r5, #0
   b6ad4:	e00b      	b.n	b6aee <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   b6ad6:	4629      	mov	r1, r5
   b6ad8:	f44f 7200 	mov.w	r2, #512	; 0x200
   b6adc:	4620      	mov	r0, r4
   b6ade:	f7ff feb7 	bl	b6850 <_ZN9SdSpiCard8readDataEPhj>
   b6ae2:	4605      	mov	r5, r0
   b6ae4:	2800      	cmp	r0, #0
   b6ae6:	d0f1      	beq.n	b6acc <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   b6ae8:	4620      	mov	r0, r4
   b6aea:	f7ff fe9e 	bl	b682a <_ZN9SdSpiCard7spiStopEv>
}
   b6aee:	4628      	mov	r0, r5
   b6af0:	bd38      	pop	{r3, r4, r5, pc}

000b6af2 <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b6af2:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b6af4:	7a83      	ldrb	r3, [r0, #10]
   b6af6:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b6af8:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b6afa:	bf18      	it	ne
   b6afc:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   b6afe:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b6b00:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   b6b02:	f7ff feeb 	bl	b68dc <_ZN9SdSpiCard11cardCommandEhm>
   b6b06:	b130      	cbz	r0, b6b16 <_ZN9SdSpiCard9readStartEm+0x24>
   b6b08:	2331      	movs	r3, #49	; 0x31
  spiStop();
   b6b0a:	4620      	mov	r0, r4
   b6b0c:	7023      	strb	r3, [r4, #0]
   b6b0e:	f7ff fe8c 	bl	b682a <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6b12:	2000      	movs	r0, #0
}
   b6b14:	bd10      	pop	{r4, pc}
  return true;
   b6b16:	2001      	movs	r0, #1
   b6b18:	e7fc      	b.n	b6b14 <_ZN9SdSpiCard9readStartEm+0x22>

000b6b1a <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   b6b1a:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   b6b1c:	2200      	movs	r2, #0
   b6b1e:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   b6b20:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   b6b22:	f7ff fedb 	bl	b68dc <_ZN9SdSpiCard11cardCommandEhm>
   b6b26:	b130      	cbz	r0, b6b36 <_ZN9SdSpiCard8readStopEv+0x1c>
   b6b28:	2328      	movs	r3, #40	; 0x28
  spiStop();
   b6b2a:	4620      	mov	r0, r4
   b6b2c:	7023      	strb	r3, [r4, #0]
   b6b2e:	f7ff fe7c 	bl	b682a <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6b32:	2000      	movs	r0, #0
}
   b6b34:	bd10      	pop	{r4, pc}
  spiStop();
   b6b36:	4620      	mov	r0, r4
   b6b38:	f7ff fe77 	bl	b682a <_ZN9SdSpiCard7spiStopEv>
  return true;
   b6b3c:	2001      	movs	r0, #1
   b6b3e:	e7f9      	b.n	b6b34 <_ZN9SdSpiCard8readStopEv+0x1a>

000b6b40 <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   b6b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6b42:	4604      	mov	r4, r0
   b6b44:	4616      	mov	r6, r2
   b6b46:	461f      	mov	r7, r3
  if (!readStart(block)) {
   b6b48:	f7ff ffd3 	bl	b6af2 <_ZN9SdSpiCard9readStartEm>
   b6b4c:	b168      	cbz	r0, b6b6a <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   b6b4e:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   b6b50:	b2ab      	uxth	r3, r5
   b6b52:	429f      	cmp	r7, r3
   b6b54:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   b6b58:	d909      	bls.n	b6b6e <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   b6b5a:	f44f 7200 	mov.w	r2, #512	; 0x200
   b6b5e:	4620      	mov	r0, r4
   b6b60:	f7ff fe76 	bl	b6850 <_ZN9SdSpiCard8readDataEPhj>
   b6b64:	3501      	adds	r5, #1
   b6b66:	2800      	cmp	r0, #0
   b6b68:	d1f2      	bne.n	b6b50 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   b6b6a:	2000      	movs	r0, #0
   b6b6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   b6b6e:	4620      	mov	r0, r4
}
   b6b70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   b6b74:	f7ff bfd1 	b.w	b6b1a <_ZN9SdSpiCard8readStopEv>

000b6b78 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   b6b78:	b538      	push	{r3, r4, r5, lr}
   b6b7a:	4604      	mov	r4, r0
   b6b7c:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
   b6b7e:	6840      	ldr	r0, [r0, #4]
   b6b80:	f7ff fe1b 	bl	b67ba <_ZN9SdSpiCard7spiSendEh.isra.0>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   b6b84:	f44f 7200 	mov.w	r2, #512	; 0x200
   b6b88:	6860      	ldr	r0, [r4, #4]
   b6b8a:	4629      	mov	r1, r5
   b6b8c:	f000 f8e6 	bl	b6d5c <_ZN14SdSpiAltDriver4sendEPKhj>
  spiSend(src, 512);
  spiSend(crc >> 8);
   b6b90:	6860      	ldr	r0, [r4, #4]
   b6b92:	21ff      	movs	r1, #255	; 0xff
   b6b94:	f7ff fe11 	bl	b67ba <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
   b6b98:	6860      	ldr	r0, [r4, #4]
   b6b9a:	21ff      	movs	r1, #255	; 0xff
   b6b9c:	f7ff fe0d 	bl	b67ba <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
   b6ba0:	6860      	ldr	r0, [r4, #4]
   b6ba2:	f7ff fe0c 	bl	b67be <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6ba6:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   b6ba8:	f000 001f 	and.w	r0, r0, #31
   b6bac:	2805      	cmp	r0, #5
   b6bae:	d006      	beq.n	b6bbe <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   b6bb0:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   b6bb2:	4620      	mov	r0, r4
   b6bb4:	7023      	strb	r3, [r4, #0]
   b6bb6:	f7ff fe38 	bl	b682a <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6bba:	2000      	movs	r0, #0
}
   b6bbc:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   b6bbe:	2001      	movs	r0, #1
   b6bc0:	e7fc      	b.n	b6bbc <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000b6bc2 <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b6bc2:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b6bc4:	7a83      	ldrb	r3, [r0, #10]
   b6bc6:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b6bc8:	bf18      	it	ne
   b6bca:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b6bcc:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   b6bce:	460a      	mov	r2, r1
   b6bd0:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b6bd2:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   b6bd4:	f7ff fe82 	bl	b68dc <_ZN9SdSpiCard11cardCommandEhm>
   b6bd8:	4606      	mov	r6, r0
   b6bda:	b130      	cbz	r0, b6bea <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   b6bdc:	2332      	movs	r3, #50	; 0x32
   b6bde:	7023      	strb	r3, [r4, #0]
  spiStop();
   b6be0:	4620      	mov	r0, r4
   b6be2:	f7ff fe22 	bl	b682a <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6be6:	2500      	movs	r5, #0
   b6be8:	e01f      	b.n	b6c2a <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   b6bea:	462a      	mov	r2, r5
   b6bec:	21fe      	movs	r1, #254	; 0xfe
   b6bee:	4620      	mov	r0, r4
   b6bf0:	f7ff ffc2 	bl	b6b78 <_ZN9SdSpiCard9writeDataEhPKh>
   b6bf4:	2800      	cmp	r0, #0
   b6bf6:	d0f3      	beq.n	b6be0 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b6bf8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b6bfc:	4620      	mov	r0, r4
   b6bfe:	f7ff fe58 	bl	b68b2 <_ZN9SdSpiCard11waitNotBusyEt>
   b6c02:	4605      	mov	r5, r0
   b6c04:	b908      	cbnz	r0, b6c0a <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   b6c06:	235a      	movs	r3, #90	; 0x5a
   b6c08:	e7e9      	b.n	b6bde <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   b6c0a:	4632      	mov	r2, r6
   b6c0c:	210d      	movs	r1, #13
   b6c0e:	4620      	mov	r0, r4
   b6c10:	f7ff fe64 	bl	b68dc <_ZN9SdSpiCard11cardCommandEhm>
   b6c14:	b108      	cbz	r0, b6c1a <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   b6c16:	2329      	movs	r3, #41	; 0x29
   b6c18:	e7e1      	b.n	b6bde <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
   b6c1a:	6860      	ldr	r0, [r4, #4]
   b6c1c:	f7ff fdcf 	bl	b67be <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6c20:	2800      	cmp	r0, #0
   b6c22:	d1f8      	bne.n	b6c16 <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   b6c24:	4620      	mov	r0, r4
   b6c26:	f7ff fe00 	bl	b682a <_ZN9SdSpiCard7spiStopEv>
}
   b6c2a:	4628      	mov	r0, r5
   b6c2c:	bd70      	pop	{r4, r5, r6, pc}

000b6c2e <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   b6c2e:	b513      	push	{r0, r1, r4, lr}
   b6c30:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b6c32:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   b6c36:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b6c38:	f7ff fe3b 	bl	b68b2 <_ZN9SdSpiCard11waitNotBusyEt>
   b6c3c:	9a01      	ldr	r2, [sp, #4]
   b6c3e:	b930      	cbnz	r0, b6c4e <_ZN9SdSpiCard9writeDataEPKh+0x20>
   b6c40:	235b      	movs	r3, #91	; 0x5b
   b6c42:	7023      	strb	r3, [r4, #0]
  spiStop();
   b6c44:	4620      	mov	r0, r4
   b6c46:	f7ff fdf0 	bl	b682a <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6c4a:	2000      	movs	r0, #0
   b6c4c:	e005      	b.n	b6c5a <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   b6c4e:	21fc      	movs	r1, #252	; 0xfc
   b6c50:	4620      	mov	r0, r4
   b6c52:	f7ff ff91 	bl	b6b78 <_ZN9SdSpiCard9writeDataEhPKh>
   b6c56:	2800      	cmp	r0, #0
   b6c58:	d0f4      	beq.n	b6c44 <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   b6c5a:	b002      	add	sp, #8
   b6c5c:	bd10      	pop	{r4, pc}

000b6c5e <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b6c5e:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   b6c60:	7a83      	ldrb	r3, [r0, #10]
   b6c62:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b6c64:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b6c66:	bf18      	it	ne
   b6c68:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   b6c6a:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b6c6c:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   b6c6e:	f7ff fe35 	bl	b68dc <_ZN9SdSpiCard11cardCommandEhm>
   b6c72:	b130      	cbz	r0, b6c82 <_ZN9SdSpiCard10writeStartEm+0x24>
   b6c74:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   b6c76:	4620      	mov	r0, r4
   b6c78:	7023      	strb	r3, [r4, #0]
   b6c7a:	f7ff fdd6 	bl	b682a <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6c7e:	2000      	movs	r0, #0
}
   b6c80:	bd10      	pop	{r4, pc}
  return true;
   b6c82:	2001      	movs	r0, #1
   b6c84:	e7fc      	b.n	b6c80 <_ZN9SdSpiCard10writeStartEm+0x22>

000b6c86 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   b6c86:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b6c88:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   b6c8c:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b6c8e:	f7ff fe10 	bl	b68b2 <_ZN9SdSpiCard11waitNotBusyEt>
   b6c92:	4605      	mov	r5, r0
   b6c94:	b930      	cbnz	r0, b6ca4 <_ZN9SdSpiCard9writeStopEv+0x1e>
   b6c96:	2356      	movs	r3, #86	; 0x56
   b6c98:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   b6c9a:	4620      	mov	r0, r4
   b6c9c:	f7ff fdc5 	bl	b682a <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   b6ca0:	4628      	mov	r0, r5
   b6ca2:	bd38      	pop	{r3, r4, r5, pc}
  spiSend(STOP_TRAN_TOKEN);
   b6ca4:	6860      	ldr	r0, [r4, #4]
   b6ca6:	21fd      	movs	r1, #253	; 0xfd
   b6ca8:	f7ff fd87 	bl	b67ba <_ZN9SdSpiCard7spiSendEh.isra.0>
   b6cac:	e7f5      	b.n	b6c9a <_ZN9SdSpiCard9writeStopEv+0x14>

000b6cae <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   b6cae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6cb0:	4604      	mov	r4, r0
   b6cb2:	4616      	mov	r6, r2
   b6cb4:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   b6cb6:	f7ff ffd2 	bl	b6c5e <_ZN9SdSpiCard10writeStartEm>
   b6cba:	b170      	cbz	r0, b6cda <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b6cbc:	2500      	movs	r5, #0
   b6cbe:	42bd      	cmp	r5, r7
   b6cc0:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   b6cc4:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   b6cc6:	d004      	beq.n	b6cd2 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   b6cc8:	f7ff ffb1 	bl	b6c2e <_ZN9SdSpiCard9writeDataEPKh>
   b6ccc:	b128      	cbz	r0, b6cda <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b6cce:	3501      	adds	r5, #1
   b6cd0:	e7f5      	b.n	b6cbe <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   b6cd2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   b6cd6:	f7ff bfd6 	b.w	b6c86 <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   b6cda:	4620      	mov	r0, r4
   b6cdc:	f7ff fda5 	bl	b682a <_ZN9SdSpiCard7spiStopEv>
}
   b6ce0:	2000      	movs	r0, #0
   b6ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6ce4 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   b6ce4:	4b01      	ldr	r3, [pc, #4]	; (b6cec <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   b6ce6:	2201      	movs	r2, #1
   b6ce8:	701a      	strb	r2, [r3, #0]
}
   b6cea:	4770      	bx	lr
   b6cec:	2003e64c 	.word	0x2003e64c

000b6cf0 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   b6cf0:	1d01      	adds	r1, r0, #4
   b6cf2:	6800      	ldr	r0, [r0, #0]
   b6cf4:	f003 bc86 	b.w	ba604 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b6cf8 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   b6cf8:	b510      	push	{r4, lr}
   b6cfa:	4604      	mov	r4, r0
  m_csPin = csPin;
   b6cfc:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   b6cfe:	6800      	ldr	r0, [r0, #0]
   b6d00:	f003 fc52 	bl	ba5a8 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   b6d04:	7d20      	ldrb	r0, [r4, #20]
   b6d06:	2101      	movs	r1, #1
   b6d08:	f004 f8c0 	bl	bae8c <pinMode>
  digitalWrite(m_csPin, HIGH);
   b6d0c:	7d20      	ldrb	r0, [r4, #20]
   b6d0e:	2101      	movs	r1, #1
}
   b6d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   b6d14:	f004 b8cb 	b.w	baeae <digitalWrite>

000b6d18 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   b6d18:	6800      	ldr	r0, [r0, #0]
   b6d1a:	f003 bc59 	b.w	ba5d0 <_ZN8SPIClass14endTransactionEv>

000b6d1e <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   b6d1e:	6800      	ldr	r0, [r0, #0]
   b6d20:	21ff      	movs	r1, #255	; 0xff
   b6d22:	f003 bcdd 	b.w	ba6e0 <_ZN8SPIClass8transferEh>
	...

000b6d28 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   b6d28:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6d2a:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b6d2c:	4a07      	ldr	r2, [pc, #28]	; (b6d4c <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   b6d2e:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b6d30:	2500      	movs	r5, #0
   b6d32:	4c07      	ldr	r4, [pc, #28]	; (b6d50 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b6d34:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b6d36:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b6d38:	460a      	mov	r2, r1
   b6d3a:	4629      	mov	r1, r5
   b6d3c:	f003 fcd6 	bl	ba6ec <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   b6d40:	7823      	ldrb	r3, [r4, #0]
   b6d42:	2b00      	cmp	r3, #0
   b6d44:	d0fc      	beq.n	b6d40 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   b6d46:	2000      	movs	r0, #0
   b6d48:	b003      	add	sp, #12
   b6d4a:	bd30      	pop	{r4, r5, pc}
   b6d4c:	000b6ce5 	.word	0x000b6ce5
   b6d50:	2003e64c 	.word	0x2003e64c

000b6d54 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   b6d54:	6800      	ldr	r0, [r0, #0]
   b6d56:	f003 bcc3 	b.w	ba6e0 <_ZN8SPIClass8transferEh>
	...

000b6d5c <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   b6d5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b6d5e:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b6d60:	4a06      	ldr	r2, [pc, #24]	; (b6d7c <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   b6d62:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b6d64:	2500      	movs	r5, #0
   b6d66:	4c06      	ldr	r4, [pc, #24]	; (b6d80 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b6d68:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b6d6a:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b6d6c:	462a      	mov	r2, r5
   b6d6e:	f003 fcbd 	bl	ba6ec <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   b6d72:	7823      	ldrb	r3, [r4, #0]
   b6d74:	2b00      	cmp	r3, #0
   b6d76:	d0fc      	beq.n	b6d72 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   b6d78:	b003      	add	sp, #12
   b6d7a:	bd30      	pop	{r4, r5, pc}
   b6d7c:	000b6ce5 	.word	0x000b6ce5
   b6d80:	2003e64c 	.word	0x2003e64c

000b6d84 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b6d84:	b508      	push	{r3, lr}
   b6d86:	4b02      	ldr	r3, [pc, #8]	; (b6d90 <hal_ble_stack_init+0xc>)
   b6d88:	681b      	ldr	r3, [r3, #0]
   b6d8a:	689b      	ldr	r3, [r3, #8]
   b6d8c:	9301      	str	r3, [sp, #4]
   b6d8e:	bd08      	pop	{r3, pc}
   b6d90:	00030278 	.word	0x00030278

000b6d94 <hal_ble_gap_start_scan>:
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   b6d94:	b508      	push	{r3, lr}
   b6d96:	4b02      	ldr	r3, [pc, #8]	; (b6da0 <hal_ble_gap_start_scan+0xc>)
   b6d98:	681b      	ldr	r3, [r3, #0]
   b6d9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   b6d9c:	9301      	str	r3, [sp, #4]
   b6d9e:	bd08      	pop	{r3, pc}
   b6da0:	00030278 	.word	0x00030278

000b6da4 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   b6da4:	b508      	push	{r3, lr}
   b6da6:	4b03      	ldr	r3, [pc, #12]	; (b6db4 <hal_ble_gap_stop_scan+0x10>)
   b6da8:	681b      	ldr	r3, [r3, #0]
   b6daa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   b6dae:	9301      	str	r3, [sp, #4]
   b6db0:	bd08      	pop	{r3, pc}
   b6db2:	0000      	.short	0x0000
   b6db4:	00030278 	.word	0x00030278

000b6db8 <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b6db8:	b508      	push	{r3, lr}
   b6dba:	4b03      	ldr	r3, [pc, #12]	; (b6dc8 <hal_ble_gap_disconnect+0x10>)
   b6dbc:	681b      	ldr	r3, [r3, #0]
   b6dbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b6dc2:	9301      	str	r3, [sp, #4]
   b6dc4:	bd08      	pop	{r3, pc}
   b6dc6:	0000      	.short	0x0000
   b6dc8:	00030278 	.word	0x00030278

000b6dcc <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6dcc:	b508      	push	{r3, lr}
   b6dce:	4b03      	ldr	r3, [pc, #12]	; (b6ddc <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b6dd0:	681b      	ldr	r3, [r3, #0]
   b6dd2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b6dd6:	9301      	str	r3, [sp, #4]
   b6dd8:	bd08      	pop	{r3, pc}
   b6dda:	0000      	.short	0x0000
   b6ddc:	00030278 	.word	0x00030278

000b6de0 <hal_ble_gatt_client_discover_all_services>:
DYNALIB_FN(46, hal_ble, hal_ble_gatt_server_get_characteristic_value, ssize_t(hal_ble_attr_handle_t, uint8_t*, size_t, void*))
DYNALIB_FN(47, hal_ble, hal_ble_gatt_client_discover_all_services, int(hal_ble_conn_handle_t, hal_ble_on_disc_service_cb_t, void*, void*))
   b6de0:	b508      	push	{r3, lr}
   b6de2:	4b03      	ldr	r3, [pc, #12]	; (b6df0 <hal_ble_gatt_client_discover_all_services+0x10>)
   b6de4:	681b      	ldr	r3, [r3, #0]
   b6de6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   b6dea:	9301      	str	r3, [sp, #4]
   b6dec:	bd08      	pop	{r3, pc}
   b6dee:	0000      	.short	0x0000
   b6df0:	00030278 	.word	0x00030278

000b6df4 <hal_ble_gatt_client_discover_characteristics>:
DYNALIB_FN(48, hal_ble, hal_ble_gatt_client_discover_service_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_uuid_t*, hal_ble_on_disc_service_cb_t, void*, void*))
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
   b6df4:	b508      	push	{r3, lr}
   b6df6:	4b03      	ldr	r3, [pc, #12]	; (b6e04 <hal_ble_gatt_client_discover_characteristics+0x10>)
   b6df8:	681b      	ldr	r3, [r3, #0]
   b6dfa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   b6dfe:	9301      	str	r3, [sp, #4]
   b6e00:	bd08      	pop	{r3, pc}
   b6e02:	0000      	.short	0x0000
   b6e04:	00030278 	.word	0x00030278

000b6e08 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_server_set_desired_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6e08:	b508      	push	{r3, lr}
   b6e0a:	4b03      	ldr	r3, [pc, #12]	; (b6e18 <hal_ble_gatt_client_write_with_response+0x10>)
   b6e0c:	681b      	ldr	r3, [r3, #0]
   b6e0e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b6e12:	9301      	str	r3, [sp, #4]
   b6e14:	bd08      	pop	{r3, pc}
   b6e16:	0000      	.short	0x0000
   b6e18:	00030278 	.word	0x00030278

000b6e1c <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6e1c:	b508      	push	{r3, lr}
   b6e1e:	4b03      	ldr	r3, [pc, #12]	; (b6e2c <hal_ble_gatt_client_write_without_response+0x10>)
   b6e20:	681b      	ldr	r3, [r3, #0]
   b6e22:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b6e26:	9301      	str	r3, [sp, #4]
   b6e28:	bd08      	pop	{r3, pc}
   b6e2a:	0000      	.short	0x0000
   b6e2c:	00030278 	.word	0x00030278

000b6e30 <hal_ble_gatt_client_read>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))
   b6e30:	b508      	push	{r3, lr}
   b6e32:	4b03      	ldr	r3, [pc, #12]	; (b6e40 <hal_ble_gatt_client_read+0x10>)
   b6e34:	681b      	ldr	r3, [r3, #0]
   b6e36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   b6e3a:	9301      	str	r3, [sp, #4]
   b6e3c:	bd08      	pop	{r3, pc}
   b6e3e:	0000      	.short	0x0000
   b6e40:	00030278 	.word	0x00030278

000b6e44 <hal_ble_gap_connect>:

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
   b6e44:	b508      	push	{r3, lr}
   b6e46:	4b03      	ldr	r3, [pc, #12]	; (b6e54 <hal_ble_gap_connect+0x10>)
   b6e48:	681b      	ldr	r3, [r3, #0]
   b6e4a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
   b6e4e:	9301      	str	r3, [sp, #4]
   b6e50:	bd08      	pop	{r3, pc}
   b6e52:	0000      	.short	0x0000
   b6e54:	00030278 	.word	0x00030278

000b6e58 <hal_ble_gap_get_connection_info>:
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
   b6e58:	b508      	push	{r3, lr}
   b6e5a:	4b03      	ldr	r3, [pc, #12]	; (b6e68 <hal_ble_gap_get_connection_info+0x10>)
   b6e5c:	681b      	ldr	r3, [r3, #0]
   b6e5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
   b6e62:	9301      	str	r3, [sp, #4]
   b6e64:	bd08      	pop	{r3, pc}
   b6e66:	0000      	.short	0x0000
   b6e68:	00030278 	.word	0x00030278

000b6e6c <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b6e6c:	b508      	push	{r3, lr}
   b6e6e:	4b03      	ldr	r3, [pc, #12]	; (b6e7c <hal_ble_set_callback_on_periph_link_events+0x10>)
   b6e70:	681b      	ldr	r3, [r3, #0]
   b6e72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b6e76:	9301      	str	r3, [sp, #4]
   b6e78:	bd08      	pop	{r3, pc}
   b6e7a:	0000      	.short	0x0000
   b6e7c:	00030278 	.word	0x00030278

000b6e80 <hal_ble_gatt_client_configure_cccd>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
   b6e80:	b508      	push	{r3, lr}
   b6e82:	4b03      	ldr	r3, [pc, #12]	; (b6e90 <hal_ble_gatt_client_configure_cccd+0x10>)
   b6e84:	681b      	ldr	r3, [r3, #0]
   b6e86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
   b6e8a:	9301      	str	r3, [sp, #4]
   b6e8c:	bd08      	pop	{r3, pc}
   b6e8e:	0000      	.short	0x0000
   b6e90:	00030278 	.word	0x00030278

000b6e94 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6e94:	b508      	push	{r3, lr}
   b6e96:	4b03      	ldr	r3, [pc, #12]	; (b6ea4 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b6e98:	681b      	ldr	r3, [r3, #0]
   b6e9a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b6e9e:	9301      	str	r3, [sp, #4]
   b6ea0:	bd08      	pop	{r3, pc}
   b6ea2:	0000      	.short	0x0000
   b6ea4:	00030278 	.word	0x00030278

000b6ea8 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b6ea8:	b508      	push	{r3, lr}
   b6eaa:	4b03      	ldr	r3, [pc, #12]	; (b6eb8 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b6eac:	681b      	ldr	r3, [r3, #0]
   b6eae:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b6eb2:	9301      	str	r3, [sp, #4]
   b6eb4:	bd08      	pop	{r3, pc}
   b6eb6:	0000      	.short	0x0000
   b6eb8:	00030278 	.word	0x00030278

000b6ebc <os_thread_yield>:

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   b6ebc:	b508      	push	{r3, lr}
   b6ebe:	4b02      	ldr	r3, [pc, #8]	; (b6ec8 <os_thread_yield+0xc>)
   b6ec0:	681b      	ldr	r3, [r3, #0]
   b6ec2:	68db      	ldr	r3, [r3, #12]
   b6ec4:	9301      	str	r3, [sp, #4]
   b6ec6:	bd08      	pop	{r3, pc}
   b6ec8:	00030248 	.word	0x00030248

000b6ecc <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   b6ecc:	b508      	push	{r3, lr}
   b6ece:	4b02      	ldr	r3, [pc, #8]	; (b6ed8 <os_thread_scheduling+0xc>)
   b6ed0:	681b      	ldr	r3, [r3, #0]
   b6ed2:	69db      	ldr	r3, [r3, #28]
   b6ed4:	9301      	str	r3, [sp, #4]
   b6ed6:	bd08      	pop	{r3, pc}
   b6ed8:	00030248 	.word	0x00030248

000b6edc <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   b6edc:	b508      	push	{r3, lr}
   b6ede:	4b02      	ldr	r3, [pc, #8]	; (b6ee8 <os_timer_create+0xc>)
   b6ee0:	681b      	ldr	r3, [r3, #0]
   b6ee2:	6a1b      	ldr	r3, [r3, #32]
   b6ee4:	9301      	str	r3, [sp, #4]
   b6ee6:	bd08      	pop	{r3, pc}
   b6ee8:	00030248 	.word	0x00030248

000b6eec <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   b6eec:	b508      	push	{r3, lr}
   b6eee:	4b02      	ldr	r3, [pc, #8]	; (b6ef8 <os_timer_destroy+0xc>)
   b6ef0:	681b      	ldr	r3, [r3, #0]
   b6ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6ef4:	9301      	str	r3, [sp, #4]
   b6ef6:	bd08      	pop	{r3, pc}
   b6ef8:	00030248 	.word	0x00030248

000b6efc <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   b6efc:	b508      	push	{r3, lr}
   b6efe:	4b02      	ldr	r3, [pc, #8]	; (b6f08 <os_timer_get_id+0xc>)
   b6f00:	681b      	ldr	r3, [r3, #0]
   b6f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b6f04:	9301      	str	r3, [sp, #4]
   b6f06:	bd08      	pop	{r3, pc}
   b6f08:	00030248 	.word	0x00030248

000b6f0c <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   b6f0c:	b508      	push	{r3, lr}
   b6f0e:	4b02      	ldr	r3, [pc, #8]	; (b6f18 <os_timer_change+0xc>)
   b6f10:	681b      	ldr	r3, [r3, #0]
   b6f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6f14:	9301      	str	r3, [sp, #4]
   b6f16:	bd08      	pop	{r3, pc}
   b6f18:	00030248 	.word	0x00030248

000b6f1c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b6f1c:	b508      	push	{r3, lr}
   b6f1e:	4b02      	ldr	r3, [pc, #8]	; (b6f28 <os_mutex_recursive_create+0xc>)
   b6f20:	681b      	ldr	r3, [r3, #0]
   b6f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6f24:	9301      	str	r3, [sp, #4]
   b6f26:	bd08      	pop	{r3, pc}
   b6f28:	00030248 	.word	0x00030248

000b6f2c <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b6f2c:	b508      	push	{r3, lr}
   b6f2e:	4b02      	ldr	r3, [pc, #8]	; (b6f38 <os_mutex_recursive_lock+0xc>)
   b6f30:	681b      	ldr	r3, [r3, #0]
   b6f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b6f34:	9301      	str	r3, [sp, #4]
   b6f36:	bd08      	pop	{r3, pc}
   b6f38:	00030248 	.word	0x00030248

000b6f3c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b6f3c:	b508      	push	{r3, lr}
   b6f3e:	4b02      	ldr	r3, [pc, #8]	; (b6f48 <os_mutex_recursive_unlock+0xc>)
   b6f40:	681b      	ldr	r3, [r3, #0]
   b6f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b6f44:	9301      	str	r3, [sp, #4]
   b6f46:	bd08      	pop	{r3, pc}
   b6f48:	00030248 	.word	0x00030248

000b6f4c <os_timer_set_id>:
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   b6f4c:	b508      	push	{r3, lr}
   b6f4e:	4b02      	ldr	r3, [pc, #8]	; (b6f58 <os_timer_set_id+0xc>)
   b6f50:	681b      	ldr	r3, [r3, #0]
   b6f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   b6f54:	9301      	str	r3, [sp, #4]
   b6f56:	bd08      	pop	{r3, pc}
   b6f58:	00030248 	.word	0x00030248

000b6f5c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b6f5c:	b508      	push	{r3, lr}
   b6f5e:	4b02      	ldr	r3, [pc, #8]	; (b6f68 <HAL_RNG_GetRandomNumber+0xc>)
   b6f60:	681b      	ldr	r3, [r3, #0]
   b6f62:	685b      	ldr	r3, [r3, #4]
   b6f64:	9301      	str	r3, [sp, #4]
   b6f66:	bd08      	pop	{r3, pc}
   b6f68:	00030218 	.word	0x00030218

000b6f6c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b6f6c:	b508      	push	{r3, lr}
   b6f6e:	4b02      	ldr	r3, [pc, #8]	; (b6f78 <HAL_Delay_Microseconds+0xc>)
   b6f70:	681b      	ldr	r3, [r3, #0]
   b6f72:	68db      	ldr	r3, [r3, #12]
   b6f74:	9301      	str	r3, [sp, #4]
   b6f76:	bd08      	pop	{r3, pc}
   b6f78:	00030218 	.word	0x00030218

000b6f7c <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b6f7c:	b508      	push	{r3, lr}
   b6f7e:	4b02      	ldr	r3, [pc, #8]	; (b6f88 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b6f80:	681b      	ldr	r3, [r3, #0]
   b6f82:	691b      	ldr	r3, [r3, #16]
   b6f84:	9301      	str	r3, [sp, #4]
   b6f86:	bd08      	pop	{r3, pc}
   b6f88:	00030218 	.word	0x00030218

000b6f8c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b6f8c:	b508      	push	{r3, lr}
   b6f8e:	4b02      	ldr	r3, [pc, #8]	; (b6f98 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b6f90:	681b      	ldr	r3, [r3, #0]
   b6f92:	695b      	ldr	r3, [r3, #20]
   b6f94:	9301      	str	r3, [sp, #4]
   b6f96:	bd08      	pop	{r3, pc}
   b6f98:	00030218 	.word	0x00030218

000b6f9c <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   b6f9c:	b508      	push	{r3, lr}
   b6f9e:	4b02      	ldr	r3, [pc, #8]	; (b6fa8 <hal_rtc_time_is_valid+0xc>)
   b6fa0:	681b      	ldr	r3, [r3, #0]
   b6fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b6fa4:	9301      	str	r3, [sp, #4]
   b6fa6:	bd08      	pop	{r3, pc}
   b6fa8:	00030218 	.word	0x00030218

000b6fac <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   b6fac:	b508      	push	{r3, lr}
   b6fae:	4b02      	ldr	r3, [pc, #8]	; (b6fb8 <hal_rtc_get_time+0xc>)
   b6fb0:	681b      	ldr	r3, [r3, #0]
   b6fb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   b6fb4:	9301      	str	r3, [sp, #4]
   b6fb6:	bd08      	pop	{r3, pc}
   b6fb8:	00030218 	.word	0x00030218

000b6fbc <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b6fbc:	b508      	push	{r3, lr}
   b6fbe:	4b02      	ldr	r3, [pc, #8]	; (b6fc8 <HAL_Validate_Pin_Function+0xc>)
   b6fc0:	681b      	ldr	r3, [r3, #0]
   b6fc2:	685b      	ldr	r3, [r3, #4]
   b6fc4:	9301      	str	r3, [sp, #4]
   b6fc6:	bd08      	pop	{r3, pc}
   b6fc8:	0003022c 	.word	0x0003022c

000b6fcc <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b6fcc:	b508      	push	{r3, lr}
   b6fce:	4b02      	ldr	r3, [pc, #8]	; (b6fd8 <HAL_Pin_Mode+0xc>)
   b6fd0:	681b      	ldr	r3, [r3, #0]
   b6fd2:	689b      	ldr	r3, [r3, #8]
   b6fd4:	9301      	str	r3, [sp, #4]
   b6fd6:	bd08      	pop	{r3, pc}
   b6fd8:	0003022c 	.word	0x0003022c

000b6fdc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b6fdc:	b508      	push	{r3, lr}
   b6fde:	4b02      	ldr	r3, [pc, #8]	; (b6fe8 <HAL_Get_Pin_Mode+0xc>)
   b6fe0:	681b      	ldr	r3, [r3, #0]
   b6fe2:	68db      	ldr	r3, [r3, #12]
   b6fe4:	9301      	str	r3, [sp, #4]
   b6fe6:	bd08      	pop	{r3, pc}
   b6fe8:	0003022c 	.word	0x0003022c

000b6fec <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b6fec:	b508      	push	{r3, lr}
   b6fee:	4b02      	ldr	r3, [pc, #8]	; (b6ff8 <HAL_GPIO_Write+0xc>)
   b6ff0:	681b      	ldr	r3, [r3, #0]
   b6ff2:	691b      	ldr	r3, [r3, #16]
   b6ff4:	9301      	str	r3, [sp, #4]
   b6ff6:	bd08      	pop	{r3, pc}
   b6ff8:	0003022c 	.word	0x0003022c

000b6ffc <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b6ffc:	b508      	push	{r3, lr}
   b6ffe:	4b02      	ldr	r3, [pc, #8]	; (b7008 <HAL_GPIO_Read+0xc>)
   b7000:	681b      	ldr	r3, [r3, #0]
   b7002:	695b      	ldr	r3, [r3, #20]
   b7004:	9301      	str	r3, [sp, #4]
   b7006:	bd08      	pop	{r3, pc}
   b7008:	0003022c 	.word	0x0003022c

000b700c <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   b700c:	b508      	push	{r3, lr}
   b700e:	4b02      	ldr	r3, [pc, #8]	; (b7018 <hal_adc_read+0xc>)
   b7010:	681b      	ldr	r3, [r3, #0]
   b7012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7014:	9301      	str	r3, [sp, #4]
   b7016:	bd08      	pop	{r3, pc}
   b7018:	0003022c 	.word	0x0003022c

000b701c <hal_i2c_write>:
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b701c:	b508      	push	{r3, lr}
   b701e:	4b02      	ldr	r3, [pc, #8]	; (b7028 <hal_i2c_write+0xc>)
   b7020:	681b      	ldr	r3, [r3, #0]
   b7022:	6a1b      	ldr	r3, [r3, #32]
   b7024:	9301      	str	r3, [sp, #4]
   b7026:	bd08      	pop	{r3, pc}
   b7028:	00030228 	.word	0x00030228

000b702c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b702c:	b508      	push	{r3, lr}
   b702e:	4b02      	ldr	r3, [pc, #8]	; (b7038 <hal_i2c_available+0xc>)
   b7030:	681b      	ldr	r3, [r3, #0]
   b7032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7034:	9301      	str	r3, [sp, #4]
   b7036:	bd08      	pop	{r3, pc}
   b7038:	00030228 	.word	0x00030228

000b703c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b703c:	b508      	push	{r3, lr}
   b703e:	4b02      	ldr	r3, [pc, #8]	; (b7048 <hal_i2c_read+0xc>)
   b7040:	681b      	ldr	r3, [r3, #0]
   b7042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7044:	9301      	str	r3, [sp, #4]
   b7046:	bd08      	pop	{r3, pc}
   b7048:	00030228 	.word	0x00030228

000b704c <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b704c:	b508      	push	{r3, lr}
   b704e:	4b02      	ldr	r3, [pc, #8]	; (b7058 <hal_i2c_peek+0xc>)
   b7050:	681b      	ldr	r3, [r3, #0]
   b7052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b7054:	9301      	str	r3, [sp, #4]
   b7056:	bd08      	pop	{r3, pc}
   b7058:	00030228 	.word	0x00030228

000b705c <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b705c:	b508      	push	{r3, lr}
   b705e:	4b02      	ldr	r3, [pc, #8]	; (b7068 <hal_i2c_flush+0xc>)
   b7060:	681b      	ldr	r3, [r3, #0]
   b7062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b7064:	9301      	str	r3, [sp, #4]
   b7066:	bd08      	pop	{r3, pc}
   b7068:	00030228 	.word	0x00030228

000b706c <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b706c:	b508      	push	{r3, lr}
   b706e:	4b02      	ldr	r3, [pc, #8]	; (b7078 <hal_i2c_is_enabled+0xc>)
   b7070:	681b      	ldr	r3, [r3, #0]
   b7072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7074:	9301      	str	r3, [sp, #4]
   b7076:	bd08      	pop	{r3, pc}
   b7078:	00030228 	.word	0x00030228

000b707c <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b707c:	b508      	push	{r3, lr}
   b707e:	4b02      	ldr	r3, [pc, #8]	; (b7088 <hal_i2c_init+0xc>)
   b7080:	681b      	ldr	r3, [r3, #0]
   b7082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7084:	9301      	str	r3, [sp, #4]
   b7086:	bd08      	pop	{r3, pc}
   b7088:	00030228 	.word	0x00030228

000b708c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b708c:	b508      	push	{r3, lr}
   b708e:	4b02      	ldr	r3, [pc, #8]	; (b7098 <inet_inet_ntop+0xc>)
   b7090:	681b      	ldr	r3, [r3, #0]
   b7092:	695b      	ldr	r3, [r3, #20]
   b7094:	9301      	str	r3, [sp, #4]
   b7096:	bd08      	pop	{r3, pc}
   b7098:	00030264 	.word	0x00030264

000b709c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b709c:	b508      	push	{r3, lr}
   b709e:	4b02      	ldr	r3, [pc, #8]	; (b70a8 <netdb_freeaddrinfo+0xc>)
   b70a0:	681b      	ldr	r3, [r3, #0]
   b70a2:	689b      	ldr	r3, [r3, #8]
   b70a4:	9301      	str	r3, [sp, #4]
   b70a6:	bd08      	pop	{r3, pc}
   b70a8:	00030268 	.word	0x00030268

000b70ac <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b70ac:	b508      	push	{r3, lr}
   b70ae:	4b02      	ldr	r3, [pc, #8]	; (b70b8 <netdb_getaddrinfo+0xc>)
   b70b0:	681b      	ldr	r3, [r3, #0]
   b70b2:	68db      	ldr	r3, [r3, #12]
   b70b4:	9301      	str	r3, [sp, #4]
   b70b6:	bd08      	pop	{r3, pc}
   b70b8:	00030268 	.word	0x00030268

000b70bc <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b70bc:	b508      	push	{r3, lr}
   b70be:	4b02      	ldr	r3, [pc, #8]	; (b70c8 <hal_spi_begin+0xc>)
   b70c0:	681b      	ldr	r3, [r3, #0]
   b70c2:	681b      	ldr	r3, [r3, #0]
   b70c4:	9301      	str	r3, [sp, #4]
   b70c6:	bd08      	pop	{r3, pc}
   b70c8:	00030230 	.word	0x00030230

000b70cc <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b70cc:	b508      	push	{r3, lr}
   b70ce:	4b02      	ldr	r3, [pc, #8]	; (b70d8 <hal_spi_transfer+0xc>)
   b70d0:	681b      	ldr	r3, [r3, #0]
   b70d2:	695b      	ldr	r3, [r3, #20]
   b70d4:	9301      	str	r3, [sp, #4]
   b70d6:	bd08      	pop	{r3, pc}
   b70d8:	00030230 	.word	0x00030230

000b70dc <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b70dc:	b508      	push	{r3, lr}
   b70de:	4b02      	ldr	r3, [pc, #8]	; (b70e8 <hal_spi_init+0xc>)
   b70e0:	681b      	ldr	r3, [r3, #0]
   b70e2:	69db      	ldr	r3, [r3, #28]
   b70e4:	9301      	str	r3, [sp, #4]
   b70e6:	bd08      	pop	{r3, pc}
   b70e8:	00030230 	.word	0x00030230

000b70ec <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b70ec:	b508      	push	{r3, lr}
   b70ee:	4b02      	ldr	r3, [pc, #8]	; (b70f8 <hal_spi_is_enabled+0xc>)
   b70f0:	681b      	ldr	r3, [r3, #0]
   b70f2:	6a1b      	ldr	r3, [r3, #32]
   b70f4:	9301      	str	r3, [sp, #4]
   b70f6:	bd08      	pop	{r3, pc}
   b70f8:	00030230 	.word	0x00030230

000b70fc <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b70fc:	b508      	push	{r3, lr}
   b70fe:	4b02      	ldr	r3, [pc, #8]	; (b7108 <hal_spi_info+0xc>)
   b7100:	681b      	ldr	r3, [r3, #0]
   b7102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b7104:	9301      	str	r3, [sp, #4]
   b7106:	bd08      	pop	{r3, pc}
   b7108:	00030230 	.word	0x00030230

000b710c <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   b710c:	b508      	push	{r3, lr}
   b710e:	4b02      	ldr	r3, [pc, #8]	; (b7118 <hal_spi_transfer_dma+0xc>)
   b7110:	681b      	ldr	r3, [r3, #0]
   b7112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b7114:	9301      	str	r3, [sp, #4]
   b7116:	bd08      	pop	{r3, pc}
   b7118:	00030230 	.word	0x00030230

000b711c <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   b711c:	b508      	push	{r3, lr}
   b711e:	4b02      	ldr	r3, [pc, #8]	; (b7128 <hal_spi_transfer_dma_status+0xc>)
   b7120:	681b      	ldr	r3, [r3, #0]
   b7122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b7124:	9301      	str	r3, [sp, #4]
   b7126:	bd08      	pop	{r3, pc}
   b7128:	00030230 	.word	0x00030230

000b712c <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b712c:	b508      	push	{r3, lr}
   b712e:	4b02      	ldr	r3, [pc, #8]	; (b7138 <hal_spi_set_settings+0xc>)
   b7130:	681b      	ldr	r3, [r3, #0]
   b7132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b7134:	9301      	str	r3, [sp, #4]
   b7136:	bd08      	pop	{r3, pc}
   b7138:	00030230 	.word	0x00030230

000b713c <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b713c:	b508      	push	{r3, lr}
   b713e:	4b02      	ldr	r3, [pc, #8]	; (b7148 <hal_spi_acquire+0xc>)
   b7140:	681b      	ldr	r3, [r3, #0]
   b7142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b7144:	9301      	str	r3, [sp, #4]
   b7146:	bd08      	pop	{r3, pc}
   b7148:	00030230 	.word	0x00030230

000b714c <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b714c:	b508      	push	{r3, lr}
   b714e:	4b02      	ldr	r3, [pc, #8]	; (b7158 <hal_spi_release+0xc>)
   b7150:	681b      	ldr	r3, [r3, #0]
   b7152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b7154:	9301      	str	r3, [sp, #4]
   b7156:	bd08      	pop	{r3, pc}
   b7158:	00030230 	.word	0x00030230

000b715c <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b715c:	b508      	push	{r3, lr}
   b715e:	4b02      	ldr	r3, [pc, #8]	; (b7168 <hal_usart_write+0xc>)
   b7160:	681b      	ldr	r3, [r3, #0]
   b7162:	68db      	ldr	r3, [r3, #12]
   b7164:	9301      	str	r3, [sp, #4]
   b7166:	bd08      	pop	{r3, pc}
   b7168:	0003023c 	.word	0x0003023c

000b716c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b716c:	b508      	push	{r3, lr}
   b716e:	4b02      	ldr	r3, [pc, #8]	; (b7178 <hal_usart_available+0xc>)
   b7170:	681b      	ldr	r3, [r3, #0]
   b7172:	691b      	ldr	r3, [r3, #16]
   b7174:	9301      	str	r3, [sp, #4]
   b7176:	bd08      	pop	{r3, pc}
   b7178:	0003023c 	.word	0x0003023c

000b717c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b717c:	b508      	push	{r3, lr}
   b717e:	4b02      	ldr	r3, [pc, #8]	; (b7188 <hal_usart_read+0xc>)
   b7180:	681b      	ldr	r3, [r3, #0]
   b7182:	695b      	ldr	r3, [r3, #20]
   b7184:	9301      	str	r3, [sp, #4]
   b7186:	bd08      	pop	{r3, pc}
   b7188:	0003023c 	.word	0x0003023c

000b718c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b718c:	b508      	push	{r3, lr}
   b718e:	4b02      	ldr	r3, [pc, #8]	; (b7198 <hal_usart_peek+0xc>)
   b7190:	681b      	ldr	r3, [r3, #0]
   b7192:	699b      	ldr	r3, [r3, #24]
   b7194:	9301      	str	r3, [sp, #4]
   b7196:	bd08      	pop	{r3, pc}
   b7198:	0003023c 	.word	0x0003023c

000b719c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b719c:	b508      	push	{r3, lr}
   b719e:	4b02      	ldr	r3, [pc, #8]	; (b71a8 <hal_usart_flush+0xc>)
   b71a0:	681b      	ldr	r3, [r3, #0]
   b71a2:	69db      	ldr	r3, [r3, #28]
   b71a4:	9301      	str	r3, [sp, #4]
   b71a6:	bd08      	pop	{r3, pc}
   b71a8:	0003023c 	.word	0x0003023c

000b71ac <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b71ac:	b508      	push	{r3, lr}
   b71ae:	4b02      	ldr	r3, [pc, #8]	; (b71b8 <hal_usart_is_enabled+0xc>)
   b71b0:	681b      	ldr	r3, [r3, #0]
   b71b2:	6a1b      	ldr	r3, [r3, #32]
   b71b4:	9301      	str	r3, [sp, #4]
   b71b6:	bd08      	pop	{r3, pc}
   b71b8:	0003023c 	.word	0x0003023c

000b71bc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b71bc:	b508      	push	{r3, lr}
   b71be:	4b02      	ldr	r3, [pc, #8]	; (b71c8 <hal_usart_available_data_for_write+0xc>)
   b71c0:	681b      	ldr	r3, [r3, #0]
   b71c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b71c4:	9301      	str	r3, [sp, #4]
   b71c6:	bd08      	pop	{r3, pc}
   b71c8:	0003023c 	.word	0x0003023c

000b71cc <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b71cc:	b508      	push	{r3, lr}
   b71ce:	4b02      	ldr	r3, [pc, #8]	; (b71d8 <hal_usart_init_ex+0xc>)
   b71d0:	681b      	ldr	r3, [r3, #0]
   b71d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b71d4:	9301      	str	r3, [sp, #4]
   b71d6:	bd08      	pop	{r3, pc}
   b71d8:	0003023c 	.word	0x0003023c

000b71dc <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b71dc:	b508      	push	{r3, lr}
   b71de:	4b02      	ldr	r3, [pc, #8]	; (b71e8 <HAL_USB_USART_Init+0xc>)
   b71e0:	681b      	ldr	r3, [r3, #0]
   b71e2:	681b      	ldr	r3, [r3, #0]
   b71e4:	9301      	str	r3, [sp, #4]
   b71e6:	bd08      	pop	{r3, pc}
   b71e8:	0003024c 	.word	0x0003024c

000b71ec <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b71ec:	b508      	push	{r3, lr}
   b71ee:	4b02      	ldr	r3, [pc, #8]	; (b71f8 <HAL_USB_USART_Begin+0xc>)
   b71f0:	681b      	ldr	r3, [r3, #0]
   b71f2:	685b      	ldr	r3, [r3, #4]
   b71f4:	9301      	str	r3, [sp, #4]
   b71f6:	bd08      	pop	{r3, pc}
   b71f8:	0003024c 	.word	0x0003024c

000b71fc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b71fc:	b508      	push	{r3, lr}
   b71fe:	4b02      	ldr	r3, [pc, #8]	; (b7208 <HAL_USB_USART_Available_Data+0xc>)
   b7200:	681b      	ldr	r3, [r3, #0]
   b7202:	691b      	ldr	r3, [r3, #16]
   b7204:	9301      	str	r3, [sp, #4]
   b7206:	bd08      	pop	{r3, pc}
   b7208:	0003024c 	.word	0x0003024c

000b720c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b720c:	b508      	push	{r3, lr}
   b720e:	4b02      	ldr	r3, [pc, #8]	; (b7218 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b7210:	681b      	ldr	r3, [r3, #0]
   b7212:	695b      	ldr	r3, [r3, #20]
   b7214:	9301      	str	r3, [sp, #4]
   b7216:	bd08      	pop	{r3, pc}
   b7218:	0003024c 	.word	0x0003024c

000b721c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b721c:	b508      	push	{r3, lr}
   b721e:	4b02      	ldr	r3, [pc, #8]	; (b7228 <HAL_USB_USART_Receive_Data+0xc>)
   b7220:	681b      	ldr	r3, [r3, #0]
   b7222:	699b      	ldr	r3, [r3, #24]
   b7224:	9301      	str	r3, [sp, #4]
   b7226:	bd08      	pop	{r3, pc}
   b7228:	0003024c 	.word	0x0003024c

000b722c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b722c:	b508      	push	{r3, lr}
   b722e:	4b02      	ldr	r3, [pc, #8]	; (b7238 <HAL_USB_USART_Send_Data+0xc>)
   b7230:	681b      	ldr	r3, [r3, #0]
   b7232:	69db      	ldr	r3, [r3, #28]
   b7234:	9301      	str	r3, [sp, #4]
   b7236:	bd08      	pop	{r3, pc}
   b7238:	0003024c 	.word	0x0003024c

000b723c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b723c:	b508      	push	{r3, lr}
   b723e:	4b02      	ldr	r3, [pc, #8]	; (b7248 <HAL_USB_USART_Flush_Data+0xc>)
   b7240:	681b      	ldr	r3, [r3, #0]
   b7242:	6a1b      	ldr	r3, [r3, #32]
   b7244:	9301      	str	r3, [sp, #4]
   b7246:	bd08      	pop	{r3, pc}
   b7248:	0003024c 	.word	0x0003024c

000b724c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b724c:	b508      	push	{r3, lr}
   b724e:	4b02      	ldr	r3, [pc, #8]	; (b7258 <panic_+0xc>)
   b7250:	681b      	ldr	r3, [r3, #0]
   b7252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b7254:	9301      	str	r3, [sp, #4]
   b7256:	bd08      	pop	{r3, pc}
   b7258:	00030260 	.word	0x00030260

000b725c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b725c:	b508      	push	{r3, lr}
   b725e:	4b02      	ldr	r3, [pc, #8]	; (b7268 <log_message+0xc>)
   b7260:	681b      	ldr	r3, [r3, #0]
   b7262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b7264:	9301      	str	r3, [sp, #4]
   b7266:	bd08      	pop	{r3, pc}
   b7268:	00030260 	.word	0x00030260

000b726c <system_mode>:
#include "system_ble_prov.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   b726c:	b508      	push	{r3, lr}
   b726e:	4b02      	ldr	r3, [pc, #8]	; (b7278 <system_mode+0xc>)
   b7270:	681b      	ldr	r3, [r3, #0]
   b7272:	681b      	ldr	r3, [r3, #0]
   b7274:	9301      	str	r3, [sp, #4]
   b7276:	bd08      	pop	{r3, pc}
   b7278:	00030220 	.word	0x00030220

000b727c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b727c:	b508      	push	{r3, lr}
   b727e:	4b02      	ldr	r3, [pc, #8]	; (b7288 <set_system_mode+0xc>)
   b7280:	681b      	ldr	r3, [r3, #0]
   b7282:	685b      	ldr	r3, [r3, #4]
   b7284:	9301      	str	r3, [sp, #4]
   b7286:	bd08      	pop	{r3, pc}
   b7288:	00030220 	.word	0x00030220

000b728c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b728c:	b508      	push	{r3, lr}
   b728e:	4b02      	ldr	r3, [pc, #8]	; (b7298 <system_delay_ms+0xc>)
   b7290:	681b      	ldr	r3, [r3, #0]
   b7292:	695b      	ldr	r3, [r3, #20]
   b7294:	9301      	str	r3, [sp, #4]
   b7296:	bd08      	pop	{r3, pc}
   b7298:	00030220 	.word	0x00030220

000b729c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b729c:	b508      	push	{r3, lr}
   b729e:	4b02      	ldr	r3, [pc, #8]	; (b72a8 <application_thread_current+0xc>)
   b72a0:	681b      	ldr	r3, [r3, #0]
   b72a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b72a4:	9301      	str	r3, [sp, #4]
   b72a6:	bd08      	pop	{r3, pc}
   b72a8:	00030220 	.word	0x00030220

000b72ac <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b72ac:	b508      	push	{r3, lr}
   b72ae:	4b02      	ldr	r3, [pc, #8]	; (b72b8 <application_thread_invoke+0xc>)
   b72b0:	681b      	ldr	r3, [r3, #0]
   b72b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b72b4:	9301      	str	r3, [sp, #4]
   b72b6:	bd08      	pop	{r3, pc}
   b72b8:	00030220 	.word	0x00030220

000b72bc <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   b72bc:	b508      	push	{r3, lr}
   b72be:	4b02      	ldr	r3, [pc, #8]	; (b72c8 <system_thread_get_state+0xc>)
   b72c0:	681b      	ldr	r3, [r3, #0]
   b72c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b72c4:	9301      	str	r3, [sp, #4]
   b72c6:	bd08      	pop	{r3, pc}
   b72c8:	00030220 	.word	0x00030220

000b72cc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b72cc:	b508      	push	{r3, lr}
   b72ce:	4b03      	ldr	r3, [pc, #12]	; (b72dc <system_ctrl_set_app_request_handler+0x10>)
   b72d0:	681b      	ldr	r3, [r3, #0]
   b72d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b72d6:	9301      	str	r3, [sp, #4]
   b72d8:	bd08      	pop	{r3, pc}
   b72da:	0000      	.short	0x0000
   b72dc:	00030220 	.word	0x00030220

000b72e0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b72e0:	b508      	push	{r3, lr}
   b72e2:	4b03      	ldr	r3, [pc, #12]	; (b72f0 <system_ctrl_set_result+0x10>)
   b72e4:	681b      	ldr	r3, [r3, #0]
   b72e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b72ea:	9301      	str	r3, [sp, #4]
   b72ec:	bd08      	pop	{r3, pc}
   b72ee:	0000      	.short	0x0000
   b72f0:	00030220 	.word	0x00030220

000b72f4 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   b72f4:	b508      	push	{r3, lr}
   b72f6:	4b02      	ldr	r3, [pc, #8]	; (b7300 <spark_process+0xc>)
   b72f8:	681b      	ldr	r3, [r3, #0]
   b72fa:	689b      	ldr	r3, [r3, #8]
   b72fc:	9301      	str	r3, [sp, #4]
   b72fe:	bd08      	pop	{r3, pc}
   b7300:	00030244 	.word	0x00030244

000b7304 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b7304:	b508      	push	{r3, lr}
   b7306:	4b02      	ldr	r3, [pc, #8]	; (b7310 <spark_cloud_flag_connected+0xc>)
   b7308:	681b      	ldr	r3, [r3, #0]
   b730a:	695b      	ldr	r3, [r3, #20]
   b730c:	9301      	str	r3, [sp, #4]
   b730e:	bd08      	pop	{r3, pc}
   b7310:	00030244 	.word	0x00030244

000b7314 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b7314:	b508      	push	{r3, lr}
   b7316:	4b02      	ldr	r3, [pc, #8]	; (b7320 <spark_send_event+0xc>)
   b7318:	681b      	ldr	r3, [r3, #0]
   b731a:	6a1b      	ldr	r3, [r3, #32]
   b731c:	9301      	str	r3, [sp, #4]
   b731e:	bd08      	pop	{r3, pc}
   b7320:	00030244 	.word	0x00030244

000b7324 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   b7324:	b508      	push	{r3, lr}
   b7326:	4b02      	ldr	r3, [pc, #8]	; (b7330 <spark_subscribe+0xc>)
   b7328:	681b      	ldr	r3, [r3, #0]
   b732a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b732c:	9301      	str	r3, [sp, #4]
   b732e:	bd08      	pop	{r3, pc}
   b7330:	00030244 	.word	0x00030244

000b7334 <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   b7334:	b508      	push	{r3, lr}
   b7336:	4b02      	ldr	r3, [pc, #8]	; (b7340 <spark_sync_time_pending+0xc>)
   b7338:	681b      	ldr	r3, [r3, #0]
   b733a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b733c:	9301      	str	r3, [sp, #4]
   b733e:	bd08      	pop	{r3, pc}
   b7340:	00030244 	.word	0x00030244

000b7344 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b7344:	b508      	push	{r3, lr}
   b7346:	4b02      	ldr	r3, [pc, #8]	; (b7350 <spark_set_random_seed_from_cloud_handler+0xc>)
   b7348:	681b      	ldr	r3, [r3, #0]
   b734a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b734c:	9301      	str	r3, [sp, #4]
   b734e:	bd08      	pop	{r3, pc}
   b7350:	00030244 	.word	0x00030244

000b7354 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b7354:	b508      	push	{r3, lr}
   b7356:	4b02      	ldr	r3, [pc, #8]	; (b7360 <network_connect+0xc>)
   b7358:	681b      	ldr	r3, [r3, #0]
   b735a:	685b      	ldr	r3, [r3, #4]
   b735c:	9301      	str	r3, [sp, #4]
   b735e:	bd08      	pop	{r3, pc}
   b7360:	00030240 	.word	0x00030240

000b7364 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b7364:	b508      	push	{r3, lr}
   b7366:	4b02      	ldr	r3, [pc, #8]	; (b7370 <network_connecting+0xc>)
   b7368:	681b      	ldr	r3, [r3, #0]
   b736a:	689b      	ldr	r3, [r3, #8]
   b736c:	9301      	str	r3, [sp, #4]
   b736e:	bd08      	pop	{r3, pc}
   b7370:	00030240 	.word	0x00030240

000b7374 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b7374:	b508      	push	{r3, lr}
   b7376:	4b02      	ldr	r3, [pc, #8]	; (b7380 <network_disconnect+0xc>)
   b7378:	681b      	ldr	r3, [r3, #0]
   b737a:	68db      	ldr	r3, [r3, #12]
   b737c:	9301      	str	r3, [sp, #4]
   b737e:	bd08      	pop	{r3, pc}
   b7380:	00030240 	.word	0x00030240

000b7384 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b7384:	b508      	push	{r3, lr}
   b7386:	4b02      	ldr	r3, [pc, #8]	; (b7390 <network_ready+0xc>)
   b7388:	681b      	ldr	r3, [r3, #0]
   b738a:	691b      	ldr	r3, [r3, #16]
   b738c:	9301      	str	r3, [sp, #4]
   b738e:	bd08      	pop	{r3, pc}
   b7390:	00030240 	.word	0x00030240

000b7394 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b7394:	b508      	push	{r3, lr}
   b7396:	4b02      	ldr	r3, [pc, #8]	; (b73a0 <network_on+0xc>)
   b7398:	681b      	ldr	r3, [r3, #0]
   b739a:	695b      	ldr	r3, [r3, #20]
   b739c:	9301      	str	r3, [sp, #4]
   b739e:	bd08      	pop	{r3, pc}
   b73a0:	00030240 	.word	0x00030240

000b73a4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b73a4:	b508      	push	{r3, lr}
   b73a6:	4b02      	ldr	r3, [pc, #8]	; (b73b0 <network_off+0xc>)
   b73a8:	681b      	ldr	r3, [r3, #0]
   b73aa:	699b      	ldr	r3, [r3, #24]
   b73ac:	9301      	str	r3, [sp, #4]
   b73ae:	bd08      	pop	{r3, pc}
   b73b0:	00030240 	.word	0x00030240

000b73b4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b73b4:	b508      	push	{r3, lr}
   b73b6:	4b02      	ldr	r3, [pc, #8]	; (b73c0 <network_listen+0xc>)
   b73b8:	681b      	ldr	r3, [r3, #0]
   b73ba:	69db      	ldr	r3, [r3, #28]
   b73bc:	9301      	str	r3, [sp, #4]
   b73be:	bd08      	pop	{r3, pc}
   b73c0:	00030240 	.word	0x00030240

000b73c4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b73c4:	b508      	push	{r3, lr}
   b73c6:	4b02      	ldr	r3, [pc, #8]	; (b73d0 <network_listening+0xc>)
   b73c8:	681b      	ldr	r3, [r3, #0]
   b73ca:	6a1b      	ldr	r3, [r3, #32]
   b73cc:	9301      	str	r3, [sp, #4]
   b73ce:	bd08      	pop	{r3, pc}
   b73d0:	00030240 	.word	0x00030240

000b73d4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b73d4:	b508      	push	{r3, lr}
   b73d6:	4b02      	ldr	r3, [pc, #8]	; (b73e0 <network_set_listen_timeout+0xc>)
   b73d8:	681b      	ldr	r3, [r3, #0]
   b73da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b73dc:	9301      	str	r3, [sp, #4]
   b73de:	bd08      	pop	{r3, pc}
   b73e0:	00030240 	.word	0x00030240

000b73e4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b73e4:	b508      	push	{r3, lr}
   b73e6:	4b02      	ldr	r3, [pc, #8]	; (b73f0 <network_get_listen_timeout+0xc>)
   b73e8:	681b      	ldr	r3, [r3, #0]
   b73ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b73ec:	9301      	str	r3, [sp, #4]
   b73ee:	bd08      	pop	{r3, pc}
   b73f0:	00030240 	.word	0x00030240

000b73f4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b73f4:	b508      	push	{r3, lr}
   b73f6:	4b02      	ldr	r3, [pc, #8]	; (b7400 <network_is_on+0xc>)
   b73f8:	681b      	ldr	r3, [r3, #0]
   b73fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b73fc:	9301      	str	r3, [sp, #4]
   b73fe:	bd08      	pop	{r3, pc}
   b7400:	00030240 	.word	0x00030240

000b7404 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b7404:	b508      	push	{r3, lr}
   b7406:	4b02      	ldr	r3, [pc, #8]	; (b7410 <network_is_off+0xc>)
   b7408:	681b      	ldr	r3, [r3, #0]
   b740a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b740c:	9301      	str	r3, [sp, #4]
   b740e:	bd08      	pop	{r3, pc}
   b7410:	00030240 	.word	0x00030240

000b7414 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b7414:	b508      	push	{r3, lr}
   b7416:	4b02      	ldr	r3, [pc, #8]	; (b7420 <malloc+0xc>)
   b7418:	681b      	ldr	r3, [r3, #0]
   b741a:	681b      	ldr	r3, [r3, #0]
   b741c:	9301      	str	r3, [sp, #4]
   b741e:	bd08      	pop	{r3, pc}
   b7420:	0003021c 	.word	0x0003021c

000b7424 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b7424:	b508      	push	{r3, lr}
   b7426:	4b02      	ldr	r3, [pc, #8]	; (b7430 <free+0xc>)
   b7428:	681b      	ldr	r3, [r3, #0]
   b742a:	685b      	ldr	r3, [r3, #4]
   b742c:	9301      	str	r3, [sp, #4]
   b742e:	bd08      	pop	{r3, pc}
   b7430:	0003021c 	.word	0x0003021c

000b7434 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b7434:	b508      	push	{r3, lr}
   b7436:	4b02      	ldr	r3, [pc, #8]	; (b7440 <realloc+0xc>)
   b7438:	681b      	ldr	r3, [r3, #0]
   b743a:	689b      	ldr	r3, [r3, #8]
   b743c:	9301      	str	r3, [sp, #4]
   b743e:	bd08      	pop	{r3, pc}
   b7440:	0003021c 	.word	0x0003021c

000b7444 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   b7444:	b508      	push	{r3, lr}
   b7446:	4b02      	ldr	r3, [pc, #8]	; (b7450 <sprintf+0xc>)
   b7448:	681b      	ldr	r3, [r3, #0]
   b744a:	68db      	ldr	r3, [r3, #12]
   b744c:	9301      	str	r3, [sp, #4]
   b744e:	bd08      	pop	{r3, pc}
   b7450:	0003021c 	.word	0x0003021c

000b7454 <sscanf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   b7454:	b508      	push	{r3, lr}
   b7456:	4b02      	ldr	r3, [pc, #8]	; (b7460 <sscanf+0xc>)
   b7458:	681b      	ldr	r3, [r3, #0]
   b745a:	695b      	ldr	r3, [r3, #20]
   b745c:	9301      	str	r3, [sp, #4]
   b745e:	bd08      	pop	{r3, pc}
   b7460:	0003021c 	.word	0x0003021c

000b7464 <snprintf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   b7464:	b508      	push	{r3, lr}
   b7466:	4b02      	ldr	r3, [pc, #8]	; (b7470 <snprintf+0xc>)
   b7468:	681b      	ldr	r3, [r3, #0]
   b746a:	69db      	ldr	r3, [r3, #28]
   b746c:	9301      	str	r3, [sp, #4]
   b746e:	bd08      	pop	{r3, pc}
   b7470:	0003021c 	.word	0x0003021c

000b7474 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b7474:	b508      	push	{r3, lr}
   b7476:	4b02      	ldr	r3, [pc, #8]	; (b7480 <vsnprintf+0xc>)
   b7478:	681b      	ldr	r3, [r3, #0]
   b747a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b747c:	9301      	str	r3, [sp, #4]
   b747e:	bd08      	pop	{r3, pc}
   b7480:	0003021c 	.word	0x0003021c

000b7484 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b7484:	b508      	push	{r3, lr}
   b7486:	4b02      	ldr	r3, [pc, #8]	; (b7490 <abort+0xc>)
   b7488:	681b      	ldr	r3, [r3, #0]
   b748a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b748c:	9301      	str	r3, [sp, #4]
   b748e:	bd08      	pop	{r3, pc}
   b7490:	0003021c 	.word	0x0003021c

000b7494 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b7494:	b508      	push	{r3, lr}
   b7496:	4b02      	ldr	r3, [pc, #8]	; (b74a0 <_malloc_r+0xc>)
   b7498:	681b      	ldr	r3, [r3, #0]
   b749a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b749c:	9301      	str	r3, [sp, #4]
   b749e:	bd08      	pop	{r3, pc}
   b74a0:	0003021c 	.word	0x0003021c

000b74a4 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b74a4:	b508      	push	{r3, lr}
   b74a6:	4b02      	ldr	r3, [pc, #8]	; (b74b0 <__errno+0xc>)
   b74a8:	681b      	ldr	r3, [r3, #0]
   b74aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b74ac:	9301      	str	r3, [sp, #4]
   b74ae:	bd08      	pop	{r3, pc}
   b74b0:	0003021c 	.word	0x0003021c

000b74b4 <__assert_func>:

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b74b4:	b508      	push	{r3, lr}
   b74b6:	4b02      	ldr	r3, [pc, #8]	; (b74c0 <__assert_func+0xc>)
   b74b8:	681b      	ldr	r3, [r3, #0]
   b74ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b74bc:	9301      	str	r3, [sp, #4]
   b74be:	bd08      	pop	{r3, pc}
   b74c0:	0003021c 	.word	0x0003021c

000b74c4 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b74c4:	b508      	push	{r3, lr}
   b74c6:	4b02      	ldr	r3, [pc, #8]	; (b74d0 <newlib_impure_ptr_callback+0xc>)
   b74c8:	681b      	ldr	r3, [r3, #0]
   b74ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b74cc:	9301      	str	r3, [sp, #4]
   b74ce:	bd08      	pop	{r3, pc}
   b74d0:	0003021c 	.word	0x0003021c

000b74d4 <localtime_r>:

#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   b74d4:	b508      	push	{r3, lr}
   b74d6:	4b02      	ldr	r3, [pc, #8]	; (b74e0 <localtime_r+0xc>)
   b74d8:	681b      	ldr	r3, [r3, #0]
   b74da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b74dc:	9301      	str	r3, [sp, #4]
   b74de:	bd08      	pop	{r3, pc}
   b74e0:	0003021c 	.word	0x0003021c

000b74e4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b74e4:	2100      	movs	r1, #0
   b74e6:	f7ff bed1 	b.w	b728c <system_delay_ms>

000b74ea <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b74ea:	b510      	push	{r4, lr}
      if (_M_empty())
   b74ec:	6883      	ldr	r3, [r0, #8]
   b74ee:	4604      	mov	r4, r0
   b74f0:	b90b      	cbnz	r3, b74f6 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b74f2:	f003 fda0 	bl	bb036 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b74f6:	68c3      	ldr	r3, [r0, #12]
   b74f8:	4798      	blx	r3
      if (_M_manager)
   b74fa:	68a3      	ldr	r3, [r4, #8]
   b74fc:	b11b      	cbz	r3, b7506 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b74fe:	2203      	movs	r2, #3
   b7500:	4621      	mov	r1, r4
   b7502:	4620      	mov	r0, r4
   b7504:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b7506:	4620      	mov	r0, r4
   b7508:	2110      	movs	r1, #16
}
   b750a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b750e:	f7fc bdc6 	b.w	b409e <_ZdlPvj>

000b7512 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7512:	4770      	bx	lr

000b7514 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b7514:	4770      	bx	lr

000b7516 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b7516:	4770      	bx	lr

000b7518 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b7518:	4770      	bx	lr
	...

000b751c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b751c:	4b06      	ldr	r3, [pc, #24]	; (b7538 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b751e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7520:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b7522:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7526:	d005      	beq.n	b7534 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7528:	4608      	mov	r0, r1
   b752a:	f003 fd87 	bl	bb03c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b752e:	2800      	cmp	r0, #0
   b7530:	bf08      	it	eq
   b7532:	2400      	moveq	r4, #0
      }
   b7534:	4620      	mov	r0, r4
   b7536:	bd10      	pop	{r4, pc}
   b7538:	000be5e8 	.word	0x000be5e8

000b753c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b753c:	4b06      	ldr	r3, [pc, #24]	; (b7558 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b753e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7540:	b510      	push	{r4, lr}
   b7542:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7546:	d005      	beq.n	b7554 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7548:	4608      	mov	r0, r1
   b754a:	f003 fd77 	bl	bb03c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b754e:	2800      	cmp	r0, #0
   b7550:	bf08      	it	eq
   b7552:	2400      	moveq	r4, #0
      }
   b7554:	4620      	mov	r0, r4
   b7556:	bd10      	pop	{r4, pc}
   b7558:	000be5e8 	.word	0x000be5e8

000b755c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b755c:	4b06      	ldr	r3, [pc, #24]	; (b7578 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b755e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b7560:	b510      	push	{r4, lr}
   b7562:	f100 040c 	add.w	r4, r0, #12
	    ||
   b7566:	d005      	beq.n	b7574 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b7568:	4608      	mov	r0, r1
   b756a:	f003 fd67 	bl	bb03c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b756e:	2800      	cmp	r0, #0
   b7570:	bf08      	it	eq
   b7572:	2400      	moveq	r4, #0
      }
   b7574:	4620      	mov	r0, r4
   b7576:	bd10      	pop	{r4, pc}
   b7578:	000be5e8 	.word	0x000be5e8

000b757c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b757c:	b510      	push	{r4, lr}
   b757e:	2168      	movs	r1, #104	; 0x68
   b7580:	4604      	mov	r4, r0
   b7582:	f7fc fd8c 	bl	b409e <_ZdlPvj>
   b7586:	4620      	mov	r0, r4
   b7588:	bd10      	pop	{r4, pc}

000b758a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b758a:	b510      	push	{r4, lr}
   b758c:	2128      	movs	r1, #40	; 0x28
   b758e:	4604      	mov	r4, r0
   b7590:	f7fc fd85 	bl	b409e <_ZdlPvj>
   b7594:	4620      	mov	r0, r4
   b7596:	bd10      	pop	{r4, pc}

000b7598 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b7598:	b510      	push	{r4, lr}
   b759a:	2130      	movs	r1, #48	; 0x30
   b759c:	4604      	mov	r4, r0
   b759e:	f7fc fd7e 	bl	b409e <_ZdlPvj>
   b75a2:	4620      	mov	r0, r4
   b75a4:	bd10      	pop	{r4, pc}

000b75a6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p
   b75a6:	2168      	movs	r1, #104	; 0x68
   b75a8:	f7fc bd79 	b.w	b409e <_ZdlPvj>

000b75ac <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b75ac:	2128      	movs	r1, #40	; 0x28
   b75ae:	f7fc bd76 	b.w	b409e <_ZdlPvj>

000b75b2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b75b2:	2130      	movs	r1, #48	; 0x30
   b75b4:	f7fc bd73 	b.w	b409e <_ZdlPvj>

000b75b8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b75b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b75ba:	2500      	movs	r5, #0
   b75bc:	1cec      	adds	r4, r5, #3
   b75be:	428c      	cmp	r4, r1
   b75c0:	d80d      	bhi.n	b75de <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b75c2:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b75c4:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b75c6:	5d87      	ldrb	r7, [r0, r6]
   b75c8:	4297      	cmp	r7, r2
   b75ca:	d105      	bne.n	b75d8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b75cc:	4426      	add	r6, r4
   b75ce:	42b1      	cmp	r1, r6
   b75d0:	d305      	bcc.n	b75de <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b75d2:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b75d4:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b75d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b75d8:	3401      	adds	r4, #1
   b75da:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b75dc:	e7ee      	b.n	b75bc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b75de:	2000      	movs	r0, #0
   b75e0:	e7f9      	b.n	b75d6 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000b75e4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b75e4:	4a02      	ldr	r2, [pc, #8]	; (b75f0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b75e6:	4903      	ldr	r1, [pc, #12]	; (b75f4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0x10>)
   b75e8:	200a      	movs	r0, #10
   b75ea:	f7ff be2f 	b.w	b724c <panic_>
   b75ee:	bf00      	nop
   b75f0:	000b6f6d 	.word	0x000b6f6d
   b75f4:	000be378 	.word	0x000be378

000b75f8 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b75f8:	b430      	push	{r4, r5}
   b75fa:	460d      	mov	r5, r1
   b75fc:	4611      	mov	r1, r2
   b75fe:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b7600:	6803      	ldr	r3, [r0, #0]
   b7602:	6809      	ldr	r1, [r1, #0]
   b7604:	6828      	ldr	r0, [r5, #0]
   b7606:	e9d3 4300 	ldrd	r4, r3, [r3]
   b760a:	46a4      	mov	ip, r4
      }
   b760c:	bc30      	pop	{r4, r5}
   b760e:	4760      	bx	ip

000b7610 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b7610:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b7612:	b538      	push	{r3, r4, r5, lr}
   b7614:	4604      	mov	r4, r0
	switch (__op)
   b7616:	d102      	bne.n	b761e <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b7618:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b761a:	6023      	str	r3, [r4, #0]
	}
   b761c:	e003      	b.n	b7626 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b761e:	2a02      	cmp	r2, #2
   b7620:	d003      	beq.n	b762a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b7622:	2a03      	cmp	r2, #3
   b7624:	d00d      	beq.n	b7642 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b7626:	2000      	movs	r0, #0
   b7628:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b762a:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b762c:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b762e:	f7fc fd32 	bl	b4096 <_Znwj>
   b7632:	4603      	mov	r3, r0
   b7634:	2800      	cmp	r0, #0
   b7636:	d0f0      	beq.n	b761a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b7638:	e895 0003 	ldmia.w	r5, {r0, r1}
   b763c:	e883 0003 	stmia.w	r3, {r0, r1}
   b7640:	e7eb      	b.n	b761a <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b7642:	6800      	ldr	r0, [r0, #0]
   b7644:	2800      	cmp	r0, #0
   b7646:	d0ee      	beq.n	b7626 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b7648:	2108      	movs	r1, #8
   b764a:	f7fc fd28 	bl	b409e <_ZdlPvj>
   b764e:	e7ea      	b.n	b7626 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b7650 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
   b7650:	b510      	push	{r4, lr}
	if (_M_manager)
   b7652:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b7654:	4604      	mov	r4, r0
	if (_M_manager)
   b7656:	b12b      	cbz	r3, b7664 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b7658:	2203      	movs	r2, #3
   b765a:	4601      	mov	r1, r0
   b765c:	4798      	blx	r3
	    _M_manager = nullptr;
   b765e:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b7660:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
   b7664:	bd10      	pop	{r4, pc}

000b7666 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>:
      operator=(nullptr_t) noexcept
   b7666:	b510      	push	{r4, lr}
	if (_M_manager)
   b7668:	6883      	ldr	r3, [r0, #8]
      operator=(nullptr_t) noexcept
   b766a:	4604      	mov	r4, r0
	if (_M_manager)
   b766c:	b12b      	cbz	r3, b767a <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0+0x14>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
   b766e:	2203      	movs	r2, #3
   b7670:	4601      	mov	r1, r0
   b7672:	4798      	blx	r3
	    _M_manager = nullptr;
   b7674:	2300      	movs	r3, #0
	    _M_invoker = nullptr;
   b7676:	e9c4 3302 	strd	r3, r3, [r4, #8]
      }
   b767a:	bd10      	pop	{r4, pc}

000b767c <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>:
class BleDiscoveryDelegator {
public:
    BleDiscoveryDelegator() = default;
    ~BleDiscoveryDelegator() = default;

    int discoverAllServices(BlePeerDevice& peer) {
   b767c:	b510      	push	{r4, lr}
        LOG(TRACE, "Start discovering services.");
   b767e:	2300      	movs	r3, #0
    int discoverAllServices(BlePeerDevice& peer) {
   b7680:	b08a      	sub	sp, #40	; 0x28
        LOG(TRACE, "Start discovering services.");
   b7682:	2220      	movs	r2, #32
   b7684:	e9cd 2302 	strd	r2, r3, [sp, #8]
    int discoverAllServices(BlePeerDevice& peer) {
   b7688:	4604      	mov	r4, r0
        LOG(TRACE, "Start discovering services.");
   b768a:	4a08      	ldr	r2, [pc, #32]	; (b76ac <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x30>)
   b768c:	9200      	str	r2, [sp, #0]
   b768e:	4908      	ldr	r1, [pc, #32]	; (b76b0 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x34>)
   b7690:	aa02      	add	r2, sp, #8
   b7692:	2001      	movs	r0, #1
   b7694:	f7ff fde2 	bl	b725c <log_message>
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   b7698:	6820      	ldr	r0, [r4, #0]
   b769a:	4906      	ldr	r1, [pc, #24]	; (b76b4 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x38>)
   b769c:	8800      	ldrh	r0, [r0, #0]
   b769e:	2300      	movs	r3, #0
   b76a0:	4622      	mov	r2, r4
    }
   b76a2:	b00a      	add	sp, #40	; 0x28
   b76a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   b76a8:	f7ff bb9a 	b.w	b6de0 <hal_ble_gatt_client_discover_all_services>
   b76ac:	000be39a 	.word	0x000be39a
   b76b0:	000be38f 	.word	0x000be38f
   b76b4:	000b91f1 	.word	0x000b91f1

000b76b8 <_ZL12bytes2hexbufPKhjPc.isra.0>:
{
    *p++ = ascii_nibble_lower_case(nibble);
    return p;
}

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
   b76b8:	b510      	push	{r4, lr}
   b76ba:	3801      	subs	r0, #1
   b76bc:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
    {
        out = concat_nibble(out, (buf[i] >> 4));
   b76c0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   b76c4:	091b      	lsrs	r3, r3, #4
    char hex_digit = nibble + 48;
   b76c6:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b76ca:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b76cc:	bf88      	it	hi
   b76ce:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    *p++ = ascii_nibble(nibble);
   b76d2:	f802 4b02 	strb.w	r4, [r2], #2
        out = concat_nibble(out, (buf[i] & 0xF));
   b76d6:	7803      	ldrb	r3, [r0, #0]
   b76d8:	f003 030f 	and.w	r3, r3, #15
    char hex_digit = nibble + 48;
   b76dc:	f103 0430 	add.w	r4, r3, #48	; 0x30
    if (57 < hex_digit) {
   b76e0:	2c39      	cmp	r4, #57	; 0x39
        hex_digit += 7;
   b76e2:	bf88      	it	hi
   b76e4:	f103 0437 	addhi.w	r4, r3, #55	; 0x37
    for (i = 0; i < len; ++i)
   b76e8:	4291      	cmp	r1, r2
    *p++ = ascii_nibble(nibble);
   b76ea:	f802 4c01 	strb.w	r4, [r2, #-1]
    for (i = 0; i < len; ++i)
   b76ee:	d1e7      	bne.n	b76c0 <_ZL12bytes2hexbufPKhjPc.isra.0+0x8>
    }
    return result;
}
   b76f0:	bd10      	pop	{r4, pc}

000b76f2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b76f2:	b510      	push	{r4, lr}
   b76f4:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b76f6:	3058      	adds	r0, #88	; 0x58
   b76f8:	f7fc fdc6 	bl	b4288 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b76fc:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b7700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b7704:	f003 b832 	b.w	ba76c <_ZN6StringD1Ev>

000b7708 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>:
      operator=(const __shared_count& __r) noexcept
   b7708:	b538      	push	{r3, r4, r5, lr}
	if (__tmp != _M_pi)
   b770a:	6803      	ldr	r3, [r0, #0]
   b770c:	428b      	cmp	r3, r1
      operator=(const __shared_count& __r) noexcept
   b770e:	4605      	mov	r5, r0
   b7710:	460c      	mov	r4, r1
	if (__tmp != _M_pi)
   b7712:	d008      	beq.n	b7726 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1e>
	    if (__tmp != 0)
   b7714:	b111      	cbz	r1, b771c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x14>
    { ++_M_use_count; }
   b7716:	684b      	ldr	r3, [r1, #4]
   b7718:	3301      	adds	r3, #1
   b771a:	604b      	str	r3, [r1, #4]
	    if (_M_pi != 0)
   b771c:	6828      	ldr	r0, [r5, #0]
   b771e:	b108      	cbz	r0, b7724 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x1c>
	      _M_pi->_M_release();
   b7720:	f7fc fde8 	bl	b42f4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
	    _M_pi = __tmp;
   b7724:	602c      	str	r4, [r5, #0]
      }
   b7726:	bd38      	pop	{r3, r4, r5, pc}

000b7728 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b7728:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b772c:	b2da      	uxtb	r2, r3
   b772e:	2a09      	cmp	r2, #9
   b7730:	d801      	bhi.n	b7736 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b7732:	4618      	mov	r0, r3
   b7734:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b7736:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b773a:	2b05      	cmp	r3, #5
   b773c:	d801      	bhi.n	b7742 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b773e:	3857      	subs	r0, #87	; 0x57
   b7740:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b7742:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b7746:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b7748:	bf94      	ite	ls
   b774a:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b774c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b7750:	4770      	bx	lr
	...

000b7754 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b7754:	b510      	push	{r4, lr}
            locked_(false) {
   b7756:	2300      	movs	r3, #0
   b7758:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b775a:	4b04      	ldr	r3, [pc, #16]	; (b776c <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b775c:	4604      	mov	r4, r0
   b775e:	6818      	ldr	r0, [r3, #0]
   b7760:	f7ff fbe4 	bl	b6f2c <os_mutex_recursive_lock>
        locked_ = true;
   b7764:	2301      	movs	r3, #1
   b7766:	7023      	strb	r3, [r4, #0]
    }
   b7768:	4620      	mov	r0, r4
   b776a:	bd10      	pop	{r4, pc}
   b776c:	2003e654 	.word	0x2003e654

000b7770 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b7770:	b510      	push	{r4, lr}
        if (locked_) {
   b7772:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b7774:	4604      	mov	r4, r0
        if (locked_) {
   b7776:	b11b      	cbz	r3, b7780 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b7778:	4b02      	ldr	r3, [pc, #8]	; (b7784 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b777a:	6818      	ldr	r0, [r3, #0]
   b777c:	f7ff fbde 	bl	b6f3c <os_mutex_recursive_unlock>
    }
   b7780:	4620      	mov	r0, r4
   b7782:	bd10      	pop	{r4, pc}
   b7784:	2003e654 	.word	0x2003e654

000b7788 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b7788:	b082      	sub	sp, #8
   b778a:	4603      	mov	r3, r0
    address_ = addr;
   b778c:	6808      	ldr	r0, [r1, #0]
   b778e:	6849      	ldr	r1, [r1, #4]
   b7790:	466a      	mov	r2, sp
   b7792:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b7794:	466a      	mov	r2, sp
   b7796:	ca03      	ldmia	r2!, {r0, r1}
   b7798:	6018      	str	r0, [r3, #0]
}
   b779a:	4618      	mov	r0, r3
    address_ = addr.address_;
   b779c:	6059      	str	r1, [r3, #4]
}
   b779e:	b002      	add	sp, #8
   b77a0:	4770      	bx	lr

000b77a2 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b77a2:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b77a4:	7982      	ldrb	r2, [r0, #6]
   b77a6:	798b      	ldrb	r3, [r1, #6]
   b77a8:	429a      	cmp	r2, r3
   b77aa:	d106      	bne.n	b77ba <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b77ac:	2206      	movs	r2, #6
   b77ae:	f004 fa48 	bl	bbc42 <memcmp>
   b77b2:	fab0 f080 	clz	r0, r0
   b77b6:	0940      	lsrs	r0, r0, #5
}
   b77b8:	bd08      	pop	{r3, pc}
    return false;
   b77ba:	2000      	movs	r0, #0
   b77bc:	e7fc      	b.n	b77b8 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b77be <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b77be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b77c2:	6003      	str	r3, [r0, #0]
   b77c4:	8083      	strh	r3, [r0, #4]
}
   b77c6:	2000      	movs	r0, #0
   b77c8:	4770      	bx	lr

000b77ca <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b77ca:	b508      	push	{r3, lr}
   b77cc:	4602      	mov	r2, r0
        : address_{} {
   b77ce:	2100      	movs	r1, #0
   b77d0:	6001      	str	r1, [r0, #0]
   b77d2:	6041      	str	r1, [r0, #4]
    clear();
   b77d4:	f7ff fff3 	bl	b77be <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b77d8:	7191      	strb	r1, [r2, #6]
}
   b77da:	4610      	mov	r0, r2
   b77dc:	bd08      	pop	{r3, pc}
	...

000b77e0 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b77e0:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b77e2:	2301      	movs	r3, #1
   b77e4:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b77e6:	4b05      	ldr	r3, [pc, #20]	; (b77fc <_ZN8particle7BleUuidC1Ev+0x1c>)
   b77e8:	4602      	mov	r2, r0
   b77ea:	f103 0110 	add.w	r1, r3, #16
   b77ee:	f853 4b04 	ldr.w	r4, [r3], #4
   b77f2:	f842 4b04 	str.w	r4, [r2], #4
   b77f6:	428b      	cmp	r3, r1
   b77f8:	d1f9      	bne.n	b77ee <_ZN8particle7BleUuidC1Ev+0xe>
}
   b77fa:	bd10      	pop	{r4, pc}
   b77fc:	000be5f6 	.word	0x000be5f6

000b7800 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>:
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   b7800:	7c0b      	ldrb	r3, [r1, #16]
   b7802:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
   b7806:	b530      	push	{r4, r5, lr}
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   b7808:	d10d      	bne.n	b7826 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x26>
        type_ = BleUuidType::SHORT;
   b780a:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b780c:	4b0c      	ldr	r3, [pc, #48]	; (b7840 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x40>)
   b780e:	4602      	mov	r2, r0
   b7810:	f103 0410 	add.w	r4, r3, #16
   b7814:	f853 5b04 	ldr.w	r5, [r3], #4
   b7818:	f842 5b04 	str.w	r5, [r2], #4
   b781c:	42a3      	cmp	r3, r4
   b781e:	d1f9      	bne.n	b7814 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x14>
        uuid128_[UUID16_LO] = (uint8_t)uuid.uuid16;
   b7820:	880b      	ldrh	r3, [r1, #0]
   b7822:	8183      	strh	r3, [r0, #12]
}
   b7824:	bd30      	pop	{r4, r5, pc}
        type_ = BleUuidType::LONG;
   b7826:	2301      	movs	r3, #1
   b7828:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
   b782a:	f101 0210 	add.w	r2, r1, #16
   b782e:	4603      	mov	r3, r0
   b7830:	f851 4b04 	ldr.w	r4, [r1], #4
   b7834:	f843 4b04 	str.w	r4, [r3], #4
   b7838:	4291      	cmp	r1, r2
   b783a:	d1f9      	bne.n	b7830 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x30>
   b783c:	e7f2      	b.n	b7824 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x24>
   b783e:	bf00      	nop
   b7840:	000be5f6 	.word	0x000be5f6

000b7844 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b7844:	b510      	push	{r4, lr}
    if (uuid128) {
   b7846:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b7848:	4604      	mov	r4, r0
    if (uuid128) {
   b784a:	b1b1      	cbz	r1, b787a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b784c:	2a01      	cmp	r2, #1
   b784e:	f101 0210 	add.w	r2, r1, #16
   b7852:	d10a      	bne.n	b786a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b7854:	4601      	mov	r1, r0
   b7856:	f853 0b04 	ldr.w	r0, [r3], #4
   b785a:	f841 0b04 	str.w	r0, [r1], #4
   b785e:	4293      	cmp	r3, r2
   b7860:	d1f9      	bne.n	b7856 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b7862:	2301      	movs	r3, #1
   b7864:	6123      	str	r3, [r4, #16]
}
   b7866:	4620      	mov	r0, r4
   b7868:	bd10      	pop	{r4, pc}
   b786a:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b786c:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b7870:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b7874:	429a      	cmp	r2, r3
   b7876:	d1f9      	bne.n	b786c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b7878:	e7f3      	b.n	b7862 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b787a:	2210      	movs	r2, #16
   b787c:	f004 fa19 	bl	bbcb2 <memset>
   b7880:	e7f1      	b.n	b7866 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b7882 <_ZN8particle7BleUuidC1Et>:
BleUuid::BleUuid(uint16_t uuid16)
   b7882:	b538      	push	{r3, r4, r5, lr}
   b7884:	4604      	mov	r4, r0
   b7886:	460d      	mov	r5, r1
        : BleUuid() {
   b7888:	f7ff ffaa 	bl	b77e0 <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   b788c:	2300      	movs	r3, #0
   b788e:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b7890:	81a5      	strh	r5, [r4, #12]
}
   b7892:	4620      	mov	r0, r4
   b7894:	bd38      	pop	{r3, r4, r5, pc}

000b7896 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b7896:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b7898:	6902      	ldr	r2, [r0, #16]
   b789a:	690b      	ldr	r3, [r1, #16]
   b789c:	429a      	cmp	r2, r3
   b789e:	d106      	bne.n	b78ae <_ZNK8particle7BleUuideqERKS0_+0x18>
   b78a0:	2210      	movs	r2, #16
   b78a2:	f004 f9ce 	bl	bbc42 <memcmp>
   b78a6:	fab0 f080 	clz	r0, r0
   b78aa:	0940      	lsrs	r0, r0, #5
}
   b78ac:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b78ae:	2000      	movs	r0, #0
   b78b0:	e7fc      	b.n	b78ac <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b78b4 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b78b4:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b78b6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b78ba:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b78bc:	4b34      	ldr	r3, [pc, #208]	; (b7990 <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b78be:	460c      	mov	r4, r1
   b78c0:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b78c2:	4602      	mov	r2, r0
   b78c4:	f103 0110 	add.w	r1, r3, #16
   b78c8:	f853 0b04 	ldr.w	r0, [r3], #4
   b78cc:	f842 0b04 	str.w	r0, [r2], #4
   b78d0:	428b      	cmp	r3, r1
   b78d2:	d1f9      	bne.n	b78c8 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b78d4:	b344      	cbz	r4, b7928 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b78d6:	2124      	movs	r1, #36	; 0x24
   b78d8:	4620      	mov	r0, r4
   b78da:	f004 fa8f 	bl	bbdfc <strnlen>
   b78de:	2804      	cmp	r0, #4
   b78e0:	f04f 0500 	mov.w	r5, #0
   b78e4:	d123      	bne.n	b792e <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b78e6:	f8ad 5004 	strh.w	r5, [sp, #4]
   b78ea:	af01      	add	r7, sp, #4
   b78ec:	1ca5      	adds	r5, r4, #2
   b78ee:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b78f0:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b78f4:	f7ff ff18 	bl	b7728 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b78f8:	f1b0 0800 	subs.w	r8, r0, #0
   b78fc:	db12      	blt.n	b7924 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b78fe:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b7902:	f7ff ff11 	bl	b7728 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b7906:	2800      	cmp	r0, #0
   b7908:	db0c      	blt.n	b7924 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b790a:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b790c:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b7910:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b7912:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b7916:	d1eb      	bne.n	b78f0 <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b7918:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b791c:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b791e:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b7922:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b7924:	2300      	movs	r3, #0
   b7926:	6133      	str	r3, [r6, #16]
}
   b7928:	b002      	add	sp, #8
   b792a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b792e:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b7932:	2124      	movs	r1, #36	; 0x24
   b7934:	4620      	mov	r0, r4
   b7936:	f004 fa61 	bl	bbdfc <strnlen>
   b793a:	42a8      	cmp	r0, r5
   b793c:	d807      	bhi.n	b794e <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b793e:	4642      	mov	r2, r8
   b7940:	2100      	movs	r1, #0
   b7942:	4630      	mov	r0, r6
}
   b7944:	b002      	add	sp, #8
   b7946:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b794a:	f004 b9b2 	b.w	bbcb2 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b794e:	f1b8 0f00 	cmp.w	r8, #0
   b7952:	d0e9      	beq.n	b7928 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b7954:	5d60      	ldrb	r0, [r4, r5]
   b7956:	f7ff fee7 	bl	b7728 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b795a:	0603      	lsls	r3, r0, #24
   b795c:	d415      	bmi.n	b798a <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b795e:	0100      	lsls	r0, r0, #4
   b7960:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b7964:	b2c7      	uxtb	r7, r0
   b7966:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b796a:	2124      	movs	r1, #36	; 0x24
   b796c:	4620      	mov	r0, r4
   b796e:	f004 fa45 	bl	bbdfc <strnlen>
   b7972:	3501      	adds	r5, #1
   b7974:	42a8      	cmp	r0, r5
   b7976:	d908      	bls.n	b798a <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b7978:	5d60      	ldrb	r0, [r4, r5]
   b797a:	f7ff fed5 	bl	b7728 <_ZN8particle11hexToNibbleEc>
   b797e:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b7980:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b7982:	bfa4      	itt	ge
   b7984:	4338      	orrge	r0, r7
   b7986:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b798a:	3501      	adds	r5, #1
   b798c:	e7d1      	b.n	b7932 <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b798e:	bf00      	nop
   b7990:	000be5f6 	.word	0x000be5f6

000b7994 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b7994:	b513      	push	{r0, r1, r4, lr}
   b7996:	4604      	mov	r4, r0
   b7998:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b799a:	f7ff ff21 	bl	b77e0 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b799e:	4620      	mov	r0, r4
   b79a0:	9901      	ldr	r1, [sp, #4]
   b79a2:	f7ff ff87 	bl	b78b4 <_ZN8particle7BleUuid9constructEPKc>
}
   b79a6:	4620      	mov	r0, r4
   b79a8:	b002      	add	sp, #8
   b79aa:	bd10      	pop	{r4, pc}

000b79ac <_ZNK8particle7BleUuid11toBigEndianEPh>:
void BleUuid::toBigEndian(uint8_t buf[BLE_SIG_UUID_128BIT_LEN]) const {
   b79ac:	b510      	push	{r4, lr}
   b79ae:	f100 030f 	add.w	r3, r0, #15
   b79b2:	3901      	subs	r1, #1
        buf[i] = uuid128_[j];
   b79b4:	781c      	ldrb	r4, [r3, #0]
   b79b6:	f801 4f01 	strb.w	r4, [r1, #1]!
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b79ba:	4283      	cmp	r3, r0
   b79bc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   b79c0:	d1f8      	bne.n	b79b4 <_ZNK8particle7BleUuid11toBigEndianEPh+0x8>
}
   b79c2:	bd10      	pop	{r4, pc}

000b79c4 <_ZNK8particle7BleUuid8toStringEPcjb>:
size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
   b79c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b79c8:	461f      	mov	r7, r3
   b79ca:	b08e      	sub	sp, #56	; 0x38
    if (!buf || len == 0) {
   b79cc:	460d      	mov	r5, r1
   b79ce:	2900      	cmp	r1, #0
   b79d0:	d05b      	beq.n	b7a8a <_ZNK8particle7BleUuid8toStringEPcjb+0xc6>
   b79d2:	b1da      	cbz	r2, b7a0c <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
    if (type() == BleUuidType::SHORT) {
   b79d4:	f8d0 8010 	ldr.w	r8, [r0, #16]
        len = std::min(len - 1, sizeof(cStr));
   b79d8:	1e54      	subs	r4, r2, #1
    if (type() == BleUuidType::SHORT) {
   b79da:	f1b8 0f00 	cmp.w	r8, #0
   b79de:	d119      	bne.n	b7a14 <_ZNK8particle7BleUuid8toStringEPcjb+0x50>
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b79e0:	8983      	ldrh	r3, [r0, #12]
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
   b79e2:	f8cd 8014 	str.w	r8, [sp, #20]
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b79e6:	ba5b      	rev16	r3, r3
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   b79e8:	aa05      	add	r2, sp, #20
   b79ea:	2102      	movs	r1, #2
   b79ec:	a801      	add	r0, sp, #4
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   b79ee:	f8ad 3004 	strh.w	r3, [sp, #4]
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   b79f2:	f7ff fe61 	bl	b76b8 <_ZL12bytes2hexbufPKhjPc.isra.0>
        len = std::min(len - 1, sizeof(cStr));
   b79f6:	2c04      	cmp	r4, #4
   b79f8:	bf28      	it	cs
   b79fa:	2404      	movcs	r4, #4
        memcpy(buf, cStr, len);
   b79fc:	4622      	mov	r2, r4
   b79fe:	a905      	add	r1, sp, #20
   b7a00:	4628      	mov	r0, r5
   b7a02:	f004 f92e 	bl	bbc62 <memcpy>
        buf[len++] = '\0';
   b7a06:	f805 8004 	strb.w	r8, [r5, r4]
   b7a0a:	1c62      	adds	r2, r4, #1
}
   b7a0c:	4610      	mov	r0, r2
   b7a0e:	b00e      	add	sp, #56	; 0x38
   b7a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    toBigEndian(temp);
   b7a14:	a901      	add	r1, sp, #4
   b7a16:	f7ff ffc9 	bl	b79ac <_ZNK8particle7BleUuid11toBigEndianEPh>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   b7a1a:	aa05      	add	r2, sp, #20
    if (stripped) {
   b7a1c:	b17f      	cbz	r7, b7a3e <_ZNK8particle7BleUuid8toStringEPcjb+0x7a>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   b7a1e:	2110      	movs	r1, #16
   b7a20:	a801      	add	r0, sp, #4
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   b7a22:	f7ff fe49 	bl	b76b8 <_ZL12bytes2hexbufPKhjPc.isra.0>
    len = std::min(len - 1, sizeof(cStr));
   b7a26:	2c24      	cmp	r4, #36	; 0x24
   b7a28:	bf28      	it	cs
   b7a2a:	2424      	movcs	r4, #36	; 0x24
    memcpy(buf, cStr, len);
   b7a2c:	4622      	mov	r2, r4
   b7a2e:	a905      	add	r1, sp, #20
   b7a30:	4628      	mov	r0, r5
   b7a32:	f004 f916 	bl	bbc62 <memcpy>
    buf[len++] = '\0';
   b7a36:	2300      	movs	r3, #0
   b7a38:	552b      	strb	r3, [r5, r4]
   b7a3a:	1c62      	adds	r2, r4, #1
    return len;
   b7a3c:	e7e6      	b.n	b7a0c <_ZNK8particle7BleUuid8toStringEPcjb+0x48>
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
   b7a3e:	2104      	movs	r1, #4
   b7a40:	eb0d 0001 	add.w	r0, sp, r1
   b7a44:	f7ff fe38 	bl	b76b8 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2] = '-';
   b7a48:	262d      	movs	r6, #45	; 0x2d
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   b7a4a:	f10d 021d 	add.w	r2, sp, #29
   b7a4e:	2102      	movs	r1, #2
   b7a50:	a802      	add	r0, sp, #8
        cStr[idx * 2] = '-';
   b7a52:	f88d 601c 	strb.w	r6, [sp, #28]
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   b7a56:	f7ff fe2f 	bl	b76b8 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   b7a5a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   b7a5e:	2102      	movs	r1, #2
   b7a60:	f10d 000a 	add.w	r0, sp, #10
        cStr[idx * 2 + 1] = '-';
   b7a64:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   b7a68:	f7ff fe26 	bl	b76b8 <_ZL12bytes2hexbufPKhjPc.isra.0>
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   b7a6c:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   b7a70:	2102      	movs	r1, #2
   b7a72:	a803      	add	r0, sp, #12
        cStr[idx * 2 + 2] = '-';
   b7a74:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   b7a78:	f7ff fe1e 	bl	b76b8 <_ZL12bytes2hexbufPKhjPc.isra.0>
        cStr[idx * 2 + 3] = '-';
   b7a7c:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   b7a80:	aa0b      	add	r2, sp, #44	; 0x2c
   b7a82:	2106      	movs	r1, #6
   b7a84:	f10d 000e 	add.w	r0, sp, #14
   b7a88:	e7cb      	b.n	b7a22 <_ZNK8particle7BleUuid8toStringEPcjb+0x5e>
        return 0;
   b7a8a:	460a      	mov	r2, r1
   b7a8c:	e7be      	b.n	b7a0c <_ZNK8particle7BleUuid8toStringEPcjb+0x48>

000b7a8e <_ZNK8particle7BleUuid8toStringEb>:
String BleUuid::toString(bool stripped) const {
   b7a8e:	b510      	push	{r4, lr}
   b7a90:	b08a      	sub	sp, #40	; 0x28
   b7a92:	4604      	mov	r4, r0
    toString(cStr, sizeof(cStr));
   b7a94:	2300      	movs	r3, #0
   b7a96:	2225      	movs	r2, #37	; 0x25
String BleUuid::toString(bool stripped) const {
   b7a98:	4608      	mov	r0, r1
    toString(cStr, sizeof(cStr));
   b7a9a:	4669      	mov	r1, sp
   b7a9c:	f7ff ff92 	bl	b79c4 <_ZNK8particle7BleUuid8toStringEPcjb>
    return String(cStr);
   b7aa0:	4669      	mov	r1, sp
   b7aa2:	4620      	mov	r0, r4
   b7aa4:	f002 fead 	bl	ba802 <_ZN6StringC1EPK19__FlashStringHelper>
}
   b7aa8:	4620      	mov	r0, r4
   b7aaa:	b00a      	add	sp, #40	; 0x28
   b7aac:	bd10      	pop	{r4, pc}

000b7aae <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   b7aae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b7ab0:	4605      	mov	r5, r0
   b7ab2:	4616      	mov	r6, r2
   b7ab4:	461f      	mov	r7, r3
   b7ab6:	460a      	mov	r2, r1
   b7ab8:	ab01      	add	r3, sp, #4
   b7aba:	e9d0 0100 	ldrd	r0, r1, [r0]
   b7abe:	f7ff fd7b 	bl	b75b8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (adsLen > 0) {
   b7ac2:	f030 0402 	bics.w	r4, r0, #2
   b7ac6:	d00c      	beq.n	b7ae2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
            adsLen -= 2;
   b7ac8:	1e84      	subs	r4, r0, #2
   b7aca:	42bc      	cmp	r4, r7
   b7acc:	bf28      	it	cs
   b7ace:	463c      	movcs	r4, r7
            if (buf != nullptr) {
   b7ad0:	b13e      	cbz	r6, b7ae2 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x34>
                memcpy(buf, &selfData_[offset + 2], len);
   b7ad2:	9901      	ldr	r1, [sp, #4]
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::operator[](int i) const {
    return data_[i];
   b7ad4:	682b      	ldr	r3, [r5, #0]
   b7ad6:	3102      	adds	r1, #2
   b7ad8:	4622      	mov	r2, r4
   b7ada:	4419      	add	r1, r3
   b7adc:	4630      	mov	r0, r6
   b7ade:	f004 f8c0 	bl	bbc62 <memcpy>
}
   b7ae2:	4620      	mov	r0, r4
   b7ae4:	b003      	add	sp, #12
   b7ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b7ae8 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>:
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b7ae8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7aea:	4613      	mov	r3, r2
   b7aec:	460c      	mov	r4, r1
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b7aee:	9201      	str	r2, [sp, #4]
   b7af0:	460a      	mov	r2, r1
   b7af2:	2108      	movs	r1, #8
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   b7af4:	4605      	mov	r5, r0
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b7af6:	f7ff ffda 	bl	b7aae <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (nameLen > 0) {
   b7afa:	b940      	cbnz	r0, b7b0e <_ZNK8particle18BleAdvertisingData10deviceNameEPcj+0x26>
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b7afc:	9b01      	ldr	r3, [sp, #4]
   b7afe:	4622      	mov	r2, r4
   b7b00:	2109      	movs	r1, #9
   b7b02:	4628      	mov	r0, r5
}
   b7b04:	b003      	add	sp, #12
   b7b06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   b7b0a:	f7ff bfd0 	b.w	b7aae <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
}
   b7b0e:	b003      	add	sp, #12
   b7b10:	bd30      	pop	{r4, r5, pc}
	...

000b7b14 <_ZNK8particle18BleAdvertisingData10deviceNameEv>:
String BleAdvertisingData::deviceName() const {
   b7b14:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7b16:	460c      	mov	r4, r1
   b7b18:	b089      	sub	sp, #36	; 0x24
    String name;
   b7b1a:	490c      	ldr	r1, [pc, #48]	; (b7b4c <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x38>)
String BleAdvertisingData::deviceName() const {
   b7b1c:	4605      	mov	r5, r0
    String name;
   b7b1e:	f002 fe70 	bl	ba802 <_ZN6StringC1EPK19__FlashStringHelper>
    size_t len = deviceName(buf, sizeof(buf));
   b7b22:	221f      	movs	r2, #31
   b7b24:	4669      	mov	r1, sp
   b7b26:	4620      	mov	r0, r4
   b7b28:	f7ff ffde 	bl	b7ae8 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>
    if (len > 0) {
   b7b2c:	4606      	mov	r6, r0
   b7b2e:	b150      	cbz	r0, b7b46 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
   b7b30:	466c      	mov	r4, sp
        for (size_t i = 0; i < len; i++) {
   b7b32:	2700      	movs	r7, #0
            if (!name.concat(buf[i])) {
   b7b34:	f814 1b01 	ldrb.w	r1, [r4], #1
   b7b38:	4628      	mov	r0, r5
   b7b3a:	f002 fee1 	bl	ba900 <_ZN6String6concatEc>
   b7b3e:	b110      	cbz	r0, b7b46 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
        for (size_t i = 0; i < len; i++) {
   b7b40:	3701      	adds	r7, #1
   b7b42:	42be      	cmp	r6, r7
   b7b44:	d1f6      	bne.n	b7b34 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x20>
}
   b7b46:	4628      	mov	r0, r5
   b7b48:	b009      	add	sp, #36	; 0x24
   b7b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   b7b4c:	000be1c9 	.word	0x000be1c9

000b7b50 <_ZNK8particle18BleAdvertisingData10customDataEPhj>:
size_t BleAdvertisingData::customData(uint8_t* buf, size_t len) const {
   b7b50:	4613      	mov	r3, r2
    return get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, len);
   b7b52:	460a      	mov	r2, r1
   b7b54:	21ff      	movs	r1, #255	; 0xff
   b7b56:	f7ff bfaa 	b.w	b7aae <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>

000b7b5a <_ZNK8particle18BleAdvertisingData10appearanceEv>:
ble_sig_appearance_t BleAdvertisingData::appearance() const {
   b7b5a:	b507      	push	{r0, r1, r2, lr}
    size_t len = get(BleAdvertisingDataType::APPEARANCE, buf, sizeof(buf));
   b7b5c:	2302      	movs	r3, #2
   b7b5e:	aa01      	add	r2, sp, #4
   b7b60:	2119      	movs	r1, #25
   b7b62:	f7ff ffa4 	bl	b7aae <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (len > 0) {
   b7b66:	b108      	cbz	r0, b7b6c <_ZNK8particle18BleAdvertisingData10appearanceEv+0x12>
        uint16_t temp = (uint16_t)buf[1] << 8 | buf[0];
   b7b68:	f8bd 0004 	ldrh.w	r0, [sp, #4]
}
   b7b6c:	b003      	add	sp, #12
   b7b6e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b7b74 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b7b74:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b7b76:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b7b7a:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b7b7c:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b7b7e:	8043      	strh	r3, [r0, #2]
   b7b80:	220e      	movs	r2, #14
   b7b82:	4629      	mov	r1, r5
   b7b84:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b7b86:	7105      	strb	r5, [r0, #4]
   b7b88:	3006      	adds	r0, #6
   b7b8a:	f004 f892 	bl	bbcb2 <memset>
   b7b8e:	f104 0014 	add.w	r0, r4, #20
   b7b92:	f7ff fe25 	bl	b77e0 <_ZN8particle7BleUuidC1Ev>
   b7b96:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b7b9a:	f7ff fe21 	bl	b77e0 <_ZN8particle7BleUuidC1Ev>
   b7b9e:	4904      	ldr	r1, [pc, #16]	; (b7bb0 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b7ba0:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b7ba4:	f002 fe2d 	bl	ba802 <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b7ba8:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b7baa:	4620      	mov	r0, r4
   b7bac:	bd38      	pop	{r3, r4, r5, pc}
   b7bae:	bf00      	nop
   b7bb0:	000be1c9 	.word	0x000be1c9

000b7bb4 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>:
    bool hasCharacteristic(const BleCharacteristic& characteristic) {
   b7bb4:	b538      	push	{r3, r4, r5, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b7bb6:	680d      	ldr	r5, [r1, #0]
   b7bb8:	4604      	mov	r4, r0
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   b7bba:	4601      	mov	r1, r0
   b7bbc:	f105 0028 	add.w	r0, r5, #40	; 0x28
   b7bc0:	f7ff fe69 	bl	b7896 <_ZNK8particle7BleUuideqERKS0_>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   b7bc4:	b140      	cbz	r0, b7bd8 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>
   b7bc6:	89ab      	ldrh	r3, [r5, #12]
        if ( characteristic.impl()->svcUUID() == uuid_ && 
   b7bc8:	8aa2      	ldrh	r2, [r4, #20]
   b7bca:	429a      	cmp	r2, r3
   b7bcc:	d805      	bhi.n	b7bda <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x26>
              characteristic.impl()->attrHandles().value_handle >= startHandle_ &&
   b7bce:	8ae0      	ldrh	r0, [r4, #22]
   b7bd0:	4298      	cmp	r0, r3
   b7bd2:	bf34      	ite	cc
   b7bd4:	2000      	movcc	r0, #0
   b7bd6:	2001      	movcs	r0, #1
    }
   b7bd8:	bd38      	pop	{r3, r4, r5, pc}
        return false;
   b7bda:	2000      	movs	r0, #0
   b7bdc:	e7fc      	b.n	b7bd8 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE+0x24>

000b7bde <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b7bde:	b510      	push	{r4, lr}
    return data_ + size_;
   b7be0:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b7be4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b7be8:	4293      	cmp	r3, r2
   b7bea:	4618      	mov	r0, r3
   b7bec:	d006      	beq.n	b7bfc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b7bee:	6804      	ldr	r4, [r0, #0]
   b7bf0:	8824      	ldrh	r4, [r4, #0]
   b7bf2:	428c      	cmp	r4, r1
   b7bf4:	f103 0308 	add.w	r3, r3, #8
   b7bf8:	d1f6      	bne.n	b7be8 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b7bfa:	bd10      	pop	{r4, pc}
        return nullptr;
   b7bfc:	2000      	movs	r0, #0
   b7bfe:	e7fc      	b.n	b7bfa <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>

000b7c00 <_ZN8particle17BleCharacteristicC1Ev>:

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7c00:	2300      	movs	r3, #0
BleCharacteristic::BleCharacteristic()
   b7c02:	b570      	push	{r4, r5, r6, lr}
   b7c04:	6003      	str	r3, [r0, #0]
   b7c06:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7c08:	2068      	movs	r0, #104	; 0x68
   b7c0a:	f7fc fa44 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b7c0e:	1e04      	subs	r4, r0, #0
   b7c10:	f104 060c 	add.w	r6, r4, #12
   b7c14:	d007      	beq.n	b7c26 <_ZN8particle17BleCharacteristicC1Ev+0x26>
      : _M_use_count(1), _M_weak_count(1) { }
   b7c16:	2301      	movs	r3, #1
   b7c18:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   b7c1c:	4b04      	ldr	r3, [pc, #16]	; (b7c30 <_ZN8particle17BleCharacteristicC1Ev+0x30>)
   b7c1e:	6023      	str	r3, [r4, #0]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b7c20:	4630      	mov	r0, r6
   b7c22:	f7ff ffa7 	bl	b7b74 <_ZN8particle21BleCharacteristicImplC1Ev>
	  __p = __pi->_M_ptr();
   b7c26:	e9c5 6400 	strd	r6, r4, [r5]
}
   b7c2a:	4628      	mov	r0, r5
   b7c2c:	bd70      	pop	{r4, r5, r6, pc}
   b7c2e:	bf00      	nop
   b7c30:	000be59c 	.word	0x000be59c

000b7c34 <_ZNK8particle17BleCharacteristic4UUIDEv>:
BleUuid BleCharacteristic::UUID() const {
   b7c34:	b570      	push	{r4, r5, r6, lr}
    return impl()->charUUID();
   b7c36:	680c      	ldr	r4, [r1, #0]
   b7c38:	3414      	adds	r4, #20
BleUuid BleCharacteristic::UUID() const {
   b7c3a:	4606      	mov	r6, r0
    return impl()->charUUID();
   b7c3c:	4605      	mov	r5, r0
   b7c3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b7c40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b7c42:	6823      	ldr	r3, [r4, #0]
   b7c44:	602b      	str	r3, [r5, #0]
}
   b7c46:	4630      	mov	r0, r6
   b7c48:	bd70      	pop	{r4, r5, r6, pc}
	...

000b7c4c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b7c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b7c4e:	4606      	mov	r6, r0
   b7c50:	b085      	sub	sp, #20
   b7c52:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b7c54:	460d      	mov	r5, r1
   b7c56:	2900      	cmp	r1, #0
   b7c58:	d050      	beq.n	b7cfc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b7c5a:	2a00      	cmp	r2, #0
   b7c5c:	d04e      	beq.n	b7cfc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
      { return _M_ptr; }
   b7c5e:	6804      	ldr	r4, [r0, #0]
    if (impl()->isLocal()) {
   b7c60:	7823      	ldrb	r3, [r4, #0]
   b7c62:	2af4      	cmp	r2, #244	; 0xf4
   b7c64:	bf28      	it	cs
   b7c66:	22f4      	movcs	r2, #244	; 0xf4
   b7c68:	b343      	cbz	r3, b7cbc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b7c6a:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b7c6c:	0798      	lsls	r0, r3, #30
   b7c6e:	d509      	bpl.n	b7c84 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b7c70:	89a0      	ldrh	r0, [r4, #12]
   b7c72:	9203      	str	r2, [sp, #12]
   b7c74:	2300      	movs	r3, #0
   b7c76:	f7ff f8a9 	bl	b6dcc <hal_ble_gatt_server_set_characteristic_value>
   b7c7a:	2800      	cmp	r0, #0
   b7c7c:	9a03      	ldr	r2, [sp, #12]
   b7c7e:	da03      	bge.n	b7c88 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
}
   b7c80:	b005      	add	sp, #20
   b7c82:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b7c84:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b7c88:	6834      	ldr	r4, [r6, #0]
   b7c8a:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b7c8c:	06d9      	lsls	r1, r3, #27
   b7c8e:	d509      	bpl.n	b7ca4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b7c90:	2f01      	cmp	r7, #1
   b7c92:	d007      	beq.n	b7ca4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7c94:	89a0      	ldrh	r0, [r4, #12]
   b7c96:	2300      	movs	r3, #0
   b7c98:	4629      	mov	r1, r5
}
   b7c9a:	b005      	add	sp, #20
   b7c9c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7ca0:	f7ff b8f8 	b.w	b6e94 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b7ca4:	069b      	lsls	r3, r3, #26
   b7ca6:	d5eb      	bpl.n	b7c80 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b7ca8:	2f02      	cmp	r7, #2
   b7caa:	d0e9      	beq.n	b7c80 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7cac:	89a0      	ldrh	r0, [r4, #12]
   b7cae:	2300      	movs	r3, #0
   b7cb0:	4629      	mov	r1, r5
}
   b7cb2:	b005      	add	sp, #20
   b7cb4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b7cb8:	f7ff b8f6 	b.w	b6ea8 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b7cbc:	8860      	ldrh	r0, [r4, #2]
   b7cbe:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b7cc2:	4288      	cmp	r0, r1
   b7cc4:	d01c      	beq.n	b7d00 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b7cc6:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b7cc8:	074e      	lsls	r6, r1, #29
   b7cca:	d501      	bpl.n	b7cd0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b7ccc:	2f01      	cmp	r7, #1
   b7cce:	d104      	bne.n	b7cda <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b7cd0:	070b      	lsls	r3, r1, #28
   b7cd2:	d409      	bmi.n	b7ce8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b7cd4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b7cd8:	e7d2      	b.n	b7c80 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b7cda:	89a1      	ldrh	r1, [r4, #12]
   b7cdc:	9300      	str	r3, [sp, #0]
   b7cde:	4613      	mov	r3, r2
   b7ce0:	462a      	mov	r2, r5
   b7ce2:	f7ff f89b 	bl	b6e1c <hal_ble_gatt_client_write_without_response>
   b7ce6:	e7cb      	b.n	b7c80 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b7ce8:	2f02      	cmp	r7, #2
   b7cea:	d0f3      	beq.n	b7cd4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b7cec:	2300      	movs	r3, #0
   b7cee:	89a1      	ldrh	r1, [r4, #12]
   b7cf0:	9300      	str	r3, [sp, #0]
   b7cf2:	4613      	mov	r3, r2
   b7cf4:	462a      	mov	r2, r5
   b7cf6:	f7ff f887 	bl	b6e08 <hal_ble_gatt_client_write_with_response>
   b7cfa:	e7c1      	b.n	b7c80 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b7cfc:	4802      	ldr	r0, [pc, #8]	; (b7d08 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b7cfe:	e7bf      	b.n	b7c80 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b7d00:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b7d04:	e7bc      	b.n	b7c80 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b7d06:	bf00      	nop
   b7d08:	fffffef2 	.word	0xfffffef2

000b7d0c <_ZNK8particle17BleCharacteristic9subscribeEb>:
int BleCharacteristic::subscribe(bool enable) const {
   b7d0c:	b510      	push	{r4, lr}
   b7d0e:	6803      	ldr	r3, [r0, #0]
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b7d10:	781a      	ldrb	r2, [r3, #0]
int BleCharacteristic::subscribe(bool enable) const {
   b7d12:	b086      	sub	sp, #24
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b7d14:	bb52      	cbnz	r2, b7d6c <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
   b7d16:	885c      	ldrh	r4, [r3, #2]
   b7d18:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b7d1c:	4284      	cmp	r4, r0
   b7d1e:	d025      	beq.n	b7d6c <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   b7d20:	8a18      	ldrh	r0, [r3, #16]
   b7d22:	b330      	cbz	r0, b7d72 <_ZNK8particle17BleCharacteristic9subscribeEb+0x66>
    hal_ble_cccd_config_t config = {};
   b7d24:	e9cd 2203 	strd	r2, r2, [sp, #12]
   b7d28:	9205      	str	r2, [sp, #20]
    config.version = BLE_API_VERSION;
   b7d2a:	4a13      	ldr	r2, [pc, #76]	; (b7d78 <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>)
   b7d2c:	9200      	str	r2, [sp, #0]
    config.callback = impl()->onBleCharEvents;
   b7d2e:	4a13      	ldr	r2, [pc, #76]	; (b7d7c <_ZNK8particle17BleCharacteristic9subscribeEb+0x70>)
    config.context = impl();
   b7d30:	e9cd 2301 	strd	r2, r3, [sp, #4]
    config.conn_handle = impl()->connHandle();
   b7d34:	885a      	ldrh	r2, [r3, #2]
   b7d36:	f8ad 200c 	strh.w	r2, [sp, #12]
    config.cccd_handle = impl()->attrHandles().cccd_handle;
   b7d3a:	8a1a      	ldrh	r2, [r3, #16]
   b7d3c:	f8ad 200e 	strh.w	r2, [sp, #14]
    config.value_handle = impl()->attrHandles().value_handle;
   b7d40:	899a      	ldrh	r2, [r3, #12]
   b7d42:	f8ad 2010 	strh.w	r2, [sp, #16]
    if (enable) {
   b7d46:	b159      	cbz	r1, b7d60 <_ZNK8particle17BleCharacteristic9subscribeEb+0x54>
   b7d48:	791a      	ldrb	r2, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE)) {
   b7d4a:	0692      	lsls	r2, r2, #26
            config.cccd_value = BLE_SIG_CCCD_VAL_INDICATION;
   b7d4c:	bf44      	itt	mi
   b7d4e:	2202      	movmi	r2, #2
   b7d50:	9205      	strmi	r2, [sp, #20]
   b7d52:	791b      	ldrb	r3, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
   b7d54:	06db      	lsls	r3, r3, #27
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
   b7d56:	bf42      	ittt	mi
   b7d58:	9b05      	ldrmi	r3, [sp, #20]
   b7d5a:	f043 0301 	orrmi.w	r3, r3, #1
   b7d5e:	9305      	strmi	r3, [sp, #20]
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
   b7d60:	2100      	movs	r1, #0
   b7d62:	4668      	mov	r0, sp
   b7d64:	f7ff f88c 	bl	b6e80 <hal_ble_gatt_client_configure_cccd>
}
   b7d68:	b006      	add	sp, #24
   b7d6a:	bd10      	pop	{r4, pc}
    CHECK_FALSE(impl()->isLocal(), SYSTEM_ERROR_INVALID_STATE);
   b7d6c:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b7d70:	e7fa      	b.n	b7d68 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   b7d72:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b7d76:	e7f7      	b.n	b7d68 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
   b7d78:	00180003 	.word	0x00180003
   b7d7c:	000b7f51 	.word	0x000b7f51

000b7d80 <_ZN8particle10BleServiceC1Ev>:
BleService::BleService()
   b7d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7d82:	2600      	movs	r6, #0
   b7d84:	6006      	str	r6, [r0, #0]
   b7d86:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b7d88:	2028      	movs	r0, #40	; 0x28
   b7d8a:	f7fc f984 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b7d8e:	1e04      	subs	r4, r0, #0
   b7d90:	f104 070c 	add.w	r7, r4, #12
   b7d94:	d00a      	beq.n	b7dac <_ZN8particle10BleServiceC1Ev+0x2c>
      : _M_use_count(1), _M_weak_count(1) { }
   b7d96:	2301      	movs	r3, #1
   b7d98:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   b7d9c:	4b05      	ldr	r3, [pc, #20]	; (b7db4 <_ZN8particle10BleServiceC1Ev+0x34>)
   b7d9e:	6023      	str	r3, [r4, #0]
              characteristicsDiscovered_(false) {
   b7da0:	4638      	mov	r0, r7
   b7da2:	f7ff fd1d 	bl	b77e0 <_ZN8particle7BleUuidC1Ev>
   b7da6:	6226      	str	r6, [r4, #32]
   b7da8:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
	  __p = __pi->_M_ptr();
   b7dac:	e9c5 7400 	strd	r7, r4, [r5]
}
   b7db0:	4628      	mov	r0, r5
   b7db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   b7db4:	000be5b8 	.word	0x000be5b8

000b7db8 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b7db8:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b7dba:	2500      	movs	r5, #0
   b7dbc:	6005      	str	r5, [r0, #0]
   b7dbe:	4606      	mov	r6, r0
   b7dc0:	2030      	movs	r0, #48	; 0x30
   b7dc2:	f7fc f968 	bl	b4096 <_Znwj>
	  auto __pi = ::new (__mem)
   b7dc6:	4604      	mov	r4, r0
   b7dc8:	b188      	cbz	r0, b7dee <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b7dca:	2301      	movs	r3, #1
   b7dcc:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b7dd0:	4b09      	ldr	r3, [pc, #36]	; (b7df8 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b7dd2:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b7dd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b7dd8:	8183      	strh	r3, [r0, #12]
   b7dda:	300e      	adds	r0, #14
   b7ddc:	f7ff fcf5 	bl	b77ca <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b7de0:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b7de4:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b7de8:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b7dec:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b7dee:	6074      	str	r4, [r6, #4]
   b7df0:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b7df2:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b7df4:	4630      	mov	r0, r6
   b7df6:	bd70      	pop	{r4, r5, r6, pc}
   b7df8:	000be5d4 	.word	0x000be5d4

000b7dfc <_ZNK8particle13BlePeerDevice9connectedEv>:
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    }
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
   b7dfc:	b513      	push	{r0, r1, r4, lr}
   b7dfe:	4604      	mov	r4, r0
    WiringBleLock lk;
   b7e00:	a801      	add	r0, sp, #4
   b7e02:	f7ff fca7 	bl	b7754 <_ZN8particle3ble13WiringBleLockC1Ev>
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b7e06:	6823      	ldr	r3, [r4, #0]
   b7e08:	881c      	ldrh	r4, [r3, #0]
   b7e0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b7e0e:	1ae4      	subs	r4, r4, r3
    WiringBleLock lk;
   b7e10:	a801      	add	r0, sp, #4
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   b7e12:	bf18      	it	ne
   b7e14:	2401      	movne	r4, #1
    WiringBleLock lk;
   b7e16:	f7ff fcab 	bl	b7770 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b7e1a:	4620      	mov	r0, r4
   b7e1c:	b002      	add	sp, #8
   b7e1e:	bd10      	pop	{r4, pc}

000b7e20 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>:

void BlePeerDevice::bind(const BleAddress& address) const {
   b7e20:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7e22:	4605      	mov	r5, r0
   b7e24:	460c      	mov	r4, r1
    WiringBleLock lk;
   b7e26:	a801      	add	r0, sp, #4
   b7e28:	f7ff fc94 	bl	b7754 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b7e2c:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b7e2e:	6823      	ldr	r3, [r4, #0]
   b7e30:	f8c2 3002 	str.w	r3, [r2, #2]
   b7e34:	6863      	ldr	r3, [r4, #4]
   b7e36:	f8c2 3006 	str.w	r3, [r2, #6]
    WiringBleLock lk;
   b7e3a:	a801      	add	r0, sp, #4
   b7e3c:	f7ff fc98 	bl	b7770 <_ZN8particle3ble13WiringBleLockD1Ev>
    impl()->address() = address;
}
   b7e40:	b003      	add	sp, #12
   b7e42:	bd30      	pop	{r4, r5, pc}

000b7e44 <_ZNK8particle13BlePeerDevice7addressEv>:

BleAddress BlePeerDevice::address() const {
   b7e44:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b7e46:	460d      	mov	r5, r1
   b7e48:	4604      	mov	r4, r0
    WiringBleLock lk;
   b7e4a:	a801      	add	r0, sp, #4
   b7e4c:	f7ff fc82 	bl	b7754 <_ZN8particle3ble13WiringBleLockC1Ev>
   b7e50:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b7e52:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b7e56:	6023      	str	r3, [r4, #0]
   b7e58:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b7e5c:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b7e5e:	a801      	add	r0, sp, #4
   b7e60:	f7ff fc86 	bl	b7770 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b7e64:	4620      	mov	r0, r4
   b7e66:	b003      	add	sp, #12
   b7e68:	bd30      	pop	{r4, r5, pc}

000b7e6a <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b7e6a:	b530      	push	{r4, r5, lr}
   b7e6c:	4605      	mov	r5, r0
   b7e6e:	b087      	sub	sp, #28
   b7e70:	460c      	mov	r4, r1
    WiringBleLock lk;
   b7e72:	a801      	add	r0, sp, #4
   b7e74:	f7ff fc6e 	bl	b7754 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b7e78:	682a      	ldr	r2, [r5, #0]
   b7e7a:	6823      	ldr	r3, [r4, #0]
   b7e7c:	8812      	ldrh	r2, [r2, #0]
   b7e7e:	881b      	ldrh	r3, [r3, #0]
   b7e80:	429a      	cmp	r2, r3
   b7e82:	d10d      	bne.n	b7ea0 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b7e84:	4629      	mov	r1, r5
   b7e86:	a802      	add	r0, sp, #8
   b7e88:	f7ff ffdc 	bl	b7e44 <_ZNK8particle13BlePeerDevice7addressEv>
   b7e8c:	4621      	mov	r1, r4
   b7e8e:	a804      	add	r0, sp, #16
   b7e90:	f7ff ffd8 	bl	b7e44 <_ZNK8particle13BlePeerDevice7addressEv>
   b7e94:	a904      	add	r1, sp, #16
   b7e96:	a802      	add	r0, sp, #8
   b7e98:	f7ff fc83 	bl	b77a2 <_ZNK8particle10BleAddresseqERKS0_>
   b7e9c:	4604      	mov	r4, r0
   b7e9e:	b900      	cbnz	r0, b7ea2 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b7ea0:	2400      	movs	r4, #0
    WiringBleLock lk;
   b7ea2:	a801      	add	r0, sp, #4
   b7ea4:	f7ff fc64 	bl	b7770 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b7ea8:	4620      	mov	r0, r4
   b7eaa:	b007      	add	sp, #28
   b7eac:	bd30      	pop	{r4, r5, pc}
	...

000b7eb0 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b7eb0:	b510      	push	{r4, lr}
   b7eb2:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b7eb4:	2064      	movs	r0, #100	; 0x64
   b7eb6:	f7fc f8ee 	bl	b4096 <_Znwj>
   b7eba:	b168      	cbz	r0, b7ed8 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b7ebc:	2300      	movs	r3, #0
   b7ebe:	e9c0 3300 	strd	r3, r3, [r0]
   b7ec2:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b7ec6:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b7eca:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b7ece:	6203      	str	r3, [r0, #32]
   b7ed0:	62c3      	str	r3, [r0, #44]	; 0x2c
   b7ed2:	63c3      	str	r3, [r0, #60]	; 0x3c
   b7ed4:	64c3      	str	r3, [r0, #76]	; 0x4c
   b7ed6:	65c3      	str	r3, [r0, #92]	; 0x5c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b7ed8:	6020      	str	r0, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b7eda:	b920      	cbnz	r0, b7ee6 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   b7edc:	4a0a      	ldr	r2, [pc, #40]	; (b7f08 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b7ede:	490b      	ldr	r1, [pc, #44]	; (b7f0c <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   b7ee0:	200a      	movs	r0, #10
   b7ee2:	f7ff f9b3 	bl	b724c <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b7ee6:	2000      	movs	r0, #0
   b7ee8:	f7fe ff4c 	bl	b6d84 <hal_ble_stack_init>
   b7eec:	b120      	cbz	r0, b7ef8 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   b7eee:	4a06      	ldr	r2, [pc, #24]	; (b7f08 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b7ef0:	4907      	ldr	r1, [pc, #28]	; (b7f10 <_ZN8particle14BleLocalDeviceC1Ev+0x60>)
   b7ef2:	200a      	movs	r0, #10
   b7ef4:	f7ff f9aa 	bl	b724c <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b7ef8:	6821      	ldr	r1, [r4, #0]
   b7efa:	4806      	ldr	r0, [pc, #24]	; (b7f14 <_ZN8particle14BleLocalDeviceC1Ev+0x64>)
   b7efc:	2200      	movs	r2, #0
   b7efe:	f7fe ffb5 	bl	b6e6c <hal_ble_set_callback_on_periph_link_events>
}
   b7f02:	4620      	mov	r0, r4
   b7f04:	bd10      	pop	{r4, pc}
   b7f06:	bf00      	nop
   b7f08:	000b6f6d 	.word	0x000b6f6d
   b7f0c:	000be378 	.word	0x000be378
   b7f10:	000be3b6 	.word	0x000be3b6
   b7f14:	000b8921 	.word	0x000b8921

000b7f18 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b7f18:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b7f1a:	4c0a      	ldr	r4, [pc, #40]	; (b7f44 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   b7f1c:	7823      	ldrb	r3, [r4, #0]
   b7f1e:	f3bf 8f5b 	dmb	ish
   b7f22:	07db      	lsls	r3, r3, #31
   b7f24:	d40c      	bmi.n	b7f40 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b7f26:	4620      	mov	r0, r4
   b7f28:	f7fc f8bb 	bl	b40a2 <__cxa_guard_acquire>
   b7f2c:	b140      	cbz	r0, b7f40 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   b7f2e:	4806      	ldr	r0, [pc, #24]	; (b7f48 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b7f30:	f7ff ffbe 	bl	b7eb0 <_ZN8particle14BleLocalDeviceC1Ev>
   b7f34:	4620      	mov	r0, r4
   b7f36:	f7fc f8b9 	bl	b40ac <__cxa_guard_release>
   b7f3a:	4804      	ldr	r0, [pc, #16]	; (b7f4c <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b7f3c:	f003 fe74 	bl	bbc28 <atexit>
    return instance;
}
   b7f40:	4801      	ldr	r0, [pc, #4]	; (b7f48 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b7f42:	bd10      	pop	{r4, pc}
   b7f44:	2003e650 	.word	0x2003e650
   b7f48:	2003e658 	.word	0x2003e658
   b7f4c:	000b8225 	.word	0x000b8225

000b7f50 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b7f50:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b7f52:	6803      	ldr	r3, [r0, #0]
   b7f54:	3b09      	subs	r3, #9
   b7f56:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b7f58:	b08d      	sub	sp, #52	; 0x34
   b7f5a:	4604      	mov	r4, r0
   b7f5c:	460d      	mov	r5, r1
    switch (event->type) {
   b7f5e:	d811      	bhi.n	b7f84 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b7f60:	f7ff ffda 	bl	b7f18 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b7f64:	88a1      	ldrh	r1, [r4, #4]
   b7f66:	6800      	ldr	r0, [r0, #0]
   b7f68:	f7ff fe39 	bl	b7bde <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b7f6c:	4603      	mov	r3, r0
   b7f6e:	b958      	cbnz	r0, b7f88 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b7f70:	2220      	movs	r2, #32
   b7f72:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b7f76:	4a0b      	ldr	r2, [pc, #44]	; (b7fa4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b7f78:	9200      	str	r2, [sp, #0]
   b7f7a:	490b      	ldr	r1, [pc, #44]	; (b7fa8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b7f7c:	aa04      	add	r2, sp, #16
   b7f7e:	2032      	movs	r0, #50	; 0x32
   b7f80:	f7ff f96c 	bl	b725c <log_message>
}
   b7f84:	b00d      	add	sp, #52	; 0x34
   b7f86:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b7f88:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b7f8a:	2a00      	cmp	r2, #0
   b7f8c:	d0fa      	beq.n	b7f84 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b7f8e:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b7f92:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b7f96:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b7f9a:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b7f9c:	aa04      	add	r2, sp, #16
   b7f9e:	a903      	add	r1, sp, #12
   b7fa0:	47a0      	blx	r4
}
   b7fa2:	e7ef      	b.n	b7f84 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b7fa4:	000be3f8 	.word	0x000be3f8
   b7fa8:	000be38f 	.word	0x000be38f

000b7fac <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening/Provisioning mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   b7fac:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   b7fae:	2000      	movs	r0, #0
   b7fb0:	f7fe fee8 	bl	b6d84 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   b7fb4:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   b7fb8:	bd08      	pop	{r3, pc}
	...

000b7fbc <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>:
        scanResultCallbackRef_ = callback ? std::bind(callback, _1, context) : (BleOnScanResultStdFunction)nullptr;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
   b7fbc:	b570      	push	{r4, r5, r6, lr}
   b7fbe:	4604      	mov	r4, r0
        scanResultCallback_ = nullptr;
   b7fc0:	3018      	adds	r0, #24
    int start(BleScanResult* results, size_t resultCount) {
   b7fc2:	460e      	mov	r6, r1
   b7fc4:	4615      	mov	r5, r2
        scanResultCallback_ = nullptr;
   b7fc6:	f7ff fb43 	bl	b7650 <_ZNSt8functionIFvPKN8particle13BleScanResultEEEaSEDn.isra.0>
        scanResultCallbackRef_ = nullptr;
   b7fca:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b7fce:	f7ff fb4a 	bl	b7666 <_ZNSt8functionIFvRKN8particle13BleScanResultEEEaSEDn.isra.0>
        resultsPtr_ = results;
        targetCount_ = resultCount;
   b7fd2:	e9c4 6503 	strd	r6, r5, [r4, #12]
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   b7fd6:	2200      	movs	r2, #0
   b7fd8:	4621      	mov	r1, r4
   b7fda:	4803      	ldr	r0, [pc, #12]	; (b7fe8 <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj+0x2c>)
   b7fdc:	f7fe feda 	bl	b6d94 <hal_ble_gap_start_scan>
   b7fe0:	2800      	cmp	r0, #0
        return foundCount_;
   b7fe2:	bfa8      	it	ge
   b7fe4:	6960      	ldrge	r0, [r4, #20]
    }
   b7fe6:	bd70      	pop	{r4, r5, r6, pc}
   b7fe8:	000b992d 	.word	0x000b992d

000b7fec <_ZN8particle13BleScanResultD1Ev>:
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   b7fec:	b510      	push	{r4, lr}
   b7fee:	4604      	mov	r4, r0
    ::free(ptr);
   b7ff0:	6940      	ldr	r0, [r0, #20]
   b7ff2:	f7ff fa17 	bl	b7424 <free>
   b7ff6:	68a0      	ldr	r0, [r4, #8]
   b7ff8:	f7ff fa14 	bl	b7424 <free>
   b7ffc:	4620      	mov	r0, r4
   b7ffe:	bd10      	pop	{r4, pc}

000b8000 <_ZN8particle16BleScanDelegatorC1Ev>:
        capacity_(0) {
   b8000:	2200      	movs	r2, #0
public:
    BleScanFilter()
            : minRssi_(BLE_RSSI_INVALID),
              maxRssi_(BLE_RSSI_INVALID),
              customData_(nullptr),
              customDataLen_(0) {
   b8002:	f647 717f 	movw	r1, #32639	; 0x7f7f
   b8006:	e9c0 2200 	strd	r2, r2, [r0]
              scanResultCallbackRef_(nullptr) {
   b800a:	e9c0 2202 	strd	r2, r2, [r0, #8]
   b800e:	e9c0 2204 	strd	r2, r2, [r0, #16]
   b8012:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
   b8016:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
   b801a:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
   b801e:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
   b8022:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
   b8026:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
   b802a:	e9c0 221b 	strd	r2, r2, [r0, #108]	; 0x6c
    _Function_base() : _M_manager(nullptr) { }
   b802e:	6202      	str	r2, [r0, #32]
   b8030:	6302      	str	r2, [r0, #48]	; 0x30
   b8032:	f8a0 1068 	strh.w	r1, [r0, #104]	; 0x68
    }
   b8036:	4770      	bx	lr

000b8038 <_ZNK8particle14BleLocalDevice9connectedEv>:
    return size_;
   b8038:	6803      	ldr	r3, [r0, #0]
void BleLocalDevice::onAttMtuExchanged(const BleOnAttMtuExchangedStdFunction& callback) const {
    impl()->onAttMtuExchangedCallback(callback);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   b803a:	69d8      	ldr	r0, [r3, #28]
}
   b803c:	2800      	cmp	r0, #0
   b803e:	bfd4      	ite	le
   b8040:	2000      	movle	r0, #0
   b8042:	2001      	movgt	r0, #1
   b8044:	4770      	bx	lr

000b8046 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b8046:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b8048:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b804c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b804e:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   b8052:	42ae      	cmp	r6, r5
   b8054:	d004      	beq.n	b8060 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   b8056:	4628      	mov	r0, r5
   b8058:	f002 fb88 	bl	ba76c <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   b805c:	3510      	adds	r5, #16
   b805e:	e7f8      	b.n	b8052 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b8060:	6820      	ldr	r0, [r4, #0]
   b8062:	f7ff f9df 	bl	b7424 <free>
}
   b8066:	4620      	mov	r0, r4
   b8068:	bd70      	pop	{r4, r5, r6, pc}

000b806a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b806a:	b510      	push	{r4, lr}
   b806c:	4604      	mov	r4, r0
    ::free(ptr);
   b806e:	6800      	ldr	r0, [r0, #0]
   b8070:	f7ff f9d8 	bl	b7424 <free>
}
   b8074:	4620      	mov	r0, r4
   b8076:	bd10      	pop	{r4, pc}

000b8078 <_ZN8particle16BleScanDelegatorD1Ev>:
    ~BleScanDelegator() = default;
   b8078:	b570      	push	{r4, r5, r6, lr}
   b807a:	4604      	mov	r4, r0
    ::free(ptr);
   b807c:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
   b807e:	f7ff f9d1 	bl	b7424 <free>
   b8082:	6d20      	ldr	r0, [r4, #80]	; 0x50
   b8084:	f7ff f9ce 	bl	b7424 <free>
    }
    ~BleScanFilter() = default;
   b8088:	f104 0538 	add.w	r5, r4, #56	; 0x38
   b808c:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b8090:	f7ff ffeb 	bl	b806a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
   b8094:	4628      	mov	r0, r5
   b8096:	f7ff ffd6 	bl	b8046 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    class function<_Res(_ArgTypes...)>
   b809a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b809e:	f7fc f8f3 	bl	b4288 <_ZNSt14_Function_baseD1Ev>
   b80a2:	f104 0018 	add.w	r0, r4, #24
   b80a6:	f7fc f8ef 	bl	b4288 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b80aa:	e9d4 5300 	ldrd	r5, r3, [r4]
   b80ae:	2624      	movs	r6, #36	; 0x24
   b80b0:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   b80b4:	42ae      	cmp	r6, r5
   b80b6:	d004      	beq.n	b80c2 <_ZN8particle16BleScanDelegatorD1Ev+0x4a>
            p->~T();
   b80b8:	4628      	mov	r0, r5
   b80ba:	f7ff ff97 	bl	b7fec <_ZN8particle13BleScanResultD1Ev>
        for (; p != end; ++p) {
   b80be:	3524      	adds	r5, #36	; 0x24
   b80c0:	e7f8      	b.n	b80b4 <_ZN8particle16BleScanDelegatorD1Ev+0x3c>
    ::free(ptr);
   b80c2:	6820      	ldr	r0, [r4, #0]
   b80c4:	f7ff f9ae 	bl	b7424 <free>
   b80c8:	4620      	mov	r0, r4
   b80ca:	bd70      	pop	{r4, r5, r6, pc}

000b80cc <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>:
int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   b80cc:	b530      	push	{r4, r5, lr}
   b80ce:	4615      	mov	r5, r2
   b80d0:	b09f      	sub	sp, #124	; 0x7c
    if (results == nullptr || resultCount == 0) {
   b80d2:	460c      	mov	r4, r1
   b80d4:	b179      	cbz	r1, b80f6 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
   b80d6:	b172      	cbz	r2, b80f6 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x2a>
    BleScanDelegator scanner;
   b80d8:	a801      	add	r0, sp, #4
   b80da:	f7ff ff91 	bl	b8000 <_ZN8particle16BleScanDelegatorC1Ev>
    return scanner.start(results, resultCount);
   b80de:	4621      	mov	r1, r4
   b80e0:	462a      	mov	r2, r5
   b80e2:	a801      	add	r0, sp, #4
   b80e4:	f7ff ff6a 	bl	b7fbc <_ZN8particle16BleScanDelegator5startEPNS_13BleScanResultEj>
   b80e8:	4604      	mov	r4, r0
    BleScanDelegator scanner;
   b80ea:	a801      	add	r0, sp, #4
   b80ec:	f7ff ffc4 	bl	b8078 <_ZN8particle16BleScanDelegatorD1Ev>
}
   b80f0:	4620      	mov	r0, r4
   b80f2:	b01f      	add	sp, #124	; 0x7c
   b80f4:	bd30      	pop	{r4, r5, pc}
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b80f6:	4c01      	ldr	r4, [pc, #4]	; (b80fc <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x30>)
   b80f8:	e7fa      	b.n	b80f0 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x24>
   b80fa:	bf00      	nop
   b80fc:	fffffef2 	.word	0xfffffef2

000b8100 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>:
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b8100:	b538      	push	{r3, r4, r5, lr}
    if (n < 0 || i + n > size_) {
   b8102:	1e14      	subs	r4, r2, #0
   b8104:	6843      	ldr	r3, [r0, #4]
inline void spark::Vector<T, AllocatorT>::removeAt(int i, int n) {
   b8106:	4605      	mov	r5, r0
    if (n < 0 || i + n > size_) {
   b8108:	db02      	blt.n	b8110 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x10>
   b810a:	1862      	adds	r2, r4, r1
   b810c:	429a      	cmp	r2, r3
   b810e:	dd00      	ble.n	b8112 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii+0x12>
        n = size_ - i;
   b8110:	1a5c      	subs	r4, r3, r1
    T* const p = data_ + i;
   b8112:	682a      	ldr	r2, [r5, #0]
   b8114:	1850      	adds	r0, r2, r1
    destruct(p, p + n);
   b8116:	1901      	adds	r1, r0, r4
    move(p, p + n, data_ + size_);
   b8118:	441a      	add	r2, r3
        ::memmove(dest, p, (end - p) * sizeof(T));
   b811a:	1a52      	subs	r2, r2, r1
   b811c:	f003 fdaf 	bl	bbc7e <memmove>
    size_ -= n;
   b8120:	686a      	ldr	r2, [r5, #4]
   b8122:	1b12      	subs	r2, r2, r4
   b8124:	606a      	str	r2, [r5, #4]
}
   b8126:	bd38      	pop	{r3, r4, r5, pc}

000b8128 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b8128:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b812a:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b812c:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b812e:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8130:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b8132:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8134:	f7fb ffaf 	bl	b4096 <_Znwj>
   b8138:	b118      	cbz	r0, b8142 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b813a:	682b      	ldr	r3, [r5, #0]
   b813c:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b813e:	686b      	ldr	r3, [r5, #4]
   b8140:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b8142:	4b03      	ldr	r3, [pc, #12]	; (b8150 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b8144:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b8146:	4b03      	ldr	r3, [pc, #12]	; (b8154 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b8148:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b814a:	60a3      	str	r3, [r4, #8]
      }
   b814c:	4620      	mov	r0, r4
   b814e:	bd38      	pop	{r3, r4, r5, pc}
   b8150:	000b75f9 	.word	0x000b75f9
   b8154:	000b7611 	.word	0x000b7611

000b8158 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b8158:	680b      	ldr	r3, [r1, #0]
   b815a:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b815c:	b113      	cbz	r3, b8164 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b815e:	685a      	ldr	r2, [r3, #4]
   b8160:	3201      	adds	r2, #1
   b8162:	605a      	str	r2, [r3, #4]
      }
   b8164:	4770      	bx	lr

000b8166 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b8166:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b8168:	f851 3b04 	ldr.w	r3, [r1], #4
   b816c:	4604      	mov	r4, r0
   b816e:	f840 3b04 	str.w	r3, [r0], #4
   b8172:	f7ff fff1 	bl	b8158 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b8176:	6823      	ldr	r3, [r4, #0]
   b8178:	b90b      	cbnz	r3, b817e <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b817a:	f7ff fa33 	bl	b75e4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b817e:	4620      	mov	r0, r4
   b8180:	bd10      	pop	{r4, pc}

000b8182 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b8182:	b510      	push	{r4, lr}
   b8184:	f851 3b04 	ldr.w	r3, [r1], #4
   b8188:	4604      	mov	r4, r0
   b818a:	f840 3b04 	str.w	r3, [r0], #4
   b818e:	f7ff ffe3 	bl	b8158 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b8192:	4620      	mov	r0, r4
   b8194:	bd10      	pop	{r4, pc}

000b8196 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b8196:	b510      	push	{r4, lr}
   b8198:	f851 3b04 	ldr.w	r3, [r1], #4
   b819c:	4604      	mov	r4, r0
   b819e:	f840 3b04 	str.w	r3, [r0], #4
   b81a2:	f7ff ffd9 	bl	b8158 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b81a6:	4620      	mov	r0, r4
   b81a8:	bd10      	pop	{r4, pc}

000b81aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b81aa:	b510      	push	{r4, lr}
   b81ac:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b81ae:	6800      	ldr	r0, [r0, #0]
   b81b0:	b108      	cbz	r0, b81b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b81b2:	f7fc f89f 	bl	b42f4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b81b6:	4620      	mov	r0, r4
   b81b8:	bd10      	pop	{r4, pc}

000b81ba <_ZN8particle13BlePeerDeviceD1Ev>:
BlePeerDevice::~BlePeerDevice() {
   b81ba:	b510      	push	{r4, lr}
   b81bc:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b81be:	3004      	adds	r0, #4
   b81c0:	f7ff fff3 	bl	b81aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b81c4:	4620      	mov	r0, r4
   b81c6:	bd10      	pop	{r4, pc}

000b81c8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b81c8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b81ca:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b81ce:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b81d0:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b81d4:	42ae      	cmp	r6, r5
   b81d6:	d004      	beq.n	b81e2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b81d8:	1d28      	adds	r0, r5, #4
   b81da:	f7ff ffe6 	bl	b81aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b81de:	3508      	adds	r5, #8
   b81e0:	e7f8      	b.n	b81d4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b81e2:	6820      	ldr	r0, [r4, #0]
   b81e4:	f7ff f91e 	bl	b7424 <free>
}
   b81e8:	4620      	mov	r0, r4
   b81ea:	bd70      	pop	{r4, r5, r6, pc}

000b81ec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b81ec:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b81ee:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b81f2:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b81f4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b81f8:	42ae      	cmp	r6, r5
   b81fa:	d004      	beq.n	b8206 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b81fc:	1d28      	adds	r0, r5, #4
   b81fe:	f7ff ffd4 	bl	b81aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8202:	3508      	adds	r5, #8
   b8204:	e7f8      	b.n	b81f8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b8206:	6820      	ldr	r0, [r4, #0]
   b8208:	f7ff f90c 	bl	b7424 <free>
}
   b820c:	4620      	mov	r0, r4
   b820e:	bd70      	pop	{r4, r5, r6, pc}

000b8210 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b8210:	b510      	push	{r4, lr}
   b8212:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b8214:	3024      	adds	r0, #36	; 0x24
   b8216:	f7ff ffe9 	bl	b81ec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b821a:	f104 0018 	add.w	r0, r4, #24
   b821e:	f7ff ffd3 	bl	b81c8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b8222:	bd10      	pop	{r4, pc}

000b8224 <__tcf_0>:
    static BleLocalDevice instance;
   b8224:	b570      	push	{r4, r5, r6, lr}
	if (__ptr != nullptr)
   b8226:	4b17      	ldr	r3, [pc, #92]	; (b8284 <__tcf_0+0x60>)
   b8228:	681c      	ldr	r4, [r3, #0]
   b822a:	b354      	cbz	r4, b8282 <__tcf_0+0x5e>
    class function<_Res(_ArgTypes...)>
   b822c:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b8230:	f7fc f82a 	bl	b4288 <_ZNSt14_Function_baseD1Ev>
   b8234:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b8238:	f7fc f826 	bl	b4288 <_ZNSt14_Function_baseD1Ev>
   b823c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b8240:	f7fc f822 	bl	b4288 <_ZNSt14_Function_baseD1Ev>
   b8244:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b8248:	f7fc f81e 	bl	b4288 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b824c:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b8250:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b8254:	42ae      	cmp	r6, r5
   b8256:	d004      	beq.n	b8262 <__tcf_0+0x3e>
      ~__shared_ptr() = default;
   b8258:	1d28      	adds	r0, r5, #4
   b825a:	f7ff ffa6 	bl	b81aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b825e:	3508      	adds	r5, #8
   b8260:	e7f8      	b.n	b8254 <__tcf_0+0x30>
    ::free(ptr);
   b8262:	69a0      	ldr	r0, [r4, #24]
   b8264:	f7ff f8de 	bl	b7424 <free>
    ~BleLocalDeviceImpl() = default;
   b8268:	f104 000c 	add.w	r0, r4, #12
   b826c:	f7ff ffbe 	bl	b81ec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b8270:	4620      	mov	r0, r4
   b8272:	f7ff ffa9 	bl	b81c8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b8276:	4620      	mov	r0, r4
   b8278:	2164      	movs	r1, #100	; 0x64
    static BleLocalDevice instance;
   b827a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b827e:	f7fb bf0e 	b.w	b409e <_ZdlPvj>
   b8282:	bd70      	pop	{r4, r5, r6, pc}
   b8284:	2003e658 	.word	0x2003e658

000b8288 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b8288:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b828a:	b510      	push	{r4, lr}
      if (_M_empty())
   b828c:	b90a      	cbnz	r2, b8292 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b828e:	f002 fed2 	bl	bb036 <_ZSt25__throw_bad_function_callv>
    }
   b8292:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b8296:	68c3      	ldr	r3, [r0, #12]
   b8298:	4718      	bx	r3

000b829a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b829a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        capacity_(0) {
   b829e:	2300      	movs	r3, #0
   b82a0:	e9c0 3300 	strd	r3, r3, [r0]
   b82a4:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b82a6:	f8d1 8004 	ldr.w	r8, [r1, #4]
   b82aa:	4598      	cmp	r8, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b82ac:	4605      	mov	r5, r0
   b82ae:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b82b0:	dd4a      	ble.n	b8348 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
    return ::malloc(size);
   b82b2:	ea4f 1008 	mov.w	r0, r8, lsl #4
   b82b6:	f7ff f8ad 	bl	b7414 <malloc>
            if (!d) {
   b82ba:	4606      	mov	r6, r0
   b82bc:	2800      	cmp	r0, #0
   b82be:	d043      	beq.n	b8348 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xae>
            move(d, data_, data_ + size_);
   b82c0:	e9d5 4100 	ldrd	r4, r1, [r5]
        if (dest > p && dest < end) {
   b82c4:	42a0      	cmp	r0, r4
            move(d, data_, data_ + size_);
   b82c6:	eb04 1a01 	add.w	sl, r4, r1, lsl #4
        if (dest > p && dest < end) {
   b82ca:	d916      	bls.n	b82fa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x60>
   b82cc:	4550      	cmp	r0, sl
   b82ce:	d215      	bcs.n	b82fc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x62>
            --end;
   b82d0:	f1aa 0a10 	sub.w	sl, sl, #16
            dest += end - p - 1;
   b82d4:	f1a4 0910 	sub.w	r9, r4, #16
   b82d8:	ebaa 0404 	sub.w	r4, sl, r4
   b82dc:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   b82de:	45d1      	cmp	r9, sl
   b82e0:	d01d      	beq.n	b831e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*end));
   b82e2:	b11c      	cbz	r4, b82ec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x52>
   b82e4:	4651      	mov	r1, sl
   b82e6:	4620      	mov	r0, r4
   b82e8:	f002 fabc 	bl	ba864 <_ZN6StringC1EOS_>
                end->~T();
   b82ec:	4650      	mov	r0, sl
   b82ee:	f002 fa3d 	bl	ba76c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   b82f2:	f1aa 0a10 	sub.w	sl, sl, #16
   b82f6:	3c10      	subs	r4, #16
   b82f8:	e7f1      	b.n	b82de <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x44>
        } else if (dest != p) {
   b82fa:	d010      	beq.n	b831e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
   b82fc:	46b1      	mov	r9, r6
            for (; p != end; ++p, ++dest) {
   b82fe:	45a2      	cmp	sl, r4
   b8300:	d00d      	beq.n	b831e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x84>
                new(dest) T(std::move(*p));
   b8302:	f1b9 0f00 	cmp.w	r9, #0
   b8306:	d003      	beq.n	b8310 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x76>
   b8308:	4621      	mov	r1, r4
   b830a:	4648      	mov	r0, r9
   b830c:	f002 faaa 	bl	ba864 <_ZN6StringC1EOS_>
                p->~T();
   b8310:	4620      	mov	r0, r4
   b8312:	f002 fa2b 	bl	ba76c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   b8316:	3410      	adds	r4, #16
   b8318:	f109 0910 	add.w	r9, r9, #16
   b831c:	e7ef      	b.n	b82fe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x64>
    ::free(ptr);
   b831e:	6828      	ldr	r0, [r5, #0]
   b8320:	f7ff f880 	bl	b7424 <free>
        capacity_ = n;
   b8324:	f8c5 8008 	str.w	r8, [r5, #8]
        data_ = d;
   b8328:	602e      	str	r6, [r5, #0]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b832a:	e9d7 4300 	ldrd	r4, r3, [r7]
   b832e:	eb04 1803 	add.w	r8, r4, r3, lsl #4
        for (; it != end; ++it, ++dest) {
   b8332:	45a0      	cmp	r8, r4
   b8334:	d006      	beq.n	b8344 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0xaa>
            new(dest) T(*it);
   b8336:	4621      	mov	r1, r4
   b8338:	4630      	mov	r0, r6
   b833a:	f002 faad 	bl	ba898 <_ZN6StringC1ERKS_>
        for (; it != end; ++it, ++dest) {
   b833e:	3410      	adds	r4, #16
   b8340:	3610      	adds	r6, #16
   b8342:	e7f6      	b.n	b8332 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_+0x98>
        size_ = vector.size_;
   b8344:	687b      	ldr	r3, [r7, #4]
   b8346:	606b      	str	r3, [r5, #4]
}
   b8348:	4628      	mov	r0, r5
   b834a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000b834e <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>:
    bool filterByDeviceName(const BleScanResult& result) {
   b834e:	b530      	push	{r4, r5, lr}
   b8350:	b08d      	sub	sp, #52	; 0x34
   b8352:	460c      	mov	r4, r1
        auto filterDeviceNames = filter_.deviceNames();
   b8354:	f100 0138 	add.w	r1, r0, #56	; 0x38
   b8358:	a801      	add	r0, sp, #4
   b835a:	f7ff ff9e 	bl	b829a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterDeviceNames.size() > 0) {
   b835e:	9b02      	ldr	r3, [sp, #8]
   b8360:	2b00      	cmp	r3, #0
   b8362:	dd2f      	ble.n	b83c4 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x76>
            String srName = result.scanResponse().deviceName();
   b8364:	f104 0114 	add.w	r1, r4, #20
   b8368:	a804      	add	r0, sp, #16
   b836a:	f7ff fbd3 	bl	b7b14 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            String advName = result.advertisingData().deviceName();
   b836e:	f104 0108 	add.w	r1, r4, #8
   b8372:	a808      	add	r0, sp, #32
   b8374:	f7ff fbce 	bl	b7b14 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
            if (srName.length() == 0 && advName.length() == 0) {
   b8378:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b837a:	9b06      	ldr	r3, [sp, #24]
   b837c:	4313      	orrs	r3, r2
   b837e:	d01f      	beq.n	b83c0 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
    return data_ + size_;
   b8380:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
   b8384:	eb04 1505 	add.w	r5, r4, r5, lsl #4
            for (const auto& name : filterDeviceNames) {
   b8388:	42ac      	cmp	r4, r5
   b838a:	d019      	beq.n	b83c0 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x72>
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   b838c:	a904      	add	r1, sp, #16
   b838e:	4620      	mov	r0, r4
   b8390:	f002 fad8 	bl	ba944 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   b8394:	b160      	cbz	r0, b83b0 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x62>
                    return true;
   b8396:	2401      	movs	r4, #1
            String advName = result.advertisingData().deviceName();
   b8398:	a808      	add	r0, sp, #32
   b839a:	f002 f9e7 	bl	ba76c <_ZN6StringD1Ev>
            String srName = result.scanResponse().deviceName();
   b839e:	a804      	add	r0, sp, #16
   b83a0:	f002 f9e4 	bl	ba76c <_ZN6StringD1Ev>
        auto filterDeviceNames = filter_.deviceNames();
   b83a4:	a801      	add	r0, sp, #4
   b83a6:	f7ff fe4e 	bl	b8046 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
   b83aa:	4620      	mov	r0, r4
   b83ac:	b00d      	add	sp, #52	; 0x34
   b83ae:	bd30      	pop	{r4, r5, pc}
   b83b0:	4620      	mov	r0, r4
   b83b2:	a908      	add	r1, sp, #32
   b83b4:	f002 fac6 	bl	ba944 <_ZNK6String6equalsERKS_>
                if (name == srName || name == advName) {
   b83b8:	3410      	adds	r4, #16
   b83ba:	2800      	cmp	r0, #0
   b83bc:	d0e4      	beq.n	b8388 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x3a>
   b83be:	e7ea      	b.n	b8396 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x48>
                return false;
   b83c0:	2400      	movs	r4, #0
   b83c2:	e7e9      	b.n	b8398 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x4a>
        return true;
   b83c4:	2401      	movs	r4, #1
   b83c6:	e7ed      	b.n	b83a4 <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE+0x56>

000b83c8 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b83c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        capacity_(0) {
   b83ca:	2300      	movs	r3, #0
   b83cc:	e9c0 3300 	strd	r3, r3, [r0]
   b83d0:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b83d2:	684f      	ldr	r7, [r1, #4]
   b83d4:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b83d6:	4605      	mov	r5, r0
   b83d8:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b83da:	dd3e      	ble.n	b845a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
    return ::malloc(size);
   b83dc:	00f8      	lsls	r0, r7, #3
   b83de:	f7ff f819 	bl	b7414 <malloc>
            if (!d) {
   b83e2:	4604      	mov	r4, r0
   b83e4:	b3c8      	cbz	r0, b845a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x92>
            move(d, data_, data_ + size_);
   b83e6:	e9d5 0300 	ldrd	r0, r3, [r5]
        if (dest > p && dest < end) {
   b83ea:	4284      	cmp	r4, r0
            move(d, data_, data_ + size_);
   b83ec:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
        if (dest > p && dest < end) {
   b83f0:	d910      	bls.n	b8414 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   b83f2:	429c      	cmp	r4, r3
   b83f4:	d20f      	bcs.n	b8416 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x4e>
            --end;
   b83f6:	3b08      	subs	r3, #8
            dest += end - p - 1;
   b83f8:	1a1a      	subs	r2, r3, r0
   b83fa:	f1a0 0c08 	sub.w	ip, r0, #8
   b83fe:	4422      	add	r2, r4
            for (; end != p; --end, --dest) {
   b8400:	459c      	cmp	ip, r3
   b8402:	d018      	beq.n	b8436 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*end));
   b8404:	b11a      	cbz	r2, b840e <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x46>
    address_ = addr.address_;
   b8406:	6819      	ldr	r1, [r3, #0]
   b8408:	6011      	str	r1, [r2, #0]
   b840a:	6859      	ldr	r1, [r3, #4]
   b840c:	6051      	str	r1, [r2, #4]
            for (; end != p; --end, --dest) {
   b840e:	3b08      	subs	r3, #8
   b8410:	3a08      	subs	r2, #8
   b8412:	e7f5      	b.n	b8400 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x38>
        } else if (dest != p) {
   b8414:	d00f      	beq.n	b8436 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
   b8416:	4601      	mov	r1, r0
   b8418:	4622      	mov	r2, r4
            for (; p != end; ++p, ++dest) {
   b841a:	428b      	cmp	r3, r1
   b841c:	d00b      	beq.n	b8436 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x6e>
                new(dest) T(std::move(*p));
   b841e:	b13a      	cbz	r2, b8430 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x68>
   b8420:	f8d1 c000 	ldr.w	ip, [r1]
   b8424:	f8c2 c000 	str.w	ip, [r2]
   b8428:	f8d1 c004 	ldr.w	ip, [r1, #4]
   b842c:	f8c2 c004 	str.w	ip, [r2, #4]
            for (; p != end; ++p, ++dest) {
   b8430:	3108      	adds	r1, #8
   b8432:	3208      	adds	r2, #8
   b8434:	e7f1      	b.n	b841a <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x52>
    ::free(ptr);
   b8436:	f7fe fff5 	bl	b7424 <free>
        data_ = d;
   b843a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b843c:	60af      	str	r7, [r5, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b843e:	e9d6 3100 	ldrd	r3, r1, [r6]
   b8442:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
        for (; it != end; ++it, ++dest) {
   b8446:	4298      	cmp	r0, r3
   b8448:	d006      	beq.n	b8458 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x90>
   b844a:	681a      	ldr	r2, [r3, #0]
   b844c:	6022      	str	r2, [r4, #0]
   b844e:	685a      	ldr	r2, [r3, #4]
   b8450:	6062      	str	r2, [r4, #4]
   b8452:	3308      	adds	r3, #8
   b8454:	3408      	adds	r4, #8
   b8456:	e7f6      	b.n	b8446 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_+0x7e>
        size_ = vector.size_;
   b8458:	6069      	str	r1, [r5, #4]
}
   b845a:	4628      	mov	r0, r5
   b845c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b845e <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b845e:	b570      	push	{r4, r5, r6, lr}
   b8460:	4604      	mov	r4, r0
        capacity_(0) {
   b8462:	2000      	movs	r0, #0
   b8464:	e9c4 0000 	strd	r0, r0, [r4]
   b8468:	60a0      	str	r0, [r4, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b846a:	684e      	ldr	r6, [r1, #4]
   b846c:	4286      	cmp	r6, r0
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b846e:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8470:	dd12      	ble.n	b8498 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
    return ::realloc(ptr, size);
   b8472:	0071      	lsls	r1, r6, #1
   b8474:	f7fe ffde 	bl	b7434 <realloc>
            if (!d) {
   b8478:	b170      	cbz	r0, b8498 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x3a>
        data_ = d;
   b847a:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b847c:	60a6      	str	r6, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b847e:	e9d5 3200 	ldrd	r3, r2, [r5]
   b8482:	eb03 0242 	add.w	r2, r3, r2, lsl #1
        for (; it != end; ++it, ++dest) {
   b8486:	429a      	cmp	r2, r3
   b8488:	d004      	beq.n	b8494 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x36>
            new(dest) T(*it);
   b848a:	f833 1b02 	ldrh.w	r1, [r3], #2
   b848e:	f820 1b02 	strh.w	r1, [r0], #2
        for (; it != end; ++it, ++dest) {
   b8492:	e7f8      	b.n	b8486 <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_+0x28>
        size_ = vector.size_;
   b8494:	686b      	ldr	r3, [r5, #4]
   b8496:	6063      	str	r3, [r4, #4]
}
   b8498:	4620      	mov	r0, r4
   b849a:	bd70      	pop	{r4, r5, r6, pc}

000b849c <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>:
            func_(std::move(guard.func_)),
            dismissed_(guard.dismissed_) {
        guard.dismissed_ = true;
    }

    ~NamedScopeGuard() {
   b849c:	b510      	push	{r4, lr}
        if (!dismissed_) {
   b849e:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   b84a0:	4604      	mov	r4, r0
        if (!dismissed_) {
   b84a2:	b923      	cbnz	r3, b84ae <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
                SCOPE_GUARD({
   b84a4:	6803      	ldr	r3, [r0, #0]
   b84a6:	6818      	ldr	r0, [r3, #0]
   b84a8:	b108      	cbz	r0, b84ae <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev+0x12>
   b84aa:	f7fe ffbb 	bl	b7424 <free>
            func_();
        }
    }
   b84ae:	4620      	mov	r0, r4
   b84b0:	bd10      	pop	{r4, pc}

000b84b2 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>:
    ~NamedScopeGuard() {
   b84b2:	b510      	push	{r4, lr}
        if (!dismissed_) {
   b84b4:	7903      	ldrb	r3, [r0, #4]
    ~NamedScopeGuard() {
   b84b6:	4604      	mov	r4, r0
        if (!dismissed_) {
   b84b8:	b923      	cbnz	r3, b84c4 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
                SCOPE_GUARD({
   b84ba:	6803      	ldr	r3, [r0, #0]
   b84bc:	6818      	ldr	r0, [r3, #0]
   b84be:	b108      	cbz	r0, b84c4 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev+0x12>
   b84c0:	f7fe ffb0 	bl	b7424 <free>
    }
   b84c4:	4620      	mov	r0, r4
   b84c6:	bd10      	pop	{r4, pc}

000b84c8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>:
    bool filterByCustomData(const BleScanResult& result) {
   b84c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        customDataLen_ = len;
        return *this;
    }
    const uint8_t* customData(size_t* len) const {
        *len = customDataLen_;
        return customData_;
   b84cc:	f8d0 806c 	ldr.w	r8, [r0, #108]	; 0x6c
   b84d0:	b08f      	sub	sp, #60	; 0x3c
   b84d2:	460f      	mov	r7, r1
        if (filterCustomData != nullptr && filterCustomDatalen > 0) {
   b84d4:	f1b8 0f00 	cmp.w	r8, #0
   b84d8:	d072      	beq.n	b85c0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        *len = customDataLen_;
   b84da:	6f05      	ldr	r5, [r0, #112]	; 0x70
   b84dc:	2d00      	cmp	r5, #0
   b84de:	d06f      	beq.n	b85c0 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xf8>
        return scanResponse_;
   b84e0:	f101 0914 	add.w	r9, r1, #20
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   b84e4:	231f      	movs	r3, #31
   b84e6:	2200      	movs	r2, #0
   b84e8:	21ff      	movs	r1, #255	; 0xff
   b84ea:	4648      	mov	r0, r9
   b84ec:	f7ff fadf 	bl	b7aae <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
        return advertisingData_;
   b84f0:	3708      	adds	r7, #8
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b84f2:	23ff      	movs	r3, #255	; 0xff
            size_t srLen = result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN);
   b84f4:	4604      	mov	r4, r0
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b84f6:	2200      	movs	r2, #0
   b84f8:	4619      	mov	r1, r3
   b84fa:	4638      	mov	r0, r7
   b84fc:	f7ff fad7 	bl	b7aae <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   b8500:	42ac      	cmp	r4, r5
            size_t advLen = result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, nullptr, BLE_MAX_ADV_DATA_LEN_EXT);
   b8502:	4606      	mov	r6, r0
            if (srLen != filterCustomDatalen && advLen != filterCustomDatalen) {
   b8504:	d006      	beq.n	b8514 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x4c>
   b8506:	42ae      	cmp	r6, r5
   b8508:	d030      	beq.n	b856c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa4>
                return false;
   b850a:	2400      	movs	r4, #0
    }
   b850c:	4620      	mov	r0, r4
   b850e:	b00f      	add	sp, #60	; 0x3c
   b8510:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                uint8_t* buf = (uint8_t*)malloc(srLen);
   b8514:	4620      	mov	r0, r4
   b8516:	f7fe ff7d 	bl	b7414 <malloc>
            dismissed_(false) {
   b851a:	ab03      	add	r3, sp, #12
   b851c:	9304      	str	r3, [sp, #16]
   b851e:	2300      	movs	r3, #0
   b8520:	4604      	mov	r4, r0
   b8522:	9003      	str	r0, [sp, #12]
   b8524:	f88d 3014 	strb.w	r3, [sp, #20]
                if (!buf) {
   b8528:	b970      	cbnz	r0, b8548 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x80>
                    LOG(ERROR, "Failed to allocate memory!");
   b852a:	2320      	movs	r3, #32
   b852c:	e9cd 3006 	strd	r3, r0, [sp, #24]
   b8530:	4b24      	ldr	r3, [pc, #144]	; (b85c4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   b8532:	9300      	str	r3, [sp, #0]
   b8534:	4924      	ldr	r1, [pc, #144]	; (b85c8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   b8536:	4603      	mov	r3, r0
   b8538:	aa06      	add	r2, sp, #24
   b853a:	2032      	movs	r0, #50	; 0x32
   b853c:	f7fe fe8e 	bl	b725c <log_message>
                    return false;
   b8540:	a804      	add	r0, sp, #16
   b8542:	f7ff ffab 	bl	b849c <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
   b8546:	e7e1      	b.n	b850c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.scanResponse().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, srLen);
   b8548:	4602      	mov	r2, r0
   b854a:	21ff      	movs	r1, #255	; 0xff
   b854c:	462b      	mov	r3, r5
   b854e:	4648      	mov	r0, r9
   b8550:	f7ff faad 	bl	b7aae <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, srLen)) {
   b8554:	9803      	ldr	r0, [sp, #12]
   b8556:	462a      	mov	r2, r5
   b8558:	4641      	mov	r1, r8
   b855a:	f003 fb72 	bl	bbc42 <memcmp>
   b855e:	b118      	cbz	r0, b8568 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xa0>
                SCOPE_GUARD({
   b8560:	a804      	add	r0, sp, #16
   b8562:	f7ff ff9b 	bl	b849c <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE_ED1Ev>
            if (advLen == filterCustomDatalen) {
   b8566:	e7ce      	b.n	b8506 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x3e>
                    return true;
   b8568:	2401      	movs	r4, #1
   b856a:	e7e9      	b.n	b8540 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x78>
                uint8_t* buf = (uint8_t*)malloc(advLen);
   b856c:	4628      	mov	r0, r5
   b856e:	f7fe ff51 	bl	b7414 <malloc>
   b8572:	2400      	movs	r4, #0
   b8574:	ab03      	add	r3, sp, #12
   b8576:	4606      	mov	r6, r0
   b8578:	9003      	str	r0, [sp, #12]
   b857a:	9304      	str	r3, [sp, #16]
   b857c:	f88d 4014 	strb.w	r4, [sp, #20]
                if (!buf) {
   b8580:	b978      	cbnz	r0, b85a2 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xda>
                    LOG(ERROR, "Failed to allocate memory!");
   b8582:	2320      	movs	r3, #32
   b8584:	e9cd 3006 	strd	r3, r0, [sp, #24]
   b8588:	4b0e      	ldr	r3, [pc, #56]	; (b85c4 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xfc>)
   b858a:	9300      	str	r3, [sp, #0]
   b858c:	490e      	ldr	r1, [pc, #56]	; (b85c8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x100>)
   b858e:	4603      	mov	r3, r0
   b8590:	aa06      	add	r2, sp, #24
   b8592:	2032      	movs	r0, #50	; 0x32
   b8594:	f7fe fe62 	bl	b725c <log_message>
                    return false;
   b8598:	4634      	mov	r4, r6
   b859a:	a804      	add	r0, sp, #16
   b859c:	f7ff ff89 	bl	b84b2 <_ZN8particle15NamedScopeGuardIZNS_16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultEEUlvE0_ED1Ev>
   b85a0:	e7b4      	b.n	b850c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
                result.advertisingData().get(BleAdvertisingDataType::MANUFACTURER_SPECIFIC_DATA, buf, advLen);
   b85a2:	4602      	mov	r2, r0
   b85a4:	21ff      	movs	r1, #255	; 0xff
   b85a6:	462b      	mov	r3, r5
   b85a8:	4638      	mov	r0, r7
   b85aa:	f7ff fa80 	bl	b7aae <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
                if (!memcmp(buf, filterCustomData, advLen)) {
   b85ae:	9803      	ldr	r0, [sp, #12]
   b85b0:	462a      	mov	r2, r5
   b85b2:	4641      	mov	r1, r8
   b85b4:	f003 fb45 	bl	bbc42 <memcmp>
   b85b8:	2800      	cmp	r0, #0
   b85ba:	d1ee      	bne.n	b859a <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
                    return true;
   b85bc:	2401      	movs	r4, #1
   b85be:	e7ec      	b.n	b859a <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0xd2>
        return true;
   b85c0:	2401      	movs	r4, #1
   b85c2:	e7a3      	b.n	b850c <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE+0x44>
   b85c4:	000be410 	.word	0x000be410
   b85c8:	000be38f 	.word	0x000be38f

000b85cc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>:
    bool realloc(int n) {
   b85cc:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b85ce:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b85d0:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b85d2:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b85d4:	dd03      	ble.n	b85de <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x12>
    return ::realloc(ptr, size);
   b85d6:	f7fe ff2d 	bl	b7434 <realloc>
            if (!d) {
   b85da:	b918      	cbnz	r0, b85e4 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x18>
    }
   b85dc:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b85de:	f7fe ff21 	bl	b7424 <free>
        T* d = nullptr;
   b85e2:	2000      	movs	r0, #0
        data_ = d;
   b85e4:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b85e6:	60a5      	str	r5, [r4, #8]
        return true;
   b85e8:	2001      	movs	r0, #1
   b85ea:	e7f7      	b.n	b85dc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi+0x10>

000b85ec <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>:
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
   b85ec:	b508      	push	{r3, lr}
    if (n > capacity_ && !realloc(n)) {
   b85ee:	6883      	ldr	r3, [r0, #8]
   b85f0:	428b      	cmp	r3, r1
   b85f2:	da02      	bge.n	b85fa <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xe>
   b85f4:	f7ff ffea 	bl	b85cc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
}
   b85f8:	bd08      	pop	{r3, pc}
    return true;
   b85fa:	2001      	movs	r0, #1
   b85fc:	e7fc      	b.n	b85f8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi+0xc>

000b85fe <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b85fe:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   b8600:	2300      	movs	r3, #0
   b8602:	e9c0 3300 	strd	r3, r3, [r0]
   b8606:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8608:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b860a:	6849      	ldr	r1, [r1, #4]
   b860c:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b860e:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8610:	dd10      	ble.n	b8634 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
   b8612:	f7ff ffdb 	bl	b85cc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b8616:	b168      	cbz	r0, b8634 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x36>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b8618:	e9d5 3100 	ldrd	r3, r1, [r5]
   b861c:	6822      	ldr	r2, [r4, #0]
   b861e:	4419      	add	r1, r3
        for (; it != end; ++it, ++dest) {
   b8620:	4299      	cmp	r1, r3
   b8622:	d005      	beq.n	b8630 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x32>
            new(dest) T(*it);
   b8624:	b10a      	cbz	r2, b862a <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x2c>
   b8626:	7818      	ldrb	r0, [r3, #0]
   b8628:	7010      	strb	r0, [r2, #0]
        for (; it != end; ++it, ++dest) {
   b862a:	3301      	adds	r3, #1
   b862c:	3201      	adds	r2, #1
   b862e:	e7f7      	b.n	b8620 <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_+0x22>
        size_ = vector.size_;
   b8630:	686b      	ldr	r3, [r5, #4]
   b8632:	6063      	str	r3, [r4, #4]
}
   b8634:	4620      	mov	r0, r4
   b8636:	bd38      	pop	{r3, r4, r5, pc}

000b8638 <_ZN8particle13BleScanResultC1EOS0_>:
class BleScanResult {
   b8638:	b538      	push	{r3, r4, r5, lr}
    address_ = addr.address_;
   b863a:	680b      	ldr	r3, [r1, #0]
   b863c:	6003      	str	r3, [r0, #0]
   b863e:	684b      	ldr	r3, [r1, #4]
   b8640:	6043      	str	r3, [r0, #4]
   b8642:	4604      	mov	r4, r0
   b8644:	460d      	mov	r5, r1
class BleAdvertisingData {
   b8646:	3008      	adds	r0, #8
   b8648:	3108      	adds	r1, #8
   b864a:	f7ff ffd8 	bl	b85fe <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b864e:	f105 0114 	add.w	r1, r5, #20
   b8652:	f104 0014 	add.w	r0, r4, #20
   b8656:	f7ff ffd2 	bl	b85fe <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   b865a:	f895 3020 	ldrb.w	r3, [r5, #32]
   b865e:	f884 3020 	strb.w	r3, [r4, #32]
   b8662:	4620      	mov	r0, r4
   b8664:	bd38      	pop	{r3, r4, r5, pc}

000b8666 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>:
class BleAdvertisingData {
   b8666:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b8668:	4604      	mov	r4, r0
   b866a:	a801      	add	r0, sp, #4
   b866c:	f7ff ffc7 	bl	b85fe <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
      __a = _GLIBCXX_MOVE(__b);
   b8670:	9b01      	ldr	r3, [sp, #4]
   b8672:	9a02      	ldr	r2, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8674:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   b8676:	6023      	str	r3, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8678:	6863      	ldr	r3, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   b867a:	6062      	str	r2, [r4, #4]
   b867c:	9a03      	ldr	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b867e:	9302      	str	r3, [sp, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8680:	68a3      	ldr	r3, [r4, #8]
      __a = _GLIBCXX_MOVE(__b);
   b8682:	60a2      	str	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8684:	9001      	str	r0, [sp, #4]
   b8686:	9303      	str	r3, [sp, #12]
    ::free(ptr);
   b8688:	f7fe fecc 	bl	b7424 <free>
   b868c:	b004      	add	sp, #16
   b868e:	bd10      	pop	{r4, pc}

000b8690 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b8690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8694:	460f      	mov	r7, r1
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8696:	6841      	ldr	r1, [r0, #4]
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b8698:	461d      	mov	r5, r3
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b869a:	4419      	add	r1, r3
   b869c:	6883      	ldr	r3, [r0, #8]
   b869e:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, const T* values, int n) {
   b86a0:	4604      	mov	r4, r0
   b86a2:	4690      	mov	r8, r2
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b86a4:	dc12      	bgt.n	b86cc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x3c>
    T* const p = data_ + i;
   b86a6:	6826      	ldr	r6, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b86a8:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b86aa:	443e      	add	r6, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   b86ac:	1bd2      	subs	r2, r2, r7
   b86ae:	4631      	mov	r1, r6
   b86b0:	1970      	adds	r0, r6, r5
   b86b2:	f003 fae4 	bl	bbc7e <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b86b6:	462a      	mov	r2, r5
   b86b8:	4641      	mov	r1, r8
   b86ba:	4630      	mov	r0, r6
   b86bc:	f003 fad1 	bl	bbc62 <memcpy>
    size_ += n;
   b86c0:	6863      	ldr	r3, [r4, #4]
   b86c2:	442b      	add	r3, r5
   b86c4:	6063      	str	r3, [r4, #4]
    return true;
   b86c6:	2001      	movs	r0, #1
}
   b86c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b86cc:	f7ff ff7e 	bl	b85cc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b86d0:	2800      	cmp	r0, #0
   b86d2:	d1e8      	bne.n	b86a6 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x16>
   b86d4:	e7f8      	b.n	b86c8 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi+0x38>

000b86d6 <_ZN8particle18BleAdvertisingData3setEPKhj>:
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   b86d6:	4613      	mov	r3, r2
    if (buf == nullptr || len == 0) {
   b86d8:	460a      	mov	r2, r1
   b86da:	2100      	movs	r1, #0
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   b86dc:	b510      	push	{r4, lr}
   b86de:	4604      	mov	r4, r0
    size_ = 0;
   b86e0:	6041      	str	r1, [r0, #4]
    if (buf == nullptr || len == 0) {
   b86e2:	b102      	cbz	r2, b86e6 <_ZN8particle18BleAdvertisingData3setEPKhj+0x10>
   b86e4:	b90b      	cbnz	r3, b86ea <_ZN8particle18BleAdvertisingData3setEPKhj+0x14>
        return selfData_.size();
   b86e6:	2000      	movs	r0, #0
}
   b86e8:	bd10      	pop	{r4, pc}
    return insert(size_, values, n);
   b86ea:	2bff      	cmp	r3, #255	; 0xff
   b86ec:	bf28      	it	cs
   b86ee:	23ff      	movcs	r3, #255	; 0xff
   b86f0:	f7ff ffce 	bl	b8690 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
    CHECK_TRUE(selfData_.append(buf, len), 0);
   b86f4:	2800      	cmp	r0, #0
   b86f6:	d0f7      	beq.n	b86e8 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>
    return selfData_.size();
   b86f8:	6860      	ldr	r0, [r4, #4]
   b86fa:	e7f5      	b.n	b86e8 <_ZN8particle18BleAdvertisingData3setEPKhj+0x12>

000b86fc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b86fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b86fe:	460d      	mov	r5, r1
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8700:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b8704:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b8706:	4604      	mov	r4, r0
   b8708:	4616      	mov	r6, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b870a:	da0b      	bge.n	b8724 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x28>
    T* const p = data_ + i;
   b870c:	6827      	ldr	r7, [r4, #0]
        ::memmove(dest, p, (end - p) * sizeof(T));
   b870e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8710:	1979      	adds	r1, r7, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8712:	1b52      	subs	r2, r2, r5
   b8714:	1c48      	adds	r0, r1, #1
   b8716:	f003 fab2 	bl	bbc7e <memmove>
    new(p) T(std::move(value));
   b871a:	557e      	strb	r6, [r7, r5]
    ++size_;
   b871c:	6863      	ldr	r3, [r4, #4]
   b871e:	3301      	adds	r3, #1
   b8720:	6063      	str	r3, [r4, #4]
}
   b8722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8724:	3101      	adds	r1, #1
   b8726:	f7ff ff51 	bl	b85cc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reallocIhLi0EEEbi>
   b872a:	2800      	cmp	r0, #0
   b872c:	d1ee      	bne.n	b870c <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x10>
   b872e:	e7f8      	b.n	b8722 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0+0x26>

000b8730 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8730:	460a      	mov	r2, r1
    return insert(size_, std::move(value));
   b8732:	6841      	ldr	r1, [r0, #4]
   b8734:	f7ff bfe2 	b.w	b86fc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>

000b8738 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b8738:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   b873c:	4604      	mov	r4, r0
   b873e:	461d      	mov	r5, r3
   b8740:	460f      	mov	r7, r1
   b8742:	ab01      	add	r3, sp, #4
   b8744:	4690      	mov	r8, r2
   b8746:	460a      	mov	r2, r1
   b8748:	e9d0 0100 	ldrd	r0, r1, [r0]
   b874c:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
   b8750:	f7fe ff32 	bl	b75b8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
   b8754:	1cae      	adds	r6, r5, #2
   b8756:	6863      	ldr	r3, [r4, #4]
   b8758:	4602      	mov	r2, r0
    if (!force && adsLen > 0) {
   b875a:	f1b9 0f00 	cmp.w	r9, #0
   b875e:	d126      	bne.n	b87ae <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
   b8760:	b328      	cbz	r0, b87ae <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x76>
        if ((selfData_.size() - adsLen + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b8762:	4433      	add	r3, r6
   b8764:	1a1b      	subs	r3, r3, r0
   b8766:	2bff      	cmp	r3, #255	; 0xff
   b8768:	d809      	bhi.n	b877e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
            selfData_.removeAt(offset, adsLen);
   b876a:	9901      	ldr	r1, [sp, #4]
   b876c:	4620      	mov	r0, r4
   b876e:	f7ff fcc7 	bl	b8100 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE8removeAtEii>
            CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b8772:	6861      	ldr	r1, [r4, #4]
   b8774:	4620      	mov	r0, r4
   b8776:	4431      	add	r1, r6
   b8778:	f7ff ff38 	bl	b85ec <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b877c:	b918      	cbnz	r0, b8786 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x4e>
    return selfData_.size();
   b877e:	6860      	ldr	r0, [r4, #4]
}
   b8780:	b003      	add	sp, #12
   b8782:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            selfData_.insert(offset, len + 1);
   b8786:	1c6a      	adds	r2, r5, #1
   b8788:	9901      	ldr	r1, [sp, #4]
   b878a:	b2d2      	uxtb	r2, r2
   b878c:	4620      	mov	r0, r4
   b878e:	f7ff ffb5 	bl	b86fc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 1, static_cast<uint8_t>(type));
   b8792:	9901      	ldr	r1, [sp, #4]
   b8794:	463a      	mov	r2, r7
   b8796:	3101      	adds	r1, #1
   b8798:	4620      	mov	r0, r4
   b879a:	f7ff ffaf 	bl	b86fc <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEih.isra.0>
            selfData_.insert(offset + 2, buf, len);
   b879e:	9901      	ldr	r1, [sp, #4]
   b87a0:	462b      	mov	r3, r5
   b87a2:	4642      	mov	r2, r8
   b87a4:	3102      	adds	r1, #2
    return insert(size_, values, n);
   b87a6:	4620      	mov	r0, r4
   b87a8:	f7ff ff72 	bl	b8690 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6insertEiPKhi>
   b87ac:	e7e7      	b.n	b877e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
    else if ((selfData_.size() + len + 2) <= BLE_MAX_ADV_DATA_LEN_EXT) {
   b87ae:	18f1      	adds	r1, r6, r3
   b87b0:	29ff      	cmp	r1, #255	; 0xff
   b87b2:	d8e4      	bhi.n	b877e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        CHECK_TRUE(selfData_.reserve(selfData_.size() + len + 2), selfData_.size());
   b87b4:	4620      	mov	r0, r4
   b87b6:	f7ff ff19 	bl	b85ec <_ZN5spark6VectorIhNS_16DefaultAllocatorEE7reserveEi>
   b87ba:	2800      	cmp	r0, #0
   b87bc:	d0df      	beq.n	b877e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x46>
        selfData_.append(len + 1);
   b87be:	1c69      	adds	r1, r5, #1
   b87c0:	b2c9      	uxtb	r1, r1
   b87c2:	4620      	mov	r0, r4
   b87c4:	f7ff ffb4 	bl	b8730 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
        selfData_.append(static_cast<uint8_t>(type));
   b87c8:	4639      	mov	r1, r7
   b87ca:	4620      	mov	r0, r4
   b87cc:	f7ff ffb0 	bl	b8730 <_ZN5spark6VectorIhNS_16DefaultAllocatorEE6appendEh.isra.0>
   b87d0:	6861      	ldr	r1, [r4, #4]
   b87d2:	462b      	mov	r3, r5
   b87d4:	4642      	mov	r2, r8
   b87d6:	e7e6      	b.n	b87a6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x6e>

000b87d8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b87d8:	b430      	push	{r4, r5}
   b87da:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b87de:	b11a      	cbz	r2, b87e8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b87e0:	9502      	str	r5, [sp, #8]
}
   b87e2:	bc30      	pop	{r4, r5}
   b87e4:	f7ff bfa8 	b.w	b8738 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfData_.size();
   b87e8:	6840      	ldr	r0, [r0, #4]
}
   b87ea:	bc30      	pop	{r4, r5}
   b87ec:	4770      	bx	lr

000b87ee <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b87ee:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        capacity_(0) {
   b87f0:	2300      	movs	r3, #0
   b87f2:	e9c0 3300 	strd	r3, r3, [r0]
   b87f6:	6083      	str	r3, [r0, #8]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b87f8:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b87fa:	9300      	str	r3, [sp, #0]
   b87fc:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b87fe:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b8802:	4619      	mov	r1, r3
   b8804:	f10d 020f 	add.w	r2, sp, #15
BleAdvertisingData::BleAdvertisingData()
   b8808:	4604      	mov	r4, r0
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b880a:	f7ff ffe5 	bl	b87d8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b880e:	4620      	mov	r0, r4
   b8810:	b004      	add	sp, #16
   b8812:	bd10      	pop	{r4, pc}

000b8814 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b8814:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b8816:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b8818:	4604      	mov	r4, r0
   b881a:	460d      	mov	r5, r1
   b881c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b881e:	d914      	bls.n	b884a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b8820:	4290      	cmp	r0, r2
   b8822:	d213      	bcs.n	b884c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b8824:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b8828:	1a75      	subs	r5, r6, r1
   b882a:	f1a1 0708 	sub.w	r7, r1, #8
   b882e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b8830:	42b7      	cmp	r7, r6
   b8832:	d018      	beq.n	b8866 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b8834:	b11c      	cbz	r4, b883e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b8836:	4631      	mov	r1, r6
   b8838:	4620      	mov	r0, r4
   b883a:	f7ff fcac 	bl	b8196 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b883e:	1d30      	adds	r0, r6, #4
   b8840:	f7ff fcb3 	bl	b81aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b8844:	3e08      	subs	r6, #8
   b8846:	3c08      	subs	r4, #8
   b8848:	e7f2      	b.n	b8830 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b884a:	d00c      	beq.n	b8866 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b884c:	42b5      	cmp	r5, r6
   b884e:	d00a      	beq.n	b8866 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b8850:	b11c      	cbz	r4, b885a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b8852:	4629      	mov	r1, r5
   b8854:	4620      	mov	r0, r4
   b8856:	f7ff fc9e 	bl	b8196 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b885a:	1d28      	adds	r0, r5, #4
   b885c:	f7ff fca5 	bl	b81aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b8860:	3508      	adds	r5, #8
   b8862:	3408      	adds	r4, #8
   b8864:	e7f2      	b.n	b884c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b8866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b8868 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b8868:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b886a:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b886c:	6846      	ldr	r6, [r0, #4]
   b886e:	4668      	mov	r0, sp
   b8870:	f7ff fc91 	bl	b8196 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8874:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b8878:	429f      	cmp	r7, r3
   b887a:	db12      	blt.n	b88a2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b887c:	3701      	adds	r7, #1
        if (n > 0) {
   b887e:	2f00      	cmp	r7, #0
   b8880:	dd29      	ble.n	b88d6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b8882:	00f8      	lsls	r0, r7, #3
   b8884:	f7fe fdc6 	bl	b7414 <malloc>
            if (!d) {
   b8888:	4605      	mov	r5, r0
   b888a:	b1f0      	cbz	r0, b88ca <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b888c:	e9d4 1200 	ldrd	r1, r2, [r4]
   b8890:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b8894:	f7ff ffbe 	bl	b8814 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b8898:	6820      	ldr	r0, [r4, #0]
   b889a:	f7fe fdc3 	bl	b7424 <free>
        data_ = d;
   b889e:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b88a0:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b88a2:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b88a4:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b88a6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b88aa:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b88ae:	4631      	mov	r1, r6
   b88b0:	f106 0008 	add.w	r0, r6, #8
   b88b4:	f7ff ffae 	bl	b8814 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b88b8:	b11e      	cbz	r6, b88c2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b88ba:	4669      	mov	r1, sp
   b88bc:	4630      	mov	r0, r6
   b88be:	f7ff fc6a 	bl	b8196 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b88c2:	6863      	ldr	r3, [r4, #4]
   b88c4:	3301      	adds	r3, #1
   b88c6:	6063      	str	r3, [r4, #4]
    return true;
   b88c8:	2501      	movs	r5, #1
   b88ca:	a801      	add	r0, sp, #4
   b88cc:	f7ff fc6d 	bl	b81aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b88d0:	4628      	mov	r0, r5
   b88d2:	b003      	add	sp, #12
   b88d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b88d6:	2500      	movs	r5, #0
   b88d8:	e7de      	b.n	b8898 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b88da <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b88da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b88dc:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b88e0:	4605      	mov	r5, r0
   b88e2:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b88e4:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b88e8:	42a6      	cmp	r6, r4
   b88ea:	d005      	beq.n	b88f8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b88ec:	4639      	mov	r1, r7
   b88ee:	4620      	mov	r0, r4
   b88f0:	f7ff fabb 	bl	b7e6a <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b88f4:	b108      	cbz	r0, b88fa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b88f6:	b914      	cbnz	r4, b88fe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b88f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b88fa:	3408      	adds	r4, #8
   b88fc:	e7f4      	b.n	b88e8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b88fe:	1d20      	adds	r0, r4, #4
   b8900:	f7ff fc53 	bl	b81aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b8904:	e9d5 3200 	ldrd	r3, r2, [r5]
   b8908:	f104 0108 	add.w	r1, r4, #8
   b890c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b8910:	4620      	mov	r0, r4
   b8912:	f7ff ff7f 	bl	b8814 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b8916:	686b      	ldr	r3, [r5, #4]
   b8918:	3b01      	subs	r3, #1
   b891a:	606b      	str	r3, [r5, #4]
    return true;
   b891c:	e7ec      	b.n	b88f8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
	...

000b8920 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b8920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b8924:	4605      	mov	r5, r0
   b8926:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b8928:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b892a:	460c      	mov	r4, r1
        WiringBleLock lk;
   b892c:	f7fe ff12 	bl	b7754 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b8930:	682e      	ldr	r6, [r5, #0]
   b8932:	1ef3      	subs	r3, r6, #3
   b8934:	2b0d      	cmp	r3, #13
   b8936:	d83c      	bhi.n	b89b2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b8938:	e8df f013 	tbh	[pc, r3, lsl #1]
   b893c:	0053000e 	.word	0x0053000e
   b8940:	00d1003b 	.word	0x00d1003b
   b8944:	003b003b 	.word	0x003b003b
   b8948:	003b003b 	.word	0x003b003b
   b894c:	009b003b 	.word	0x009b003b
   b8950:	009b009b 	.word	0x009b009b
   b8954:	009b009b 	.word	0x009b009b
                BlePeerDevice peer;
   b8958:	a804      	add	r0, sp, #16
   b895a:	f7ff fa2d 	bl	b7db8 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b895e:	9b04      	ldr	r3, [sp, #16]
   b8960:	89aa      	ldrh	r2, [r5, #12]
   b8962:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b8964:	6869      	ldr	r1, [r5, #4]
   b8966:	9804      	ldr	r0, [sp, #16]
   b8968:	3108      	adds	r1, #8
   b896a:	3002      	adds	r0, #2
   b896c:	f7fe ff0c 	bl	b7788 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b8970:	a904      	add	r1, sp, #16
   b8972:	a806      	add	r0, sp, #24
   b8974:	f7ff fc0f 	bl	b8196 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b8978:	a906      	add	r1, sp, #24
   b897a:	f104 0018 	add.w	r0, r4, #24
   b897e:	f7ff ff73 	bl	b8868 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b8982:	4605      	mov	r5, r0
   b8984:	a807      	add	r0, sp, #28
   b8986:	f7ff fc10 	bl	b81aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b898a:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b898c:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b898e:	b9b5      	cbnz	r5, b89be <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x9e>
                    LOG(ERROR, "Failed to append peer Central device.");
   b8990:	4b5d      	ldr	r3, [pc, #372]	; (b8b08 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1e8>)
   b8992:	495e      	ldr	r1, [pc, #376]	; (b8b0c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b8994:	9300      	str	r3, [sp, #0]
   b8996:	2032      	movs	r0, #50	; 0x32
   b8998:	462b      	mov	r3, r5
   b899a:	aa06      	add	r2, sp, #24
   b899c:	9507      	str	r5, [sp, #28]
   b899e:	f7fe fc5d 	bl	b725c <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b89a2:	9b04      	ldr	r3, [sp, #16]
   b89a4:	4629      	mov	r1, r5
   b89a6:	8818      	ldrh	r0, [r3, #0]
   b89a8:	f7fe fa06 	bl	b6db8 <hal_ble_gap_disconnect>
   b89ac:	a805      	add	r0, sp, #20
   b89ae:	f7ff fbfc 	bl	b81aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        WiringBleLock lk;
   b89b2:	a803      	add	r0, sp, #12
   b89b4:	f7fe fedc 	bl	b7770 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b89b8:	b00e      	add	sp, #56	; 0x38
   b89ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                LOG(TRACE, "Connected by Central device.");
   b89be:	4a54      	ldr	r2, [pc, #336]	; (b8b10 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f0>)
   b89c0:	9200      	str	r2, [sp, #0]
   b89c2:	2300      	movs	r3, #0
   b89c4:	4951      	ldr	r1, [pc, #324]	; (b8b0c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b89c6:	9307      	str	r3, [sp, #28]
   b89c8:	aa06      	add	r2, sp, #24
   b89ca:	2001      	movs	r0, #1
   b89cc:	f7fe fc46 	bl	b725c <log_message>
                if (impl->connectedCallback_) {
   b89d0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b89d2:	2b00      	cmp	r3, #0
   b89d4:	d0ea      	beq.n	b89ac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    impl->connectedCallback_(peer);
   b89d6:	a904      	add	r1, sp, #16
   b89d8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b89dc:	f7ff fc54 	bl	b8288 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b89e0:	e7e4      	b.n	b89ac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b89e2:	89a9      	ldrh	r1, [r5, #12]
   b89e4:	4620      	mov	r0, r4
   b89e6:	f7ff f8fa 	bl	b7bde <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b89ea:	4606      	mov	r6, r0
   b89ec:	2800      	cmp	r0, #0
   b89ee:	d0e0      	beq.n	b89b2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
      { return _M_ptr; }
   b89f0:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b89f2:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b89f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b89fa:	8029      	strh	r1, [r5, #0]
   b89fc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b8a00:	429a      	cmp	r2, r3
   b8a02:	d003      	beq.n	b8a0c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   b8a04:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b8a08:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b8a0a:	e7f9      	b.n	b8a00 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
    destruct(data_, data_ + size_);
   b8a0c:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b8a10:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b8a14:	45b8      	cmp	r8, r7
   b8a16:	d004      	beq.n	b8a22 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x102>
      ~__shared_ptr() = default;
   b8a18:	1d38      	adds	r0, r7, #4
   b8a1a:	f7ff fbc6 	bl	b81aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8a1e:	3708      	adds	r7, #8
   b8a20:	e7f8      	b.n	b8a14 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf4>
    size_ = 0;
   b8a22:	2300      	movs	r3, #0
   b8a24:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b8a26:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b8a2a:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b8a2e:	45b8      	cmp	r8, r7
   b8a30:	d004      	beq.n	b8a3c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b8a32:	1d38      	adds	r0, r7, #4
   b8a34:	f7ff fbb9 	bl	b81aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b8a38:	3708      	adds	r7, #8
   b8a3a:	e7f8      	b.n	b8a2e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10e>
    size_ = 0;
   b8a3c:	2300      	movs	r3, #0
   b8a3e:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b8a40:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b8a42:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b8a44:	b123      	cbz	r3, b8a50 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x130>
                        impl->disconnectedCallback_(*peer);
   b8a46:	4631      	mov	r1, r6
   b8a48:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b8a4c:	f7ff fc1c 	bl	b8288 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b8a50:	2300      	movs	r3, #0
   b8a52:	2220      	movs	r2, #32
   b8a54:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b8a58:	4a2e      	ldr	r2, [pc, #184]	; (b8b14 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1f4>)
   b8a5a:	9200      	str	r2, [sp, #0]
   b8a5c:	492b      	ldr	r1, [pc, #172]	; (b8b0c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ec>)
   b8a5e:	aa06      	add	r2, sp, #24
   b8a60:	2001      	movs	r0, #1
   b8a62:	f7fe fbfb 	bl	b725c <log_message>
                    impl->peers_.removeOne(*peer);
   b8a66:	4631      	mov	r1, r6
   b8a68:	f104 0018 	add.w	r0, r4, #24
   b8a6c:	f7ff ff35 	bl	b88da <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b8a70:	e79f      	b.n	b89b2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b8a72:	89a9      	ldrh	r1, [r5, #12]
   b8a74:	4620      	mov	r0, r4
   b8a76:	f7ff f8b2 	bl	b7bde <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b8a7a:	2800      	cmp	r0, #0
   b8a7c:	d099      	beq.n	b89b2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    if (impl->pairingEventCallback_) {
   b8a7e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b8a80:	2b00      	cmp	r3, #0
   b8a82:	d096      	beq.n	b89b2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        BlePairingEventPayload payload = {};
   b8a84:	2300      	movs	r3, #0
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b8a86:	2e0d      	cmp	r6, #13
                        BlePairingEventPayload payload = {};
   b8a88:	f8ad 3016 	strh.w	r3, [sp, #22]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b8a8c:	d001      	beq.n	b8a92 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x172>
   b8a8e:	2e10      	cmp	r6, #16
   b8a90:	d117      	bne.n	b8ac2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a2>
                        BlePairingEventPayload payload = {};
   b8a92:	2300      	movs	r3, #0
                            payload.passkey = event->params.passkey_display.passkey;
   b8a94:	6869      	ldr	r1, [r5, #4]
                        BlePairingEventPayload payload = {};
   b8a96:	461a      	mov	r2, r3
                            payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b8a98:	2506      	movs	r5, #6
                        };
   b8a9a:	f88d 3015 	strb.w	r3, [sp, #21]
   b8a9e:	9104      	str	r1, [sp, #16]
   b8aa0:	f88d 2014 	strb.w	r2, [sp, #20]
   b8aa4:	9006      	str	r0, [sp, #24]
   b8aa6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   b8aaa:	ab09      	add	r3, sp, #36	; 0x24
                            .type = static_cast<BlePairingEventType>(event->type),
   b8aac:	f88d 601c 	strb.w	r6, [sp, #28]
                        };
   b8ab0:	9508      	str	r5, [sp, #32]
   b8ab2:	e883 0003 	stmia.w	r3, {r0, r1}
   b8ab6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b8ab8:	a906      	add	r1, sp, #24
   b8aba:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b8abe:	4798      	blx	r3
   b8ac0:	e777      	b.n	b89b2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b8ac2:	2e0f      	cmp	r6, #15
                            payload.status.bonded = event->params.pairing_status.bonded;
   b8ac4:	bf01      	itttt	eq
   b8ac6:	7a2b      	ldrbeq	r3, [r5, #8]
                            payload.status.status = event->params.pairing_status.status;
   b8ac8:	6869      	ldreq	r1, [r5, #4]
                            payload.status.bonded = event->params.pairing_status.bonded;
   b8aca:	f003 0201 	andeq.w	r2, r3, #1
                            payloadLen = sizeof(BlePairingStatus);
   b8ace:	2508      	moveq	r5, #8
                            payload.status.lesc = event->params.pairing_status.lesc;
   b8ad0:	bf0f      	iteee	eq
   b8ad2:	f3c3 0340 	ubfxeq	r3, r3, #1, #1
                        BlePairingEventPayload payload = {};
   b8ad6:	461a      	movne	r2, r3
   b8ad8:	4619      	movne	r1, r3
                        size_t payloadLen = 0;
   b8ada:	461d      	movne	r5, r3
   b8adc:	e7dd      	b.n	b8a9a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17a>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b8ade:	89a9      	ldrh	r1, [r5, #12]
   b8ae0:	4620      	mov	r0, r4
   b8ae2:	f7ff f87c 	bl	b7bde <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer && impl->attMtuExchangedCallback_) {
   b8ae6:	4601      	mov	r1, r0
   b8ae8:	2800      	cmp	r0, #0
   b8aea:	f43f af62 	beq.w	b89b2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b8aee:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   b8af0:	2b00      	cmp	r3, #0
   b8af2:	f43f af5e 	beq.w	b89b2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
                    impl->attMtuExchangedCallback_(*peer, event->params.att_mtu_updated.att_mtu_size);
   b8af6:	686b      	ldr	r3, [r5, #4]
   b8af8:	9306      	str	r3, [sp, #24]
   b8afa:	aa06      	add	r2, sp, #24
   b8afc:	6e23      	ldr	r3, [r4, #96]	; 0x60
   b8afe:	f104 0054 	add.w	r0, r4, #84	; 0x54
   b8b02:	4798      	blx	r3
   b8b04:	e755      	b.n	b89b2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x92>
   b8b06:	bf00      	nop
   b8b08:	000be42b 	.word	0x000be42b
   b8b0c:	000be38f 	.word	0x000be38f
   b8b10:	000be451 	.word	0x000be451
   b8b14:	000be46e 	.word	0x000be46e

000b8b18 <_ZNK8particle14BleLocalDevice10disconnectEv>:

void BleLocalDevice::onPairingEvent(const BleOnPairingEventStdFunction& callback) const {
    impl()->onPairingEvent(callback);
}

int BleLocalDevice::disconnect() const {
   b8b18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8b1c:	4607      	mov	r7, r0
   b8b1e:	b08b      	sub	sp, #44	; 0x2c
    WiringBleLock lk;
   b8b20:	4668      	mov	r0, sp
   b8b22:	f7fe fe17 	bl	b7754 <_ZN8particle3ble13WiringBleLockC1Ev>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b8b26:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
   b8b28:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
   b8b2c:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
    for (auto& p : impl()->peers()) {
   b8b30:	42ac      	cmp	r4, r5
   b8b32:	d035      	beq.n	b8ba0 <_ZNK8particle14BleLocalDevice10disconnectEv+0x88>
        hal_ble_conn_info_t connInfo = {};
   b8b34:	2224      	movs	r2, #36	; 0x24
   b8b36:	2100      	movs	r1, #0
   b8b38:	a801      	add	r0, sp, #4
   b8b3a:	f003 f8ba 	bl	bbcb2 <memset>
        if (hal_ble_gap_get_connection_info(p.impl()->connHandle(), &connInfo, nullptr) != SYSTEM_ERROR_NONE) {
   b8b3e:	6823      	ldr	r3, [r4, #0]
   b8b40:	2200      	movs	r2, #0
   b8b42:	8818      	ldrh	r0, [r3, #0]
   b8b44:	a901      	add	r1, sp, #4
   b8b46:	f7fe f987 	bl	b6e58 <hal_ble_gap_get_connection_info>
   b8b4a:	4606      	mov	r6, r0
   b8b4c:	b108      	cbz	r0, b8b52 <_ZNK8particle14BleLocalDevice10disconnectEv+0x3a>
    for (auto& p : impl()->peers()) {
   b8b4e:	3408      	adds	r4, #8
   b8b50:	e7ee      	b.n	b8b30 <_ZNK8particle14BleLocalDevice10disconnectEv+0x18>
            continue;
        }
        if (connInfo.role == BLE_ROLE_PERIPHERAL) {
   b8b52:	f89d 8008 	ldrb.w	r8, [sp, #8]
   b8b56:	f1b8 0f01 	cmp.w	r8, #1
   b8b5a:	d1f8      	bne.n	b8b4e <_ZNK8particle14BleLocalDevice10disconnectEv+0x36>
   b8b5c:	f8df 9048 	ldr.w	r9, [pc, #72]	; b8ba8 <_ZNK8particle14BleLocalDevice10disconnectEv+0x90>
   b8b60:	f8d9 0000 	ldr.w	r0, [r9]
   b8b64:	f7fe f9ea 	bl	b6f3c <os_mutex_recursive_unlock>
        locked_ = false;
   b8b68:	f88d 6000 	strb.w	r6, [sp]
            lk.unlock(); // To allow HAL BLE thread to invoke wiring callback
            CHECK(hal_ble_gap_disconnect(p.impl()->connHandle(), nullptr));
   b8b6c:	6823      	ldr	r3, [r4, #0]
   b8b6e:	4631      	mov	r1, r6
   b8b70:	8818      	ldrh	r0, [r3, #0]
   b8b72:	f7fe f921 	bl	b6db8 <hal_ble_gap_disconnect>
   b8b76:	1e05      	subs	r5, r0, #0
   b8b78:	db0b      	blt.n	b8b92 <_ZNK8particle14BleLocalDevice10disconnectEv+0x7a>
    void lock() { os_mutex_recursive_lock(handle_); }
   b8b7a:	f8d9 0000 	ldr.w	r0, [r9]
   b8b7e:	f7fe f9d5 	bl	b6f2c <os_mutex_recursive_lock>
        return peers_;
   b8b82:	6838      	ldr	r0, [r7, #0]
        locked_ = true;
   b8b84:	f88d 8000 	strb.w	r8, [sp]
            lk.lock();
            impl()->peers().removeOne(p);
   b8b88:	4621      	mov	r1, r4
   b8b8a:	3018      	adds	r0, #24
   b8b8c:	f7ff fea5 	bl	b88da <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
            return SYSTEM_ERROR_NONE;
   b8b90:	4635      	mov	r5, r6
    WiringBleLock lk;
   b8b92:	4668      	mov	r0, sp
   b8b94:	f7fe fdec 	bl	b7770 <_ZN8particle3ble13WiringBleLockD1Ev>
        }
    }
    return SYSTEM_ERROR_NOT_FOUND;
}
   b8b98:	4628      	mov	r0, r5
   b8b9a:	b00b      	add	sp, #44	; 0x2c
   b8b9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return SYSTEM_ERROR_NOT_FOUND;
   b8ba0:	f06f 05a9 	mvn.w	r5, #169	; 0xa9
   b8ba4:	e7f5      	b.n	b8b92 <_ZNK8particle14BleLocalDevice10disconnectEv+0x7a>
   b8ba6:	bf00      	nop
   b8ba8:	2003e654 	.word	0x2003e654

000b8bac <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b8bac:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   b8bae:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   b8bb0:	4604      	mov	r4, r0
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
   b8bb2:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   b8bb4:	dd05      	ble.n	b8bc2 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
    return ::realloc(ptr, size);
   b8bb6:	2114      	movs	r1, #20
   b8bb8:	4369      	muls	r1, r5
   b8bba:	f7fe fc3b 	bl	b7434 <realloc>
            if (!d) {
   b8bbe:	b918      	cbnz	r0, b8bc8 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1c>
    }
   b8bc0:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   b8bc2:	f7fe fc2f 	bl	b7424 <free>
        T* d = nullptr;
   b8bc6:	2000      	movs	r0, #0
        data_ = d;
   b8bc8:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   b8bca:	60a5      	str	r5, [r4, #8]
        return true;
   b8bcc:	2001      	movs	r0, #1
   b8bce:	e7f7      	b.n	b8bc0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x14>

000b8bd0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        capacity_(0) {
   b8bd4:	2400      	movs	r4, #0
   b8bd6:	e9c0 4400 	strd	r4, r4, [r0]
   b8bda:	6084      	str	r4, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8bdc:	4688      	mov	r8, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8bde:	6849      	ldr	r1, [r1, #4]
   b8be0:	42a1      	cmp	r1, r4
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b8be2:	4607      	mov	r7, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b8be4:	dd1a      	ble.n	b8c1c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
   b8be6:	f7ff ffe1 	bl	b8bac <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b8bea:	b1b8      	cbz	r0, b8c1c <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x4c>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b8bec:	e9d8 9300 	ldrd	r9, r3, [r8]
   b8bf0:	f04f 0c14 	mov.w	ip, #20
   b8bf4:	f8d7 e000 	ldr.w	lr, [r7]
   b8bf8:	fb0c 9c03 	mla	ip, ip, r3, r9
        for (; it != end; ++it, ++dest) {
   b8bfc:	eb09 0504 	add.w	r5, r9, r4
   b8c00:	45ac      	cmp	ip, r5
   b8c02:	d008      	beq.n	b8c16 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x46>
            new(dest) T(*it);
   b8c04:	eb1e 0604 	adds.w	r6, lr, r4
   b8c08:	bf1f      	itttt	ne
   b8c0a:	cd0f      	ldmiane	r5!, {r0, r1, r2, r3}
   b8c0c:	c60f      	stmiane	r6!, {r0, r1, r2, r3}
   b8c0e:	682b      	ldrne	r3, [r5, #0]
   b8c10:	6033      	strne	r3, [r6, #0]
        for (; it != end; ++it, ++dest) {
   b8c12:	3414      	adds	r4, #20
   b8c14:	e7f2      	b.n	b8bfc <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_+0x2c>
        size_ = vector.size_;
   b8c16:	f8d8 3004 	ldr.w	r3, [r8, #4]
   b8c1a:	607b      	str	r3, [r7, #4]
}
   b8c1c:	4638      	mov	r0, r7
   b8c1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b8c22 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   b8c22:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    return insert(i, vector.data_, vector.size_);
   b8c26:	e9d1 8700 	ldrd	r8, r7, [r1]
    return insert(size_, vector);
   b8c2a:	6845      	ldr	r5, [r0, #4]
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8c2c:	6883      	ldr	r3, [r0, #8]
   b8c2e:	19e9      	adds	r1, r5, r7
   b8c30:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::append(const Vector<T, AllocatorT> &vector) {
   b8c32:	4604      	mov	r4, r0
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8c34:	dc17      	bgt.n	b8c66 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x44>
    T* const p = data_ + i;
   b8c36:	2314      	movs	r3, #20
   b8c38:	6826      	ldr	r6, [r4, #0]
    move(p + n, p, data_ + size_);
   b8c3a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b8c3c:	435d      	muls	r5, r3
    move(p + n, p, data_ + size_);
   b8c3e:	fb03 f907 	mul.w	r9, r3, r7
   b8c42:	435a      	muls	r2, r3
    T* const p = data_ + i;
   b8c44:	442e      	add	r6, r5
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8c46:	1b52      	subs	r2, r2, r5
   b8c48:	4631      	mov	r1, r6
   b8c4a:	eb06 0009 	add.w	r0, r6, r9
   b8c4e:	f003 f816 	bl	bbc7e <memmove>
        ::memcpy(dest, p, (end - p) * sizeof(T));
   b8c52:	464a      	mov	r2, r9
   b8c54:	4641      	mov	r1, r8
   b8c56:	4630      	mov	r0, r6
   b8c58:	f003 f803 	bl	bbc62 <memcpy>
    size_ += n;
   b8c5c:	6863      	ldr	r3, [r4, #4]
   b8c5e:	443b      	add	r3, r7
   b8c60:	6063      	str	r3, [r4, #4]
}
   b8c62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (size_ + n > capacity_ && !realloc(size_ + n)) {
   b8c66:	f7ff ffa1 	bl	b8bac <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b8c6a:	2800      	cmp	r0, #0
   b8c6c:	d1e3      	bne.n	b8c36 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x14>
   b8c6e:	e7f8      	b.n	b8c62 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0+0x40>

000b8c70 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b8c70:	b082      	sub	sp, #8
   b8c72:	b570      	push	{r4, r5, r6, lr}
   b8c74:	460c      	mov	r4, r1
   b8c76:	a904      	add	r1, sp, #16
   b8c78:	e881 000c 	stmia.w	r1, {r2, r3}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8c7c:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
   b8c80:	4299      	cmp	r1, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   b8c82:	4605      	mov	r5, r0
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8c84:	da17      	bge.n	b8cb6 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x46>
    T* const p = data_ + i;
   b8c86:	2314      	movs	r3, #20
   b8c88:	fb03 f104 	mul.w	r1, r3, r4
    move(p + 1, p, data_ + size_);
   b8c8c:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   b8c8e:	682c      	ldr	r4, [r5, #0]
    move(p + 1, p, data_ + size_);
   b8c90:	435a      	muls	r2, r3
    T* const p = data_ + i;
   b8c92:	440c      	add	r4, r1
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8c94:	1a52      	subs	r2, r2, r1
   b8c96:	18e0      	adds	r0, r4, r3
   b8c98:	4621      	mov	r1, r4
    new(p) T(std::move(value));
   b8c9a:	ae04      	add	r6, sp, #16
        ::memmove(dest, p, (end - p) * sizeof(T));
   b8c9c:	f002 ffef 	bl	bbc7e <memmove>
    new(p) T(std::move(value));
   b8ca0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   b8ca2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8ca4:	6833      	ldr	r3, [r6, #0]
   b8ca6:	6023      	str	r3, [r4, #0]
    ++size_;
   b8ca8:	686b      	ldr	r3, [r5, #4]
   b8caa:	3301      	adds	r3, #1
   b8cac:	606b      	str	r3, [r5, #4]
}
   b8cae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b8cb2:	b002      	add	sp, #8
   b8cb4:	4770      	bx	lr
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b8cb6:	3101      	adds	r1, #1
   b8cb8:	f7ff ff78 	bl	b8bac <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b8cbc:	2800      	cmp	r0, #0
   b8cbe:	d1e2      	bne.n	b8c86 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x16>
   b8cc0:	e7f5      	b.n	b8cae <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0+0x3e>

000b8cc2 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>:
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   b8cc2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        capacity_(0) {
   b8cc6:	2400      	movs	r4, #0
   b8cc8:	b093      	sub	sp, #76	; 0x4c
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b8cca:	1e93      	subs	r3, r2, #2
   b8ccc:	e9c0 4400 	strd	r4, r4, [r0]
   b8cd0:	b2db      	uxtb	r3, r3
Vector<BleUuid> BleAdvertisingData::serviceUUID(BleAdvertisingDataType type) const {
   b8cd2:	4605      	mov	r5, r0
   b8cd4:	460f      	mov	r7, r1
   b8cd6:	4690      	mov	r8, r2
   b8cd8:	6084      	str	r4, [r0, #8]
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b8cda:	9305      	str	r3, [sp, #20]
    return size_;
   b8cdc:	6879      	ldr	r1, [r7, #4]
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   b8cde:	428c      	cmp	r4, r1
   b8ce0:	da72      	bge.n	b8dc8 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
    return data_[i];
   b8ce2:	6838      	ldr	r0, [r7, #0]
   b8ce4:	ab07      	add	r3, sp, #28
   b8ce6:	4642      	mov	r2, r8
   b8ce8:	1b09      	subs	r1, r1, r4
   b8cea:	4420      	add	r0, r4
   b8cec:	f7fe fc64 	bl	b75b8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
        if (adsLen > 0) {
   b8cf0:	4606      	mov	r6, r0
   b8cf2:	2800      	cmp	r0, #0
   b8cf4:	d068      	beq.n	b8dc8 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x106>
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   b8cf6:	9b05      	ldr	r3, [sp, #20]
   b8cf8:	2b01      	cmp	r3, #1
   b8cfa:	d82f      	bhi.n	b8d5c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x9a>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b8cfc:	f1a0 0b02 	sub.w	fp, r0, #2
   b8d00:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
   b8d04:	f04f 0900 	mov.w	r9, #0
    return insert(size_, std::move(value));
   b8d08:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b8d0c:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b8d0e:	45cb      	cmp	fp, r9
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b8d10:	4423      	add	r3, r4
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b8d12:	d055      	beq.n	b8dc0 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
    return data_[i];
   b8d14:	683a      	ldr	r2, [r7, #0]
                    BleUuid uuid = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   b8d16:	eb03 0349 	add.w	r3, r3, r9, lsl #1
   b8d1a:	4413      	add	r3, r2
   b8d1c:	a808      	add	r0, sp, #32
   b8d1e:	78d9      	ldrb	r1, [r3, #3]
   b8d20:	789b      	ldrb	r3, [r3, #2]
   b8d22:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   b8d26:	f7fe fdac 	bl	b7882 <_ZN8particle7BleUuidC1Et>
                    uuids.append(uuid);
   b8d2a:	f10d 0e20 	add.w	lr, sp, #32
   b8d2e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b8d32:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b8d36:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b8d3a:	f8de 3000 	ldr.w	r3, [lr]
   b8d3e:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   b8d42:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   b8d46:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   b8d4a:	ab0d      	add	r3, sp, #52	; 0x34
   b8d4c:	cb0c      	ldmia	r3, {r2, r3}
   b8d4e:	6869      	ldr	r1, [r5, #4]
   b8d50:	4628      	mov	r0, r5
   b8d52:	f7ff ff8d 	bl	b8c70 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN); array++) {
   b8d56:	f109 0901 	add.w	r9, r9, #1
   b8d5a:	e7d7      	b.n	b8d0c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x4a>
            } else if (type == BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE) {
   b8d5c:	f1a8 0306 	sub.w	r3, r8, #6
   b8d60:	2b01      	cmp	r3, #1
   b8d62:	d82d      	bhi.n	b8dc0 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b8d64:	f1a0 0b02 	sub.w	fp, r0, #2
   b8d68:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
   b8d6c:	f04f 0900 	mov.w	r9, #0
   b8d70:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
   b8d74:	45cb      	cmp	fp, r9
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   b8d76:	9b07      	ldr	r3, [sp, #28]
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b8d78:	d022      	beq.n	b8dc0 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xfe>
                    BleUuid uuid = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   b8d7a:	3302      	adds	r3, #2
    return data_[i];
   b8d7c:	6839      	ldr	r1, [r7, #0]
   b8d7e:	4423      	add	r3, r4
   b8d80:	eb03 1309 	add.w	r3, r3, r9, lsl #4
   b8d84:	2201      	movs	r2, #1
   b8d86:	4419      	add	r1, r3
   b8d88:	a808      	add	r0, sp, #32
   b8d8a:	f7fe fd5b 	bl	b7844 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
                    uuids.append(uuid);
   b8d8e:	f10d 0e20 	add.w	lr, sp, #32
   b8d92:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   b8d96:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b8d9a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b8d9e:	f8de 3000 	ldr.w	r3, [lr]
   b8da2:	f8cc 3000 	str.w	r3, [ip]
    return insert(size_, std::move(value));
   b8da6:	e89a 0007 	ldmia.w	sl, {r0, r1, r2}
   b8daa:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   b8dae:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
   b8db2:	6869      	ldr	r1, [r5, #4]
   b8db4:	4628      	mov	r0, r5
   b8db6:	f7ff ff5b 	bl	b8c70 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6insertEiS2_.isra.0>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN); array++) {
   b8dba:	f109 0901 	add.w	r9, r9, #1
   b8dbe:	e7d9      	b.n	b8d74 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0xb2>
    for (int i = 0; i < selfData_.size(); i += (offset + adsLen)) {
   b8dc0:	9b07      	ldr	r3, [sp, #28]
   b8dc2:	441c      	add	r4, r3
   b8dc4:	4434      	add	r4, r6
   b8dc6:	e789      	b.n	b8cdc <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE+0x1a>
}
   b8dc8:	4628      	mov	r0, r5
   b8dca:	b013      	add	sp, #76	; 0x4c
   b8dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b8dd0 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>:
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   b8dd0:	b530      	push	{r4, r5, lr}
        capacity_(0) {
   b8dd2:	2300      	movs	r3, #0
   b8dd4:	b085      	sub	sp, #20
   b8dd6:	e9c0 3300 	strd	r3, r3, [r0]
   b8dda:	6083      	str	r3, [r0, #8]
   b8ddc:	4604      	mov	r4, r0
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b8dde:	2202      	movs	r2, #2
   b8de0:	a801      	add	r0, sp, #4
Vector<BleUuid> BleAdvertisingData::serviceUUID() const {
   b8de2:	460d      	mov	r5, r1
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b8de4:	f7ff ff6d 	bl	b8cc2 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b8de8:	a901      	add	r1, sp, #4
   b8dea:	4620      	mov	r0, r4
   b8dec:	f7ff ff19 	bl	b8c22 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b8df0:	a801      	add	r0, sp, #4
   b8df2:	f7ff f93a 	bl	b806a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE));
   b8df6:	2202      	movs	r2, #2
   b8df8:	4629      	mov	r1, r5
   b8dfa:	a801      	add	r0, sp, #4
   b8dfc:	f7ff ff61 	bl	b8cc2 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b8e00:	a901      	add	r1, sp, #4
   b8e02:	4620      	mov	r0, r4
   b8e04:	f7ff ff0d 	bl	b8c22 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b8e08:	a801      	add	r0, sp, #4
   b8e0a:	f7ff f92e 	bl	b806a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE));
   b8e0e:	2203      	movs	r2, #3
   b8e10:	4629      	mov	r1, r5
   b8e12:	a801      	add	r0, sp, #4
   b8e14:	f7ff ff55 	bl	b8cc2 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b8e18:	a901      	add	r1, sp, #4
   b8e1a:	4620      	mov	r0, r4
   b8e1c:	f7ff ff01 	bl	b8c22 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b8e20:	a801      	add	r0, sp, #4
   b8e22:	f7ff f922 	bl	b806a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE));
   b8e26:	2206      	movs	r2, #6
   b8e28:	4629      	mov	r1, r5
   b8e2a:	a801      	add	r0, sp, #4
   b8e2c:	f7ff ff49 	bl	b8cc2 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b8e30:	a901      	add	r1, sp, #4
   b8e32:	4620      	mov	r0, r4
   b8e34:	f7ff fef5 	bl	b8c22 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b8e38:	a801      	add	r0, sp, #4
   b8e3a:	f7ff f916 	bl	b806a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    foundUuids.append(serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE));
   b8e3e:	2207      	movs	r2, #7
   b8e40:	4629      	mov	r1, r5
   b8e42:	a801      	add	r0, sp, #4
   b8e44:	f7ff ff3d 	bl	b8cc2 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeE>
   b8e48:	a901      	add	r1, sp, #4
   b8e4a:	4620      	mov	r0, r4
   b8e4c:	f7ff fee9 	bl	b8c22 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEE6appendERKS4_.isra.0>
   b8e50:	a801      	add	r0, sp, #4
   b8e52:	f7ff f90a 	bl	b806a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   b8e56:	4620      	mov	r0, r4
   b8e58:	b005      	add	sp, #20
   b8e5a:	bd30      	pop	{r4, r5, pc}

000b8e5c <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>:
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   b8e5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8e60:	b085      	sub	sp, #20
   b8e62:	4688      	mov	r8, r1
    const Vector<BleUuid>& foundUuids = serviceUUID();
   b8e64:	4601      	mov	r1, r0
   b8e66:	a801      	add	r0, sp, #4
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   b8e68:	4691      	mov	r9, r2
    const Vector<BleUuid>& foundUuids = serviceUUID();
   b8e6a:	f7ff ffb1 	bl	b8dd0 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return data_;
   b8e6e:	9e01      	ldr	r6, [sp, #4]
    return data_ + size_;
   b8e70:	9b02      	ldr	r3, [sp, #8]
   b8e72:	f04f 0e14 	mov.w	lr, #20
   b8e76:	fb0e 6c03 	mla	ip, lr, r3, r6
   b8e7a:	2700      	movs	r7, #0
    for (const auto& uuid : foundUuids) {
   b8e7c:	45b4      	cmp	ip, r6
   b8e7e:	d00d      	beq.n	b8e9c <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        if (found >= count) {
   b8e80:	45b9      	cmp	r9, r7
   b8e82:	f106 0614 	add.w	r6, r6, #20
   b8e86:	d009      	beq.n	b8e9c <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x40>
        uuids[found++] = uuid;
   b8e88:	f1a6 0514 	sub.w	r5, r6, #20
   b8e8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b8e8e:	fb0e 8407 	mla	r4, lr, r7, r8
   b8e92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b8e94:	682b      	ldr	r3, [r5, #0]
   b8e96:	6023      	str	r3, [r4, #0]
    for (const auto& uuid : foundUuids) {
   b8e98:	3701      	adds	r7, #1
   b8e9a:	e7ef      	b.n	b8e7c <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj+0x20>
    const Vector<BleUuid>& foundUuids = serviceUUID();
   b8e9c:	a801      	add	r0, sp, #4
   b8e9e:	f7ff f8e4 	bl	b806a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
}
   b8ea2:	4638      	mov	r0, r7
   b8ea4:	b005      	add	sp, #20
   b8ea6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b8eaa <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>:
    bool filterByServiceUUID(const BleScanResult& result) {
   b8eaa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b8eae:	b08b      	sub	sp, #44	; 0x2c
   b8eb0:	460c      	mov	r4, r1
        auto filterServiceUuids = filter_.serviceUUIDs();
   b8eb2:	f100 0144 	add.w	r1, r0, #68	; 0x44
   b8eb6:	a801      	add	r0, sp, #4
   b8eb8:	f7ff fe8a 	bl	b8bd0 <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEEC1ERKS4_>
        if (filterServiceUuids.size() > 0) {
   b8ebc:	9b02      	ldr	r3, [sp, #8]
   b8ebe:	2b00      	cmp	r3, #0
   b8ec0:	dd4a      	ble.n	b8f58 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xae>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   b8ec2:	f104 0114 	add.w	r1, r4, #20
   b8ec6:	a804      	add	r0, sp, #16
   b8ec8:	f7ff ff82 	bl	b8dd0 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   b8ecc:	f104 0108 	add.w	r1, r4, #8
   b8ed0:	a807      	add	r0, sp, #28
   b8ed2:	f7ff ff7d 	bl	b8dd0 <_ZNK8particle18BleAdvertisingData11serviceUUIDEv>
    return size_;
   b8ed6:	9d05      	ldr	r5, [sp, #20]
   b8ed8:	9e08      	ldr	r6, [sp, #32]
            if (srUuids.size() <= 0 && advUuids.size() <= 0) {
   b8eda:	2d00      	cmp	r5, #0
   b8edc:	dc01      	bgt.n	b8ee2 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x38>
   b8ede:	2e00      	cmp	r6, #0
   b8ee0:	dd38      	ble.n	b8f54 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
    return data_;
   b8ee2:	9a01      	ldr	r2, [sp, #4]
    return data_ + size_;
   b8ee4:	9f02      	ldr	r7, [sp, #8]
    return data_;
   b8ee6:	f8dd 8010 	ldr.w	r8, [sp, #16]
   b8eea:	f8dd 901c 	ldr.w	r9, [sp, #28]
    return data_ + size_;
   b8eee:	2314      	movs	r3, #20
   b8ef0:	fb03 2707 	mla	r7, r3, r7, r2
    return data_ + size_;
   b8ef4:	fb03 8505 	mla	r5, r3, r5, r8
   b8ef8:	fb03 9606 	mla	r6, r3, r6, r9
   b8efc:	4692      	mov	sl, r2
            for (const auto& uuid : filterServiceUuids) {
   b8efe:	45ba      	cmp	sl, r7
   b8f00:	d028      	beq.n	b8f54 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xaa>
const T* spark::Vector<T, AllocatorT>::end() const {
   b8f02:	46c3      	mov	fp, r8
                for (const auto& found : srUuids) {
   b8f04:	45ab      	cmp	fp, r5
   b8f06:	d015      	beq.n	b8f34 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8a>
                    if (uuid == found) {
   b8f08:	4659      	mov	r1, fp
   b8f0a:	4650      	mov	r0, sl
   b8f0c:	f7fe fcc3 	bl	b7896 <_ZNK8particle7BleUuideqERKS0_>
   b8f10:	f10b 0b14 	add.w	fp, fp, #20
   b8f14:	4604      	mov	r4, r0
   b8f16:	2800      	cmp	r0, #0
   b8f18:	d0f4      	beq.n	b8f04 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x5a>
            const Vector<BleUuid>& advUuids = result.advertisingData().serviceUUID();
   b8f1a:	a807      	add	r0, sp, #28
   b8f1c:	f7ff f8a5 	bl	b806a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
            const Vector<BleUuid>& srUuids = result.scanResponse().serviceUUID();
   b8f20:	a804      	add	r0, sp, #16
   b8f22:	f7ff f8a2 	bl	b806a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
        auto filterServiceUuids = filter_.serviceUUIDs();
   b8f26:	a801      	add	r0, sp, #4
   b8f28:	f7ff f89f 	bl	b806a <_ZN5spark6VectorIN8particle7BleUuidENS_16DefaultAllocatorEED1Ev>
    }
   b8f2c:	4620      	mov	r0, r4
   b8f2e:	b00b      	add	sp, #44	; 0x2c
   b8f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b8f34:	46cb      	mov	fp, r9
                for (const auto& found : advUuids) {
   b8f36:	45b3      	cmp	fp, r6
   b8f38:	d009      	beq.n	b8f4e <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0xa4>
                    if (uuid == found) {
   b8f3a:	4659      	mov	r1, fp
   b8f3c:	4650      	mov	r0, sl
   b8f3e:	f7fe fcaa 	bl	b7896 <_ZNK8particle7BleUuideqERKS0_>
   b8f42:	f10b 0b14 	add.w	fp, fp, #20
   b8f46:	4604      	mov	r4, r0
   b8f48:	2800      	cmp	r0, #0
   b8f4a:	d0f4      	beq.n	b8f36 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x8c>
   b8f4c:	e7e5      	b.n	b8f1a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
            for (const auto& uuid : filterServiceUuids) {
   b8f4e:	f10a 0a14 	add.w	sl, sl, #20
   b8f52:	e7d4      	b.n	b8efe <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x54>
                return false;
   b8f54:	2400      	movs	r4, #0
   b8f56:	e7e0      	b.n	b8f1a <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x70>
        return true;
   b8f58:	2401      	movs	r4, #1
   b8f5a:	e7e4      	b.n	b8f26 <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE+0x7c>

000b8f5c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b8f5c:	b513      	push	{r0, r1, r4, lr}
   b8f5e:	460b      	mov	r3, r1
   b8f60:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8f62:	e9d0 0100 	ldrd	r0, r1, [r0]
   b8f66:	466c      	mov	r4, sp
   b8f68:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b8f6c:	e893 0003 	ldmia.w	r3, {r0, r1}
   b8f70:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b8f74:	e894 0003 	ldmia.w	r4, {r0, r1}
   b8f78:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b8f7c:	b002      	add	sp, #8
   b8f7e:	bd10      	pop	{r4, pc}

000b8f80 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b8f80:	b538      	push	{r3, r4, r5, lr}
   b8f82:	4605      	mov	r5, r0
   b8f84:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b8f86:	f7ff ffe9 	bl	b8f5c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8f8a:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b8f8c:	68a2      	ldr	r2, [r4, #8]
   b8f8e:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b8f90:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b8f92:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b8f94:	68e2      	ldr	r2, [r4, #12]
   b8f96:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b8f98:	60e3      	str	r3, [r4, #12]
      }
   b8f9a:	bd38      	pop	{r3, r4, r5, pc}

000b8f9c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>:
      operator=(const function& __x)
   b8f9c:	b530      	push	{r4, r5, lr}
   b8f9e:	b085      	sub	sp, #20
    _Function_base() : _M_manager(nullptr) { }
   b8fa0:	2300      	movs	r3, #0
   b8fa2:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
   b8fa4:	688b      	ldr	r3, [r1, #8]
      operator=(const function& __x)
   b8fa6:	4605      	mov	r5, r0
   b8fa8:	460c      	mov	r4, r1
      if (static_cast<bool>(__x))
   b8faa:	b133      	cbz	r3, b8fba <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0+0x1e>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b8fac:	2202      	movs	r2, #2
   b8fae:	4668      	mov	r0, sp
   b8fb0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b8fb2:	68e3      	ldr	r3, [r4, #12]
   b8fb4:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
   b8fb6:	68a3      	ldr	r3, [r4, #8]
   b8fb8:	9302      	str	r3, [sp, #8]
	function(__x).swap(*this);
   b8fba:	4629      	mov	r1, r5
   b8fbc:	4668      	mov	r0, sp
   b8fbe:	f7ff ffdf 	bl	b8f80 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b8fc2:	4668      	mov	r0, sp
   b8fc4:	f7fb f960 	bl	b4288 <_ZNSt14_Function_baseD1Ev>
      }
   b8fc8:	b005      	add	sp, #20
   b8fca:	bd30      	pop	{r4, r5, pc}

000b8fcc <_ZN8particle17BleCharacteristicaSERKS0_>:
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   b8fcc:	b538      	push	{r3, r4, r5, lr}
   b8fce:	460d      	mov	r5, r1
      { return _M_ptr; }
   b8fd0:	6801      	ldr	r1, [r0, #0]
        if (charImpl.dataReceivedCallback_) {
   b8fd2:	6d4b      	ldr	r3, [r1, #84]	; 0x54
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   b8fd4:	4604      	mov	r4, r0
        if (charImpl.dataReceivedCallback_) {
   b8fd6:	b123      	cbz	r3, b8fe2 <_ZN8particle17BleCharacteristicaSERKS0_+0x16>
            dataReceivedCallback_ = charImpl.dataReceivedCallback_;
   b8fd8:	6828      	ldr	r0, [r5, #0]
   b8fda:	314c      	adds	r1, #76	; 0x4c
   b8fdc:	304c      	adds	r0, #76	; 0x4c
   b8fde:	f7ff ffdd 	bl	b8f9c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSERKS7_.isra.0>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b8fe2:	4620      	mov	r0, r4
   b8fe4:	682b      	ldr	r3, [r5, #0]
   b8fe6:	f840 3b04 	str.w	r3, [r0], #4
   b8fea:	6869      	ldr	r1, [r5, #4]
   b8fec:	f7fe fb8c 	bl	b7708 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
}
   b8ff0:	4620      	mov	r0, r4
   b8ff2:	bd38      	pop	{r3, r4, r5, pc}

000b8ff4 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>:
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   b8ff4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b8ff8:	4604      	mov	r4, r0
   b8ffa:	b087      	sub	sp, #28
    WiringBleLock lk;
   b8ffc:	4668      	mov	r0, sp
bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   b8ffe:	460e      	mov	r6, r1
   b9000:	4617      	mov	r7, r2
    WiringBleLock lk;
   b9002:	f7fe fba7 	bl	b7754 <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b9006:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   b9008:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   b900c:	eb04 08c3 	add.w	r8, r4, r3, lsl #3
    for (auto& existChar : impl()->characteristics()) {
   b9010:	4544      	cmp	r4, r8
   b9012:	46a1      	mov	r9, r4
   b9014:	d016      	beq.n	b9044 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x50>
        if (existChar.UUID() == uuid) {
   b9016:	4621      	mov	r1, r4
   b9018:	a801      	add	r0, sp, #4
   b901a:	f7fe fe0b 	bl	b7c34 <_ZNK8particle17BleCharacteristic4UUIDEv>
   b901e:	4639      	mov	r1, r7
   b9020:	a801      	add	r0, sp, #4
   b9022:	f7fe fc38 	bl	b7896 <_ZNK8particle7BleUuideqERKS0_>
   b9026:	3408      	adds	r4, #8
   b9028:	4605      	mov	r5, r0
   b902a:	2800      	cmp	r0, #0
   b902c:	d0f0      	beq.n	b9010 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x1c>
            characteristic = existChar;
   b902e:	4649      	mov	r1, r9
   b9030:	4630      	mov	r0, r6
   b9032:	f7ff ffcb 	bl	b8fcc <_ZN8particle17BleCharacteristicaSERKS0_>
    WiringBleLock lk;
   b9036:	4668      	mov	r0, sp
   b9038:	f7fe fb9a 	bl	b7770 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b903c:	4628      	mov	r0, r5
   b903e:	b007      	add	sp, #28
   b9040:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return false;
   b9044:	2500      	movs	r5, #0
   b9046:	e7f6      	b.n	b9036 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x42>

000b9048 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   b9048:	b510      	push	{r4, lr}
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b904a:	6804      	ldr	r4, [r0, #0]
void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   b904c:	b08a      	sub	sp, #40	; 0x28
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b904e:	344c      	adds	r4, #76	; 0x4c
   b9050:	b1b9      	cbz	r1, b9082 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x3a>
   b9052:	e9cd 1200 	strd	r1, r2, [sp]
   b9056:	a802      	add	r0, sp, #8
   b9058:	4669      	mov	r1, sp
   b905a:	f7ff f865 	bl	b8128 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b905e:	2300      	movs	r3, #0
	__x.swap(*this);
   b9060:	a906      	add	r1, sp, #24
   b9062:	a802      	add	r0, sp, #8
    _Function_base() : _M_manager(nullptr) { }
   b9064:	9308      	str	r3, [sp, #32]
	__x.swap(*this);
   b9066:	f7ff ff8b 	bl	b8f80 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b906a:	4621      	mov	r1, r4
   b906c:	a806      	add	r0, sp, #24
   b906e:	f7ff ff87 	bl	b8f80 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b9072:	a806      	add	r0, sp, #24
   b9074:	f7fb f908 	bl	b4288 <_ZNSt14_Function_baseD1Ev>
   b9078:	a802      	add	r0, sp, #8
   b907a:	f7fb f905 	bl	b4288 <_ZNSt14_Function_baseD1Ev>
}
   b907e:	b00a      	add	sp, #40	; 0x28
   b9080:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   b9082:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   b9084:	e7eb      	b.n	b905e <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_+0x16>

000b9086 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b9086:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b9088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b908a:	4604      	mov	r4, r0
   b908c:	460d      	mov	r5, r1
   b908e:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b9090:	d914      	bls.n	b90bc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b9092:	4290      	cmp	r0, r2
   b9094:	d213      	bcs.n	b90be <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b9096:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b909a:	1a75      	subs	r5, r6, r1
   b909c:	f1a1 0708 	sub.w	r7, r1, #8
   b90a0:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b90a2:	42b7      	cmp	r7, r6
   b90a4:	d018      	beq.n	b90d8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b90a6:	b11c      	cbz	r4, b90b0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b90a8:	4631      	mov	r1, r6
   b90aa:	4620      	mov	r0, r4
   b90ac:	f7ff f869 	bl	b8182 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b90b0:	1d30      	adds	r0, r6, #4
   b90b2:	f7ff f87a 	bl	b81aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b90b6:	3e08      	subs	r6, #8
   b90b8:	3c08      	subs	r4, #8
   b90ba:	e7f2      	b.n	b90a2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b90bc:	d00c      	beq.n	b90d8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b90be:	42b5      	cmp	r5, r6
   b90c0:	d00a      	beq.n	b90d8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b90c2:	b11c      	cbz	r4, b90cc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b90c4:	4629      	mov	r1, r5
   b90c6:	4620      	mov	r0, r4
   b90c8:	f7ff f85b 	bl	b8182 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b90cc:	1d28      	adds	r0, r5, #4
   b90ce:	f7ff f86c 	bl	b81aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b90d2:	3508      	adds	r5, #8
   b90d4:	3408      	adds	r4, #8
   b90d6:	e7f2      	b.n	b90be <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b90d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b90da <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b90da:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b90dc:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b90de:	4605      	mov	r5, r0
        if (n > 0) {
   b90e0:	dd11      	ble.n	b9106 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b90e2:	00f0      	lsls	r0, r6, #3
   b90e4:	f7fe f996 	bl	b7414 <malloc>
            if (!d) {
   b90e8:	4604      	mov	r4, r0
   b90ea:	b158      	cbz	r0, b9104 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b90ec:	e9d5 1200 	ldrd	r1, r2, [r5]
   b90f0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b90f4:	f7ff ffc7 	bl	b9086 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b90f8:	6828      	ldr	r0, [r5, #0]
   b90fa:	f7fe f993 	bl	b7424 <free>
        data_ = d;
   b90fe:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b9100:	60ae      	str	r6, [r5, #8]
        return true;
   b9102:	2001      	movs	r0, #1
    }
   b9104:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b9106:	2400      	movs	r4, #0
   b9108:	e7f6      	b.n	b90f8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b910a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b910a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b910e:	2300      	movs	r3, #0
   b9110:	e9c0 3300 	strd	r3, r3, [r0]
   b9114:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b9116:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b9118:	6849      	ldr	r1, [r1, #4]
   b911a:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b911c:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b911e:	dd13      	ble.n	b9148 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   b9120:	f7ff ffdb 	bl	b90da <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b9124:	b180      	cbz	r0, b9148 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b9126:	e9d5 6300 	ldrd	r6, r3, [r5]
   b912a:	6827      	ldr	r7, [r4, #0]
   b912c:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   b9130:	45b0      	cmp	r8, r6
   b9132:	d007      	beq.n	b9144 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   b9134:	b11f      	cbz	r7, b913e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   b9136:	4631      	mov	r1, r6
   b9138:	4638      	mov	r0, r7
   b913a:	f7ff f822 	bl	b8182 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        for (; it != end; ++it, ++dest) {
   b913e:	3608      	adds	r6, #8
   b9140:	3708      	adds	r7, #8
   b9142:	e7f5      	b.n	b9130 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   b9144:	686b      	ldr	r3, [r5, #4]
   b9146:	6063      	str	r3, [r4, #4]
}
   b9148:	4620      	mov	r0, r4
   b914a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b914e <_ZNK8particle13BlePeerDevice8servicesEv>:
Vector<BleService> BlePeerDevice::services() const {
   b914e:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9150:	460d      	mov	r5, r1
   b9152:	4604      	mov	r4, r0
    WiringBleLock lk;
   b9154:	a801      	add	r0, sp, #4
   b9156:	f7fe fafd 	bl	b7754 <_ZN8particle3ble13WiringBleLockC1Ev>
        return services_;
   b915a:	6829      	ldr	r1, [r5, #0]
    return impl()->services();
   b915c:	4620      	mov	r0, r4
   b915e:	310c      	adds	r1, #12
   b9160:	f7ff ffd3 	bl	b910a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   b9164:	a801      	add	r0, sp, #4
   b9166:	f7fe fb03 	bl	b7770 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b916a:	4620      	mov	r0, r4
   b916c:	b003      	add	sp, #12
   b916e:	bd30      	pop	{r4, r5, pc}

000b9170 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>:
Vector<BleService> BlePeerDevice::discoverAllServices() {
   b9170:	b538      	push	{r3, r4, r5, lr}
        return servicesDiscovered_;
   b9172:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   b9174:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleService> BlePeerDevice::discoverAllServices() {
   b9176:	4605      	mov	r5, r0
   b9178:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   b917a:	b933      	cbnz	r3, b918a <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
   b917c:	4608      	mov	r0, r1
   b917e:	f7fe fa7d 	bl	b767c <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>
   b9182:	b910      	cbnz	r0, b918a <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
      { return _M_ptr; }
   b9184:	6823      	ldr	r3, [r4, #0]
        servicesDiscovered_ = discovered;
   b9186:	2201      	movs	r2, #1
   b9188:	729a      	strb	r2, [r3, #10]
    return services();
   b918a:	4628      	mov	r0, r5
   b918c:	4621      	mov	r1, r4
   b918e:	f7ff ffde 	bl	b914e <_ZNK8particle13BlePeerDevice8servicesEv>
}
   b9192:	4628      	mov	r0, r5
   b9194:	bd38      	pop	{r3, r4, r5, pc}

000b9196 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b9196:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b9198:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b919a:	6845      	ldr	r5, [r0, #4]
   b919c:	4668      	mov	r0, sp
   b919e:	f7fe fff0 	bl	b8182 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b91a2:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b91a6:	4299      	cmp	r1, r3
   b91a8:	da10      	bge.n	b91cc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b91aa:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b91ac:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b91ae:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b91b2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b91b6:	4629      	mov	r1, r5
   b91b8:	f105 0008 	add.w	r0, r5, #8
   b91bc:	f7ff ff63 	bl	b9086 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b91c0:	b98d      	cbnz	r5, b91e6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b91c2:	6863      	ldr	r3, [r4, #4]
   b91c4:	3301      	adds	r3, #1
   b91c6:	6063      	str	r3, [r4, #4]
    return true;
   b91c8:	2601      	movs	r6, #1
   b91ca:	e006      	b.n	b91da <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b91cc:	3101      	adds	r1, #1
   b91ce:	4620      	mov	r0, r4
   b91d0:	f7ff ff83 	bl	b90da <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b91d4:	4606      	mov	r6, r0
   b91d6:	2800      	cmp	r0, #0
   b91d8:	d1e7      	bne.n	b91aa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
      ~__shared_ptr() = default;
   b91da:	a801      	add	r0, sp, #4
   b91dc:	f7fe ffe5 	bl	b81aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b91e0:	4630      	mov	r0, r6
   b91e2:	b002      	add	sp, #8
   b91e4:	bd70      	pop	{r4, r5, r6, pc}
   b91e6:	4669      	mov	r1, sp
   b91e8:	4628      	mov	r0, r5
   b91ea:	f7fe ffca 	bl	b8182 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b91ee:	e7e8      	b.n	b91c2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b91f0 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv>:
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   b91f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                LOG(ERROR, "Failed to append discovered service.");
   b91f4:	f8df 90b8 	ldr.w	r9, [pc, #184]	; b92b0 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc0>
   b91f8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; b92b4 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xc4>
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   b91fc:	b093      	sub	sp, #76	; 0x4c
   b91fe:	4605      	mov	r5, r0
   b9200:	4688      	mov	r8, r1
        for (size_t i = 0; i < event->count; i++) {
   b9202:	2700      	movs	r7, #0
   b9204:	682b      	ldr	r3, [r5, #0]
   b9206:	42bb      	cmp	r3, r7
   b9208:	d94e      	bls.n	b92a8 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xb8>
            BleService service;
   b920a:	a803      	add	r0, sp, #12
   b920c:	f7fe fdb8 	bl	b7d80 <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   b9210:	261c      	movs	r6, #28
   b9212:	686a      	ldr	r2, [r5, #4]
      { return _M_ptr; }
   b9214:	9c03      	ldr	r4, [sp, #12]
        return uuid_;
   b9216:	437e      	muls	r6, r7
   b9218:	4432      	add	r2, r6
   b921a:	f10d 0c14 	add.w	ip, sp, #20
   b921e:	1d13      	adds	r3, r2, #4
   b9220:	46e3      	mov	fp, ip
   b9222:	3214      	adds	r2, #20
   b9224:	6818      	ldr	r0, [r3, #0]
   b9226:	6859      	ldr	r1, [r3, #4]
   b9228:	46e6      	mov	lr, ip
   b922a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   b922e:	3308      	adds	r3, #8
   b9230:	4293      	cmp	r3, r2
   b9232:	46f4      	mov	ip, lr
   b9234:	d1f6      	bne.n	b9224 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x34>
   b9236:	6818      	ldr	r0, [r3, #0]
   b9238:	f8ce 0000 	str.w	r0, [lr]
        return *this = BleUuid(uuid);
   b923c:	4659      	mov	r1, fp
   b923e:	a80a      	add	r0, sp, #40	; 0x28
   b9240:	f7fe fade 	bl	b7800 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   b9244:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
   b9248:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b924c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b924e:	f8dc 3000 	ldr.w	r3, [ip]
   b9252:	6023      	str	r3, [r4, #0]
            service.impl()->startHandle() = event->services[i].start_handle;
   b9254:	686b      	ldr	r3, [r5, #4]
   b9256:	9a03      	ldr	r2, [sp, #12]
   b9258:	4433      	add	r3, r6
   b925a:	a903      	add	r1, sp, #12
   b925c:	8b1b      	ldrh	r3, [r3, #24]
   b925e:	8293      	strh	r3, [r2, #20]
            service.impl()->endHandle() = event->services[i].end_handle;
   b9260:	686b      	ldr	r3, [r5, #4]
   b9262:	4433      	add	r3, r6
   b9264:	8b5b      	ldrh	r3, [r3, #26]
   b9266:	82d3      	strh	r3, [r2, #22]
        return services_;
   b9268:	f8d8 0000 	ldr.w	r0, [r8]
   b926c:	f100 040c 	add.w	r4, r0, #12
   b9270:	a80a      	add	r0, sp, #40	; 0x28
   b9272:	f7fe ff86 	bl	b8182 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
            if (!peer->impl()->services().append(service)) {
   b9276:	4620      	mov	r0, r4
   b9278:	a90a      	add	r1, sp, #40	; 0x28
   b927a:	f7ff ff8c 	bl	b9196 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b927e:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b9280:	a80b      	add	r0, sp, #44	; 0x2c
   b9282:	f7fe ff92 	bl	b81aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9286:	b954      	cbnz	r4, b929e <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0xae>
                LOG(ERROR, "Failed to append discovered service.");
   b9288:	2320      	movs	r3, #32
   b928a:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
   b928e:	f8cd 9000 	str.w	r9, [sp]
   b9292:	4623      	mov	r3, r4
   b9294:	aa0a      	add	r2, sp, #40	; 0x28
   b9296:	4651      	mov	r1, sl
   b9298:	2032      	movs	r0, #50	; 0x32
   b929a:	f7fd ffdf 	bl	b725c <log_message>
   b929e:	a804      	add	r0, sp, #16
   b92a0:	f7fe ff83 	bl	b81aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   b92a4:	3701      	adds	r7, #1
   b92a6:	e7ad      	b.n	b9204 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x14>
    }
   b92a8:	b013      	add	sp, #76	; 0x4c
   b92aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b92ae:	bf00      	nop
   b92b0:	000be48d 	.word	0x000be48d
   b92b4:	000be38f 	.word	0x000be38f

000b92b8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b92b8:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b92ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b92bc:	4604      	mov	r4, r0
   b92be:	460d      	mov	r5, r1
   b92c0:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b92c2:	d914      	bls.n	b92ee <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b92c4:	4290      	cmp	r0, r2
   b92c6:	d213      	bcs.n	b92f0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b92c8:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b92cc:	1a75      	subs	r5, r6, r1
   b92ce:	f1a1 0708 	sub.w	r7, r1, #8
   b92d2:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b92d4:	42b7      	cmp	r7, r6
   b92d6:	d018      	beq.n	b930a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b92d8:	b11c      	cbz	r4, b92e2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b92da:	4631      	mov	r1, r6
   b92dc:	4620      	mov	r0, r4
   b92de:	f7fe ff42 	bl	b8166 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b92e2:	1d30      	adds	r0, r6, #4
   b92e4:	f7fe ff61 	bl	b81aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b92e8:	3e08      	subs	r6, #8
   b92ea:	3c08      	subs	r4, #8
   b92ec:	e7f2      	b.n	b92d4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b92ee:	d00c      	beq.n	b930a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b92f0:	42b5      	cmp	r5, r6
   b92f2:	d00a      	beq.n	b930a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b92f4:	b11c      	cbz	r4, b92fe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b92f6:	4629      	mov	r1, r5
   b92f8:	4620      	mov	r0, r4
   b92fa:	f7fe ff34 	bl	b8166 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b92fe:	1d28      	adds	r0, r5, #4
   b9300:	f7fe ff53 	bl	b81aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b9304:	3508      	adds	r5, #8
   b9306:	3408      	adds	r4, #8
   b9308:	e7f2      	b.n	b92f0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b930a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b930c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b930c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b930e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b9310:	4605      	mov	r5, r0
        if (n > 0) {
   b9312:	dd11      	ble.n	b9338 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b9314:	00f0      	lsls	r0, r6, #3
   b9316:	f7fe f87d 	bl	b7414 <malloc>
            if (!d) {
   b931a:	4604      	mov	r4, r0
   b931c:	b158      	cbz	r0, b9336 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b931e:	e9d5 1200 	ldrd	r1, r2, [r5]
   b9322:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b9326:	f7ff ffc7 	bl	b92b8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b932a:	6828      	ldr	r0, [r5, #0]
   b932c:	f7fe f87a 	bl	b7424 <free>
        data_ = d;
   b9330:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b9332:	60ae      	str	r6, [r5, #8]
        return true;
   b9334:	2001      	movs	r0, #1
    }
   b9336:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b9338:	2400      	movs	r4, #0
   b933a:	e7f6      	b.n	b932a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b933c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b933c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   b9340:	2300      	movs	r3, #0
   b9342:	e9c0 3300 	strd	r3, r3, [r0]
   b9346:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b9348:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b934a:	6849      	ldr	r1, [r1, #4]
   b934c:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   b934e:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   b9350:	dd13      	ble.n	b937a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   b9352:	f7ff ffdb 	bl	b930c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b9356:	b180      	cbz	r0, b937a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   b9358:	e9d5 6300 	ldrd	r6, r3, [r5]
   b935c:	6827      	ldr	r7, [r4, #0]
   b935e:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   b9362:	45b0      	cmp	r8, r6
   b9364:	d007      	beq.n	b9376 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   b9366:	b11f      	cbz	r7, b9370 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   b9368:	4631      	mov	r1, r6
   b936a:	4638      	mov	r0, r7
   b936c:	f7fe fefb 	bl	b8166 <_ZN8particle17BleCharacteristicC1ERKS0_>
        for (; it != end; ++it, ++dest) {
   b9370:	3608      	adds	r6, #8
   b9372:	3708      	adds	r7, #8
   b9374:	e7f5      	b.n	b9362 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   b9376:	686b      	ldr	r3, [r5, #4]
   b9378:	6063      	str	r3, [r4, #4]
}
   b937a:	4620      	mov	r0, r4
   b937c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b9380 <_ZNK8particle13BlePeerDevice15characteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::characteristics() const {
   b9380:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9382:	460d      	mov	r5, r1
   b9384:	4604      	mov	r4, r0
    WiringBleLock lk;
   b9386:	a801      	add	r0, sp, #4
   b9388:	f7fe f9e4 	bl	b7754 <_ZN8particle3ble13WiringBleLockC1Ev>
        return characteristics_;
   b938c:	6829      	ldr	r1, [r5, #0]
    return impl()->characteristics();
   b938e:	4620      	mov	r0, r4
   b9390:	3118      	adds	r1, #24
   b9392:	f7ff ffd3 	bl	b933c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>
    WiringBleLock lk;
   b9396:	a801      	add	r0, sp, #4
   b9398:	f7fe f9ea 	bl	b7770 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b939c:	4620      	mov	r0, r4
   b939e:	b003      	add	sp, #12
   b93a0:	bd30      	pop	{r4, r5, pc}

000b93a2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b93a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b93a4:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b93a6:	6845      	ldr	r5, [r0, #4]
   b93a8:	4668      	mov	r0, sp
   b93aa:	f7fe fedc 	bl	b8166 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b93ae:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b93b2:	4299      	cmp	r1, r3
   b93b4:	da10      	bge.n	b93d8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b93b6:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b93b8:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b93ba:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b93be:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b93c2:	4629      	mov	r1, r5
   b93c4:	f105 0008 	add.w	r0, r5, #8
   b93c8:	f7ff ff76 	bl	b92b8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b93cc:	b98d      	cbnz	r5, b93f2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b93ce:	6863      	ldr	r3, [r4, #4]
   b93d0:	3301      	adds	r3, #1
   b93d2:	6063      	str	r3, [r4, #4]
    return true;
   b93d4:	2601      	movs	r6, #1
   b93d6:	e006      	b.n	b93e6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b93d8:	3101      	adds	r1, #1
   b93da:	4620      	mov	r0, r4
   b93dc:	f7ff ff96 	bl	b930c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b93e0:	4606      	mov	r6, r0
   b93e2:	2800      	cmp	r0, #0
   b93e4:	d1e7      	bne.n	b93b6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b93e6:	a801      	add	r0, sp, #4
   b93e8:	f7fe fedf 	bl	b81aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b93ec:	4630      	mov	r0, r6
   b93ee:	b002      	add	sp, #8
   b93f0:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b93f2:	4669      	mov	r1, sp
   b93f4:	4628      	mov	r0, r5
   b93f6:	f7fe feb6 	bl	b8166 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b93fa:	e7e8      	b.n	b93ce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b93fc <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   b93fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b93fe:	b085      	sub	sp, #20
   b9400:	4605      	mov	r5, r0
    WiringBleLock lk;
   b9402:	a801      	add	r0, sp, #4
Vector<BleCharacteristic> BlePeerDevice::characteristics(const BleService& service) const {
   b9404:	460c      	mov	r4, r1
   b9406:	4617      	mov	r7, r2
    WiringBleLock lk;
   b9408:	f7fe f9a4 	bl	b7754 <_ZN8particle3ble13WiringBleLockC1Ev>
        capacity_(0) {
   b940c:	2300      	movs	r3, #0
   b940e:	e9c5 3300 	strd	r3, r3, [r5]
   b9412:	60ab      	str	r3, [r5, #8]
      { return _M_ptr; }
   b9414:	6823      	ldr	r3, [r4, #0]
    return data_ + size_;
   b9416:	e9d3 4606 	ldrd	r4, r6, [r3, #24]
   b941a:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    for (const auto& characteristic : impl()->characteristics()) {
   b941e:	42b4      	cmp	r4, r6
   b9420:	d011      	beq.n	b9446 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x4a>
        if (service.impl()->hasCharacteristic(characteristic)) {
   b9422:	6838      	ldr	r0, [r7, #0]
   b9424:	4621      	mov	r1, r4
   b9426:	f7fe fbc5 	bl	b7bb4 <_ZN8particle14BleServiceImpl17hasCharacteristicERKNS_17BleCharacteristicE>
   b942a:	b150      	cbz	r0, b9442 <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x46>
            characteristics.append(characteristic);
   b942c:	4621      	mov	r1, r4
   b942e:	a802      	add	r0, sp, #8
   b9430:	f7fe fe99 	bl	b8166 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9434:	a902      	add	r1, sp, #8
   b9436:	4628      	mov	r0, r5
   b9438:	f7ff ffb3 	bl	b93a2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
      ~__shared_ptr() = default;
   b943c:	a803      	add	r0, sp, #12
   b943e:	f7fe feb4 	bl	b81aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    for (const auto& characteristic : impl()->characteristics()) {
   b9442:	3408      	adds	r4, #8
   b9444:	e7eb      	b.n	b941e <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE+0x22>
    WiringBleLock lk;
   b9446:	a801      	add	r0, sp, #4
   b9448:	f7fe f992 	bl	b7770 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b944c:	4628      	mov	r0, r5
   b944e:	b005      	add	sp, #20
   b9450:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b9454 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>:
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   b9454:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return servicesDiscovered_;
   b9458:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   b945a:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverCharacteristicsOfService(const BleService& service) {
   b945c:	b091      	sub	sp, #68	; 0x44
   b945e:	4606      	mov	r6, r0
   b9460:	460f      	mov	r7, r1
   b9462:	4690      	mov	r8, r2
    if (!impl()->servicesDiscovered()) {
   b9464:	b933      	cbnz	r3, b9474 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x20>
        capacity_(0) {
   b9466:	e9c0 3300 	strd	r3, r3, [r0]
   b946a:	6083      	str	r3, [r0, #8]
}
   b946c:	4630      	mov	r0, r6
   b946e:	b011      	add	sp, #68	; 0x44
   b9470:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      { return _M_ptr; }
   b9474:	6811      	ldr	r1, [r2, #0]
    if (!service.impl()->characteristicsDiscovered()) {
   b9476:	7e0d      	ldrb	r5, [r1, #24]
   b9478:	2d00      	cmp	r5, #0
   b947a:	d158      	bne.n	b952e <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
        LOG(TRACE, "Start discovering characteristics of service: %s.", service.impl()->UUID().toString().c_str());
   b947c:	2320      	movs	r3, #32
   b947e:	462a      	mov	r2, r5
   b9480:	a803      	add	r0, sp, #12
   b9482:	e9cd 3508 	strd	r3, r5, [sp, #32]
   b9486:	f7fe fb02 	bl	b7a8e <_ZNK8particle7BleUuid8toStringEb>
   b948a:	9b03      	ldr	r3, [sp, #12]
   b948c:	9301      	str	r3, [sp, #4]
   b948e:	4b2b      	ldr	r3, [pc, #172]	; (b953c <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xe8>)
   b9490:	492b      	ldr	r1, [pc, #172]	; (b9540 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xec>)
   b9492:	9300      	str	r3, [sp, #0]
   b9494:	aa08      	add	r2, sp, #32
   b9496:	462b      	mov	r3, r5
   b9498:	2001      	movs	r0, #1
   b949a:	f7fd fedf 	bl	b725c <log_message>
   b949e:	a803      	add	r0, sp, #12
   b94a0:	f001 f964 	bl	ba76c <_ZN6StringD1Ev>
        halService.size = sizeof(hal_ble_svc_t);
   b94a4:	231c      	movs	r3, #28
   b94a6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
   b94aa:	f8d8 3000 	ldr.w	r3, [r8]
        halService.start_handle = service.impl()->startHandle();
   b94ae:	8a9a      	ldrh	r2, [r3, #20]
   b94b0:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
        halService.end_handle = service.impl()->endHandle();
   b94b4:	8adb      	ldrh	r3, [r3, #22]
   b94b6:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
   b94ba:	683b      	ldr	r3, [r7, #0]
        CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, peer.impl(), nullptr));
   b94bc:	4a21      	ldr	r2, [pc, #132]	; (b9544 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xf0>)
   b94be:	8818      	ldrh	r0, [r3, #0]
   b94c0:	9500      	str	r5, [sp, #0]
   b94c2:	a908      	add	r1, sp, #32
   b94c4:	f7fd fc96 	bl	b6df4 <hal_ble_gatt_client_discover_characteristics>
   b94c8:	2800      	cmp	r0, #0
   b94ca:	db30      	blt.n	b952e <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xda>
   b94cc:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
   b94ce:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   b94d2:	eb04 09c3 	add.w	r9, r4, r3, lsl #3
   b94d6:	3408      	adds	r4, #8
        for (auto& characteristic : peer.impl()->characteristics()) {
   b94d8:	f1a4 0308 	sub.w	r3, r4, #8
   b94dc:	4599      	cmp	r9, r3
   b94de:	d022      	beq.n	b9526 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0xd2>
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
   b94e0:	f854 3c08 	ldr.w	r3, [r4, #-8]
   b94e4:	89db      	ldrh	r3, [r3, #14]
   b94e6:	2b00      	cmp	r3, #0
   b94e8:	d0f5      	beq.n	b94d6 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                char desc[BLE_MAX_DESC_LEN] = {};
   b94ea:	2210      	movs	r2, #16
   b94ec:	2100      	movs	r1, #0
   b94ee:	eb0d 0002 	add.w	r0, sp, r2
   b94f2:	9503      	str	r5, [sp, #12]
   b94f4:	f002 fbdd 	bl	bbcb2 <memset>
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
   b94f8:	f854 3c08 	ldr.w	r3, [r4, #-8]
   b94fc:	89d9      	ldrh	r1, [r3, #14]
   b94fe:	683b      	ldr	r3, [r7, #0]
   b9500:	aa03      	add	r2, sp, #12
   b9502:	8818      	ldrh	r0, [r3, #0]
   b9504:	9500      	str	r5, [sp, #0]
   b9506:	2313      	movs	r3, #19
   b9508:	f7fd fc92 	bl	b6e30 <hal_ble_gatt_client_read>
                if (len > 0) {
   b950c:	2800      	cmp	r0, #0
   b950e:	d0e2      	beq.n	b94d6 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
                    desc[len] = '\0';
   b9510:	ab10      	add	r3, sp, #64	; 0x40
   b9512:	4418      	add	r0, r3
                    characteristic.impl()->description() = desc;
   b9514:	a903      	add	r1, sp, #12
                    desc[len] = '\0';
   b9516:	f800 5c34 	strb.w	r5, [r0, #-52]
        return description_;
   b951a:	f854 0c08 	ldr.w	r0, [r4, #-8]
                    characteristic.impl()->description() = desc;
   b951e:	303c      	adds	r0, #60	; 0x3c
   b9520:	f001 f9c5 	bl	ba8ae <_ZN6StringaSEPKc>
        for (auto& characteristic : peer.impl()->characteristics()) {
   b9524:	e7d7      	b.n	b94d6 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x82>
   b9526:	f8d8 3000 	ldr.w	r3, [r8]
        characteristicsDiscovered_ = discovered;
   b952a:	2201      	movs	r2, #1
   b952c:	761a      	strb	r2, [r3, #24]
    return characteristics(service);
   b952e:	4642      	mov	r2, r8
   b9530:	4639      	mov	r1, r7
   b9532:	4630      	mov	r0, r6
   b9534:	f7ff ff62 	bl	b93fc <_ZNK8particle13BlePeerDevice15characteristicsERKNS_10BleServiceE>
   b9538:	e798      	b.n	b946c <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE+0x18>
   b953a:	bf00      	nop
   b953c:	000be4b2 	.word	0x000be4b2
   b9540:	000be38f 	.word	0x000be38f
   b9544:	000b96ed 	.word	0x000b96ed

000b9548 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   b9548:	b5f0      	push	{r4, r5, r6, r7, lr}
        return servicesDiscovered_;
   b954a:	680b      	ldr	r3, [r1, #0]
    if (!impl()->servicesDiscovered()) {
   b954c:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   b954e:	b085      	sub	sp, #20
   b9550:	4606      	mov	r6, r0
   b9552:	460d      	mov	r5, r1
    if (!impl()->servicesDiscovered()) {
   b9554:	b92b      	cbnz	r3, b9562 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x1a>
        discoverAllServices();
   b9556:	a801      	add	r0, sp, #4
   b9558:	f7ff fe0a 	bl	b9170 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
   b955c:	a801      	add	r0, sp, #4
   b955e:	f7fe fe33 	bl	b81c8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   b9562:	682b      	ldr	r3, [r5, #0]
   b9564:	e9d3 4703 	ldrd	r4, r7, [r3, #12]
   b9568:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
    for (const auto& service : impl()->services()) {
   b956c:	42bc      	cmp	r4, r7
   b956e:	d009      	beq.n	b9584 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x3c>
        discoverCharacteristicsOfService(service);
   b9570:	4622      	mov	r2, r4
   b9572:	4629      	mov	r1, r5
   b9574:	a801      	add	r0, sp, #4
   b9576:	f7ff ff6d 	bl	b9454 <_ZN8particle13BlePeerDevice32discoverCharacteristicsOfServiceERKNS_10BleServiceE>
   b957a:	a801      	add	r0, sp, #4
   b957c:	f7fe fe36 	bl	b81ec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
    for (const auto& service : impl()->services()) {
   b9580:	3408      	adds	r4, #8
   b9582:	e7f3      	b.n	b956c <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x24>
    return characteristics();
   b9584:	4630      	mov	r0, r6
   b9586:	4629      	mov	r1, r5
   b9588:	f7ff fefa 	bl	b9380 <_ZNK8particle13BlePeerDevice15characteristicsEv>
}
   b958c:	4630      	mov	r0, r6
   b958e:	b005      	add	sp, #20
   b9590:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b9594 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>:
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   b9594:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9598:	4605      	mov	r5, r0
   b959a:	b093      	sub	sp, #76	; 0x4c
    return address_;
   b959c:	6808      	ldr	r0, [r1, #0]
    connCfg.conn_params = params;
   b959e:	9207      	str	r2, [sp, #28]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   b95a0:	460f      	mov	r7, r1
    return address_;
   b95a2:	6849      	ldr	r1, [r1, #4]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   b95a4:	4698      	mov	r8, r3
    return address_;
   b95a6:	ac0a      	add	r4, sp, #40	; 0x28
    connCfg.version = BLE_API_VERSION;
   b95a8:	4b41      	ldr	r3, [pc, #260]	; (b96b0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x11c>)
   b95aa:	9304      	str	r3, [sp, #16]
    return address_;
   b95ac:	c403      	stmia	r4!, {r0, r1}
    connCfg.address = addr.halAddress();
   b95ae:	ab05      	add	r3, sp, #20
    hal_ble_conn_cfg_t connCfg = {};
   b95b0:	f04f 0900 	mov.w	r9, #0
    connCfg.address = addr.halAddress();
   b95b4:	e883 0003 	stmia.w	r3, {r0, r1}
    hal_ble_conn_cfg_t connCfg = {};
   b95b8:	e9cd 9908 	strd	r9, r9, [sp, #32]
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
   b95bc:	f7fe fcac 	bl	b7f18 <_ZN8particle14BleLocalDevice11getInstanceEv>
   b95c0:	4b3c      	ldr	r3, [pc, #240]	; (b96b4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x120>)
   b95c2:	9308      	str	r3, [sp, #32]
    connCfg.context = BleLocalDevice::getInstance().impl();
   b95c4:	f7fe fca8 	bl	b7f18 <_ZN8particle14BleLocalDevice11getInstanceEv>
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   b95c8:	6829      	ldr	r1, [r5, #0]
   b95ca:	6803      	ldr	r3, [r0, #0]
    connCfg.context = BleLocalDevice::getInstance().impl();
   b95cc:	9309      	str	r3, [sp, #36]	; 0x24
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   b95ce:	464a      	mov	r2, r9
   b95d0:	a804      	add	r0, sp, #16
   b95d2:	f7fd fc37 	bl	b6e44 <hal_ble_gap_connect>
    connCfg.address = addr.halAddress();
   b95d6:	ae0a      	add	r6, sp, #40	; 0x28
    if (ret != SYSTEM_ERROR_NONE) {
   b95d8:	4604      	mov	r4, r0
   b95da:	b138      	cbz	r0, b95ec <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x58>
   b95dc:	682b      	ldr	r3, [r5, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b95de:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b95e2:	801a      	strh	r2, [r3, #0]
}
   b95e4:	4620      	mov	r0, r4
   b95e6:	b013      	add	sp, #76	; 0x4c
   b95e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bind(addr);
   b95ec:	4639      	mov	r1, r7
   b95ee:	4628      	mov	r0, r5
   b95f0:	f7fe fc16 	bl	b7e20 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>
        WiringBleLock lk;
   b95f4:	a803      	add	r0, sp, #12
   b95f6:	f7fe f8ad 	bl	b7754 <_ZN8particle3ble13WiringBleLockC1Ev>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   b95fa:	f7fe fc8d 	bl	b7f18 <_ZN8particle14BleLocalDevice11getInstanceEv>
        return peers_;
   b95fe:	6807      	ldr	r7, [r0, #0]
   b9600:	4629      	mov	r1, r5
   b9602:	3718      	adds	r7, #24
   b9604:	4630      	mov	r0, r6
   b9606:	f7fe fdc6 	bl	b8196 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   b960a:	4631      	mov	r1, r6
   b960c:	4638      	mov	r0, r7
   b960e:	f7ff f92b 	bl	b8868 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b9612:	4607      	mov	r7, r0
      ~__shared_ptr() = default;
   b9614:	a80b      	add	r0, sp, #44	; 0x2c
   b9616:	f7fe fdc8 	bl	b81aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b961a:	f04f 0920 	mov.w	r9, #32
   b961e:	bb1f      	cbnz	r7, b9668 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xd4>
            LOG(ERROR, "Cannot add new peer device.");
   b9620:	4632      	mov	r2, r6
   b9622:	4b25      	ldr	r3, [pc, #148]	; (b96b8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x124>)
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b9624:	4e25      	ldr	r6, [pc, #148]	; (b96bc <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x128>)
   b9626:	4926      	ldr	r1, [pc, #152]	; (b96c0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   b9628:	9300      	str	r3, [sp, #0]
   b962a:	2032      	movs	r0, #50	; 0x32
   b962c:	4623      	mov	r3, r4
   b962e:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   b9632:	f7fd fe13 	bl	b725c <log_message>
   b9636:	6830      	ldr	r0, [r6, #0]
   b9638:	f7fd fc80 	bl	b6f3c <os_mutex_recursive_unlock>
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   b963c:	682b      	ldr	r3, [r5, #0]
        locked_ = false;
   b963e:	f88d 400c 	strb.w	r4, [sp, #12]
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   b9642:	4621      	mov	r1, r4
   b9644:	8818      	ldrh	r0, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   b9646:	4c1f      	ldr	r4, [pc, #124]	; (b96c4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x130>)
            hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   b9648:	f7fd fbb6 	bl	b6db8 <hal_ble_gap_disconnect>
    void lock() { os_mutex_recursive_lock(handle_); }
   b964c:	6830      	ldr	r0, [r6, #0]
   b964e:	f7fd fc6d 	bl	b6f2c <os_mutex_recursive_lock>
        locked_ = true;
   b9652:	2301      	movs	r3, #1
   b9654:	f88d 300c 	strb.w	r3, [sp, #12]
      { return _M_ptr; }
   b9658:	682b      	ldr	r3, [r5, #0]
            impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b965a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b965e:	801a      	strh	r2, [r3, #0]
            return SYSTEM_ERROR_NO_MEMORY;
   b9660:	a803      	add	r0, sp, #12
   b9662:	f7fe f885 	bl	b7770 <_ZN8particle3ble13WiringBleLockD1Ev>
   b9666:	e7bd      	b.n	b95e4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        WiringBleLock lk;
   b9668:	a803      	add	r0, sp, #12
   b966a:	f7fe f881 	bl	b7770 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG(TRACE, "New peripheral is connected.");
   b966e:	4b16      	ldr	r3, [pc, #88]	; (b96c8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x134>)
   b9670:	9300      	str	r3, [sp, #0]
   b9672:	4913      	ldr	r1, [pc, #76]	; (b96c0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x12c>)
   b9674:	4623      	mov	r3, r4
   b9676:	4632      	mov	r2, r6
   b9678:	2001      	movs	r0, #1
   b967a:	e9cd 940a 	strd	r9, r4, [sp, #40]	; 0x28
   b967e:	f7fd fded 	bl	b725c <log_message>
    if (automatic) {
   b9682:	f1b8 0f00 	cmp.w	r8, #0
   b9686:	d0ad      	beq.n	b95e4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   b9688:	4629      	mov	r1, r5
   b968a:	4630      	mov	r0, r6
   b968c:	f7ff ff5c 	bl	b9548 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
   b9690:	e9dd 530a 	ldrd	r5, r3, [sp, #40]	; 0x28
   b9694:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (auto& characteristic : characteristics) {
   b9698:	42bd      	cmp	r5, r7
   b969a:	d005      	beq.n	b96a8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x114>
            characteristic.subscribe(true);
   b969c:	4628      	mov	r0, r5
   b969e:	2101      	movs	r1, #1
   b96a0:	f7fe fb34 	bl	b7d0c <_ZNK8particle17BleCharacteristic9subscribeEb>
        for (auto& characteristic : characteristics) {
   b96a4:	3508      	adds	r5, #8
   b96a6:	e7f7      	b.n	b9698 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x104>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   b96a8:	4630      	mov	r0, r6
   b96aa:	f7fe fd9f 	bl	b81ec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b96ae:	e799      	b.n	b95e4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
   b96b0:	00180003 	.word	0x00180003
   b96b4:	000b8921 	.word	0x000b8921
   b96b8:	000be4e4 	.word	0x000be4e4
   b96bc:	2003e654 	.word	0x2003e654
   b96c0:	000be38f 	.word	0x000be38f
   b96c4:	fffffefc 	.word	0xfffffefc
   b96c8:	000be500 	.word	0x000be500

000b96cc <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>:
BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
   b96cc:	b513      	push	{r0, r1, r4, lr}
   b96ce:	4604      	mov	r4, r0
   b96d0:	e9cd 3200 	strd	r3, r2, [sp]
    BlePeerDevice peer;
   b96d4:	f7fe fb70 	bl	b7db8 <_ZN8particle13BlePeerDeviceC1Ev>
    peer.connect(addr, params, automatic);
   b96d8:	9b00      	ldr	r3, [sp, #0]
   b96da:	9901      	ldr	r1, [sp, #4]
   b96dc:	2200      	movs	r2, #0
   b96de:	4620      	mov	r0, r4
   b96e0:	f7ff ff58 	bl	b9594 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>
}
   b96e4:	4620      	mov	r0, r4
   b96e6:	b002      	add	sp, #8
   b96e8:	bd10      	pop	{r4, pc}
	...

000b96ec <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv>:
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   b96ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        LOG(TRACE, "Characteristic discovered.");
   b96f0:	2320      	movs	r3, #32
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   b96f2:	b095      	sub	sp, #84	; 0x54
        LOG(TRACE, "Characteristic discovered.");
   b96f4:	2600      	movs	r6, #0
   b96f6:	e9cd 360c 	strd	r3, r6, [sp, #48]	; 0x30
   b96fa:	4b66      	ldr	r3, [pc, #408]	; (b9894 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a8>)
   b96fc:	9300      	str	r3, [sp, #0]
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   b96fe:	4605      	mov	r5, r0
   b9700:	460f      	mov	r7, r1
        LOG(TRACE, "Characteristic discovered.");
   b9702:	4633      	mov	r3, r6
   b9704:	4964      	ldr	r1, [pc, #400]	; (b9898 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>)
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   b9706:	f8df 9194 	ldr.w	r9, [pc, #404]	; b989c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b0>
   b970a:	f8df 818c 	ldr.w	r8, [pc, #396]	; b9898 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1ac>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   b970e:	f8df a190 	ldr.w	sl, [pc, #400]	; b98a0 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1b4>
        LOG(TRACE, "Characteristic discovered.");
   b9712:	aa0c      	add	r2, sp, #48	; 0x30
   b9714:	2001      	movs	r0, #1
   b9716:	f7fd fda1 	bl	b725c <log_message>
        for (size_t i = 0; i < event->count; i++) {
   b971a:	682b      	ldr	r3, [r5, #0]
   b971c:	42b3      	cmp	r3, r6
   b971e:	f240 80b5 	bls.w	b988c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x1a0>
            BleCharacteristic characteristic;
   b9722:	a803      	add	r0, sp, #12
   b9724:	f7fe fa6c 	bl	b7c00 <_ZN8particle17BleCharacteristicC1Ev>
            BleService service;
   b9728:	a805      	add	r0, sp, #20
   b972a:	f7fe fb29 	bl	b7d80 <_ZN8particle10BleServiceC1Ev>
      get() const noexcept
   b972e:	f04f 0b2a 	mov.w	fp, #42	; 0x2a
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   b9732:	686b      	ldr	r3, [r5, #4]
      { return _M_ptr; }
   b9734:	9a03      	ldr	r2, [sp, #12]
        return attrHandles_;
   b9736:	fb0b fb06 	mul.w	fp, fp, r6
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   b973a:	445b      	add	r3, fp
        this->size = halHandles.size;
   b973c:	8bd9      	ldrh	r1, [r3, #30]
   b973e:	8111      	strh	r1, [r2, #8]
        this->decl_handle = halHandles.decl_handle;
   b9740:	8c19      	ldrh	r1, [r3, #32]
   b9742:	8151      	strh	r1, [r2, #10]
        this->value_handle = halHandles.value_handle;
   b9744:	8c59      	ldrh	r1, [r3, #34]	; 0x22
   b9746:	8191      	strh	r1, [r2, #12]
        this->user_desc_handle = halHandles.user_desc_handle;
   b9748:	8c98      	ldrh	r0, [r3, #36]	; 0x24
   b974a:	81d0      	strh	r0, [r2, #14]
        this->cccd_handle = halHandles.cccd_handle;
   b974c:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
   b974e:	8210      	strh	r0, [r2, #16]
        this->sccd_handle = halHandles.sccd_handle;
   b9750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   b9752:	8253      	strh	r3, [r2, #18]
   b9754:	e9d7 3203 	ldrd	r3, r2, [r7, #12]
   b9758:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (const auto& svc : services_) {
   b975c:	429a      	cmp	r2, r3
   b975e:	d07d      	beq.n	b985c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x170>
   b9760:	6818      	ldr	r0, [r3, #0]
            if (handles.value_handle <= svc.impl()->endHandle() && handles.value_handle >= svc.impl()->startHandle()) {
   b9762:	8ac4      	ldrh	r4, [r0, #22]
   b9764:	428c      	cmp	r4, r1
   b9766:	d377      	bcc.n	b9858 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
   b9768:	8a84      	ldrh	r4, [r0, #20]
   b976a:	428c      	cmp	r4, r1
   b976c:	d874      	bhi.n	b9858 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x16c>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
   b976e:	6859      	ldr	r1, [r3, #4]
   b9770:	9005      	str	r0, [sp, #20]
   b9772:	a806      	add	r0, sp, #24
   b9774:	f7fd ffc8 	bl	b7708 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
                characteristic.impl()->svcUUID() = service.impl()->UUID();
   b9778:	f8dd c014 	ldr.w	ip, [sp, #20]
      { return _M_ptr; }
   b977c:	f8dd e00c 	ldr.w	lr, [sp, #12]
   b9780:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b9784:	f10e 0428 	add.w	r4, lr, #40	; 0x28
   b9788:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b978a:	f8dc 3000 	ldr.w	r3, [ip]
   b978e:	6023      	str	r3, [r4, #0]
                characteristic.impl()->connHandle() = event->conn_handle;
   b9790:	892b      	ldrh	r3, [r5, #8]
   b9792:	f8ae 3002 	strh.w	r3, [lr, #2]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   b9796:	686b      	ldr	r3, [r5, #4]
   b9798:	9c03      	ldr	r4, [sp, #12]
   b979a:	445b      	add	r3, fp
   b979c:	7e5b      	ldrb	r3, [r3, #25]
   b979e:	f013 0f02 	tst.w	r3, #2
   b97a2:	d16e      	bne.n	b9882 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x196>
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE_WO_RESP) {
   b97a4:	686b      	ldr	r3, [r5, #4]
   b97a6:	445b      	add	r3, fp
   b97a8:	7e5b      	ldrb	r3, [r3, #25]
   b97aa:	0758      	lsls	r0, r3, #29
    return EnumFlags<T>(value_ | flags.value_);
}

template<typename T>
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
    value_ |= flags.value_;
   b97ac:	bf42      	ittt	mi
   b97ae:	7923      	ldrbmi	r3, [r4, #4]
   b97b0:	f043 0304 	orrmi.w	r3, r3, #4
   b97b4:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE) {
   b97b6:	686b      	ldr	r3, [r5, #4]
   b97b8:	445b      	add	r3, fp
   b97ba:	7e5b      	ldrb	r3, [r3, #25]
   b97bc:	0719      	lsls	r1, r3, #28
   b97be:	bf42      	ittt	mi
   b97c0:	7923      	ldrbmi	r3, [r4, #4]
   b97c2:	f043 0308 	orrmi.w	r3, r3, #8
   b97c6:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_NOTIFY) {
   b97c8:	686b      	ldr	r3, [r5, #4]
   b97ca:	445b      	add	r3, fp
   b97cc:	7e5b      	ldrb	r3, [r3, #25]
   b97ce:	06da      	lsls	r2, r3, #27
   b97d0:	bf42      	ittt	mi
   b97d2:	7923      	ldrbmi	r3, [r4, #4]
   b97d4:	f043 0310 	orrmi.w	r3, r3, #16
   b97d8:	7123      	strbmi	r3, [r4, #4]
                if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
   b97da:	686b      	ldr	r3, [r5, #4]
   b97dc:	445b      	add	r3, fp
   b97de:	aa07      	add	r2, sp, #28
   b97e0:	7e5b      	ldrb	r3, [r3, #25]
   b97e2:	069b      	lsls	r3, r3, #26
   b97e4:	bf42      	ittt	mi
   b97e6:	7923      	ldrbmi	r3, [r4, #4]
   b97e8:	f043 0320 	orrmi.w	r3, r3, #32
   b97ec:	7123      	strbmi	r3, [r4, #4]
        return charUuid_;
   b97ee:	686b      	ldr	r3, [r5, #4]
   b97f0:	449b      	add	fp, r3
   b97f2:	f10b 0304 	add.w	r3, fp, #4
   b97f6:	4696      	mov	lr, r2
   b97f8:	f10b 0b14 	add.w	fp, fp, #20
   b97fc:	6818      	ldr	r0, [r3, #0]
   b97fe:	6859      	ldr	r1, [r3, #4]
   b9800:	4694      	mov	ip, r2
   b9802:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   b9806:	3308      	adds	r3, #8
   b9808:	455b      	cmp	r3, fp
   b980a:	4662      	mov	r2, ip
   b980c:	d1f6      	bne.n	b97fc <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x110>
   b980e:	6818      	ldr	r0, [r3, #0]
   b9810:	f8cc 0000 	str.w	r0, [ip]
        return *this = BleUuid(uuid);
   b9814:	4671      	mov	r1, lr
   b9816:	a80c      	add	r0, sp, #48	; 0x30
   b9818:	f7fd fff2 	bl	b7800 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   b981c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
   b9820:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b9824:	3414      	adds	r4, #20
   b9826:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b9828:	f8dc 3000 	ldr.w	r3, [ip]
   b982c:	6023      	str	r3, [r4, #0]
                if (!peerImpl->characteristics().append(characteristic)) {
   b982e:	a903      	add	r1, sp, #12
   b9830:	a80c      	add	r0, sp, #48	; 0x30
   b9832:	f7fe fc98 	bl	b8166 <_ZN8particle17BleCharacteristicC1ERKS0_>
   b9836:	a90c      	add	r1, sp, #48	; 0x30
   b9838:	f107 0018 	add.w	r0, r7, #24
   b983c:	f7ff fdb1 	bl	b93a2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b9840:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b9842:	a80d      	add	r0, sp, #52	; 0x34
   b9844:	f7fe fcb1 	bl	b81aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9848:	b99c      	cbnz	r4, b9872 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x186>
                    LOG(ERROR, "Failed to append discovered characteristic.");
   b984a:	2320      	movs	r3, #32
   b984c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
   b9850:	f8cd a000 	str.w	sl, [sp]
   b9854:	4623      	mov	r3, r4
   b9856:	e007      	b.n	b9868 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x17c>
        for (const auto& svc : services_) {
   b9858:	3308      	adds	r3, #8
   b985a:	e77f      	b.n	b975c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x70>
                LOG(ERROR, "Discovered characteristic's handle is invalid.");
   b985c:	2420      	movs	r4, #32
   b985e:	2300      	movs	r3, #0
   b9860:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
   b9864:	f8cd 9000 	str.w	r9, [sp]
                    LOG(ERROR, "Failed to append discovered characteristic.");
   b9868:	aa0c      	add	r2, sp, #48	; 0x30
   b986a:	4641      	mov	r1, r8
   b986c:	2032      	movs	r0, #50	; 0x32
   b986e:	f7fd fcf5 	bl	b725c <log_message>
   b9872:	a806      	add	r0, sp, #24
   b9874:	f7fe fc99 	bl	b81aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9878:	a804      	add	r0, sp, #16
   b987a:	f7fe fc96 	bl	b81aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   b987e:	3601      	adds	r6, #1
   b9880:	e74b      	b.n	b971a <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x2e>
   b9882:	7923      	ldrb	r3, [r4, #4]
   b9884:	f043 0302 	orr.w	r3, r3, #2
   b9888:	7123      	strb	r3, [r4, #4]
   b988a:	e78b      	b.n	b97a4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0xb8>
    }
   b988c:	b015      	add	sp, #84	; 0x54
   b988e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b9892:	bf00      	nop
   b9894:	000be51d 	.word	0x000be51d
   b9898:	000be38f 	.word	0x000be38f
   b989c:	000be538 	.word	0x000be538
   b98a0:	000be567 	.word	0x000be567

000b98a4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b98a4:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b98a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b98a8:	4604      	mov	r4, r0
   b98aa:	460d      	mov	r5, r1
   b98ac:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b98ae:	d914      	bls.n	b98da <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b98b0:	4290      	cmp	r0, r2
   b98b2:	d213      	bcs.n	b98dc <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b98b4:	f1a2 0624 	sub.w	r6, r2, #36	; 0x24
            dest += end - p - 1;
   b98b8:	1a75      	subs	r5, r6, r1
   b98ba:	f1a1 0724 	sub.w	r7, r1, #36	; 0x24
   b98be:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b98c0:	42b7      	cmp	r7, r6
   b98c2:	d018      	beq.n	b98f6 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b98c4:	b11c      	cbz	r4, b98ce <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b98c6:	4631      	mov	r1, r6
   b98c8:	4620      	mov	r0, r4
   b98ca:	f7fe feb5 	bl	b8638 <_ZN8particle13BleScanResultC1EOS0_>
                end->~T();
   b98ce:	4630      	mov	r0, r6
   b98d0:	f7fe fb8c 	bl	b7fec <_ZN8particle13BleScanResultD1Ev>
            for (; end != p; --end, --dest) {
   b98d4:	3e24      	subs	r6, #36	; 0x24
   b98d6:	3c24      	subs	r4, #36	; 0x24
   b98d8:	e7f2      	b.n	b98c0 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b98da:	d00c      	beq.n	b98f6 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b98dc:	42b5      	cmp	r5, r6
   b98de:	d00a      	beq.n	b98f6 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b98e0:	b11c      	cbz	r4, b98ea <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b98e2:	4629      	mov	r1, r5
   b98e4:	4620      	mov	r0, r4
   b98e6:	f7fe fea7 	bl	b8638 <_ZN8particle13BleScanResultC1EOS0_>
                p->~T();
   b98ea:	4628      	mov	r0, r5
   b98ec:	f7fe fb7e 	bl	b7fec <_ZN8particle13BleScanResultD1Ev>
            for (; p != end; ++p, ++dest) {
   b98f0:	3524      	adds	r5, #36	; 0x24
   b98f2:	3424      	adds	r4, #36	; 0x24
   b98f4:	e7f2      	b.n	b98dc <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b98f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b98f8 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b98f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (n > 0) {
   b98fa:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b98fc:	4605      	mov	r5, r0
        if (n > 0) {
   b98fe:	dd13      	ble.n	b9928 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   b9900:	2724      	movs	r7, #36	; 0x24
    return ::malloc(size);
   b9902:	fb07 f006 	mul.w	r0, r7, r6
   b9906:	f7fd fd85 	bl	b7414 <malloc>
            if (!d) {
   b990a:	4604      	mov	r4, r0
   b990c:	b158      	cbz	r0, b9926 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2e>
            move(d, data_, data_ + size_);
   b990e:	e9d5 1200 	ldrd	r1, r2, [r5]
   b9912:	fb07 1202 	mla	r2, r7, r2, r1
   b9916:	f7ff ffc5 	bl	b98a4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b991a:	6828      	ldr	r0, [r5, #0]
   b991c:	f7fd fd82 	bl	b7424 <free>
        data_ = d;
   b9920:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b9922:	60ae      	str	r6, [r5, #8]
        return true;
   b9924:	2001      	movs	r0, #1
    }
   b9926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        T* d = nullptr;
   b9928:	2400      	movs	r4, #0
   b992a:	e7f6      	b.n	b991a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>

000b992c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   b992c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b9930:	b09d      	sub	sp, #116	; 0x74
            : rssi_(BLE_RSSI_INVALID) {
   b9932:	ad01      	add	r5, sp, #4
   b9934:	4606      	mov	r6, r0
   b9936:	4628      	mov	r0, r5
   b9938:	460c      	mov	r4, r1
   b993a:	f7fd ff46 	bl	b77ca <_ZN8particle10BleAddressC1Ev>
   b993e:	a803      	add	r0, sp, #12
   b9940:	f7fe ff55 	bl	b87ee <_ZN8particle18BleAdvertisingDataC1Ev>
   b9944:	a806      	add	r0, sp, #24
   b9946:	f7fe ff52 	bl	b87ee <_ZN8particle18BleAdvertisingDataC1Ev>
    address_ = addr;
   b994a:	6930      	ldr	r0, [r6, #16]
   b994c:	6971      	ldr	r1, [r6, #20]
        scanResponse_.set(buf, len);
   b994e:	89f2      	ldrh	r2, [r6, #14]
   b9950:	ab13      	add	r3, sp, #76	; 0x4c
   b9952:	c303      	stmia	r3!, {r0, r1}
    address_ = addr.address_;
   b9954:	e885 0003 	stmia.w	r5, {r0, r1}
        rssi_ = value;
   b9958:	7833      	ldrb	r3, [r6, #0]
        scanResponse_.set(buf, len);
   b995a:	68b1      	ldr	r1, [r6, #8]
        rssi_ = value;
   b995c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        scanResponse_.set(buf, len);
   b9960:	a806      	add	r0, sp, #24
   b9962:	f7fe feb8 	bl	b86d6 <_ZN8particle18BleAdvertisingData3setEPKhj>
        advertisingData_.set(buf, len);
   b9966:	89b2      	ldrh	r2, [r6, #12]
   b9968:	6871      	ldr	r1, [r6, #4]
   b996a:	a803      	add	r0, sp, #12
   b996c:	f7fe feb3 	bl	b86d6 <_ZN8particle18BleAdvertisingData3setEPKhj>
        return minRssi_;
   b9970:	f994 3068 	ldrsb.w	r3, [r4, #104]	; 0x68
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   b9974:	2b7f      	cmp	r3, #127	; 0x7f
    address_ = addr.address_;
   b9976:	af13      	add	r7, sp, #76	; 0x4c
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() < filterRssi) {
   b9978:	d003      	beq.n	b9982 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x56>
   b997a:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   b997e:	429a      	cmp	r2, r3
   b9980:	db5c      	blt.n	b9a3c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        return maxRssi_;
   b9982:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
        if (filterRssi != BLE_RSSI_INVALID && result.rssi() > filterRssi) {
   b9986:	2b7f      	cmp	r3, #127	; 0x7f
   b9988:	d003      	beq.n	b9992 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x66>
   b998a:	f99d 2024 	ldrsb.w	r2, [sp, #36]	; 0x24
   b998e:	429a      	cmp	r2, r3
   b9990:	dc54      	bgt.n	b9a3c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filerAddresses = filter_.addresses();
   b9992:	f104 0150 	add.w	r1, r4, #80	; 0x50
   b9996:	4638      	mov	r0, r7
   b9998:	f7fe fd16 	bl	b83c8 <_ZN5spark6VectorIN8particle10BleAddressENS_16DefaultAllocatorEEC1ERKS4_>
    return size_;
   b999c:	9b14      	ldr	r3, [sp, #80]	; 0x50
        if (filerAddresses.size() > 0) {
   b999e:	2b00      	cmp	r3, #0
   b99a0:	dd52      	ble.n	b9a48 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x11c>
    return data_;
   b99a2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
    return data_ + size_;
   b99a4:	eb06 09c3 	add.w	r9, r6, r3, lsl #3
            for (const auto& address : filerAddresses) {
   b99a8:	45b1      	cmp	r9, r6
   b99aa:	d050      	beq.n	b9a4e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x122>
                if (address == result.address()) {
   b99ac:	4630      	mov	r0, r6
   b99ae:	4629      	mov	r1, r5
   b99b0:	f7fd fef7 	bl	b77a2 <_ZNK8particle10BleAddresseqERKS0_>
   b99b4:	3608      	adds	r6, #8
   b99b6:	4680      	mov	r8, r0
   b99b8:	2800      	cmp	r0, #0
   b99ba:	d0f5      	beq.n	b99a8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7c>
    ::free(ptr);
   b99bc:	9813      	ldr	r0, [sp, #76]	; 0x4c
   b99be:	f7fd fd31 	bl	b7424 <free>
        if (!delegator->filterByRssi(result) ||
   b99c2:	f1b8 0f00 	cmp.w	r8, #0
   b99c6:	d039      	beq.n	b9a3c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByDeviceName(result) ||
   b99c8:	4629      	mov	r1, r5
   b99ca:	4620      	mov	r0, r4
   b99cc:	f7fe fcbf 	bl	b834e <_ZN8particle16BleScanDelegator18filterByDeviceNameERKNS_13BleScanResultE>
              !delegator->filterByAddress(result) ||
   b99d0:	b3a0      	cbz	r0, b9a3c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByServiceUUID(result) ||
   b99d2:	4629      	mov	r1, r5
   b99d4:	4620      	mov	r0, r4
   b99d6:	f7ff fa68 	bl	b8eaa <_ZN8particle16BleScanDelegator19filterByServiceUUIDERKNS_13BleScanResultE>
              !delegator->filterByDeviceName(result) ||
   b99da:	4606      	mov	r6, r0
   b99dc:	b370      	cbz	r0, b9a3c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        auto filterAppearances = filter_.appearances();
   b99de:	f104 015c 	add.w	r1, r4, #92	; 0x5c
   b99e2:	4638      	mov	r0, r7
   b99e4:	f7fe fd3b 	bl	b845e <_ZN5spark6VectorI20ble_sig_appearance_tNS_16DefaultAllocatorEEC1ERKS3_>
        if (filterAppearances.size() > 0) {
   b99e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   b99ea:	2b00      	cmp	r3, #0
   b99ec:	dd12      	ble.n	b9a14 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
            ble_sig_appearance_t srAppearance = result.scanResponse().appearance();
   b99ee:	a806      	add	r0, sp, #24
   b99f0:	f7fe f8b3 	bl	b7b5a <_ZNK8particle18BleAdvertisingData10appearanceEv>
   b99f4:	4680      	mov	r8, r0
            ble_sig_appearance_t advAppearance = result.advertisingData().appearance();
   b99f6:	a803      	add	r0, sp, #12
   b99f8:	f7fe f8af 	bl	b7b5a <_ZNK8particle18BleAdvertisingData10appearanceEv>
    return data_ + size_;
   b99fc:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
   b9a00:	eb03 0242 	add.w	r2, r3, r2, lsl #1
            for (const auto& appearance : filterAppearances) {
   b9a04:	429a      	cmp	r2, r3
   b9a06:	d025      	beq.n	b9a54 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x128>
                if (appearance == srAppearance || appearance == advAppearance) {
   b9a08:	f833 1b02 	ldrh.w	r1, [r3], #2
   b9a0c:	4588      	cmp	r8, r1
   b9a0e:	d001      	beq.n	b9a14 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
   b9a10:	4288      	cmp	r0, r1
   b9a12:	d1f7      	bne.n	b9a04 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd8>
    ::free(ptr);
   b9a14:	9813      	ldr	r0, [sp, #76]	; 0x4c
   b9a16:	f7fd fd05 	bl	b7424 <free>
              !delegator->filterByServiceUUID(result) ||
   b9a1a:	b17e      	cbz	r6, b9a3c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
              !delegator->filterByCustomData(result)) {
   b9a1c:	4629      	mov	r1, r5
   b9a1e:	4620      	mov	r0, r4
   b9a20:	f7fe fd52 	bl	b84c8 <_ZN8particle16BleScanDelegator18filterByCustomDataERKNS_13BleScanResultE>
              !delegator->filterByAppearance(result) ||
   b9a24:	b150      	cbz	r0, b9a3c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
        if (delegator->scanResultCallback_) {
   b9a26:	6a23      	ldr	r3, [r4, #32]
   b9a28:	b1b3      	cbz	r3, b9a58 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x12c>
            delegator->foundCount_++;
   b9a2a:	6963      	ldr	r3, [r4, #20]
   b9a2c:	9513      	str	r5, [sp, #76]	; 0x4c
   b9a2e:	3301      	adds	r3, #1
   b9a30:	6163      	str	r3, [r4, #20]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b9a32:	6a63      	ldr	r3, [r4, #36]	; 0x24
   b9a34:	4639      	mov	r1, r7
   b9a36:	f104 0018 	add.w	r0, r4, #24
   b9a3a:	4798      	blx	r3
            return;
   b9a3c:	4628      	mov	r0, r5
   b9a3e:	f7fe fad5 	bl	b7fec <_ZN8particle13BleScanResultD1Ev>
    }
   b9a42:	b01d      	add	sp, #116	; 0x74
   b9a44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return true;
   b9a48:	f04f 0801 	mov.w	r8, #1
   b9a4c:	e7b6      	b.n	b99bc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   b9a4e:	f04f 0800 	mov.w	r8, #0
   b9a52:	e7b3      	b.n	b99bc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x90>
            return false;
   b9a54:	2600      	movs	r6, #0
   b9a56:	e7dd      	b.n	b9a14 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xe8>
        } else if (delegator->scanResultCallbackRef_) {
   b9a58:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
   b9a5c:	f1b8 0f00 	cmp.w	r8, #0
   b9a60:	d007      	beq.n	b9a72 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x146>
            delegator->foundCount_++;
   b9a62:	6963      	ldr	r3, [r4, #20]
   b9a64:	3301      	adds	r3, #1
   b9a66:	6163      	str	r3, [r4, #20]
   b9a68:	4629      	mov	r1, r5
   b9a6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   b9a6c:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b9a70:	e7e3      	b.n	b9a3a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x10e>
        if (delegator->resultsPtr_) {
   b9a72:	f8d4 c00c 	ldr.w	ip, [r4, #12]
   b9a76:	f1bc 0f00 	cmp.w	ip, #0
   b9a7a:	d025      	beq.n	b9ac8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x19c>
            delegator->foundCount_++;
   b9a7c:	6963      	ldr	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b9a7e:	6922      	ldr	r2, [r4, #16]
            delegator->foundCount_++;
   b9a80:	3301      	adds	r3, #1
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b9a82:	4293      	cmp	r3, r2
            delegator->foundCount_++;
   b9a84:	6163      	str	r3, [r4, #20]
            if (delegator->foundCount_ <= delegator->targetCount_) {
   b9a86:	d8d9      	bhi.n	b9a3c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   b9a88:	2224      	movs	r2, #36	; 0x24
   b9a8a:	4353      	muls	r3, r2
    address_ = addr.address_;
   b9a8c:	462a      	mov	r2, r5
   b9a8e:	ca03      	ldmia	r2!, {r0, r1}
                delegator->resultsPtr_[delegator->foundCount_ - 1] = result;
   b9a90:	3b24      	subs	r3, #36	; 0x24
   b9a92:	eb0c 0603 	add.w	r6, ip, r3
    address_ = addr.address_;
   b9a96:	f84c 0003 	str.w	r0, [ip, r3]
   b9a9a:	6071      	str	r1, [r6, #4]
class BleScanResult {
   b9a9c:	f106 0008 	add.w	r0, r6, #8
   b9aa0:	a903      	add	r1, sp, #12
   b9aa2:	f7fe fde0 	bl	b8666 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   b9aa6:	a906      	add	r1, sp, #24
   b9aa8:	f106 0014 	add.w	r0, r6, #20
   b9aac:	f7fe fddb 	bl	b8666 <_ZN8particle18BleAdvertisingDataaSERKS0_.isra.0>
   b9ab0:	f99d 3024 	ldrsb.w	r3, [sp, #36]	; 0x24
   b9ab4:	f886 3020 	strb.w	r3, [r6, #32]
                if (delegator->foundCount_ >= delegator->targetCount_) {
   b9ab8:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   b9abc:	429a      	cmp	r2, r3
   b9abe:	d3bd      	bcc.n	b9a3c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
                    hal_ble_gap_stop_scan(nullptr);
   b9ac0:	4640      	mov	r0, r8
   b9ac2:	f7fd f96f 	bl	b6da4 <hal_ble_gap_stop_scan>
   b9ac6:	e7b9      	b.n	b9a3c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    address_ = addr.address_;
   b9ac8:	e895 0003 	ldmia.w	r5, {r0, r1}
   b9acc:	f10d 0828 	add.w	r8, sp, #40	; 0x28
   b9ad0:	e888 0003 	stmia.w	r8, {r0, r1}
class BleAdvertisingData {
   b9ad4:	a903      	add	r1, sp, #12
   b9ad6:	a80c      	add	r0, sp, #48	; 0x30
   b9ad8:	f7fe fd91 	bl	b85fe <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
   b9adc:	a906      	add	r1, sp, #24
   b9ade:	a80f      	add	r0, sp, #60	; 0x3c
   b9ae0:	f7fe fd8d 	bl	b85fe <_ZN5spark6VectorIhNS_16DefaultAllocatorEEC1ERKS2_>
class BleScanResult {
   b9ae4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   b9ae8:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
    return insert(size_, std::move(value));
   b9aec:	4641      	mov	r1, r8
   b9aee:	4638      	mov	r0, r7
   b9af0:	6866      	ldr	r6, [r4, #4]
   b9af2:	f7fe fda1 	bl	b8638 <_ZN8particle13BleScanResultC1EOS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9af6:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b9afa:	4299      	cmp	r1, r3
   b9afc:	da10      	bge.n	b9b20 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1f4>
    T* const p = data_ + i;
   b9afe:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b9b00:	6861      	ldr	r1, [r4, #4]
    T* const p = data_ + i;
   b9b02:	2224      	movs	r2, #36	; 0x24
   b9b04:	fb02 3606 	mla	r6, r2, r6, r3
    move(p + 1, p, data_ + size_);
   b9b08:	f106 0024 	add.w	r0, r6, #36	; 0x24
   b9b0c:	fb02 3201 	mla	r2, r2, r1, r3
   b9b10:	4631      	mov	r1, r6
   b9b12:	f7ff fec7 	bl	b98a4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b9b16:	b986      	cbnz	r6, b9b3a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x20e>
    ++size_;
   b9b18:	6863      	ldr	r3, [r4, #4]
   b9b1a:	3301      	adds	r3, #1
   b9b1c:	6063      	str	r3, [r4, #4]
    return true;
   b9b1e:	e005      	b.n	b9b2c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x200>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b9b20:	3101      	adds	r1, #1
   b9b22:	4620      	mov	r0, r4
   b9b24:	f7ff fee8 	bl	b98f8 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b9b28:	2800      	cmp	r0, #0
   b9b2a:	d1e8      	bne.n	b9afe <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1d2>
    return insert(size_, std::move(value));
   b9b2c:	4638      	mov	r0, r7
   b9b2e:	f7fe fa5d 	bl	b7fec <_ZN8particle13BleScanResultD1Ev>
        delegator->resultsVector_.append(result);
   b9b32:	4640      	mov	r0, r8
   b9b34:	f7fe fa5a 	bl	b7fec <_ZN8particle13BleScanResultD1Ev>
   b9b38:	e780      	b.n	b9a3c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x110>
    new(p) T(std::move(value));
   b9b3a:	4639      	mov	r1, r7
   b9b3c:	4630      	mov	r0, r6
   b9b3e:	f7fe fd7b 	bl	b8638 <_ZN8particle13BleScanResultC1EOS0_>
   b9b42:	e7e9      	b.n	b9b18 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x1ec>

000b9b44 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    RecursiveMutex() : handle_(nullptr)
   b9b44:	4802      	ldr	r0, [pc, #8]	; (b9b50 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b9b46:	2300      	movs	r3, #0
   b9b48:	6003      	str	r3, [r0, #0]
        os_mutex_recursive_create(&handle_);
   b9b4a:	f7fd b9e7 	b.w	b6f1c <os_mutex_recursive_create>
   b9b4e:	bf00      	nop
   b9b50:	2003e654 	.word	0x2003e654

000b9b54 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   b9b54:	2200      	movs	r2, #0
   b9b56:	6840      	ldr	r0, [r0, #4]
   b9b58:	4611      	mov	r1, r2
   b9b5a:	f7fd bc13 	b.w	b7384 <network_ready>

000b9b5e <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   b9b5e:	2200      	movs	r2, #0
   b9b60:	6840      	ldr	r0, [r0, #4]
   b9b62:	4611      	mov	r1, r2
   b9b64:	f7fd bc2e 	b.w	b73c4 <network_listening>

000b9b68 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b9b68:	2200      	movs	r2, #0
   b9b6a:	6840      	ldr	r0, [r0, #4]
   b9b6c:	4611      	mov	r1, r2
   b9b6e:	f7fd bc39 	b.w	b73e4 <network_get_listen_timeout>

000b9b72 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b9b72:	6840      	ldr	r0, [r0, #4]
   b9b74:	2200      	movs	r2, #0
   b9b76:	f7fd bc2d 	b.w	b73d4 <network_set_listen_timeout>

000b9b7a <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b9b7a:	6840      	ldr	r0, [r0, #4]
   b9b7c:	2200      	movs	r2, #0
   b9b7e:	f081 0101 	eor.w	r1, r1, #1
   b9b82:	f7fd bc17 	b.w	b73b4 <network_listen>

000b9b86 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b9b86:	2300      	movs	r3, #0
   b9b88:	6840      	ldr	r0, [r0, #4]
   b9b8a:	461a      	mov	r2, r3
   b9b8c:	4619      	mov	r1, r3
   b9b8e:	f7fd bc09 	b.w	b73a4 <network_off>

000b9b92 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b9b92:	2300      	movs	r3, #0
   b9b94:	6840      	ldr	r0, [r0, #4]
   b9b96:	461a      	mov	r2, r3
   b9b98:	4619      	mov	r1, r3
   b9b9a:	f7fd bbfb 	b.w	b7394 <network_on>

000b9b9e <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b9b9e:	2200      	movs	r2, #0
   b9ba0:	6840      	ldr	r0, [r0, #4]
   b9ba2:	4611      	mov	r1, r2
   b9ba4:	f7fd bbde 	b.w	b7364 <network_connecting>

000b9ba8 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b9ba8:	6840      	ldr	r0, [r0, #4]
   b9baa:	2200      	movs	r2, #0
   b9bac:	2102      	movs	r1, #2
   b9bae:	f7fd bbe1 	b.w	b7374 <network_disconnect>

000b9bb2 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b9bb2:	2300      	movs	r3, #0
   b9bb4:	6840      	ldr	r0, [r0, #4]
   b9bb6:	461a      	mov	r2, r3
   b9bb8:	f7fd bbcc 	b.w	b7354 <network_connect>

000b9bbc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   b9bbc:	4b08      	ldr	r3, [pc, #32]	; (b9be0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   b9bbe:	b510      	push	{r4, lr}
   b9bc0:	2428      	movs	r4, #40	; 0x28
   b9bc2:	4622      	mov	r2, r4
   b9bc4:	4618      	mov	r0, r3
   b9bc6:	2100      	movs	r1, #0
   b9bc8:	f002 f873 	bl	bbcb2 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b9bcc:	4b05      	ldr	r3, [pc, #20]	; (b9be4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   b9bce:	8004      	strh	r4, [r0, #0]
        cid = -1;
   b9bd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b9bd4:	6042      	str	r2, [r0, #4]
   b9bd6:	2204      	movs	r2, #4
   b9bd8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   b9bda:	4a03      	ldr	r2, [pc, #12]	; (b9be8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   b9bdc:	601a      	str	r2, [r3, #0]
   b9bde:	bd10      	pop	{r4, pc}
   b9be0:	2003e664 	.word	0x2003e664
   b9be4:	2003e65c 	.word	0x2003e65c
   b9be8:	000be610 	.word	0x000be610

000b9bec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b9bec:	4770      	bx	lr

000b9bee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b9bee:	2000      	movs	r0, #0
   b9bf0:	4770      	bx	lr

000b9bf2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b9bf2:	b510      	push	{r4, lr}
   b9bf4:	2110      	movs	r1, #16
   b9bf6:	4604      	mov	r4, r0
   b9bf8:	f7fa fa51 	bl	b409e <_ZdlPvj>
   b9bfc:	4620      	mov	r0, r4
   b9bfe:	bd10      	pop	{r4, pc}

000b9c00 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b9c00:	b508      	push	{r3, lr}
      { delete this; }
   b9c02:	f7ff fff6 	bl	b9bf2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b9c06:	bd08      	pop	{r3, pc}

000b9c08 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b9c08:	b530      	push	{r4, r5, lr}
        type_(type) {
   b9c0a:	2200      	movs	r2, #0
   b9c0c:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b9c10:	6002      	str	r2, [r0, #0]
   b9c12:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b9c14:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b9c16:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b9c18:	680c      	ldr	r4, [r1, #0]
   b9c1a:	8085      	strh	r5, [r0, #4]
   b9c1c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b9c1e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b9c20:	bd30      	pop	{r4, r5, pc}

000b9c22 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b9c22:	b510      	push	{r4, lr}
   b9c24:	4604      	mov	r4, r0
    free((void*)msg_);
   b9c26:	6800      	ldr	r0, [r0, #0]
   b9c28:	f7fd fbfc 	bl	b7424 <free>
}
   b9c2c:	4620      	mov	r0, r4
   b9c2e:	bd10      	pop	{r4, pc}

000b9c30 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b9c30:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b9c32:	68c4      	ldr	r4, [r0, #12]
   b9c34:	b1f4      	cbz	r4, b9c74 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b9c36:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b9c38:	2b02      	cmp	r3, #2
   b9c3a:	d103      	bne.n	b9c44 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b9c3c:	f104 000c 	add.w	r0, r4, #12
   b9c40:	f7ff ffef 	bl	b9c22 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b9c44:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b9c46:	b135      	cbz	r5, b9c56 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b9c48:	4628      	mov	r0, r5
   b9c4a:	f7fa fb1d 	bl	b4288 <_ZNSt14_Function_baseD1Ev>
   b9c4e:	2110      	movs	r1, #16
   b9c50:	4628      	mov	r0, r5
   b9c52:	f7fa fa24 	bl	b409e <_ZdlPvj>
   b9c56:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b9c58:	b135      	cbz	r5, b9c68 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b9c5a:	4628      	mov	r0, r5
   b9c5c:	f7fa fb14 	bl	b4288 <_ZNSt14_Function_baseD1Ev>
   b9c60:	2110      	movs	r1, #16
   b9c62:	4628      	mov	r0, r5
   b9c64:	f7fa fa1b 	bl	b409e <_ZdlPvj>
   b9c68:	4620      	mov	r0, r4
   b9c6a:	2114      	movs	r1, #20
   b9c6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b9c70:	f7fa ba15 	b.w	b409e <_ZdlPvj>
   b9c74:	bd38      	pop	{r3, r4, r5, pc}

000b9c76 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b9c76:	680b      	ldr	r3, [r1, #0]
   b9c78:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b9c7a:	684b      	ldr	r3, [r1, #4]
   b9c7c:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b9c7e:	b113      	cbz	r3, b9c86 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b9c80:	685a      	ldr	r2, [r3, #4]
   b9c82:	3201      	adds	r2, #1
   b9c84:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b9c86:	4770      	bx	lr

000b9c88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b9c88:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b9c8a:	4604      	mov	r4, r0
   b9c8c:	4668      	mov	r0, sp
   b9c8e:	460d      	mov	r5, r1
   b9c90:	f7ff fff1 	bl	b9c76 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b9c94:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b9c96:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b9c98:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b9c9a:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b9c9c:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b9c9e:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b9ca0:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   b9ca2:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b9ca4:	f7fe fa81 	bl	b81aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b9ca8:	b135      	cbz	r5, b9cb8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b9caa:	1d28      	adds	r0, r5, #4
   b9cac:	f7fe fa7d 	bl	b81aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9cb0:	2108      	movs	r1, #8
   b9cb2:	4628      	mov	r0, r5
   b9cb4:	f7fa f9f3 	bl	b409e <_ZdlPvj>
        return p;
    }
   b9cb8:	4620      	mov	r0, r4
   b9cba:	b003      	add	sp, #12
   b9cbc:	bd30      	pop	{r4, r5, pc}

000b9cbe <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b9cbe:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b9cc0:	b510      	push	{r4, lr}
      if (_M_empty())
   b9cc2:	b90a      	cbnz	r2, b9cc8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b9cc4:	f001 f9b7 	bl	bb036 <_ZSt25__throw_bad_function_callv>
    }
   b9cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b9ccc:	68c3      	ldr	r3, [r0, #12]
   b9cce:	4718      	bx	r3

000b9cd0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b9cd0:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b9cd2:	6800      	ldr	r0, [r0, #0]
   b9cd4:	f100 0110 	add.w	r1, r0, #16
   b9cd8:	f7ff fff1 	bl	b9cbe <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b9cdc:	bd08      	pop	{r3, pc}

000b9cde <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b9cde:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b9ce0:	b510      	push	{r4, lr}
      if (_M_empty())
   b9ce2:	b90a      	cbnz	r2, b9ce8 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b9ce4:	f001 f9a7 	bl	bb036 <_ZSt25__throw_bad_function_callv>
    }
   b9ce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b9cec:	68c3      	ldr	r3, [r0, #12]
   b9cee:	4718      	bx	r3

000b9cf0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b9cf0:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b9cf2:	6800      	ldr	r0, [r0, #0]
   b9cf4:	f100 0110 	add.w	r1, r0, #16
   b9cf8:	f7ff fff1 	bl	b9cde <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b9cfc:	bd08      	pop	{r3, pc}
	...

000b9d00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b9d00:	b538      	push	{r3, r4, r5, lr}
   b9d02:	2300      	movs	r3, #0
   b9d04:	4604      	mov	r4, r0
   b9d06:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b9d08:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b9d0a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b9d0c:	f7fa f9c3 	bl	b4096 <_Znwj>
   b9d10:	b128      	cbz	r0, b9d1e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b9d12:	2301      	movs	r3, #1
   b9d14:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b9d18:	4b02      	ldr	r3, [pc, #8]	; (b9d24 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b9d1a:	6003      	str	r3, [r0, #0]
   b9d1c:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b9d1e:	6020      	str	r0, [r4, #0]
	}
   b9d20:	4620      	mov	r0, r4
   b9d22:	bd38      	pop	{r3, r4, r5, pc}
   b9d24:	000be64c 	.word	0x000be64c

000b9d28 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b9d28:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b9d2a:	2300      	movs	r3, #0
   b9d2c:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b9d2e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b9d30:	4604      	mov	r4, r0
   b9d32:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b9d34:	b12b      	cbz	r3, b9d42 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b9d36:	2202      	movs	r2, #2
   b9d38:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b9d3a:	68eb      	ldr	r3, [r5, #12]
   b9d3c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b9d3e:	68ab      	ldr	r3, [r5, #8]
   b9d40:	60a3      	str	r3, [r4, #8]
    }
   b9d42:	4620      	mov	r0, r4
   b9d44:	bd38      	pop	{r3, r4, r5, pc}
	...

000b9d48 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b9d48:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9d4a:	b089      	sub	sp, #36	; 0x24
      { return _M_ptr; }
   b9d4c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b9d4e:	4668      	mov	r0, sp
   b9d50:	f7ff ff5a 	bl	b9c08 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b9d54:	f04f 0302 	mov.w	r3, #2
   b9d58:	e8d4 2f4f 	ldrexb	r2, [r4]
   b9d5c:	2a00      	cmp	r2, #0
   b9d5e:	d103      	bne.n	b9d68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b9d60:	e8c4 3f41 	strexb	r1, r3, [r4]
   b9d64:	2900      	cmp	r1, #0
   b9d66:	d1f7      	bne.n	b9d58 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b9d68:	d125      	bne.n	b9db6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b9d6a:	f104 050c 	add.w	r5, r4, #12
   b9d6e:	4669      	mov	r1, sp
   b9d70:	4628      	mov	r0, r5
   b9d72:	f7ff ff49 	bl	b9c08 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b9d76:	f3bf 8f5b 	dmb	ish
   b9d7a:	2301      	movs	r3, #1
   b9d7c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b9d7e:	2000      	movs	r0, #0
   b9d80:	f104 0308 	add.w	r3, r4, #8
   b9d84:	f3bf 8f5b 	dmb	ish
   b9d88:	e853 6f00 	ldrex	r6, [r3]
   b9d8c:	e843 0200 	strex	r2, r0, [r3]
   b9d90:	2a00      	cmp	r2, #0
   b9d92:	d1f9      	bne.n	b9d88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b9d94:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b9d98:	b16e      	cbz	r6, b9db6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b9d9a:	f7fd fa7f 	bl	b729c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b9d9e:	b178      	cbz	r0, b9dc0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b9da0:	4629      	mov	r1, r5
   b9da2:	4630      	mov	r0, r6
   b9da4:	f7ff ff8b 	bl	b9cbe <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b9da8:	4630      	mov	r0, r6
   b9daa:	f7fa fa6d 	bl	b4288 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b9dae:	2110      	movs	r1, #16
   b9db0:	4630      	mov	r0, r6
   b9db2:	f7fa f974 	bl	b409e <_ZdlPvj>
        p_->setError(std::move(error));
   b9db6:	4668      	mov	r0, sp
   b9db8:	f7ff ff33 	bl	b9c22 <_ZN8particle5ErrorD1Ev>
    }
   b9dbc:	b009      	add	sp, #36	; 0x24
   b9dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b9dc0:	4631      	mov	r1, r6
   b9dc2:	a802      	add	r0, sp, #8
   b9dc4:	f7ff ffb0 	bl	b9d28 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b9dc8:	68e0      	ldr	r0, [r4, #12]
   b9dca:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b9dce:	b108      	cbz	r0, b9dd4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b9dd0:	f001 ffc8 	bl	bbd64 <strdup>
        type_(type) {
   b9dd4:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b9dd6:	2010      	movs	r0, #16
   b9dd8:	f8ad 501c 	strh.w	r5, [sp, #28]
   b9ddc:	f7fa f95b 	bl	b4096 <_Znwj>
   b9de0:	4605      	mov	r5, r0
   b9de2:	b1e8      	cbz	r0, b9e20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b9de4:	2700      	movs	r7, #0
   b9de6:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b9de8:	2018      	movs	r0, #24
   b9dea:	f7fa f954 	bl	b4096 <_Znwj>
   b9dee:	4604      	mov	r4, r0
   b9df0:	b188      	cbz	r0, b9e16 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b9df2:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b9df4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b9df6:	a802      	add	r0, sp, #8
   b9df8:	f7ff f8b0 	bl	b8f5c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9dfc:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b9dfe:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b9e00:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b9e02:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b9e04:	9204      	str	r2, [sp, #16]
   b9e06:	a906      	add	r1, sp, #24
   b9e08:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b9e0a:	60e3      	str	r3, [r4, #12]
   b9e0c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b9e10:	9205      	str	r2, [sp, #20]
   b9e12:	f7ff fef9 	bl	b9c08 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b9e16:	4b08      	ldr	r3, [pc, #32]	; (b9e38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b9e18:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b9e1a:	4b08      	ldr	r3, [pc, #32]	; (b9e3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b9e1c:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b9e1e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b9e20:	a806      	add	r0, sp, #24
   b9e22:	f7ff fefe 	bl	b9c22 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b9e26:	a802      	add	r0, sp, #8
   b9e28:	f7fa fa2e 	bl	b4288 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b9e2c:	2200      	movs	r2, #0
   b9e2e:	4629      	mov	r1, r5
   b9e30:	4803      	ldr	r0, [pc, #12]	; (b9e40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b9e32:	f7fd fa3b 	bl	b72ac <application_thread_invoke>
   b9e36:	e7b7      	b.n	b9da8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b9e38:	000b9cd1 	.word	0x000b9cd1
   b9e3c:	000b9f55 	.word	0x000b9f55
   b9e40:	000b74eb 	.word	0x000b74eb

000b9e44 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b9e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b9e48:	b08b      	sub	sp, #44	; 0x2c
   b9e4a:	4605      	mov	r5, r0
   b9e4c:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b9e50:	460f      	mov	r7, r1
   b9e52:	4690      	mov	r8, r2
   b9e54:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b9e56:	f7fd fa55 	bl	b7304 <spark_cloud_flag_connected>
   b9e5a:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b9e5c:	4683      	mov	fp, r0
   b9e5e:	bb38      	cbnz	r0, b9eb0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b9e60:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b9e64:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b9e66:	a905      	add	r1, sp, #20
   b9e68:	4630      	mov	r0, r6
   b9e6a:	f8ad 3018 	strh.w	r3, [sp, #24]
   b9e6e:	f7ff fecb 	bl	b9c08 <_ZN8particle5ErrorC1EOS0_>
   b9e72:	2014      	movs	r0, #20
   b9e74:	f7fa f90f 	bl	b4096 <_Znwj>
   b9e78:	4604      	mov	r4, r0
   b9e7a:	b148      	cbz	r0, b9e90 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b9e7c:	2302      	movs	r3, #2
   b9e7e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b9e80:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b9e82:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b9e86:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b9e88:	4631      	mov	r1, r6
   b9e8a:	300c      	adds	r0, #12
   b9e8c:	f7ff febc 	bl	b9c08 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b9e90:	4628      	mov	r0, r5
	: __shared_count(__p)
   b9e92:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b9e94:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b9e98:	f7ff ff32 	bl	b9d00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b9e9c:	4630      	mov	r0, r6
   b9e9e:	f7ff fec0 	bl	b9c22 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b9ea2:	a805      	add	r0, sp, #20
   b9ea4:	f7ff febd 	bl	b9c22 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   b9ea8:	4628      	mov	r0, r5
   b9eaa:	b00b      	add	sp, #44	; 0x2c
   b9eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b9eb0:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b9eb2:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b9eb4:	2014      	movs	r0, #20
   b9eb6:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b9eba:	9307      	str	r3, [sp, #28]
   b9ebc:	f7fa f8eb 	bl	b4096 <_Znwj>
   b9ec0:	4601      	mov	r1, r0
   b9ec2:	b118      	cbz	r0, b9ecc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b9ec4:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b9ec8:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b9eca:	7044      	strb	r4, [r0, #1]
   b9ecc:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b9ece:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b9ed0:	f7ff ff16 	bl	b9d00 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b9ed4:	4b1e      	ldr	r3, [pc, #120]	; (b9f50 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b9ed6:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b9ed8:	2008      	movs	r0, #8
   b9eda:	f7fa f8dc 	bl	b4096 <_Znwj>
   b9ede:	4604      	mov	r4, r0
   b9ee0:	b110      	cbz	r0, b9ee8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b9ee2:	a903      	add	r1, sp, #12
   b9ee4:	f7ff fec7 	bl	b9c76 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b9ee8:	9600      	str	r6, [sp, #0]
   b9eea:	fa5f f38a 	uxtb.w	r3, sl
   b9eee:	464a      	mov	r2, r9
   b9ef0:	4641      	mov	r1, r8
   b9ef2:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b9ef4:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b9ef6:	f7fd fa0d 	bl	b7314 <spark_send_event>
   b9efa:	b9b8      	cbnz	r0, b9f2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b9efc:	9b03      	ldr	r3, [sp, #12]
   b9efe:	785b      	ldrb	r3, [r3, #1]
   b9f00:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b9f04:	b993      	cbnz	r3, b9f2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b9f06:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b9f0a:	a905      	add	r1, sp, #20
   b9f0c:	a803      	add	r0, sp, #12
   b9f0e:	9205      	str	r2, [sp, #20]
   b9f10:	f8ad 3018 	strh.w	r3, [sp, #24]
   b9f14:	f7ff ff18 	bl	b9d48 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b9f18:	a805      	add	r0, sp, #20
   b9f1a:	f7ff fe82 	bl	b9c22 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b9f1e:	a805      	add	r0, sp, #20
   b9f20:	9909      	ldr	r1, [sp, #36]	; 0x24
   b9f22:	f7ff feb1 	bl	b9c88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b9f26:	a806      	add	r0, sp, #24
   b9f28:	f7fe f93f 	bl	b81aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9f2c:	a903      	add	r1, sp, #12
   b9f2e:	a805      	add	r0, sp, #20
   b9f30:	f7ff fea1 	bl	b9c76 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b9f34:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b9f36:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b9f38:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b9f3a:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b9f3c:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b9f3e:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b9f40:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b9f42:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b9f44:	f7fe f931 	bl	b81aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b9f48:	a804      	add	r0, sp, #16
   b9f4a:	f7fe f92e 	bl	b81aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b9f4e:	e7ab      	b.n	b9ea8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b9f50:	000b9fd1 	.word	0x000b9fd1

000b9f54 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b9f54:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b9f56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b9f58:	4605      	mov	r5, r0
	switch (__op)
   b9f5a:	d103      	bne.n	b9f64 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b9f5c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b9f5e:	6003      	str	r3, [r0, #0]
      }
   b9f60:	2000      	movs	r0, #0
   b9f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b9f64:	2a02      	cmp	r2, #2
   b9f66:	d010      	beq.n	b9f8a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b9f68:	2a03      	cmp	r2, #3
   b9f6a:	d1f9      	bne.n	b9f60 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b9f6c:	6804      	ldr	r4, [r0, #0]
   b9f6e:	2c00      	cmp	r4, #0
   b9f70:	d0f6      	beq.n	b9f60 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b9f72:	f104 0010 	add.w	r0, r4, #16
   b9f76:	f7ff fe54 	bl	b9c22 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b9f7a:	4620      	mov	r0, r4
   b9f7c:	f7fa f984 	bl	b4288 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b9f80:	2118      	movs	r1, #24
   b9f82:	4620      	mov	r0, r4
   b9f84:	f7fa f88b 	bl	b409e <_ZdlPvj>
   b9f88:	e7ea      	b.n	b9f60 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b9f8a:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b9f8c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b9f8e:	f7fa f882 	bl	b4096 <_Znwj>
   b9f92:	4604      	mov	r4, r0
   b9f94:	b150      	cbz	r0, b9fac <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
      _Bind(const _Bind&) = default;
   b9f96:	4631      	mov	r1, r6
   b9f98:	f7ff fec6 	bl	b9d28 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b9f9c:	6930      	ldr	r0, [r6, #16]
   b9f9e:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b9fa2:	b108      	cbz	r0, b9fa8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b9fa4:	f001 fede 	bl	bbd64 <strdup>
        type_(type) {
   b9fa8:	6120      	str	r0, [r4, #16]
   b9faa:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b9fac:	602c      	str	r4, [r5, #0]
	}
   b9fae:	e7d7      	b.n	b9f60 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b9fb0 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b9fb0:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b9fb2:	2300      	movs	r3, #0
   b9fb4:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b9fb6:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b9fb8:	4604      	mov	r4, r0
   b9fba:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b9fbc:	b12b      	cbz	r3, b9fca <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b9fbe:	2202      	movs	r2, #2
   b9fc0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b9fc2:	68eb      	ldr	r3, [r5, #12]
   b9fc4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b9fc6:	68ab      	ldr	r3, [r5, #8]
   b9fc8:	60a3      	str	r3, [r4, #8]
    }
   b9fca:	4620      	mov	r0, r4
   b9fcc:	bd38      	pop	{r3, r4, r5, pc}
	...

000b9fd0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b9fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   b9fd2:	b089      	sub	sp, #36	; 0x24
   b9fd4:	4604      	mov	r4, r0
   b9fd6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b9fd8:	a801      	add	r0, sp, #4
   b9fda:	4611      	mov	r1, r2
   b9fdc:	f7ff fe54 	bl	b9c88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b9fe0:	b1a4      	cbz	r4, ba00c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b9fe2:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b9fe4:	b11d      	cbz	r5, b9fee <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b9fe6:	4628      	mov	r0, r5
   b9fe8:	f001 febc 	bl	bbd64 <strdup>
   b9fec:	4605      	mov	r5, r0
   b9fee:	a801      	add	r0, sp, #4
   b9ff0:	a903      	add	r1, sp, #12
        type_(type) {
   b9ff2:	9503      	str	r5, [sp, #12]
   b9ff4:	f8ad 4010 	strh.w	r4, [sp, #16]
   b9ff8:	f7ff fea6 	bl	b9d48 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b9ffc:	a803      	add	r0, sp, #12
   b9ffe:	f7ff fe10 	bl	b9c22 <_ZN8particle5ErrorD1Ev>
   ba002:	a802      	add	r0, sp, #8
   ba004:	f7fe f8d1 	bl	b81aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   ba008:	b009      	add	sp, #36	; 0x24
   ba00a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   ba00c:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   ba00e:	2301      	movs	r3, #1
   ba010:	e8d5 2f4f 	ldrexb	r2, [r5]
   ba014:	2a00      	cmp	r2, #0
   ba016:	d103      	bne.n	ba020 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   ba018:	e8c5 3f41 	strexb	r1, r3, [r5]
   ba01c:	2900      	cmp	r1, #0
   ba01e:	d1f7      	bne.n	ba010 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   ba020:	d1ef      	bne.n	ba002 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   ba022:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   ba024:	f3bf 8f5b 	dmb	ish
   ba028:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   ba02a:	1d2b      	adds	r3, r5, #4
   ba02c:	f3bf 8f5b 	dmb	ish
   ba030:	e853 6f00 	ldrex	r6, [r3]
   ba034:	e843 4200 	strex	r2, r4, [r3]
   ba038:	2a00      	cmp	r2, #0
   ba03a:	d1f9      	bne.n	ba030 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   ba03c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   ba040:	2e00      	cmp	r6, #0
   ba042:	d0de      	beq.n	ba002 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   ba044:	4620      	mov	r0, r4
   ba046:	f7fd f929 	bl	b729c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   ba04a:	4607      	mov	r7, r0
   ba04c:	b160      	cbz	r0, ba068 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   ba04e:	f105 010c 	add.w	r1, r5, #12
   ba052:	4630      	mov	r0, r6
   ba054:	f7ff fe43 	bl	b9cde <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   ba058:	4630      	mov	r0, r6
   ba05a:	f7fa f915 	bl	b4288 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   ba05e:	2110      	movs	r1, #16
   ba060:	4630      	mov	r0, r6
   ba062:	f7fa f81c 	bl	b409e <_ZdlPvj>
   ba066:	e7cc      	b.n	ba002 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   ba068:	4631      	mov	r1, r6
   ba06a:	a803      	add	r0, sp, #12
   ba06c:	f7ff ffa0 	bl	b9fb0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   ba070:	7b2b      	ldrb	r3, [r5, #12]
   ba072:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   ba076:	2010      	movs	r0, #16
   ba078:	f7fa f80d 	bl	b4096 <_Znwj>
   ba07c:	4605      	mov	r5, r0
   ba07e:	b1d0      	cbz	r0, ba0b6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   ba080:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba082:	2014      	movs	r0, #20
   ba084:	f7fa f807 	bl	b4096 <_Znwj>
   ba088:	4604      	mov	r4, r0
   ba08a:	b178      	cbz	r0, ba0ac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   ba08c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   ba08e:	4601      	mov	r1, r0
   ba090:	a803      	add	r0, sp, #12
   ba092:	f7fe ff63 	bl	b8f5c <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba096:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   ba098:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   ba09a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   ba09c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   ba09e:	9205      	str	r2, [sp, #20]
   ba0a0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   ba0a2:	60e3      	str	r3, [r4, #12]
   ba0a4:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   ba0a8:	9206      	str	r2, [sp, #24]
   ba0aa:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   ba0ac:	4b06      	ldr	r3, [pc, #24]	; (ba0c8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   ba0ae:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   ba0b0:	4b06      	ldr	r3, [pc, #24]	; (ba0cc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   ba0b2:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   ba0b4:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   ba0b6:	a803      	add	r0, sp, #12
   ba0b8:	f7fa f8e6 	bl	b4288 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   ba0bc:	2200      	movs	r2, #0
   ba0be:	4629      	mov	r1, r5
   ba0c0:	4803      	ldr	r0, [pc, #12]	; (ba0d0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   ba0c2:	f7fd f8f3 	bl	b72ac <application_thread_invoke>
   ba0c6:	e7c7      	b.n	ba058 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   ba0c8:	000b9cf1 	.word	0x000b9cf1
   ba0cc:	000ba0d5 	.word	0x000ba0d5
   ba0d0:	000b74eb 	.word	0x000b74eb

000ba0d4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   ba0d4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   ba0d6:	b570      	push	{r4, r5, r6, lr}
   ba0d8:	4604      	mov	r4, r0
	switch (__op)
   ba0da:	d103      	bne.n	ba0e4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   ba0dc:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   ba0de:	6003      	str	r3, [r0, #0]
      }
   ba0e0:	2000      	movs	r0, #0
   ba0e2:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   ba0e4:	2a02      	cmp	r2, #2
   ba0e6:	d00c      	beq.n	ba102 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   ba0e8:	2a03      	cmp	r2, #3
   ba0ea:	d1f9      	bne.n	ba0e0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   ba0ec:	6804      	ldr	r4, [r0, #0]
   ba0ee:	2c00      	cmp	r4, #0
   ba0f0:	d0f6      	beq.n	ba0e0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   ba0f2:	4620      	mov	r0, r4
   ba0f4:	f7fa f8c8 	bl	b4288 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   ba0f8:	2114      	movs	r1, #20
   ba0fa:	4620      	mov	r0, r4
   ba0fc:	f7f9 ffcf 	bl	b409e <_ZdlPvj>
   ba100:	e7ee      	b.n	ba0e0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   ba102:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   ba104:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   ba106:	f7f9 ffc6 	bl	b4096 <_Znwj>
   ba10a:	4605      	mov	r5, r0
   ba10c:	b120      	cbz	r0, ba118 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   ba10e:	4631      	mov	r1, r6
   ba110:	f7ff ff4e 	bl	b9fb0 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   ba114:	7c33      	ldrb	r3, [r6, #16]
   ba116:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   ba118:	6025      	str	r5, [r4, #0]
	}
   ba11a:	e7e1      	b.n	ba0e0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000ba11c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   ba11c:	2200      	movs	r2, #0
   ba11e:	6840      	ldr	r0, [r0, #4]
   ba120:	4611      	mov	r1, r2
   ba122:	f7fd b94f 	b.w	b73c4 <network_listening>

000ba126 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   ba126:	2200      	movs	r2, #0
   ba128:	6840      	ldr	r0, [r0, #4]
   ba12a:	4611      	mov	r1, r2
   ba12c:	f7fd b95a 	b.w	b73e4 <network_get_listen_timeout>

000ba130 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   ba130:	6840      	ldr	r0, [r0, #4]
   ba132:	2200      	movs	r2, #0
   ba134:	f7fd b94e 	b.w	b73d4 <network_set_listen_timeout>

000ba138 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   ba138:	6840      	ldr	r0, [r0, #4]
   ba13a:	2200      	movs	r2, #0
   ba13c:	f081 0101 	eor.w	r1, r1, #1
   ba140:	f7fd b938 	b.w	b73b4 <network_listen>

000ba144 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   ba144:	2300      	movs	r3, #0
   ba146:	6840      	ldr	r0, [r0, #4]
   ba148:	461a      	mov	r2, r3
   ba14a:	4619      	mov	r1, r3
   ba14c:	f7fd b92a 	b.w	b73a4 <network_off>

000ba150 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   ba150:	2300      	movs	r3, #0
   ba152:	6840      	ldr	r0, [r0, #4]
   ba154:	461a      	mov	r2, r3
   ba156:	4619      	mov	r1, r3
   ba158:	f7fd b91c 	b.w	b7394 <network_on>

000ba15c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   ba15c:	2200      	movs	r2, #0
   ba15e:	6840      	ldr	r0, [r0, #4]
   ba160:	4611      	mov	r1, r2
   ba162:	f7fd b90f 	b.w	b7384 <network_ready>

000ba166 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   ba166:	2200      	movs	r2, #0
   ba168:	6840      	ldr	r0, [r0, #4]
   ba16a:	4611      	mov	r1, r2
   ba16c:	f7fd b8fa 	b.w	b7364 <network_connecting>

000ba170 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   ba170:	6840      	ldr	r0, [r0, #4]
   ba172:	2200      	movs	r2, #0
   ba174:	2102      	movs	r1, #2
   ba176:	f7fd b8fd 	b.w	b7374 <network_disconnect>

000ba17a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   ba17a:	2300      	movs	r3, #0
   ba17c:	6840      	ldr	r0, [r0, #4]
   ba17e:	461a      	mov	r2, r3
   ba180:	f7fd b8e8 	b.w	b7354 <network_connect>

000ba184 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   ba184:	4b02      	ldr	r3, [pc, #8]	; (ba190 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   ba186:	2203      	movs	r2, #3
   ba188:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   ba18a:	4a02      	ldr	r2, [pc, #8]	; (ba194 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   ba18c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   ba18e:	4770      	bx	lr
   ba190:	2003e68c 	.word	0x2003e68c
   ba194:	000be668 	.word	0x000be668

000ba198 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   ba198:	4770      	bx	lr

000ba19a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   ba19a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba19c:	4606      	mov	r6, r0
   ba19e:	4615      	mov	r5, r2
   ba1a0:	460c      	mov	r4, r1
   ba1a2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   ba1a4:	42bc      	cmp	r4, r7
   ba1a6:	d006      	beq.n	ba1b6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   ba1a8:	6833      	ldr	r3, [r6, #0]
   ba1aa:	f814 1b01 	ldrb.w	r1, [r4], #1
   ba1ae:	689b      	ldr	r3, [r3, #8]
   ba1b0:	4630      	mov	r0, r6
   ba1b2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   ba1b4:	e7f6      	b.n	ba1a4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   ba1b6:	4628      	mov	r0, r5
   ba1b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba1ba <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   ba1ba:	7c00      	ldrb	r0, [r0, #16]
   ba1bc:	2200      	movs	r2, #0
   ba1be:	f7fc bf2d 	b.w	b701c <hal_i2c_write>

000ba1c2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   ba1c2:	7c00      	ldrb	r0, [r0, #16]
   ba1c4:	2100      	movs	r1, #0
   ba1c6:	f7fc bf31 	b.w	b702c <hal_i2c_available>

000ba1ca <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   ba1ca:	7c00      	ldrb	r0, [r0, #16]
   ba1cc:	2100      	movs	r1, #0
   ba1ce:	f7fc bf35 	b.w	b703c <hal_i2c_read>

000ba1d2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   ba1d2:	7c00      	ldrb	r0, [r0, #16]
   ba1d4:	2100      	movs	r1, #0
   ba1d6:	f7fc bf39 	b.w	b704c <hal_i2c_peek>

000ba1da <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   ba1da:	7c00      	ldrb	r0, [r0, #16]
   ba1dc:	2100      	movs	r1, #0
   ba1de:	f7fc bf3d 	b.w	b705c <hal_i2c_flush>

000ba1e2 <_ZN7TwoWireD0Ev>:
   ba1e2:	b510      	push	{r4, lr}
   ba1e4:	2114      	movs	r1, #20
   ba1e6:	4604      	mov	r4, r0
   ba1e8:	f7f9 ff59 	bl	b409e <_ZdlPvj>
   ba1ec:	4620      	mov	r0, r4
   ba1ee:	bd10      	pop	{r4, pc}

000ba1f0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   ba1f0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   ba1f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   ba1f6:	4604      	mov	r4, r0
   ba1f8:	4608      	mov	r0, r1
   ba1fa:	2100      	movs	r1, #0
   ba1fc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   ba200:	4b03      	ldr	r3, [pc, #12]	; (ba210 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   ba202:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   ba204:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   ba206:	4611      	mov	r1, r2
   ba208:	f7fc ff38 	bl	b707c <hal_i2c_init>
}
   ba20c:	4620      	mov	r0, r4
   ba20e:	bd10      	pop	{r4, pc}
   ba210:	000be6a4 	.word	0x000be6a4

000ba214 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   ba214:	4770      	bx	lr

000ba216 <_ZN9IPAddressD0Ev>:
   ba216:	b510      	push	{r4, lr}
   ba218:	2118      	movs	r1, #24
   ba21a:	4604      	mov	r4, r0
   ba21c:	f7f9 ff3f 	bl	b409e <_ZdlPvj>
   ba220:	4620      	mov	r0, r4
   ba222:	bd10      	pop	{r4, pc}

000ba224 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   ba224:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   ba226:	7d03      	ldrb	r3, [r0, #20]
   ba228:	2b06      	cmp	r3, #6
{
   ba22a:	b08d      	sub	sp, #52	; 0x34
   ba22c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   ba22e:	f100 0704 	add.w	r7, r0, #4
   ba232:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   ba236:	d012      	beq.n	ba25e <_ZNK9IPAddress7printToER5Print+0x3a>
   ba238:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   ba23c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   ba240:	220a      	movs	r2, #10
   ba242:	4630      	mov	r0, r6
   ba244:	f000 f94b 	bl	ba4de <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   ba248:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   ba24a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   ba24c:	d019      	beq.n	ba282 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   ba24e:	2c00      	cmp	r4, #0
   ba250:	d0f4      	beq.n	ba23c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   ba252:	212e      	movs	r1, #46	; 0x2e
   ba254:	4630      	mov	r0, r6
   ba256:	f000 f929 	bl	ba4ac <_ZN5Print5printEc>
   ba25a:	4404      	add	r4, r0
   ba25c:	e7ee      	b.n	ba23c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   ba25e:	232f      	movs	r3, #47	; 0x2f
   ba260:	466a      	mov	r2, sp
   ba262:	4639      	mov	r1, r7
   ba264:	200a      	movs	r0, #10
		buf[0] = 0;
   ba266:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   ba26a:	f7fc ff0f 	bl	b708c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   ba26e:	4668      	mov	r0, sp
   ba270:	f001 fd95 	bl	bbd9e <strlen>
   ba274:	6833      	ldr	r3, [r6, #0]
   ba276:	4602      	mov	r2, r0
   ba278:	68db      	ldr	r3, [r3, #12]
   ba27a:	4669      	mov	r1, sp
   ba27c:	4630      	mov	r0, r6
   ba27e:	4798      	blx	r3
   ba280:	4604      	mov	r4, r0
    }
    return n;
}
   ba282:	4620      	mov	r0, r4
   ba284:	b00d      	add	sp, #52	; 0x34
   ba286:	bdf0      	pop	{r4, r5, r6, r7, pc}

000ba288 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   ba288:	b510      	push	{r4, lr}
   ba28a:	4b05      	ldr	r3, [pc, #20]	; (ba2a0 <_ZN9IPAddressC1Ev+0x18>)
   ba28c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   ba28e:	2211      	movs	r2, #17
   ba290:	f840 3b04 	str.w	r3, [r0], #4
   ba294:	2100      	movs	r1, #0
   ba296:	f001 fd0c 	bl	bbcb2 <memset>
}
   ba29a:	4620      	mov	r0, r4
   ba29c:	bd10      	pop	{r4, pc}
   ba29e:	bf00      	nop
   ba2a0:	000be6cc 	.word	0x000be6cc

000ba2a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   ba2a4:	4603      	mov	r3, r0
   ba2a6:	4a07      	ldr	r2, [pc, #28]	; (ba2c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   ba2a8:	b510      	push	{r4, lr}
   ba2aa:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   ba2ae:	f101 0210 	add.w	r2, r1, #16
   ba2b2:	f851 4b04 	ldr.w	r4, [r1], #4
   ba2b6:	f843 4b04 	str.w	r4, [r3], #4
   ba2ba:	4291      	cmp	r1, r2
   ba2bc:	d1f9      	bne.n	ba2b2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   ba2be:	780a      	ldrb	r2, [r1, #0]
   ba2c0:	701a      	strb	r2, [r3, #0]
}
   ba2c2:	bd10      	pop	{r4, pc}
   ba2c4:	000be6cc 	.word	0x000be6cc

000ba2c8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   ba2c8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   ba2ca:	f89d 4008 	ldrb.w	r4, [sp, #8]
   ba2ce:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   ba2d2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   ba2d6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   ba2da:	2304      	movs	r3, #4
   ba2dc:	6041      	str	r1, [r0, #4]
   ba2de:	7503      	strb	r3, [r0, #20]
}
   ba2e0:	bd10      	pop	{r4, pc}
	...

000ba2e4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   ba2e4:	b507      	push	{r0, r1, r2, lr}
   ba2e6:	4b06      	ldr	r3, [pc, #24]	; (ba300 <_ZN9IPAddressC1EPKh+0x1c>)
   ba2e8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   ba2ea:	78cb      	ldrb	r3, [r1, #3]
   ba2ec:	9300      	str	r3, [sp, #0]
   ba2ee:	788b      	ldrb	r3, [r1, #2]
   ba2f0:	784a      	ldrb	r2, [r1, #1]
   ba2f2:	7809      	ldrb	r1, [r1, #0]
   ba2f4:	f7ff ffe8 	bl	ba2c8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   ba2f8:	b003      	add	sp, #12
   ba2fa:	f85d fb04 	ldr.w	pc, [sp], #4
   ba2fe:	bf00      	nop
   ba300:	000be6cc 	.word	0x000be6cc

000ba304 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   ba304:	4b01      	ldr	r3, [pc, #4]	; (ba30c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   ba306:	4a02      	ldr	r2, [pc, #8]	; (ba310 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   ba308:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   ba30a:	4770      	bx	lr
   ba30c:	2003e694 	.word	0x2003e694
   ba310:	000be6d8 	.word	0x000be6d8

000ba314 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   ba314:	2300      	movs	r3, #0
   ba316:	6840      	ldr	r0, [r0, #4]
   ba318:	461a      	mov	r2, r3
   ba31a:	f7fd b81b 	b.w	b7354 <network_connect>

000ba31e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   ba31e:	6840      	ldr	r0, [r0, #4]
   ba320:	2200      	movs	r2, #0
   ba322:	2102      	movs	r1, #2
   ba324:	f7fd b826 	b.w	b7374 <network_disconnect>

000ba328 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   ba328:	2200      	movs	r2, #0
   ba32a:	6840      	ldr	r0, [r0, #4]
   ba32c:	4611      	mov	r1, r2
   ba32e:	f7fd b819 	b.w	b7364 <network_connecting>

000ba332 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   ba332:	2200      	movs	r2, #0
   ba334:	6840      	ldr	r0, [r0, #4]
   ba336:	4611      	mov	r1, r2
   ba338:	f7fd b824 	b.w	b7384 <network_ready>

000ba33c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   ba33c:	2300      	movs	r3, #0
   ba33e:	6840      	ldr	r0, [r0, #4]
   ba340:	461a      	mov	r2, r3
   ba342:	4619      	mov	r1, r3
   ba344:	f7fd b826 	b.w	b7394 <network_on>

000ba348 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   ba348:	2300      	movs	r3, #0
   ba34a:	6840      	ldr	r0, [r0, #4]
   ba34c:	461a      	mov	r2, r3
   ba34e:	4619      	mov	r1, r3
   ba350:	f7fd b828 	b.w	b73a4 <network_off>

000ba354 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   ba354:	6840      	ldr	r0, [r0, #4]
   ba356:	2100      	movs	r1, #0
   ba358:	f7fd b84c 	b.w	b73f4 <network_is_on>

000ba35c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   ba35c:	6840      	ldr	r0, [r0, #4]
   ba35e:	2100      	movs	r1, #0
   ba360:	f7fd b850 	b.w	b7404 <network_is_off>

000ba364 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   ba364:	6840      	ldr	r0, [r0, #4]
   ba366:	2200      	movs	r2, #0
   ba368:	f081 0101 	eor.w	r1, r1, #1
   ba36c:	f7fd b822 	b.w	b73b4 <network_listen>

000ba370 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   ba370:	6840      	ldr	r0, [r0, #4]
   ba372:	2200      	movs	r2, #0
   ba374:	f7fd b82e 	b.w	b73d4 <network_set_listen_timeout>

000ba378 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   ba378:	2200      	movs	r2, #0
   ba37a:	6840      	ldr	r0, [r0, #4]
   ba37c:	4611      	mov	r1, r2
   ba37e:	f7fd b831 	b.w	b73e4 <network_get_listen_timeout>

000ba382 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   ba382:	2200      	movs	r2, #0
   ba384:	6840      	ldr	r0, [r0, #4]
   ba386:	4611      	mov	r1, r2
   ba388:	f7fd b81c 	b.w	b73c4 <network_listening>

000ba38c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   ba38c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba390:	b095      	sub	sp, #84	; 0x54
   ba392:	4614      	mov	r4, r2
   ba394:	460d      	mov	r5, r1
   ba396:	4607      	mov	r7, r0
    IPAddress addr;
   ba398:	f7ff ff76 	bl	ba288 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   ba39c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   ba39e:	221c      	movs	r2, #28
   ba3a0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   ba3a2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   ba3a4:	f001 fc85 	bl	bbcb2 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   ba3a8:	2340      	movs	r3, #64	; 0x40
   ba3aa:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   ba3ac:	4620      	mov	r0, r4
   ba3ae:	466b      	mov	r3, sp
   ba3b0:	aa0c      	add	r2, sp, #48	; 0x30
   ba3b2:	2100      	movs	r1, #0
   ba3b4:	f7fc fe7a 	bl	b70ac <netdb_getaddrinfo>
    if (!r) {
   ba3b8:	4604      	mov	r4, r0
   ba3ba:	2800      	cmp	r0, #0
   ba3bc:	d14b      	bne.n	ba456 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   ba3be:	4602      	mov	r2, r0
   ba3c0:	2101      	movs	r1, #1
   ba3c2:	6868      	ldr	r0, [r5, #4]
   ba3c4:	f7fc ffde 	bl	b7384 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba3c8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   ba3ca:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba3cc:	4622      	mov	r2, r4
   ba3ce:	6868      	ldr	r0, [r5, #4]
   ba3d0:	f7fc ffd8 	bl	b7384 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba3d4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   ba3d6:	4681      	mov	r9, r0
        bool ok = false;
   ba3d8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba3da:	2e00      	cmp	r6, #0
   ba3dc:	d03b      	beq.n	ba456 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   ba3de:	2900      	cmp	r1, #0
   ba3e0:	d139      	bne.n	ba456 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   ba3e2:	6873      	ldr	r3, [r6, #4]
   ba3e4:	2b02      	cmp	r3, #2
   ba3e6:	d003      	beq.n	ba3f0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   ba3e8:	2b0a      	cmp	r3, #10
   ba3ea:	d011      	beq.n	ba410 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   ba3ec:	69f6      	ldr	r6, [r6, #28]
   ba3ee:	e7f4      	b.n	ba3da <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   ba3f0:	f1b8 0f00 	cmp.w	r8, #0
   ba3f4:	d0fa      	beq.n	ba3ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   ba3f6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   ba3f8:	a806      	add	r0, sp, #24
   ba3fa:	3104      	adds	r1, #4
class IPAddress : public Printable {
   ba3fc:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   ba3fe:	f7ff ff71 	bl	ba2e4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   ba402:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba404:	1d3c      	adds	r4, r7, #4
   ba406:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba408:	682b      	ldr	r3, [r5, #0]
   ba40a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   ba40c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   ba40e:	e7ed      	b.n	ba3ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   ba410:	f1b9 0f00 	cmp.w	r9, #0
   ba414:	d0ea      	beq.n	ba3ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   ba416:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   ba418:	2210      	movs	r2, #16
   ba41a:	a801      	add	r0, sp, #4
   ba41c:	f001 fc49 	bl	bbcb2 <memset>
                    a.v = 6;
   ba420:	2306      	movs	r3, #6
   ba422:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   ba426:	ad01      	add	r5, sp, #4
   ba428:	f104 0308 	add.w	r3, r4, #8
   ba42c:	3418      	adds	r4, #24
   ba42e:	6818      	ldr	r0, [r3, #0]
   ba430:	6859      	ldr	r1, [r3, #4]
   ba432:	462a      	mov	r2, r5
   ba434:	c203      	stmia	r2!, {r0, r1}
   ba436:	3308      	adds	r3, #8
   ba438:	42a3      	cmp	r3, r4
   ba43a:	4615      	mov	r5, r2
   ba43c:	d1f7      	bne.n	ba42e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   ba43e:	a901      	add	r1, sp, #4
   ba440:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   ba442:	ad07      	add	r5, sp, #28
   ba444:	f7ff ff2e 	bl	ba2a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   ba448:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   ba44a:	1d3c      	adds	r4, r7, #4
   ba44c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   ba44e:	682b      	ldr	r3, [r5, #0]
   ba450:	7023      	strb	r3, [r4, #0]
                    ok = true;
   ba452:	4649      	mov	r1, r9
   ba454:	e7ca      	b.n	ba3ec <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   ba456:	9800      	ldr	r0, [sp, #0]
   ba458:	f7fc fe20 	bl	b709c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   ba45c:	4638      	mov	r0, r7
   ba45e:	b015      	add	sp, #84	; 0x54
   ba460:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000ba464 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   ba464:	4b02      	ldr	r3, [pc, #8]	; (ba470 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   ba466:	4a03      	ldr	r2, [pc, #12]	; (ba474 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   ba468:	601a      	str	r2, [r3, #0]
   ba46a:	2200      	movs	r2, #0
   ba46c:	605a      	str	r2, [r3, #4]

} // spark
   ba46e:	4770      	bx	lr
   ba470:	2003e698 	.word	0x2003e698
   ba474:	000be6e4 	.word	0x000be6e4

000ba478 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   ba478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   ba47a:	4606      	mov	r6, r0
   ba47c:	460d      	mov	r5, r1
  size_t n = 0;
   ba47e:	188f      	adds	r7, r1, r2
   ba480:	2400      	movs	r4, #0
  while (size--) {
   ba482:	42bd      	cmp	r5, r7
   ba484:	d00c      	beq.n	ba4a0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   ba486:	6833      	ldr	r3, [r6, #0]
   ba488:	f815 1b01 	ldrb.w	r1, [r5], #1
   ba48c:	689b      	ldr	r3, [r3, #8]
   ba48e:	4630      	mov	r0, r6
   ba490:	4798      	blx	r3
     if (chunk>=0)
   ba492:	1e03      	subs	r3, r0, #0
   ba494:	db01      	blt.n	ba49a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   ba496:	441c      	add	r4, r3
  while (size--) {
   ba498:	e7f3      	b.n	ba482 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   ba49a:	2c00      	cmp	r4, #0
   ba49c:	bf08      	it	eq
   ba49e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   ba4a0:	4620      	mov	r0, r4
   ba4a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000ba4a4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   ba4a4:	b508      	push	{r3, lr}
  return write(str);
   ba4a6:	f7fb ffe5 	bl	b6474 <_ZN5Print5writeEPKc>
}
   ba4aa:	bd08      	pop	{r3, pc}

000ba4ac <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   ba4ac:	6803      	ldr	r3, [r0, #0]
   ba4ae:	689b      	ldr	r3, [r3, #8]
   ba4b0:	4718      	bx	r3

000ba4b2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   ba4b2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   ba4b4:	210d      	movs	r1, #13
{
   ba4b6:	4605      	mov	r5, r0
  size_t n = print('\r');
   ba4b8:	f7ff fff8 	bl	ba4ac <_ZN5Print5printEc>
  n += print('\n');
   ba4bc:	210a      	movs	r1, #10
  size_t n = print('\r');
   ba4be:	4604      	mov	r4, r0
  n += print('\n');
   ba4c0:	4628      	mov	r0, r5
   ba4c2:	f7ff fff3 	bl	ba4ac <_ZN5Print5printEc>
  return n;
}
   ba4c6:	4420      	add	r0, r4
   ba4c8:	bd38      	pop	{r3, r4, r5, pc}

000ba4ca <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   ba4ca:	b538      	push	{r3, r4, r5, lr}
   ba4cc:	4605      	mov	r5, r0
  return write(str);
   ba4ce:	f7fb ffd1 	bl	b6474 <_ZN5Print5writeEPKc>
   ba4d2:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   ba4d4:	4628      	mov	r0, r5
   ba4d6:	f7ff ffec 	bl	ba4b2 <_ZN5Print7printlnEv>
  return n;
}
   ba4da:	4420      	add	r0, r4
   ba4dc:	bd38      	pop	{r3, r4, r5, pc}

000ba4de <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   ba4de:	b530      	push	{r4, r5, lr}
   ba4e0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   ba4e2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   ba4e4:	2a01      	cmp	r2, #1
  *str = '\0';
   ba4e6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   ba4ea:	bf98      	it	ls
   ba4ec:	220a      	movls	r2, #10
   ba4ee:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   ba4f0:	460d      	mov	r5, r1
   ba4f2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   ba4f6:	fb01 5312 	mls	r3, r1, r2, r5
   ba4fa:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   ba4fe:	2b09      	cmp	r3, #9
   ba500:	bf94      	ite	ls
   ba502:	3330      	addls	r3, #48	; 0x30
   ba504:	3337      	addhi	r3, #55	; 0x37
   ba506:	b2db      	uxtb	r3, r3
  } while(n);
   ba508:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   ba50a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   ba50e:	d9ef      	bls.n	ba4f0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   ba510:	4621      	mov	r1, r4
   ba512:	f7fb ffaf 	bl	b6474 <_ZN5Print5writeEPKc>
}
   ba516:	b00b      	add	sp, #44	; 0x2c
   ba518:	bd30      	pop	{r4, r5, pc}

000ba51a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   ba51a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   ba51e:	b086      	sub	sp, #24
   ba520:	af00      	add	r7, sp, #0
   ba522:	4605      	mov	r5, r0
   ba524:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   ba526:	1d38      	adds	r0, r7, #4
   ba528:	2114      	movs	r1, #20
{
   ba52a:	4614      	mov	r4, r2
    va_copy(args2, args);
   ba52c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   ba52e:	f7fc ffa1 	bl	b7474 <vsnprintf>

    if (n<bufsize)
   ba532:	2813      	cmp	r0, #19
   ba534:	d80e      	bhi.n	ba554 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   ba536:	1d39      	adds	r1, r7, #4
   ba538:	4628      	mov	r0, r5
   ba53a:	f7fb ff9b 	bl	b6474 <_ZN5Print5writeEPKc>
   ba53e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   ba540:	b11e      	cbz	r6, ba54a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   ba542:	4628      	mov	r0, r5
   ba544:	f7ff ffb5 	bl	ba4b2 <_ZN5Print7printlnEv>
   ba548:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   ba54a:	4620      	mov	r0, r4
   ba54c:	3718      	adds	r7, #24
   ba54e:	46bd      	mov	sp, r7
   ba550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   ba554:	f100 0308 	add.w	r3, r0, #8
   ba558:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   ba55c:	46e8      	mov	r8, sp
        char bigger[n+1];
   ba55e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   ba562:	4622      	mov	r2, r4
   ba564:	1c41      	adds	r1, r0, #1
   ba566:	683b      	ldr	r3, [r7, #0]
   ba568:	4668      	mov	r0, sp
   ba56a:	f7fc ff83 	bl	b7474 <vsnprintf>
  return write(str);
   ba56e:	4669      	mov	r1, sp
   ba570:	4628      	mov	r0, r5
   ba572:	f7fb ff7f 	bl	b6474 <_ZN5Print5writeEPKc>
   ba576:	4604      	mov	r4, r0
   ba578:	46c5      	mov	sp, r8
   ba57a:	e7e1      	b.n	ba540 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000ba57c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   ba57c:	4b01      	ldr	r3, [pc, #4]	; (ba584 <_GLOBAL__sub_I_RGB+0x8>)
   ba57e:	2200      	movs	r2, #0
   ba580:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   ba582:	4770      	bx	lr
   ba584:	2003e6a0 	.word	0x2003e6a0

000ba588 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   ba588:	2100      	movs	r1, #0
   ba58a:	f7fc bddf 	b.w	b714c <hal_spi_release>

000ba58e <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   ba58e:	2100      	movs	r1, #0
   ba590:	f7fc bdd4 	b.w	b713c <hal_spi_acquire>

000ba594 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   ba594:	b510      	push	{r4, lr}
   ba596:	4604      	mov	r4, r0
   ba598:	4608      	mov	r0, r1
{
    _spi = spi;
   ba59a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   ba59c:	f7fc fd9e 	bl	b70dc <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   ba5a0:	2300      	movs	r3, #0
   ba5a2:	6063      	str	r3, [r4, #4]
}
   ba5a4:	4620      	mov	r0, r4
   ba5a6:	bd10      	pop	{r4, pc}

000ba5a8 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   ba5a8:	b513      	push	{r0, r1, r4, lr}
   ba5aa:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   ba5ac:	7800      	ldrb	r0, [r0, #0]
   ba5ae:	f7ff ffee 	bl	ba58e <_ZN8SPIClass4lockEv.isra.0>
   ba5b2:	b958      	cbnz	r0, ba5cc <_ZN8SPIClass5beginEv+0x24>
   ba5b4:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   ba5b6:	9001      	str	r0, [sp, #4]
   ba5b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   ba5bc:	f7fc fd7e 	bl	b70bc <hal_spi_begin>
        unlock();
   ba5c0:	9801      	ldr	r0, [sp, #4]
    }
}
   ba5c2:	b002      	add	sp, #8
   ba5c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   ba5c8:	f7ff bfde 	b.w	ba588 <_ZN8SPIClass6unlockEv.isra.0>
   ba5cc:	b002      	add	sp, #8
   ba5ce:	bd10      	pop	{r4, pc}

000ba5d0 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   ba5d0:	7800      	ldrb	r0, [r0, #0]
   ba5d2:	f7ff bfd9 	b.w	ba588 <_ZN8SPIClass6unlockEv.isra.0>
	...

000ba5d8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   ba5d8:	0840      	lsrs	r0, r0, #1
{
   ba5da:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   ba5dc:	6018      	str	r0, [r3, #0]
   ba5de:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   ba5e0:	6818      	ldr	r0, [r3, #0]
   ba5e2:	4288      	cmp	r0, r1
   ba5e4:	b2e5      	uxtb	r5, r4
   ba5e6:	d906      	bls.n	ba5f6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   ba5e8:	3401      	adds	r4, #1
   ba5ea:	2c08      	cmp	r4, #8
   ba5ec:	d002      	beq.n	ba5f4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   ba5ee:	0840      	lsrs	r0, r0, #1
   ba5f0:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   ba5f2:	e7f5      	b.n	ba5e0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   ba5f4:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   ba5f6:	4b02      	ldr	r3, [pc, #8]	; (ba600 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   ba5f8:	5d5b      	ldrb	r3, [r3, r5]
   ba5fa:	7013      	strb	r3, [r2, #0]
}
   ba5fc:	bd30      	pop	{r4, r5, pc}
   ba5fe:	bf00      	nop
   ba600:	000be718 	.word	0x000be718

000ba604 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   ba604:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   ba608:	4606      	mov	r6, r0
   ba60a:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   ba60c:	7800      	ldrb	r0, [r0, #0]
{
   ba60e:	460c      	mov	r4, r1
    CHECK(lock());
   ba610:	f7ff ffbd 	bl	ba58e <_ZN8SPIClass4lockEv.isra.0>
   ba614:	2800      	cmp	r0, #0
   ba616:	db1b      	blt.n	ba650 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   ba618:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   ba61a:	2214      	movs	r2, #20
   ba61c:	2100      	movs	r1, #0
   ba61e:	a809      	add	r0, sp, #36	; 0x24
   ba620:	f001 fb47 	bl	bbcb2 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   ba624:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   ba626:	2200      	movs	r2, #0
   ba628:	a909      	add	r1, sp, #36	; 0x24
   ba62a:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   ba62c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   ba630:	f7fc fd64 	bl	b70fc <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   ba634:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   ba638:	b113      	cbz	r3, ba640 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   ba63a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   ba63e:	b155      	cbz	r5, ba656 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   ba640:	2700      	movs	r7, #0
   ba642:	46b9      	mov	r9, r7
   ba644:	46b8      	mov	r8, r7
   ba646:	2501      	movs	r5, #1
    if (default_ && other.default_)
   ba648:	7923      	ldrb	r3, [r4, #4]
   ba64a:	b15d      	cbz	r5, ba664 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   ba64c:	b1c3      	cbz	r3, ba680 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   ba64e:	2000      	movs	r0, #0
}
   ba650:	b00f      	add	sp, #60	; 0x3c
   ba652:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   ba656:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   ba65a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   ba65e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   ba662:	e7f1      	b.n	ba648 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   ba664:	2b00      	cmp	r3, #0
   ba666:	d135      	bne.n	ba6d4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   ba668:	68a3      	ldr	r3, [r4, #8]
   ba66a:	4543      	cmp	r3, r8
   ba66c:	d108      	bne.n	ba680 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   ba66e:	f88d 9020 	strb.w	r9, [sp, #32]
   ba672:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   ba676:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   ba67a:	89a3      	ldrh	r3, [r4, #12]
   ba67c:	429a      	cmp	r2, r3
   ba67e:	d0e6      	beq.n	ba64e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   ba680:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   ba682:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   ba684:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   ba688:	980a      	ldr	r0, [sp, #40]	; 0x28
   ba68a:	ab04      	add	r3, sp, #16
   ba68c:	f10d 020f 	add.w	r2, sp, #15
   ba690:	f7ff ffa2 	bl	ba5d8 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   ba694:	7921      	ldrb	r1, [r4, #4]
   ba696:	b985      	cbnz	r5, ba6ba <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   ba698:	b989      	cbnz	r1, ba6be <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   ba69a:	68a3      	ldr	r3, [r4, #8]
   ba69c:	4543      	cmp	r3, r8
   ba69e:	d30e      	bcc.n	ba6be <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   ba6a0:	f88d 9020 	strb.w	r9, [sp, #32]
   ba6a4:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   ba6a8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   ba6ac:	89a3      	ldrh	r3, [r4, #12]
   ba6ae:	429a      	cmp	r2, r3
   ba6b0:	d105      	bne.n	ba6be <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   ba6b2:	9b04      	ldr	r3, [sp, #16]
   ba6b4:	4543      	cmp	r3, r8
   ba6b6:	d102      	bne.n	ba6be <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   ba6b8:	e7c9      	b.n	ba64e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   ba6ba:	2900      	cmp	r1, #0
   ba6bc:	d1f9      	bne.n	ba6b2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   ba6be:	2300      	movs	r3, #0
   ba6c0:	9301      	str	r3, [sp, #4]
   ba6c2:	7b63      	ldrb	r3, [r4, #13]
   ba6c4:	9300      	str	r3, [sp, #0]
   ba6c6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   ba6ca:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   ba6cc:	7830      	ldrb	r0, [r6, #0]
   ba6ce:	f7fc fd2d 	bl	b712c <hal_spi_set_settings>
   ba6d2:	e7bc      	b.n	ba64e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   ba6d4:	e9cd 5500 	strd	r5, r5, [sp]
   ba6d8:	462b      	mov	r3, r5
   ba6da:	462a      	mov	r2, r5
   ba6dc:	2101      	movs	r1, #1
   ba6de:	e7f5      	b.n	ba6cc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000ba6e0 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   ba6e0:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   ba6e2:	7800      	ldrb	r0, [r0, #0]
   ba6e4:	f7fc fcf2 	bl	b70cc <hal_spi_transfer>
}
   ba6e8:	b2c0      	uxtb	r0, r0
   ba6ea:	bd08      	pop	{r3, pc}

000ba6ec <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   ba6ec:	b530      	push	{r4, r5, lr}
   ba6ee:	b087      	sub	sp, #28
   ba6f0:	4604      	mov	r4, r0
   ba6f2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   ba6f4:	9500      	str	r5, [sp, #0]
   ba6f6:	7800      	ldrb	r0, [r0, #0]
   ba6f8:	f7fc fd08 	bl	b710c <hal_spi_transfer_dma>
    if (user_callback == NULL)
   ba6fc:	b93d      	cbnz	r5, ba70e <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   ba6fe:	7820      	ldrb	r0, [r4, #0]
   ba700:	a902      	add	r1, sp, #8
   ba702:	f7fc fd0b 	bl	b711c <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   ba706:	f89d 3014 	ldrb.w	r3, [sp, #20]
   ba70a:	07db      	lsls	r3, r3, #31
   ba70c:	d4f7      	bmi.n	ba6fe <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   ba70e:	b007      	add	sp, #28
   ba710:	bd30      	pop	{r4, r5, pc}

000ba712 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   ba712:	b510      	push	{r4, lr}
   ba714:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   ba716:	f7fc fc39 	bl	b6f8c <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   ba71a:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   ba71c:	6823      	ldr	r3, [r4, #0]
   ba71e:	4620      	mov	r0, r4
   ba720:	695b      	ldr	r3, [r3, #20]
   ba722:	4798      	blx	r3
    if (c >= 0) return c;
   ba724:	2800      	cmp	r0, #0
   ba726:	da08      	bge.n	ba73a <_ZN6Stream9timedReadEv+0x28>
   ba728:	f7fc fc30 	bl	b6f8c <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   ba72c:	68e3      	ldr	r3, [r4, #12]
   ba72e:	1ac0      	subs	r0, r0, r3
   ba730:	68a3      	ldr	r3, [r4, #8]
   ba732:	4298      	cmp	r0, r3
   ba734:	d3f2      	bcc.n	ba71c <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   ba736:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   ba73a:	bd10      	pop	{r4, pc}

000ba73c <_ZN6Stream15readStringUntilEc>:
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
   ba73c:	b570      	push	{r4, r5, r6, lr}
   ba73e:	460d      	mov	r5, r1
  String ret;
   ba740:	4909      	ldr	r1, [pc, #36]	; (ba768 <_ZN6Stream15readStringUntilEc+0x2c>)
{
   ba742:	4604      	mov	r4, r0
   ba744:	4616      	mov	r6, r2
  String ret;
   ba746:	f000 f85c 	bl	ba802 <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
   ba74a:	4628      	mov	r0, r5
   ba74c:	f7ff ffe1 	bl	ba712 <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
   ba750:	2800      	cmp	r0, #0
   ba752:	db06      	blt.n	ba762 <_ZN6Stream15readStringUntilEc+0x26>
   ba754:	4286      	cmp	r6, r0
   ba756:	d004      	beq.n	ba762 <_ZN6Stream15readStringUntilEc+0x26>
	String & operator += (char c)			{concat(c); return (*this);}
   ba758:	b2c1      	uxtb	r1, r0
   ba75a:	4620      	mov	r0, r4
   ba75c:	f000 f8d0 	bl	ba900 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   ba760:	e7f3      	b.n	ba74a <_ZN6Stream15readStringUntilEc+0xe>
  }
  return ret;
}
   ba762:	4620      	mov	r0, r4
   ba764:	bd70      	pop	{r4, r5, r6, pc}
   ba766:	bf00      	nop
   ba768:	000be1c9 	.word	0x000be1c9

000ba76c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   ba76c:	b510      	push	{r4, lr}
   ba76e:	4604      	mov	r4, r0
{
	free(buffer);
   ba770:	6800      	ldr	r0, [r0, #0]
   ba772:	f7fc fe57 	bl	b7424 <free>
}
   ba776:	4620      	mov	r0, r4
   ba778:	bd10      	pop	{r4, pc}

000ba77a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   ba77a:	b510      	push	{r4, lr}
   ba77c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   ba77e:	6800      	ldr	r0, [r0, #0]
   ba780:	b108      	cbz	r0, ba786 <_ZN6String10invalidateEv+0xc>
   ba782:	f7fc fe4f 	bl	b7424 <free>
	buffer = NULL;
   ba786:	2300      	movs	r3, #0
	capacity = len = 0;
   ba788:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   ba78c:	6023      	str	r3, [r4, #0]
}
   ba78e:	bd10      	pop	{r4, pc}

000ba790 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   ba790:	b538      	push	{r3, r4, r5, lr}
   ba792:	4604      	mov	r4, r0
   ba794:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   ba796:	6800      	ldr	r0, [r0, #0]
   ba798:	3101      	adds	r1, #1
   ba79a:	f7fc fe4b 	bl	b7434 <realloc>
	if (newbuffer) {
   ba79e:	b110      	cbz	r0, ba7a6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   ba7a0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   ba7a4:	2001      	movs	r0, #1
	}
	return 0;
}
   ba7a6:	bd38      	pop	{r3, r4, r5, pc}

000ba7a8 <_ZN6String7reserveEj>:
{
   ba7a8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   ba7aa:	6803      	ldr	r3, [r0, #0]
{
   ba7ac:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   ba7ae:	b123      	cbz	r3, ba7ba <_ZN6String7reserveEj+0x12>
   ba7b0:	6843      	ldr	r3, [r0, #4]
   ba7b2:	428b      	cmp	r3, r1
   ba7b4:	d301      	bcc.n	ba7ba <_ZN6String7reserveEj+0x12>
   ba7b6:	2001      	movs	r0, #1
}
   ba7b8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   ba7ba:	4620      	mov	r0, r4
   ba7bc:	f7ff ffe8 	bl	ba790 <_ZN6String12changeBufferEj>
   ba7c0:	2800      	cmp	r0, #0
   ba7c2:	d0f9      	beq.n	ba7b8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   ba7c4:	68a3      	ldr	r3, [r4, #8]
   ba7c6:	2b00      	cmp	r3, #0
   ba7c8:	d1f5      	bne.n	ba7b6 <_ZN6String7reserveEj+0xe>
   ba7ca:	6822      	ldr	r2, [r4, #0]
   ba7cc:	7013      	strb	r3, [r2, #0]
   ba7ce:	e7f2      	b.n	ba7b6 <_ZN6String7reserveEj+0xe>

000ba7d0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   ba7d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   ba7d2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   ba7d4:	4611      	mov	r1, r2
   ba7d6:	9201      	str	r2, [sp, #4]
{
   ba7d8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   ba7da:	f7ff ffe5 	bl	ba7a8 <_ZN6String7reserveEj>
   ba7de:	9a01      	ldr	r2, [sp, #4]
   ba7e0:	b928      	cbnz	r0, ba7ee <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   ba7e2:	4620      	mov	r0, r4
   ba7e4:	f7ff ffc9 	bl	ba77a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   ba7e8:	4620      	mov	r0, r4
   ba7ea:	b003      	add	sp, #12
   ba7ec:	bd30      	pop	{r4, r5, pc}
	len = length;
   ba7ee:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   ba7f0:	4629      	mov	r1, r5
   ba7f2:	6820      	ldr	r0, [r4, #0]
   ba7f4:	f001 fa35 	bl	bbc62 <memcpy>
	buffer[len] = 0;
   ba7f8:	6822      	ldr	r2, [r4, #0]
   ba7fa:	68a3      	ldr	r3, [r4, #8]
   ba7fc:	2100      	movs	r1, #0
   ba7fe:	54d1      	strb	r1, [r2, r3]
	return *this;
   ba800:	e7f2      	b.n	ba7e8 <_ZN6String4copyEPKcj+0x18>

000ba802 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   ba802:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   ba804:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   ba806:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   ba80a:	4604      	mov	r4, r0
	len = 0;
   ba80c:	6083      	str	r3, [r0, #8]
	flags = 0;
   ba80e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   ba810:	b141      	cbz	r1, ba824 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   ba812:	4608      	mov	r0, r1
   ba814:	9101      	str	r1, [sp, #4]
   ba816:	f001 fac2 	bl	bbd9e <strlen>
   ba81a:	9901      	ldr	r1, [sp, #4]
   ba81c:	4602      	mov	r2, r0
   ba81e:	4620      	mov	r0, r4
   ba820:	f7ff ffd6 	bl	ba7d0 <_ZN6String4copyEPKcj>
}
   ba824:	4620      	mov	r0, r4
   ba826:	b002      	add	sp, #8
   ba828:	bd10      	pop	{r4, pc}

000ba82a <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   ba82a:	b538      	push	{r3, r4, r5, lr}
   ba82c:	4605      	mov	r5, r0
	if (buffer) {
   ba82e:	6800      	ldr	r0, [r0, #0]
{
   ba830:	460c      	mov	r4, r1
	if (buffer) {
   ba832:	b168      	cbz	r0, ba850 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   ba834:	686a      	ldr	r2, [r5, #4]
   ba836:	688b      	ldr	r3, [r1, #8]
   ba838:	429a      	cmp	r2, r3
   ba83a:	d307      	bcc.n	ba84c <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   ba83c:	6809      	ldr	r1, [r1, #0]
   ba83e:	f001 fa88 	bl	bbd52 <strcpy>
			len = rhs.len;
   ba842:	68a3      	ldr	r3, [r4, #8]
   ba844:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   ba846:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   ba848:	60a3      	str	r3, [r4, #8]
}
   ba84a:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   ba84c:	f7fc fdea 	bl	b7424 <free>
	buffer = rhs.buffer;
   ba850:	6823      	ldr	r3, [r4, #0]
   ba852:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   ba854:	6863      	ldr	r3, [r4, #4]
   ba856:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   ba858:	68a3      	ldr	r3, [r4, #8]
   ba85a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   ba85c:	2300      	movs	r3, #0
	rhs.capacity = 0;
   ba85e:	e9c4 3300 	strd	r3, r3, [r4]
   ba862:	e7f1      	b.n	ba848 <_ZN6String4moveERS_+0x1e>

000ba864 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   ba864:	b510      	push	{r4, lr}
	buffer = NULL;
   ba866:	2300      	movs	r3, #0
	capacity = 0;
   ba868:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   ba86c:	4604      	mov	r4, r0
	len = 0;
   ba86e:	6083      	str	r3, [r0, #8]
	flags = 0;
   ba870:	7303      	strb	r3, [r0, #12]
	move(rval);
   ba872:	f7ff ffda 	bl	ba82a <_ZN6String4moveERS_>
}
   ba876:	4620      	mov	r0, r4
   ba878:	bd10      	pop	{r4, pc}

000ba87a <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   ba87a:	4288      	cmp	r0, r1
{
   ba87c:	b510      	push	{r4, lr}
   ba87e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   ba880:	d005      	beq.n	ba88e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   ba882:	680b      	ldr	r3, [r1, #0]
   ba884:	b12b      	cbz	r3, ba892 <_ZN6StringaSERKS_+0x18>
   ba886:	688a      	ldr	r2, [r1, #8]
   ba888:	4619      	mov	r1, r3
   ba88a:	f7ff ffa1 	bl	ba7d0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   ba88e:	4620      	mov	r0, r4
   ba890:	bd10      	pop	{r4, pc}
	else invalidate();
   ba892:	f7ff ff72 	bl	ba77a <_ZN6String10invalidateEv>
   ba896:	e7fa      	b.n	ba88e <_ZN6StringaSERKS_+0x14>

000ba898 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   ba898:	b510      	push	{r4, lr}
	buffer = NULL;
   ba89a:	2300      	movs	r3, #0
String::String(const String &value)
   ba89c:	4604      	mov	r4, r0
	capacity = 0;
   ba89e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   ba8a2:	6083      	str	r3, [r0, #8]
	flags = 0;
   ba8a4:	7303      	strb	r3, [r0, #12]
	*this = value;
   ba8a6:	f7ff ffe8 	bl	ba87a <_ZN6StringaSERKS_>
}
   ba8aa:	4620      	mov	r0, r4
   ba8ac:	bd10      	pop	{r4, pc}

000ba8ae <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   ba8ae:	b513      	push	{r0, r1, r4, lr}
   ba8b0:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   ba8b2:	b159      	cbz	r1, ba8cc <_ZN6StringaSEPKc+0x1e>
   ba8b4:	4608      	mov	r0, r1
   ba8b6:	9101      	str	r1, [sp, #4]
   ba8b8:	f001 fa71 	bl	bbd9e <strlen>
   ba8bc:	9901      	ldr	r1, [sp, #4]
   ba8be:	4602      	mov	r2, r0
   ba8c0:	4620      	mov	r0, r4
   ba8c2:	f7ff ff85 	bl	ba7d0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   ba8c6:	4620      	mov	r0, r4
   ba8c8:	b002      	add	sp, #8
   ba8ca:	bd10      	pop	{r4, pc}
	else invalidate();
   ba8cc:	f7ff ff55 	bl	ba77a <_ZN6String10invalidateEv>
   ba8d0:	e7f9      	b.n	ba8c6 <_ZN6StringaSEPKc+0x18>

000ba8d2 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   ba8d2:	b570      	push	{r4, r5, r6, lr}
   ba8d4:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   ba8d6:	460e      	mov	r6, r1
   ba8d8:	b909      	cbnz	r1, ba8de <_ZN6String6concatEPKcj+0xc>
   ba8da:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   ba8dc:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   ba8de:	b16a      	cbz	r2, ba8fc <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   ba8e0:	6884      	ldr	r4, [r0, #8]
   ba8e2:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   ba8e4:	4621      	mov	r1, r4
   ba8e6:	f7ff ff5f 	bl	ba7a8 <_ZN6String7reserveEj>
   ba8ea:	2800      	cmp	r0, #0
   ba8ec:	d0f5      	beq.n	ba8da <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   ba8ee:	6828      	ldr	r0, [r5, #0]
   ba8f0:	68ab      	ldr	r3, [r5, #8]
   ba8f2:	4631      	mov	r1, r6
   ba8f4:	4418      	add	r0, r3
   ba8f6:	f001 fa2c 	bl	bbd52 <strcpy>
	len = newlen;
   ba8fa:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   ba8fc:	2001      	movs	r0, #1
   ba8fe:	e7ed      	b.n	ba8dc <_ZN6String6concatEPKcj+0xa>

000ba900 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   ba900:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   ba902:	2300      	movs	r3, #0
	buf[0] = c;
   ba904:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   ba908:	2201      	movs	r2, #1
   ba90a:	a901      	add	r1, sp, #4
	buf[1] = 0;
   ba90c:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   ba910:	f7ff ffdf 	bl	ba8d2 <_ZN6String6concatEPKcj>
}
   ba914:	b003      	add	sp, #12
   ba916:	f85d fb04 	ldr.w	pc, [sp], #4

000ba91a <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   ba91a:	6802      	ldr	r2, [r0, #0]
{
   ba91c:	460b      	mov	r3, r1
	if (!buffer || !s.buffer) {
   ba91e:	6809      	ldr	r1, [r1, #0]
   ba920:	b162      	cbz	r2, ba93c <_ZNK6String9compareToERKS_+0x22>
   ba922:	b941      	cbnz	r1, ba936 <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   ba924:	6880      	ldr	r0, [r0, #8]
   ba926:	b160      	cbz	r0, ba942 <_ZNK6String9compareToERKS_+0x28>
   ba928:	7810      	ldrb	r0, [r2, #0]
   ba92a:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   ba92c:	6898      	ldr	r0, [r3, #8]
   ba92e:	b140      	cbz	r0, ba942 <_ZNK6String9compareToERKS_+0x28>
   ba930:	7809      	ldrb	r1, [r1, #0]
   ba932:	4248      	negs	r0, r1
   ba934:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   ba936:	4610      	mov	r0, r2
   ba938:	f001 ba01 	b.w	bbd3e <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   ba93c:	2900      	cmp	r1, #0
   ba93e:	d1f5      	bne.n	ba92c <_ZNK6String9compareToERKS_+0x12>
		return 0;
   ba940:	4608      	mov	r0, r1
}
   ba942:	4770      	bx	lr

000ba944 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   ba944:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   ba946:	6882      	ldr	r2, [r0, #8]
   ba948:	688b      	ldr	r3, [r1, #8]
   ba94a:	429a      	cmp	r2, r3
   ba94c:	d105      	bne.n	ba95a <_ZNK6String6equalsERKS_+0x16>
   ba94e:	f7ff ffe4 	bl	ba91a <_ZNK6String9compareToERKS_>
   ba952:	fab0 f080 	clz	r0, r0
   ba956:	0940      	lsrs	r0, r0, #5
}
   ba958:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   ba95a:	2000      	movs	r0, #0
   ba95c:	e7fc      	b.n	ba958 <_ZNK6String6equalsERKS_+0x14>

000ba95e <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   ba95e:	6883      	ldr	r3, [r0, #8]
   ba960:	428b      	cmp	r3, r1
   ba962:	d903      	bls.n	ba96c <_ZNK6StringixEj+0xe>
   ba964:	6800      	ldr	r0, [r0, #0]
   ba966:	b110      	cbz	r0, ba96e <_ZNK6StringixEj+0x10>
	return buffer[index];
   ba968:	5c40      	ldrb	r0, [r0, r1]
   ba96a:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
   ba96c:	2000      	movs	r0, #0
}
   ba96e:	4770      	bx	lr

000ba970 <_ZNK6String6charAtEj>:
	return operator[](loc);
   ba970:	f7ff bff5 	b.w	ba95e <_ZNK6StringixEj>

000ba974 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   ba974:	4b05      	ldr	r3, [pc, #20]	; (ba98c <_GLOBAL__sub_I_System+0x18>)
   ba976:	2202      	movs	r2, #2
   ba978:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   ba97a:	4b05      	ldr	r3, [pc, #20]	; (ba990 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   ba97c:	4a05      	ldr	r2, [pc, #20]	; (ba994 <_GLOBAL__sub_I_System+0x20>)
   ba97e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   ba980:	2000      	movs	r0, #0
   ba982:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   ba986:	f7fc bc79 	b.w	b727c <set_system_mode>
   ba98a:	bf00      	nop
   ba98c:	2003e6bc 	.word	0x2003e6bc
   ba990:	2003e6b0 	.word	0x2003e6b0
   ba994:	ffff0000 	.word	0xffff0000

000ba998 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   ba998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   ba99c:	4a15      	ldr	r2, [pc, #84]	; (ba9f4 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   ba99e:	f8df 8060 	ldr.w	r8, [pc, #96]	; baa00 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   ba9a2:	e9d2 6300 	ldrd	r6, r3, [r2]
   ba9a6:	1980      	adds	r0, r0, r6
   ba9a8:	eb43 0101 	adc.w	r1, r3, r1
    unix_time += dst_current_cache;
   ba9ac:	4b12      	ldr	r3, [pc, #72]	; (ba9f8 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   ba9ae:	e9d3 6700 	ldrd	r6, r7, [r3]
    if(unix_time != unix_time_cache)
   ba9b2:	e9d8 2300 	ldrd	r2, r3, [r8]
    unix_time += dst_current_cache;
   ba9b6:	1986      	adds	r6, r0, r6
   ba9b8:	eb41 0707 	adc.w	r7, r1, r7
    if(unix_time != unix_time_cache)
   ba9bc:	42bb      	cmp	r3, r7
   ba9be:	bf08      	it	eq
   ba9c0:	42b2      	cmpeq	r2, r6
{
   ba9c2:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   ba9c4:	d013      	beq.n	ba9ee <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   ba9c6:	a903      	add	r1, sp, #12
   ba9c8:	4668      	mov	r0, sp
   ba9ca:	e9cd 6700 	strd	r6, r7, [sp]
   ba9ce:	f7fc fd81 	bl	b74d4 <localtime_r>
	calendar_time.tm_year += 1900;
   ba9d2:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   ba9d4:	4d09      	ldr	r5, [pc, #36]	; (ba9fc <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   ba9d6:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   ba9da:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   ba9dc:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   ba9de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   ba9e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   ba9e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   ba9e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   ba9e6:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   ba9ea:	6823      	ldr	r3, [r4, #0]
   ba9ec:	602b      	str	r3, [r5, #0]
    }
}
   ba9ee:	b00c      	add	sp, #48	; 0x30
   ba9f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   ba9f4:	2003e6f0 	.word	0x2003e6f0
   ba9f8:	2003e6e8 	.word	0x2003e6e8
   ba9fc:	2003e6c4 	.word	0x2003e6c4
   baa00:	2003e6f8 	.word	0x2003e6f8

000baa04 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   baa04:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   baa06:	2000      	movs	r0, #0
   baa08:	f7fc fc94 	bl	b7334 <spark_sync_time_pending>
   baa0c:	b128      	cbz	r0, baa1a <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   baa0e:	f7fc fc79 	bl	b7304 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   baa12:	f080 0001 	eor.w	r0, r0, #1
   baa16:	b2c0      	uxtb	r0, r0
    }
   baa18:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   baa1a:	2001      	movs	r0, #1
   baa1c:	e7fc      	b.n	baa18 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>
	...

000baa20 <_ZN9TimeClass5monthEx>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
   baa20:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   baa22:	f7ff ffb9 	bl	ba998 <_ZL22Refresh_UnixTime_Cachex>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
   baa26:	4b02      	ldr	r3, [pc, #8]	; (baa30 <_ZN9TimeClass5monthEx+0x10>)
   baa28:	6918      	ldr	r0, [r3, #16]
}
   baa2a:	3001      	adds	r0, #1
   baa2c:	bd08      	pop	{r3, pc}
   baa2e:	bf00      	nop
   baa30:	2003e6c4 	.word	0x2003e6c4

000baa34 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   baa34:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   baa36:	2000      	movs	r0, #0
   baa38:	f7fc fab0 	bl	b6f9c <hal_rtc_time_is_valid>
    if (rtcstate)
   baa3c:	4604      	mov	r4, r0
   baa3e:	b9a0      	cbnz	r0, baa6a <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   baa40:	f7fc fc14 	bl	b726c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   baa44:	2801      	cmp	r0, #1
   baa46:	d110      	bne.n	baa6a <_ZN9TimeClass7isValidEv+0x36>
   baa48:	4620      	mov	r0, r4
   baa4a:	f7fc fc37 	bl	b72bc <system_thread_get_state>
   baa4e:	b960      	cbnz	r0, baa6a <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   baa50:	f7ff ffd8 	bl	baa04 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   baa54:	b910      	cbnz	r0, baa5c <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   baa56:	f7fc fc4d 	bl	b72f4 <spark_process>
        while (_while() && !_condition()) {
   baa5a:	e7f9      	b.n	baa50 <_ZN9TimeClass7isValidEv+0x1c>
   baa5c:	f7ff ffd2 	bl	baa04 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   baa60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   baa64:	2000      	movs	r0, #0
   baa66:	f7fc ba99 	b.w	b6f9c <hal_rtc_time_is_valid>
}
   baa6a:	4620      	mov	r0, r4
   baa6c:	bd10      	pop	{r4, pc}

000baa6e <_ZN9TimeClass3nowEv>:
{
   baa6e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   baa70:	f7ff ffe0 	bl	baa34 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   baa74:	2210      	movs	r2, #16
   baa76:	2100      	movs	r1, #0
   baa78:	4668      	mov	r0, sp
   baa7a:	f001 f91a 	bl	bbcb2 <memset>
    hal_rtc_get_time(&tv, nullptr);
   baa7e:	2100      	movs	r1, #0
   baa80:	4668      	mov	r0, sp
   baa82:	f7fc fa93 	bl	b6fac <hal_rtc_get_time>
}
   baa86:	9800      	ldr	r0, [sp, #0]
   baa88:	b005      	add	sp, #20
   baa8a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000baa90 <_ZN9TimeClass4hourEv>:
{
   baa90:	b508      	push	{r3, lr}
	return hour(now());
   baa92:	f7ff ffec 	bl	baa6e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   baa96:	17c1      	asrs	r1, r0, #31
   baa98:	f7ff ff7e 	bl	ba998 <_ZL22Refresh_UnixTime_Cachex>
}
   baa9c:	4b01      	ldr	r3, [pc, #4]	; (baaa4 <_ZN9TimeClass4hourEv+0x14>)
   baa9e:	6898      	ldr	r0, [r3, #8]
   baaa0:	bd08      	pop	{r3, pc}
   baaa2:	bf00      	nop
   baaa4:	2003e6c4 	.word	0x2003e6c4

000baaa8 <_ZN9TimeClass6minuteEv>:
{
   baaa8:	b508      	push	{r3, lr}
	return minute(now());
   baaaa:	f7ff ffe0 	bl	baa6e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   baaae:	17c1      	asrs	r1, r0, #31
   baab0:	f7ff ff72 	bl	ba998 <_ZL22Refresh_UnixTime_Cachex>
}
   baab4:	4b01      	ldr	r3, [pc, #4]	; (baabc <_ZN9TimeClass6minuteEv+0x14>)
   baab6:	6858      	ldr	r0, [r3, #4]
   baab8:	bd08      	pop	{r3, pc}
   baaba:	bf00      	nop
   baabc:	2003e6c4 	.word	0x2003e6c4

000baac0 <_ZN9TimeClass6secondEv>:
{
   baac0:	b508      	push	{r3, lr}
	return second(now());
   baac2:	f7ff ffd4 	bl	baa6e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   baac6:	17c1      	asrs	r1, r0, #31
   baac8:	f7ff ff66 	bl	ba998 <_ZL22Refresh_UnixTime_Cachex>
}
   baacc:	4b01      	ldr	r3, [pc, #4]	; (baad4 <_ZN9TimeClass6secondEv+0x14>)
   baace:	6818      	ldr	r0, [r3, #0]
   baad0:	bd08      	pop	{r3, pc}
   baad2:	bf00      	nop
   baad4:	2003e6c4 	.word	0x2003e6c4

000baad8 <_ZN9TimeClass3dayEv>:
{
   baad8:	b508      	push	{r3, lr}
	return day(now());
   baada:	f7ff ffc8 	bl	baa6e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   baade:	17c1      	asrs	r1, r0, #31
   baae0:	f7ff ff5a 	bl	ba998 <_ZL22Refresh_UnixTime_Cachex>
}
   baae4:	4b01      	ldr	r3, [pc, #4]	; (baaec <_ZN9TimeClass3dayEv+0x14>)
   baae6:	68d8      	ldr	r0, [r3, #12]
   baae8:	bd08      	pop	{r3, pc}
   baaea:	bf00      	nop
   baaec:	2003e6c4 	.word	0x2003e6c4

000baaf0 <_ZN9TimeClass5monthEv>:
{
   baaf0:	b508      	push	{r3, lr}
	return month(now());
   baaf2:	f7ff ffbc 	bl	baa6e <_ZN9TimeClass3nowEv>
}
   baaf6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return month(now());
   baafa:	17c1      	asrs	r1, r0, #31
   baafc:	f7ff bf90 	b.w	baa20 <_ZN9TimeClass5monthEx>

000bab00 <_ZN9TimeClass4yearEv>:
{
   bab00:	b508      	push	{r3, lr}
	return year(now());
   bab02:	f7ff ffb4 	bl	baa6e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   bab06:	17c1      	asrs	r1, r0, #31
   bab08:	f7ff ff46 	bl	ba998 <_ZL22Refresh_UnixTime_Cachex>
}
   bab0c:	4b01      	ldr	r3, [pc, #4]	; (bab14 <_ZN9TimeClass4yearEv+0x14>)
   bab0e:	6958      	ldr	r0, [r3, #20]
   bab10:	bd08      	pop	{r3, pc}
   bab12:	bf00      	nop
   bab14:	2003e6c4 	.word	0x2003e6c4

000bab18 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   bab18:	4b02      	ldr	r3, [pc, #8]	; (bab24 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   bab1a:	681a      	ldr	r2, [r3, #0]
   bab1c:	4b02      	ldr	r3, [pc, #8]	; (bab28 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   bab1e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   bab20:	4770      	bx	lr
   bab22:	bf00      	nop
   bab24:	2003db18 	.word	0x2003db18
   bab28:	2003e6c0 	.word	0x2003e6c0

000bab2c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   bab2c:	4770      	bx	lr

000bab2e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   bab2e:	7441      	strb	r1, [r0, #17]
}
   bab30:	4770      	bx	lr

000bab32 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   bab32:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   bab34:	7c00      	ldrb	r0, [r0, #16]
   bab36:	f7fc fb41 	bl	b71bc <hal_usart_available_data_for_write>
}
   bab3a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bab3e:	bd08      	pop	{r3, pc}

000bab40 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   bab40:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   bab42:	7c00      	ldrb	r0, [r0, #16]
   bab44:	f7fc fb12 	bl	b716c <hal_usart_available>
}
   bab48:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bab4c:	bd08      	pop	{r3, pc}

000bab4e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   bab4e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   bab50:	7c00      	ldrb	r0, [r0, #16]
   bab52:	f7fc fb1b 	bl	b718c <hal_usart_peek>
}
   bab56:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bab5a:	bd08      	pop	{r3, pc}

000bab5c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   bab5c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   bab5e:	7c00      	ldrb	r0, [r0, #16]
   bab60:	f7fc fb0c 	bl	b717c <hal_usart_read>
}
   bab64:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   bab68:	bd08      	pop	{r3, pc}

000bab6a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   bab6a:	7c00      	ldrb	r0, [r0, #16]
   bab6c:	f7fc bb16 	b.w	b719c <hal_usart_flush>

000bab70 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   bab70:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bab72:	7c45      	ldrb	r5, [r0, #17]
{
   bab74:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bab76:	b12d      	cbz	r5, bab84 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   bab78:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   bab7a:	b003      	add	sp, #12
   bab7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   bab80:	f7fc baec 	b.w	b715c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   bab84:	7c00      	ldrb	r0, [r0, #16]
   bab86:	9101      	str	r1, [sp, #4]
   bab88:	f7fc fb18 	bl	b71bc <hal_usart_available_data_for_write>
   bab8c:	2800      	cmp	r0, #0
   bab8e:	9901      	ldr	r1, [sp, #4]
   bab90:	dcf2      	bgt.n	bab78 <_ZN11USARTSerial5writeEh+0x8>
}
   bab92:	4628      	mov	r0, r5
   bab94:	b003      	add	sp, #12
   bab96:	bd30      	pop	{r4, r5, pc}

000bab98 <_ZN11USARTSerialD0Ev>:
   bab98:	b510      	push	{r4, lr}
   bab9a:	2114      	movs	r1, #20
   bab9c:	4604      	mov	r4, r0
   bab9e:	f7f9 fa7e 	bl	b409e <_ZdlPvj>
   baba2:	4620      	mov	r0, r4
   baba4:	bd10      	pop	{r4, pc}
	...

000baba8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   baba8:	b510      	push	{r4, lr}
   babaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   babae:	4604      	mov	r4, r0
   babb0:	4608      	mov	r0, r1
   babb2:	4611      	mov	r1, r2
   babb4:	2200      	movs	r2, #0
   babb6:	e9c4 2301 	strd	r2, r3, [r4, #4]
   babba:	4b04      	ldr	r3, [pc, #16]	; (babcc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   babbc:	6023      	str	r3, [r4, #0]
  _blocking = true;
   babbe:	2301      	movs	r3, #1
  _serial = serial;
   babc0:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   babc2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   babc4:	f7fc fb02 	bl	b71cc <hal_usart_init_ex>
}
   babc8:	4620      	mov	r0, r4
   babca:	bd10      	pop	{r4, pc}
   babcc:	000be744 	.word	0x000be744

000babd0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   babd0:	7441      	strb	r1, [r0, #17]
}
   babd2:	4770      	bx	lr

000babd4 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   babd4:	4770      	bx	lr

000babd6 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   babd6:	4770      	bx	lr

000babd8 <_ZN9USBSerial4readEv>:
{
   babd8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   babda:	2100      	movs	r1, #0
   babdc:	7c00      	ldrb	r0, [r0, #16]
   babde:	f7fc fb1d 	bl	b721c <HAL_USB_USART_Receive_Data>
}
   babe2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   babe6:	bd08      	pop	{r3, pc}

000babe8 <_ZN9USBSerial4peekEv>:
{
   babe8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   babea:	2101      	movs	r1, #1
   babec:	7c00      	ldrb	r0, [r0, #16]
   babee:	f7fc fb15 	bl	b721c <HAL_USB_USART_Receive_Data>
}
   babf2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   babf6:	bd08      	pop	{r3, pc}

000babf8 <_ZN9USBSerial17availableForWriteEv>:
{
   babf8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   babfa:	7c00      	ldrb	r0, [r0, #16]
   babfc:	f7fc fb06 	bl	b720c <HAL_USB_USART_Available_Data_For_Write>
}
   bac00:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bac04:	bd08      	pop	{r3, pc}

000bac06 <_ZN9USBSerial9availableEv>:
{
   bac06:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   bac08:	7c00      	ldrb	r0, [r0, #16]
   bac0a:	f7fc faf7 	bl	b71fc <HAL_USB_USART_Available_Data>
}
   bac0e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   bac12:	bd08      	pop	{r3, pc}

000bac14 <_ZN9USBSerial5writeEh>:
{
   bac14:	b513      	push	{r0, r1, r4, lr}
   bac16:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bac18:	7c00      	ldrb	r0, [r0, #16]
{
   bac1a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   bac1c:	f7fc faf6 	bl	b720c <HAL_USB_USART_Available_Data_For_Write>
   bac20:	2800      	cmp	r0, #0
   bac22:	9901      	ldr	r1, [sp, #4]
   bac24:	dc01      	bgt.n	bac2a <_ZN9USBSerial5writeEh+0x16>
   bac26:	7c60      	ldrb	r0, [r4, #17]
   bac28:	b120      	cbz	r0, bac34 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   bac2a:	7c20      	ldrb	r0, [r4, #16]
   bac2c:	f7fc fafe 	bl	b722c <HAL_USB_USART_Send_Data>
   bac30:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   bac34:	b002      	add	sp, #8
   bac36:	bd10      	pop	{r4, pc}

000bac38 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   bac38:	7c00      	ldrb	r0, [r0, #16]
   bac3a:	f7fc baff 	b.w	b723c <HAL_USB_USART_Flush_Data>

000bac3e <_ZN9USBSerialD0Ev>:
   bac3e:	b510      	push	{r4, lr}
   bac40:	2114      	movs	r1, #20
   bac42:	4604      	mov	r4, r0
   bac44:	f7f9 fa2b 	bl	b409e <_ZdlPvj>
   bac48:	4620      	mov	r0, r4
   bac4a:	bd10      	pop	{r4, pc}

000bac4c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   bac4c:	b510      	push	{r4, lr}
   bac4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   bac52:	4604      	mov	r4, r0
   bac54:	4608      	mov	r0, r1
   bac56:	2100      	movs	r1, #0
   bac58:	e9c4 1301 	strd	r1, r3, [r4, #4]
   bac5c:	4b04      	ldr	r3, [pc, #16]	; (bac70 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   bac5e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   bac60:	2301      	movs	r3, #1
  _serial = serial;
   bac62:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   bac64:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   bac66:	4611      	mov	r1, r2
   bac68:	f7fc fab8 	bl	b71dc <HAL_USB_USART_Init>
}
   bac6c:	4620      	mov	r0, r4
   bac6e:	bd10      	pop	{r4, pc}
   bac70:	000be774 	.word	0x000be774

000bac74 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   bac74:	7c00      	ldrb	r0, [r0, #16]
   bac76:	2200      	movs	r2, #0
   bac78:	f7fc bab8 	b.w	b71ec <HAL_USB_USART_Begin>

000bac7c <_Z19acquireSerialBufferv>:
{
   bac7c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   bac7e:	2214      	movs	r2, #20
{
   bac80:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   bac82:	2100      	movs	r1, #0
   bac84:	f001 f815 	bl	bbcb2 <memset>
}
   bac88:	4620      	mov	r0, r4
   bac8a:	bd10      	pop	{r4, pc}

000bac8c <_Z16_fetch_usbserialv>:
{
   bac8c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bac8e:	4c0f      	ldr	r4, [pc, #60]	; (baccc <_Z16_fetch_usbserialv+0x40>)
{
   bac90:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   bac92:	a803      	add	r0, sp, #12
   bac94:	f7ff fff2 	bl	bac7c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   bac98:	7821      	ldrb	r1, [r4, #0]
   bac9a:	f3bf 8f5b 	dmb	ish
   bac9e:	f011 0101 	ands.w	r1, r1, #1
   baca2:	d10f      	bne.n	bacc4 <_Z16_fetch_usbserialv+0x38>
   baca4:	4620      	mov	r0, r4
   baca6:	9101      	str	r1, [sp, #4]
   baca8:	f7f9 f9fb 	bl	b40a2 <__cxa_guard_acquire>
   bacac:	9901      	ldr	r1, [sp, #4]
   bacae:	b148      	cbz	r0, bacc4 <_Z16_fetch_usbserialv+0x38>
   bacb0:	aa03      	add	r2, sp, #12
   bacb2:	4807      	ldr	r0, [pc, #28]	; (bacd0 <_Z16_fetch_usbserialv+0x44>)
   bacb4:	f7ff ffca 	bl	bac4c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   bacb8:	4620      	mov	r0, r4
   bacba:	f7f9 f9f7 	bl	b40ac <__cxa_guard_release>
   bacbe:	4805      	ldr	r0, [pc, #20]	; (bacd4 <_Z16_fetch_usbserialv+0x48>)
   bacc0:	f000 ffb2 	bl	bbc28 <atexit>
	return _usbserial;
}
   bacc4:	4802      	ldr	r0, [pc, #8]	; (bacd0 <_Z16_fetch_usbserialv+0x44>)
   bacc6:	b008      	add	sp, #32
   bacc8:	bd10      	pop	{r4, pc}
   bacca:	bf00      	nop
   baccc:	2003e700 	.word	0x2003e700
   bacd0:	2003e704 	.word	0x2003e704
   bacd4:	000babd5 	.word	0x000babd5

000bacd8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   bacd8:	4b01      	ldr	r3, [pc, #4]	; (bace0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   bacda:	6018      	str	r0, [r3, #0]
    }, nullptr);
   bacdc:	4770      	bx	lr
   bacde:	bf00      	nop
   bace0:	2003db1c 	.word	0x2003db1c

000bace4 <serialEventRun>:
{
   bace4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   bace6:	4b0b      	ldr	r3, [pc, #44]	; (bad14 <serialEventRun+0x30>)
   bace8:	b143      	cbz	r3, bacfc <serialEventRun+0x18>
   bacea:	f7ff ffcf 	bl	bac8c <_Z16_fetch_usbserialv>
   bacee:	6803      	ldr	r3, [r0, #0]
   bacf0:	691b      	ldr	r3, [r3, #16]
   bacf2:	4798      	blx	r3
   bacf4:	2800      	cmp	r0, #0
   bacf6:	dd01      	ble.n	bacfc <serialEventRun+0x18>
        serialEvent();
   bacf8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   bacfc:	4b06      	ldr	r3, [pc, #24]	; (bad18 <serialEventRun+0x34>)
   bacfe:	b143      	cbz	r3, bad12 <serialEventRun+0x2e>
   bad00:	f000 f970 	bl	bafe4 <_Z22__fetch_global_Serial1v>
   bad04:	6803      	ldr	r3, [r0, #0]
   bad06:	691b      	ldr	r3, [r3, #16]
   bad08:	4798      	blx	r3
   bad0a:	2800      	cmp	r0, #0
   bad0c:	dd01      	ble.n	bad12 <serialEventRun+0x2e>
        serialEvent1();
   bad0e:	f3af 8000 	nop.w
}
   bad12:	bd08      	pop	{r3, pc}
	...

000bad1c <_post_loop>:
{
   bad1c:	b508      	push	{r3, lr}
	serialEventRun();
   bad1e:	f7ff ffe1 	bl	bace4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   bad22:	f7fc f933 	bl	b6f8c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   bad26:	4b01      	ldr	r3, [pc, #4]	; (bad2c <_post_loop+0x10>)
   bad28:	6018      	str	r0, [r3, #0]
}
   bad2a:	bd08      	pop	{r3, pc}
   bad2c:	2003e72c 	.word	0x2003e72c

000bad30 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bad30:	4805      	ldr	r0, [pc, #20]	; (bad48 <_Z33system_initialize_user_backup_ramv+0x18>)
   bad32:	4a06      	ldr	r2, [pc, #24]	; (bad4c <_Z33system_initialize_user_backup_ramv+0x1c>)
   bad34:	4906      	ldr	r1, [pc, #24]	; (bad50 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   bad36:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   bad38:	1a12      	subs	r2, r2, r0
   bad3a:	f000 ff92 	bl	bbc62 <memcpy>
    __backup_sram_signature = signature;
   bad3e:	4b05      	ldr	r3, [pc, #20]	; (bad54 <_Z33system_initialize_user_backup_ramv+0x24>)
   bad40:	4a05      	ldr	r2, [pc, #20]	; (bad58 <_Z33system_initialize_user_backup_ramv+0x28>)
   bad42:	601a      	str	r2, [r3, #0]
}
   bad44:	bd08      	pop	{r3, pc}
   bad46:	bf00      	nop
   bad48:	2003f400 	.word	0x2003f400
   bad4c:	2003f404 	.word	0x2003f404
   bad50:	000bec94 	.word	0x000bec94
   bad54:	2003f400 	.word	0x2003f400
   bad58:	9a271c1e 	.word	0x9a271c1e

000bad5c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   bad5c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bad5e:	2300      	movs	r3, #0
   bad60:	9300      	str	r3, [sp, #0]
   bad62:	461a      	mov	r2, r3
   bad64:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bad68:	f7fc faba 	bl	b72e0 <system_ctrl_set_result>
}
   bad6c:	b003      	add	sp, #12
   bad6e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000bad74 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   bad74:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   bad76:	8843      	ldrh	r3, [r0, #2]
   bad78:	2b0a      	cmp	r3, #10
   bad7a:	d008      	beq.n	bad8e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   bad7c:	2b50      	cmp	r3, #80	; 0x50
   bad7e:	d10b      	bne.n	bad98 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   bad80:	4b09      	ldr	r3, [pc, #36]	; (bada8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   bad82:	681b      	ldr	r3, [r3, #0]
   bad84:	b14b      	cbz	r3, bad9a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   bad86:	b003      	add	sp, #12
   bad88:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   bad8c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   bad8e:	f7ff ffe5 	bl	bad5c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   bad92:	b003      	add	sp, #12
   bad94:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   bad98:	2300      	movs	r3, #0
   bad9a:	9300      	str	r3, [sp, #0]
   bad9c:	461a      	mov	r2, r3
   bad9e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   bada2:	f7fc fa9d 	bl	b72e0 <system_ctrl_set_result>
}
   bada6:	e7f4      	b.n	bad92 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   bada8:	2003e71c 	.word	0x2003e71c

000badac <module_user_init_hook>:
{
   badac:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   badae:	4812      	ldr	r0, [pc, #72]	; (badf8 <module_user_init_hook+0x4c>)
   badb0:	2100      	movs	r1, #0
   badb2:	f7fc fb87 	bl	b74c4 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   badb6:	4b11      	ldr	r3, [pc, #68]	; (badfc <module_user_init_hook+0x50>)
   badb8:	681a      	ldr	r2, [r3, #0]
   badba:	4b11      	ldr	r3, [pc, #68]	; (bae00 <module_user_init_hook+0x54>)
   badbc:	429a      	cmp	r2, r3
   badbe:	4b11      	ldr	r3, [pc, #68]	; (bae04 <module_user_init_hook+0x58>)
   badc0:	bf0c      	ite	eq
   badc2:	2201      	moveq	r2, #1
   badc4:	2200      	movne	r2, #0
   badc6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   badc8:	d001      	beq.n	badce <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   badca:	f7ff ffb1 	bl	bad30 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   badce:	f7fc f8c5 	bl	b6f5c <HAL_RNG_GetRandomNumber>
   badd2:	4604      	mov	r4, r0
    srand(seed);
   badd4:	f000 ff76 	bl	bbcc4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   badd8:	4b0b      	ldr	r3, [pc, #44]	; (bae08 <module_user_init_hook+0x5c>)
   badda:	b113      	cbz	r3, bade2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   baddc:	4620      	mov	r0, r4
   badde:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   bade2:	2100      	movs	r1, #0
   bade4:	4808      	ldr	r0, [pc, #32]	; (bae08 <module_user_init_hook+0x5c>)
   bade6:	f7fc faad 	bl	b7344 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   badea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   badee:	4807      	ldr	r0, [pc, #28]	; (bae0c <module_user_init_hook+0x60>)
   badf0:	2100      	movs	r1, #0
   badf2:	f7fc ba6b 	b.w	b72cc <system_ctrl_set_app_request_handler>
   badf6:	bf00      	nop
   badf8:	000bacd9 	.word	0x000bacd9
   badfc:	2003f400 	.word	0x2003f400
   bae00:	9a271c1e 	.word	0x9a271c1e
   bae04:	2003e718 	.word	0x2003e718
   bae08:	00000000 	.word	0x00000000
   bae0c:	000bad75 	.word	0x000bad75

000bae10 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   bae10:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   bae12:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   bae14:	d902      	bls.n	bae1c <pinAvailable+0xc>
    return false;
   bae16:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   bae18:	b002      	add	sp, #8
   bae1a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   bae1c:	f1a0 030b 	sub.w	r3, r0, #11
   bae20:	2b02      	cmp	r3, #2
   bae22:	d81a      	bhi.n	bae5a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   bae24:	4c17      	ldr	r4, [pc, #92]	; (bae84 <pinAvailable+0x74>)
   bae26:	7821      	ldrb	r1, [r4, #0]
   bae28:	f3bf 8f5b 	dmb	ish
   bae2c:	f011 0101 	ands.w	r1, r1, #1
   bae30:	d10b      	bne.n	bae4a <pinAvailable+0x3a>
   bae32:	4620      	mov	r0, r4
   bae34:	9101      	str	r1, [sp, #4]
   bae36:	f7f9 f934 	bl	b40a2 <__cxa_guard_acquire>
   bae3a:	9901      	ldr	r1, [sp, #4]
   bae3c:	b128      	cbz	r0, bae4a <pinAvailable+0x3a>
   bae3e:	4812      	ldr	r0, [pc, #72]	; (bae88 <pinAvailable+0x78>)
   bae40:	f7ff fba8 	bl	ba594 <_ZN8SPIClassC1E19hal_spi_interface_t>
   bae44:	4620      	mov	r0, r4
   bae46:	f7f9 f931 	bl	b40ac <__cxa_guard_release>
   bae4a:	4b0f      	ldr	r3, [pc, #60]	; (bae88 <pinAvailable+0x78>)
   bae4c:	7818      	ldrb	r0, [r3, #0]
   bae4e:	f7fc f94d 	bl	b70ec <hal_spi_is_enabled>
   bae52:	2800      	cmp	r0, #0
   bae54:	d1df      	bne.n	bae16 <pinAvailable+0x6>
  return true; // 'pin' is available
   bae56:	2001      	movs	r0, #1
   bae58:	e7de      	b.n	bae18 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   bae5a:	2801      	cmp	r0, #1
   bae5c:	d809      	bhi.n	bae72 <pinAvailable+0x62>
   bae5e:	f000 f881 	bl	baf64 <_Z19__fetch_global_Wirev>
   bae62:	2100      	movs	r1, #0
   bae64:	7c00      	ldrb	r0, [r0, #16]
   bae66:	f7fc f901 	bl	b706c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   bae6a:	f080 0001 	eor.w	r0, r0, #1
   bae6e:	b2c0      	uxtb	r0, r0
   bae70:	e7d2      	b.n	bae18 <pinAvailable+0x8>
   bae72:	3809      	subs	r0, #9
   bae74:	2801      	cmp	r0, #1
   bae76:	d8ee      	bhi.n	bae56 <pinAvailable+0x46>
   bae78:	f000 f8b4 	bl	bafe4 <_Z22__fetch_global_Serial1v>
   bae7c:	7c00      	ldrb	r0, [r0, #16]
   bae7e:	f7fc f995 	bl	b71ac <hal_usart_is_enabled>
   bae82:	e7f2      	b.n	bae6a <pinAvailable+0x5a>
   bae84:	2003e720 	.word	0x2003e720
   bae88:	2003e724 	.word	0x2003e724

000bae8c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bae8c:	2823      	cmp	r0, #35	; 0x23
{
   bae8e:	b538      	push	{r3, r4, r5, lr}
   bae90:	4604      	mov	r4, r0
   bae92:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   bae94:	d80a      	bhi.n	baeac <pinMode+0x20>
   bae96:	29ff      	cmp	r1, #255	; 0xff
   bae98:	d008      	beq.n	baeac <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   bae9a:	f7ff ffb9 	bl	bae10 <pinAvailable>
   bae9e:	b128      	cbz	r0, baeac <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   baea0:	4629      	mov	r1, r5
   baea2:	4620      	mov	r0, r4
}
   baea4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   baea8:	f7fc b890 	b.w	b6fcc <HAL_Pin_Mode>
}
   baeac:	bd38      	pop	{r3, r4, r5, pc}

000baeae <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   baeae:	b538      	push	{r3, r4, r5, lr}
   baeb0:	4604      	mov	r4, r0
   baeb2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   baeb4:	f7fc f892 	bl	b6fdc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   baeb8:	28ff      	cmp	r0, #255	; 0xff
   baeba:	d010      	beq.n	baede <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   baebc:	2806      	cmp	r0, #6
   baebe:	d804      	bhi.n	baeca <digitalWrite+0x1c>
   baec0:	234d      	movs	r3, #77	; 0x4d
   baec2:	fa23 f000 	lsr.w	r0, r3, r0
   baec6:	07c3      	lsls	r3, r0, #31
   baec8:	d409      	bmi.n	baede <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   baeca:	4620      	mov	r0, r4
   baecc:	f7ff ffa0 	bl	bae10 <pinAvailable>
   baed0:	b128      	cbz	r0, baede <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   baed2:	4629      	mov	r1, r5
   baed4:	4620      	mov	r0, r4
}
   baed6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   baeda:	f7fc b887 	b.w	b6fec <HAL_GPIO_Write>
}
   baede:	bd38      	pop	{r3, r4, r5, pc}

000baee0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   baee0:	b510      	push	{r4, lr}
   baee2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   baee4:	f7fc f87a 	bl	b6fdc <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   baee8:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   baeea:	b2db      	uxtb	r3, r3
   baeec:	2b01      	cmp	r3, #1
   baeee:	d908      	bls.n	baf02 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   baef0:	4620      	mov	r0, r4
   baef2:	f7ff ff8d 	bl	bae10 <pinAvailable>
   baef6:	b120      	cbz	r0, baf02 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   baef8:	4620      	mov	r0, r4
}
   baefa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   baefe:	f7fc b87d 	b.w	b6ffc <HAL_GPIO_Read>
}
   baf02:	2000      	movs	r0, #0
   baf04:	bd10      	pop	{r4, pc}

000baf06 <analogRead>:
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
#if defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0
  if(pin < FIRST_ANALOG_PIN)
   baf06:	280d      	cmp	r0, #13
{
   baf08:	b510      	push	{r4, lr}
   baf0a:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   baf0c:	bf9c      	itt	ls
   baf0e:	340e      	addls	r4, #14
   baf10:	b2a4      	uxthls	r4, r4
  }
#endif // defined(FIRST_ANALOG_PIN) && FIRST_ANALOG_PIN > 0

  // Safety check
  if( !pinAvailable(pin) ) {
   baf12:	4620      	mov	r0, r4
   baf14:	f7ff ff7c 	bl	bae10 <pinAvailable>
   baf18:	b150      	cbz	r0, baf30 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   baf1a:	2103      	movs	r1, #3
   baf1c:	4620      	mov	r0, r4
   baf1e:	f7fc f84d 	bl	b6fbc <HAL_Validate_Pin_Function>
   baf22:	2803      	cmp	r0, #3
   baf24:	d104      	bne.n	baf30 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   baf26:	4620      	mov	r0, r4
}
   baf28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   baf2c:	f7fc b86e 	b.w	b700c <hal_adc_read>
}
   baf30:	2000      	movs	r0, #0
   baf32:	bd10      	pop	{r4, pc}

000baf34 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   baf34:	4770      	bx	lr
	...

000baf38 <_Z17acquireWireBufferv>:
{
   baf38:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   baf3a:	2520      	movs	r5, #32
   baf3c:	2314      	movs	r3, #20
{
   baf3e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   baf40:	6003      	str	r3, [r0, #0]
   baf42:	6085      	str	r5, [r0, #8]
   baf44:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   baf46:	4906      	ldr	r1, [pc, #24]	; (baf60 <_Z17acquireWireBufferv+0x28>)
   baf48:	4628      	mov	r0, r5
   baf4a:	f000 f86f 	bl	bb02c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   baf4e:	4904      	ldr	r1, [pc, #16]	; (baf60 <_Z17acquireWireBufferv+0x28>)
	};
   baf50:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   baf52:	4628      	mov	r0, r5
   baf54:	f000 f86a 	bl	bb02c <_ZnajRKSt9nothrow_t>
	};
   baf58:	60e0      	str	r0, [r4, #12]
}
   baf5a:	4620      	mov	r0, r4
   baf5c:	bd38      	pop	{r3, r4, r5, pc}
   baf5e:	bf00      	nop
   baf60:	000be79c 	.word	0x000be79c

000baf64 <_Z19__fetch_global_Wirev>:
{
   baf64:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   baf66:	4d0e      	ldr	r5, [pc, #56]	; (bafa0 <_Z19__fetch_global_Wirev+0x3c>)
   baf68:	7829      	ldrb	r1, [r5, #0]
   baf6a:	f3bf 8f5b 	dmb	ish
   baf6e:	f011 0401 	ands.w	r4, r1, #1
{
   baf72:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   baf74:	d111      	bne.n	baf9a <_Z19__fetch_global_Wirev+0x36>
   baf76:	4628      	mov	r0, r5
   baf78:	f7f9 f893 	bl	b40a2 <__cxa_guard_acquire>
   baf7c:	b168      	cbz	r0, baf9a <_Z19__fetch_global_Wirev+0x36>
   baf7e:	a801      	add	r0, sp, #4
   baf80:	f7ff ffda 	bl	baf38 <_Z17acquireWireBufferv>
   baf84:	aa01      	add	r2, sp, #4
   baf86:	4621      	mov	r1, r4
   baf88:	4806      	ldr	r0, [pc, #24]	; (bafa4 <_Z19__fetch_global_Wirev+0x40>)
   baf8a:	f7ff f931 	bl	ba1f0 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   baf8e:	4628      	mov	r0, r5
   baf90:	f7f9 f88c 	bl	b40ac <__cxa_guard_release>
   baf94:	4804      	ldr	r0, [pc, #16]	; (bafa8 <_Z19__fetch_global_Wirev+0x44>)
   baf96:	f000 fe47 	bl	bbc28 <atexit>
	return wire;
}
   baf9a:	4802      	ldr	r0, [pc, #8]	; (bafa4 <_Z19__fetch_global_Wirev+0x40>)
   baf9c:	b007      	add	sp, #28
   baf9e:	bd30      	pop	{r4, r5, pc}
   bafa0:	2003e730 	.word	0x2003e730
   bafa4:	2003e734 	.word	0x2003e734
   bafa8:	000baf35 	.word	0x000baf35

000bafac <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bafac:	4770      	bx	lr
	...

000bafb0 <_Z20acquireSerial1Bufferv>:
{
   bafb0:	b538      	push	{r3, r4, r5, lr}
   bafb2:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   bafb4:	2514      	movs	r5, #20
   bafb6:	462a      	mov	r2, r5
   bafb8:	2100      	movs	r1, #0
   bafba:	f000 fe7a 	bl	bbcb2 <memset>
   bafbe:	8025      	strh	r5, [r4, #0]
   bafc0:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bafc2:	4907      	ldr	r1, [pc, #28]	; (bafe0 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   bafc4:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bafc6:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   bafc8:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bafca:	f000 f82f 	bl	bb02c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bafce:	4904      	ldr	r1, [pc, #16]	; (bafe0 <_Z20acquireSerial1Bufferv+0x30>)
    };
   bafd0:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   bafd2:	4628      	mov	r0, r5
   bafd4:	f000 f82a 	bl	bb02c <_ZnajRKSt9nothrow_t>
    };
   bafd8:	60e0      	str	r0, [r4, #12]
}
   bafda:	4620      	mov	r0, r4
   bafdc:	bd38      	pop	{r3, r4, r5, pc}
   bafde:	bf00      	nop
   bafe0:	000be79c 	.word	0x000be79c

000bafe4 <_Z22__fetch_global_Serial1v>:
{
   bafe4:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   bafe6:	4d0e      	ldr	r5, [pc, #56]	; (bb020 <_Z22__fetch_global_Serial1v+0x3c>)
   bafe8:	7829      	ldrb	r1, [r5, #0]
   bafea:	f3bf 8f5b 	dmb	ish
   bafee:	f011 0401 	ands.w	r4, r1, #1
{
   baff2:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   baff4:	d111      	bne.n	bb01a <_Z22__fetch_global_Serial1v+0x36>
   baff6:	4628      	mov	r0, r5
   baff8:	f7f9 f853 	bl	b40a2 <__cxa_guard_acquire>
   baffc:	b168      	cbz	r0, bb01a <_Z22__fetch_global_Serial1v+0x36>
   baffe:	a801      	add	r0, sp, #4
   bb000:	f7ff ffd6 	bl	bafb0 <_Z20acquireSerial1Bufferv>
   bb004:	aa01      	add	r2, sp, #4
   bb006:	4621      	mov	r1, r4
   bb008:	4806      	ldr	r0, [pc, #24]	; (bb024 <_Z22__fetch_global_Serial1v+0x40>)
   bb00a:	f7ff fdcd 	bl	baba8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   bb00e:	4628      	mov	r0, r5
   bb010:	f7f9 f84c 	bl	b40ac <__cxa_guard_release>
   bb014:	4804      	ldr	r0, [pc, #16]	; (bb028 <_Z22__fetch_global_Serial1v+0x44>)
   bb016:	f000 fe07 	bl	bbc28 <atexit>
    return serial1;
}
   bb01a:	4802      	ldr	r0, [pc, #8]	; (bb024 <_Z22__fetch_global_Serial1v+0x40>)
   bb01c:	b007      	add	sp, #28
   bb01e:	bd30      	pop	{r4, r5, pc}
   bb020:	2003e748 	.word	0x2003e748
   bb024:	2003e74c 	.word	0x2003e74c
   bb028:	000bafad 	.word	0x000bafad

000bb02c <_ZnajRKSt9nothrow_t>:
   bb02c:	f7f9 b835 	b.w	b409a <_Znaj>

000bb030 <_ZSt20__throw_length_errorPKc>:
   bb030:	b508      	push	{r3, lr}
   bb032:	f7fc fa27 	bl	b7484 <abort>

000bb036 <_ZSt25__throw_bad_function_callv>:
   bb036:	b508      	push	{r3, lr}
   bb038:	f7fc fa24 	bl	b7484 <abort>

000bb03c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   bb03c:	4901      	ldr	r1, [pc, #4]	; (bb044 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   bb03e:	f000 b8f9 	b.w	bb234 <_ZNKSt9type_infoeqERKS_>
   bb042:	bf00      	nop
   bb044:	000be7b8 	.word	0x000be7b8

000bb048 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   bb048:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   bb04a:	2400      	movs	r4, #0
   bb04c:	2310      	movs	r3, #16
   bb04e:	e9cd 3402 	strd	r3, r4, [sp, #8]
   bb052:	6803      	ldr	r3, [r0, #0]
   bb054:	4615      	mov	r5, r2
   bb056:	699e      	ldr	r6, [r3, #24]
   bb058:	6812      	ldr	r2, [r2, #0]
   bb05a:	466b      	mov	r3, sp
   bb05c:	e9cd 4400 	strd	r4, r4, [sp]
   bb060:	47b0      	blx	r6
   bb062:	f89d 3004 	ldrb.w	r3, [sp, #4]
   bb066:	f003 0306 	and.w	r3, r3, #6
   bb06a:	2b06      	cmp	r3, #6
   bb06c:	bf03      	ittte	eq
   bb06e:	9b00      	ldreq	r3, [sp, #0]
   bb070:	602b      	streq	r3, [r5, #0]
   bb072:	2001      	moveq	r0, #1
   bb074:	4620      	movne	r0, r4
   bb076:	b004      	add	sp, #16
   bb078:	bd70      	pop	{r4, r5, r6, pc}

000bb07a <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   bb07a:	9800      	ldr	r0, [sp, #0]
   bb07c:	4290      	cmp	r0, r2
   bb07e:	bf14      	ite	ne
   bb080:	2001      	movne	r0, #1
   bb082:	2006      	moveq	r0, #6
   bb084:	4770      	bx	lr
	...

000bb088 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   bb088:	b510      	push	{r4, lr}
   bb08a:	4b03      	ldr	r3, [pc, #12]	; (bb098 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   bb08c:	6003      	str	r3, [r0, #0]
   bb08e:	4604      	mov	r4, r0
   bb090:	f000 f8cd 	bl	bb22e <_ZNSt9type_infoD1Ev>
   bb094:	4620      	mov	r0, r4
   bb096:	bd10      	pop	{r4, pc}
   bb098:	000be7f8 	.word	0x000be7f8

000bb09c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   bb09c:	b510      	push	{r4, lr}
   bb09e:	4604      	mov	r4, r0
   bb0a0:	f7ff fff2 	bl	bb088 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bb0a4:	4620      	mov	r0, r4
   bb0a6:	2108      	movs	r1, #8
   bb0a8:	f7f8 fff9 	bl	b409e <_ZdlPvj>
   bb0ac:	4620      	mov	r0, r4
   bb0ae:	bd10      	pop	{r4, pc}

000bb0b0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   bb0b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb0b4:	461f      	mov	r7, r3
   bb0b6:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   bb0ba:	f8dd 8018 	ldr.w	r8, [sp, #24]
   bb0be:	4598      	cmp	r8, r3
   bb0c0:	4606      	mov	r6, r0
   bb0c2:	4615      	mov	r5, r2
   bb0c4:	d107      	bne.n	bb0d6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bb0c6:	9907      	ldr	r1, [sp, #28]
   bb0c8:	f000 f8b4 	bl	bb234 <_ZNKSt9type_infoeqERKS_>
   bb0cc:	b118      	cbz	r0, bb0d6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   bb0ce:	7165      	strb	r5, [r4, #5]
   bb0d0:	2000      	movs	r0, #0
   bb0d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bb0d6:	4639      	mov	r1, r7
   bb0d8:	4630      	mov	r0, r6
   bb0da:	f000 f8ab 	bl	bb234 <_ZNKSt9type_infoeqERKS_>
   bb0de:	2800      	cmp	r0, #0
   bb0e0:	d0f6      	beq.n	bb0d0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   bb0e2:	2301      	movs	r3, #1
   bb0e4:	f8c4 8000 	str.w	r8, [r4]
   bb0e8:	7125      	strb	r5, [r4, #4]
   bb0ea:	71a3      	strb	r3, [r4, #6]
   bb0ec:	e7f0      	b.n	bb0d0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000bb0ee <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   bb0ee:	b538      	push	{r3, r4, r5, lr}
   bb0f0:	4615      	mov	r5, r2
   bb0f2:	461c      	mov	r4, r3
   bb0f4:	f000 f89e 	bl	bb234 <_ZNKSt9type_infoeqERKS_>
   bb0f8:	b120      	cbz	r0, bb104 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   bb0fa:	2308      	movs	r3, #8
   bb0fc:	60e3      	str	r3, [r4, #12]
   bb0fe:	2306      	movs	r3, #6
   bb100:	6025      	str	r5, [r4, #0]
   bb102:	7123      	strb	r3, [r4, #4]
   bb104:	bd38      	pop	{r3, r4, r5, pc}

000bb106 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   bb106:	b573      	push	{r0, r1, r4, r5, r6, lr}
   bb108:	4605      	mov	r5, r0
   bb10a:	460c      	mov	r4, r1
   bb10c:	9201      	str	r2, [sp, #4]
   bb10e:	461e      	mov	r6, r3
   bb110:	f000 f890 	bl	bb234 <_ZNKSt9type_infoeqERKS_>
   bb114:	b950      	cbnz	r0, bb12c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bb116:	2e03      	cmp	r6, #3
   bb118:	d808      	bhi.n	bb12c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   bb11a:	6823      	ldr	r3, [r4, #0]
   bb11c:	9a01      	ldr	r2, [sp, #4]
   bb11e:	695b      	ldr	r3, [r3, #20]
   bb120:	4629      	mov	r1, r5
   bb122:	4620      	mov	r0, r4
   bb124:	b002      	add	sp, #8
   bb126:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   bb12a:	4718      	bx	r3
   bb12c:	b002      	add	sp, #8
   bb12e:	bd70      	pop	{r4, r5, r6, pc}

000bb130 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   bb130:	b510      	push	{r4, lr}
   bb132:	4b03      	ldr	r3, [pc, #12]	; (bb140 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   bb134:	6003      	str	r3, [r0, #0]
   bb136:	4604      	mov	r4, r0
   bb138:	f7ff ffa6 	bl	bb088 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   bb13c:	4620      	mov	r0, r4
   bb13e:	bd10      	pop	{r4, pc}
   bb140:	000be858 	.word	0x000be858

000bb144 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   bb144:	b510      	push	{r4, lr}
   bb146:	4604      	mov	r4, r0
   bb148:	f7ff fff2 	bl	bb130 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   bb14c:	4620      	mov	r0, r4
   bb14e:	210c      	movs	r1, #12
   bb150:	f7f8 ffa5 	bl	b409e <_ZdlPvj>
   bb154:	4620      	mov	r0, r4
   bb156:	bd10      	pop	{r4, pc}

000bb158 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   bb158:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   bb15a:	9f08      	ldr	r7, [sp, #32]
   bb15c:	4297      	cmp	r7, r2
   bb15e:	4605      	mov	r5, r0
   bb160:	460e      	mov	r6, r1
   bb162:	4614      	mov	r4, r2
   bb164:	d00a      	beq.n	bb17c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   bb166:	68a8      	ldr	r0, [r5, #8]
   bb168:	6802      	ldr	r2, [r0, #0]
   bb16a:	9708      	str	r7, [sp, #32]
   bb16c:	6a15      	ldr	r5, [r2, #32]
   bb16e:	4631      	mov	r1, r6
   bb170:	4622      	mov	r2, r4
   bb172:	46ac      	mov	ip, r5
   bb174:	b003      	add	sp, #12
   bb176:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   bb17a:	4760      	bx	ip
   bb17c:	4619      	mov	r1, r3
   bb17e:	9301      	str	r3, [sp, #4]
   bb180:	f000 f858 	bl	bb234 <_ZNKSt9type_infoeqERKS_>
   bb184:	9b01      	ldr	r3, [sp, #4]
   bb186:	2800      	cmp	r0, #0
   bb188:	d0ed      	beq.n	bb166 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   bb18a:	2006      	movs	r0, #6
   bb18c:	b003      	add	sp, #12
   bb18e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000bb190 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   bb190:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb194:	460d      	mov	r5, r1
   bb196:	4619      	mov	r1, r3
   bb198:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   bb19c:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   bb1a0:	4681      	mov	r9, r0
   bb1a2:	4617      	mov	r7, r2
   bb1a4:	4698      	mov	r8, r3
   bb1a6:	f000 f845 	bl	bb234 <_ZNKSt9type_infoeqERKS_>
   bb1aa:	b190      	cbz	r0, bb1d2 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   bb1ac:	2d00      	cmp	r5, #0
   bb1ae:	6034      	str	r4, [r6, #0]
   bb1b0:	7137      	strb	r7, [r6, #4]
   bb1b2:	db09      	blt.n	bb1c8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   bb1b4:	1961      	adds	r1, r4, r5
   bb1b6:	458a      	cmp	sl, r1
   bb1b8:	bf0c      	ite	eq
   bb1ba:	2106      	moveq	r1, #6
   bb1bc:	2101      	movne	r1, #1
   bb1be:	71b1      	strb	r1, [r6, #6]
   bb1c0:	2000      	movs	r0, #0
   bb1c2:	b001      	add	sp, #4
   bb1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bb1c8:	3502      	adds	r5, #2
   bb1ca:	d1f9      	bne.n	bb1c0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bb1cc:	2301      	movs	r3, #1
   bb1ce:	71b3      	strb	r3, [r6, #6]
   bb1d0:	e7f6      	b.n	bb1c0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bb1d2:	4554      	cmp	r4, sl
   bb1d4:	d106      	bne.n	bb1e4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bb1d6:	4659      	mov	r1, fp
   bb1d8:	4648      	mov	r0, r9
   bb1da:	f000 f82b 	bl	bb234 <_ZNKSt9type_infoeqERKS_>
   bb1de:	b108      	cbz	r0, bb1e4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   bb1e0:	7177      	strb	r7, [r6, #5]
   bb1e2:	e7ed      	b.n	bb1c0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   bb1e4:	f8d9 0008 	ldr.w	r0, [r9, #8]
   bb1e8:	6803      	ldr	r3, [r0, #0]
   bb1ea:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   bb1ee:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   bb1f2:	69dc      	ldr	r4, [r3, #28]
   bb1f4:	463a      	mov	r2, r7
   bb1f6:	4643      	mov	r3, r8
   bb1f8:	4629      	mov	r1, r5
   bb1fa:	46a4      	mov	ip, r4
   bb1fc:	b001      	add	sp, #4
   bb1fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bb202:	4760      	bx	ip

000bb204 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   bb204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bb208:	4607      	mov	r7, r0
   bb20a:	460c      	mov	r4, r1
   bb20c:	4615      	mov	r5, r2
   bb20e:	461e      	mov	r6, r3
   bb210:	f7ff ff6d 	bl	bb0ee <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   bb214:	b948      	cbnz	r0, bb22a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   bb216:	68b8      	ldr	r0, [r7, #8]
   bb218:	6803      	ldr	r3, [r0, #0]
   bb21a:	699f      	ldr	r7, [r3, #24]
   bb21c:	462a      	mov	r2, r5
   bb21e:	4633      	mov	r3, r6
   bb220:	4621      	mov	r1, r4
   bb222:	46bc      	mov	ip, r7
   bb224:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   bb228:	4760      	bx	ip
   bb22a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000bb22e <_ZNSt9type_infoD1Ev>:
   bb22e:	4770      	bx	lr

000bb230 <_ZNKSt9type_info14__is_pointer_pEv>:
   bb230:	2000      	movs	r0, #0
   bb232:	4770      	bx	lr

000bb234 <_ZNKSt9type_infoeqERKS_>:
   bb234:	4281      	cmp	r1, r0
   bb236:	b508      	push	{r3, lr}
   bb238:	d00e      	beq.n	bb258 <_ZNKSt9type_infoeqERKS_+0x24>
   bb23a:	6840      	ldr	r0, [r0, #4]
   bb23c:	7803      	ldrb	r3, [r0, #0]
   bb23e:	2b2a      	cmp	r3, #42	; 0x2a
   bb240:	d00c      	beq.n	bb25c <_ZNKSt9type_infoeqERKS_+0x28>
   bb242:	6849      	ldr	r1, [r1, #4]
   bb244:	780b      	ldrb	r3, [r1, #0]
   bb246:	2b2a      	cmp	r3, #42	; 0x2a
   bb248:	bf08      	it	eq
   bb24a:	3101      	addeq	r1, #1
   bb24c:	f000 fd77 	bl	bbd3e <strcmp>
   bb250:	fab0 f080 	clz	r0, r0
   bb254:	0940      	lsrs	r0, r0, #5
   bb256:	bd08      	pop	{r3, pc}
   bb258:	2001      	movs	r0, #1
   bb25a:	e7fc      	b.n	bb256 <_ZNKSt9type_infoeqERKS_+0x22>
   bb25c:	2000      	movs	r0, #0
   bb25e:	e7fa      	b.n	bb256 <_ZNKSt9type_infoeqERKS_+0x22>

000bb260 <__aeabi_drsub>:
   bb260:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   bb264:	e002      	b.n	bb26c <__adddf3>
   bb266:	bf00      	nop

000bb268 <__aeabi_dsub>:
   bb268:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000bb26c <__adddf3>:
   bb26c:	b530      	push	{r4, r5, lr}
   bb26e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   bb272:	ea4f 0543 	mov.w	r5, r3, lsl #1
   bb276:	ea94 0f05 	teq	r4, r5
   bb27a:	bf08      	it	eq
   bb27c:	ea90 0f02 	teqeq	r0, r2
   bb280:	bf1f      	itttt	ne
   bb282:	ea54 0c00 	orrsne.w	ip, r4, r0
   bb286:	ea55 0c02 	orrsne.w	ip, r5, r2
   bb28a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   bb28e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bb292:	f000 80e2 	beq.w	bb45a <__adddf3+0x1ee>
   bb296:	ea4f 5454 	mov.w	r4, r4, lsr #21
   bb29a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   bb29e:	bfb8      	it	lt
   bb2a0:	426d      	neglt	r5, r5
   bb2a2:	dd0c      	ble.n	bb2be <__adddf3+0x52>
   bb2a4:	442c      	add	r4, r5
   bb2a6:	ea80 0202 	eor.w	r2, r0, r2
   bb2aa:	ea81 0303 	eor.w	r3, r1, r3
   bb2ae:	ea82 0000 	eor.w	r0, r2, r0
   bb2b2:	ea83 0101 	eor.w	r1, r3, r1
   bb2b6:	ea80 0202 	eor.w	r2, r0, r2
   bb2ba:	ea81 0303 	eor.w	r3, r1, r3
   bb2be:	2d36      	cmp	r5, #54	; 0x36
   bb2c0:	bf88      	it	hi
   bb2c2:	bd30      	pophi	{r4, r5, pc}
   bb2c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   bb2c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bb2cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   bb2d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   bb2d4:	d002      	beq.n	bb2dc <__adddf3+0x70>
   bb2d6:	4240      	negs	r0, r0
   bb2d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bb2dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   bb2e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bb2e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   bb2e8:	d002      	beq.n	bb2f0 <__adddf3+0x84>
   bb2ea:	4252      	negs	r2, r2
   bb2ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   bb2f0:	ea94 0f05 	teq	r4, r5
   bb2f4:	f000 80a7 	beq.w	bb446 <__adddf3+0x1da>
   bb2f8:	f1a4 0401 	sub.w	r4, r4, #1
   bb2fc:	f1d5 0e20 	rsbs	lr, r5, #32
   bb300:	db0d      	blt.n	bb31e <__adddf3+0xb2>
   bb302:	fa02 fc0e 	lsl.w	ip, r2, lr
   bb306:	fa22 f205 	lsr.w	r2, r2, r5
   bb30a:	1880      	adds	r0, r0, r2
   bb30c:	f141 0100 	adc.w	r1, r1, #0
   bb310:	fa03 f20e 	lsl.w	r2, r3, lr
   bb314:	1880      	adds	r0, r0, r2
   bb316:	fa43 f305 	asr.w	r3, r3, r5
   bb31a:	4159      	adcs	r1, r3
   bb31c:	e00e      	b.n	bb33c <__adddf3+0xd0>
   bb31e:	f1a5 0520 	sub.w	r5, r5, #32
   bb322:	f10e 0e20 	add.w	lr, lr, #32
   bb326:	2a01      	cmp	r2, #1
   bb328:	fa03 fc0e 	lsl.w	ip, r3, lr
   bb32c:	bf28      	it	cs
   bb32e:	f04c 0c02 	orrcs.w	ip, ip, #2
   bb332:	fa43 f305 	asr.w	r3, r3, r5
   bb336:	18c0      	adds	r0, r0, r3
   bb338:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   bb33c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bb340:	d507      	bpl.n	bb352 <__adddf3+0xe6>
   bb342:	f04f 0e00 	mov.w	lr, #0
   bb346:	f1dc 0c00 	rsbs	ip, ip, #0
   bb34a:	eb7e 0000 	sbcs.w	r0, lr, r0
   bb34e:	eb6e 0101 	sbc.w	r1, lr, r1
   bb352:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   bb356:	d31b      	bcc.n	bb390 <__adddf3+0x124>
   bb358:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   bb35c:	d30c      	bcc.n	bb378 <__adddf3+0x10c>
   bb35e:	0849      	lsrs	r1, r1, #1
   bb360:	ea5f 0030 	movs.w	r0, r0, rrx
   bb364:	ea4f 0c3c 	mov.w	ip, ip, rrx
   bb368:	f104 0401 	add.w	r4, r4, #1
   bb36c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   bb370:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   bb374:	f080 809a 	bcs.w	bb4ac <__adddf3+0x240>
   bb378:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   bb37c:	bf08      	it	eq
   bb37e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bb382:	f150 0000 	adcs.w	r0, r0, #0
   bb386:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bb38a:	ea41 0105 	orr.w	r1, r1, r5
   bb38e:	bd30      	pop	{r4, r5, pc}
   bb390:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   bb394:	4140      	adcs	r0, r0
   bb396:	eb41 0101 	adc.w	r1, r1, r1
   bb39a:	3c01      	subs	r4, #1
   bb39c:	bf28      	it	cs
   bb39e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   bb3a2:	d2e9      	bcs.n	bb378 <__adddf3+0x10c>
   bb3a4:	f091 0f00 	teq	r1, #0
   bb3a8:	bf04      	itt	eq
   bb3aa:	4601      	moveq	r1, r0
   bb3ac:	2000      	moveq	r0, #0
   bb3ae:	fab1 f381 	clz	r3, r1
   bb3b2:	bf08      	it	eq
   bb3b4:	3320      	addeq	r3, #32
   bb3b6:	f1a3 030b 	sub.w	r3, r3, #11
   bb3ba:	f1b3 0220 	subs.w	r2, r3, #32
   bb3be:	da0c      	bge.n	bb3da <__adddf3+0x16e>
   bb3c0:	320c      	adds	r2, #12
   bb3c2:	dd08      	ble.n	bb3d6 <__adddf3+0x16a>
   bb3c4:	f102 0c14 	add.w	ip, r2, #20
   bb3c8:	f1c2 020c 	rsb	r2, r2, #12
   bb3cc:	fa01 f00c 	lsl.w	r0, r1, ip
   bb3d0:	fa21 f102 	lsr.w	r1, r1, r2
   bb3d4:	e00c      	b.n	bb3f0 <__adddf3+0x184>
   bb3d6:	f102 0214 	add.w	r2, r2, #20
   bb3da:	bfd8      	it	le
   bb3dc:	f1c2 0c20 	rsble	ip, r2, #32
   bb3e0:	fa01 f102 	lsl.w	r1, r1, r2
   bb3e4:	fa20 fc0c 	lsr.w	ip, r0, ip
   bb3e8:	bfdc      	itt	le
   bb3ea:	ea41 010c 	orrle.w	r1, r1, ip
   bb3ee:	4090      	lslle	r0, r2
   bb3f0:	1ae4      	subs	r4, r4, r3
   bb3f2:	bfa2      	ittt	ge
   bb3f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   bb3f8:	4329      	orrge	r1, r5
   bb3fa:	bd30      	popge	{r4, r5, pc}
   bb3fc:	ea6f 0404 	mvn.w	r4, r4
   bb400:	3c1f      	subs	r4, #31
   bb402:	da1c      	bge.n	bb43e <__adddf3+0x1d2>
   bb404:	340c      	adds	r4, #12
   bb406:	dc0e      	bgt.n	bb426 <__adddf3+0x1ba>
   bb408:	f104 0414 	add.w	r4, r4, #20
   bb40c:	f1c4 0220 	rsb	r2, r4, #32
   bb410:	fa20 f004 	lsr.w	r0, r0, r4
   bb414:	fa01 f302 	lsl.w	r3, r1, r2
   bb418:	ea40 0003 	orr.w	r0, r0, r3
   bb41c:	fa21 f304 	lsr.w	r3, r1, r4
   bb420:	ea45 0103 	orr.w	r1, r5, r3
   bb424:	bd30      	pop	{r4, r5, pc}
   bb426:	f1c4 040c 	rsb	r4, r4, #12
   bb42a:	f1c4 0220 	rsb	r2, r4, #32
   bb42e:	fa20 f002 	lsr.w	r0, r0, r2
   bb432:	fa01 f304 	lsl.w	r3, r1, r4
   bb436:	ea40 0003 	orr.w	r0, r0, r3
   bb43a:	4629      	mov	r1, r5
   bb43c:	bd30      	pop	{r4, r5, pc}
   bb43e:	fa21 f004 	lsr.w	r0, r1, r4
   bb442:	4629      	mov	r1, r5
   bb444:	bd30      	pop	{r4, r5, pc}
   bb446:	f094 0f00 	teq	r4, #0
   bb44a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   bb44e:	bf06      	itte	eq
   bb450:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   bb454:	3401      	addeq	r4, #1
   bb456:	3d01      	subne	r5, #1
   bb458:	e74e      	b.n	bb2f8 <__adddf3+0x8c>
   bb45a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bb45e:	bf18      	it	ne
   bb460:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   bb464:	d029      	beq.n	bb4ba <__adddf3+0x24e>
   bb466:	ea94 0f05 	teq	r4, r5
   bb46a:	bf08      	it	eq
   bb46c:	ea90 0f02 	teqeq	r0, r2
   bb470:	d005      	beq.n	bb47e <__adddf3+0x212>
   bb472:	ea54 0c00 	orrs.w	ip, r4, r0
   bb476:	bf04      	itt	eq
   bb478:	4619      	moveq	r1, r3
   bb47a:	4610      	moveq	r0, r2
   bb47c:	bd30      	pop	{r4, r5, pc}
   bb47e:	ea91 0f03 	teq	r1, r3
   bb482:	bf1e      	ittt	ne
   bb484:	2100      	movne	r1, #0
   bb486:	2000      	movne	r0, #0
   bb488:	bd30      	popne	{r4, r5, pc}
   bb48a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   bb48e:	d105      	bne.n	bb49c <__adddf3+0x230>
   bb490:	0040      	lsls	r0, r0, #1
   bb492:	4149      	adcs	r1, r1
   bb494:	bf28      	it	cs
   bb496:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   bb49a:	bd30      	pop	{r4, r5, pc}
   bb49c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   bb4a0:	bf3c      	itt	cc
   bb4a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   bb4a6:	bd30      	popcc	{r4, r5, pc}
   bb4a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bb4ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   bb4b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bb4b4:	f04f 0000 	mov.w	r0, #0
   bb4b8:	bd30      	pop	{r4, r5, pc}
   bb4ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   bb4be:	bf1a      	itte	ne
   bb4c0:	4619      	movne	r1, r3
   bb4c2:	4610      	movne	r0, r2
   bb4c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   bb4c8:	bf1c      	itt	ne
   bb4ca:	460b      	movne	r3, r1
   bb4cc:	4602      	movne	r2, r0
   bb4ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bb4d2:	bf06      	itte	eq
   bb4d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   bb4d8:	ea91 0f03 	teqeq	r1, r3
   bb4dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   bb4e0:	bd30      	pop	{r4, r5, pc}
   bb4e2:	bf00      	nop

000bb4e4 <__aeabi_ui2d>:
   bb4e4:	f090 0f00 	teq	r0, #0
   bb4e8:	bf04      	itt	eq
   bb4ea:	2100      	moveq	r1, #0
   bb4ec:	4770      	bxeq	lr
   bb4ee:	b530      	push	{r4, r5, lr}
   bb4f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bb4f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bb4f8:	f04f 0500 	mov.w	r5, #0
   bb4fc:	f04f 0100 	mov.w	r1, #0
   bb500:	e750      	b.n	bb3a4 <__adddf3+0x138>
   bb502:	bf00      	nop

000bb504 <__aeabi_i2d>:
   bb504:	f090 0f00 	teq	r0, #0
   bb508:	bf04      	itt	eq
   bb50a:	2100      	moveq	r1, #0
   bb50c:	4770      	bxeq	lr
   bb50e:	b530      	push	{r4, r5, lr}
   bb510:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bb514:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bb518:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   bb51c:	bf48      	it	mi
   bb51e:	4240      	negmi	r0, r0
   bb520:	f04f 0100 	mov.w	r1, #0
   bb524:	e73e      	b.n	bb3a4 <__adddf3+0x138>
   bb526:	bf00      	nop

000bb528 <__aeabi_f2d>:
   bb528:	0042      	lsls	r2, r0, #1
   bb52a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   bb52e:	ea4f 0131 	mov.w	r1, r1, rrx
   bb532:	ea4f 7002 	mov.w	r0, r2, lsl #28
   bb536:	bf1f      	itttt	ne
   bb538:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   bb53c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   bb540:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   bb544:	4770      	bxne	lr
   bb546:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   bb54a:	bf08      	it	eq
   bb54c:	4770      	bxeq	lr
   bb54e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   bb552:	bf04      	itt	eq
   bb554:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   bb558:	4770      	bxeq	lr
   bb55a:	b530      	push	{r4, r5, lr}
   bb55c:	f44f 7460 	mov.w	r4, #896	; 0x380
   bb560:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   bb564:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bb568:	e71c      	b.n	bb3a4 <__adddf3+0x138>
   bb56a:	bf00      	nop

000bb56c <__aeabi_ul2d>:
   bb56c:	ea50 0201 	orrs.w	r2, r0, r1
   bb570:	bf08      	it	eq
   bb572:	4770      	bxeq	lr
   bb574:	b530      	push	{r4, r5, lr}
   bb576:	f04f 0500 	mov.w	r5, #0
   bb57a:	e00a      	b.n	bb592 <__aeabi_l2d+0x16>

000bb57c <__aeabi_l2d>:
   bb57c:	ea50 0201 	orrs.w	r2, r0, r1
   bb580:	bf08      	it	eq
   bb582:	4770      	bxeq	lr
   bb584:	b530      	push	{r4, r5, lr}
   bb586:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   bb58a:	d502      	bpl.n	bb592 <__aeabi_l2d+0x16>
   bb58c:	4240      	negs	r0, r0
   bb58e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bb592:	f44f 6480 	mov.w	r4, #1024	; 0x400
   bb596:	f104 0432 	add.w	r4, r4, #50	; 0x32
   bb59a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   bb59e:	f43f aed8 	beq.w	bb352 <__adddf3+0xe6>
   bb5a2:	f04f 0203 	mov.w	r2, #3
   bb5a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bb5aa:	bf18      	it	ne
   bb5ac:	3203      	addne	r2, #3
   bb5ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   bb5b2:	bf18      	it	ne
   bb5b4:	3203      	addne	r2, #3
   bb5b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   bb5ba:	f1c2 0320 	rsb	r3, r2, #32
   bb5be:	fa00 fc03 	lsl.w	ip, r0, r3
   bb5c2:	fa20 f002 	lsr.w	r0, r0, r2
   bb5c6:	fa01 fe03 	lsl.w	lr, r1, r3
   bb5ca:	ea40 000e 	orr.w	r0, r0, lr
   bb5ce:	fa21 f102 	lsr.w	r1, r1, r2
   bb5d2:	4414      	add	r4, r2
   bb5d4:	e6bd      	b.n	bb352 <__adddf3+0xe6>
   bb5d6:	bf00      	nop

000bb5d8 <__aeabi_dmul>:
   bb5d8:	b570      	push	{r4, r5, r6, lr}
   bb5da:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bb5de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bb5e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bb5e6:	bf1d      	ittte	ne
   bb5e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bb5ec:	ea94 0f0c 	teqne	r4, ip
   bb5f0:	ea95 0f0c 	teqne	r5, ip
   bb5f4:	f000 f8de 	bleq	bb7b4 <__aeabi_dmul+0x1dc>
   bb5f8:	442c      	add	r4, r5
   bb5fa:	ea81 0603 	eor.w	r6, r1, r3
   bb5fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   bb602:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   bb606:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   bb60a:	bf18      	it	ne
   bb60c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   bb610:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb614:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bb618:	d038      	beq.n	bb68c <__aeabi_dmul+0xb4>
   bb61a:	fba0 ce02 	umull	ip, lr, r0, r2
   bb61e:	f04f 0500 	mov.w	r5, #0
   bb622:	fbe1 e502 	umlal	lr, r5, r1, r2
   bb626:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   bb62a:	fbe0 e503 	umlal	lr, r5, r0, r3
   bb62e:	f04f 0600 	mov.w	r6, #0
   bb632:	fbe1 5603 	umlal	r5, r6, r1, r3
   bb636:	f09c 0f00 	teq	ip, #0
   bb63a:	bf18      	it	ne
   bb63c:	f04e 0e01 	orrne.w	lr, lr, #1
   bb640:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   bb644:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   bb648:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   bb64c:	d204      	bcs.n	bb658 <__aeabi_dmul+0x80>
   bb64e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   bb652:	416d      	adcs	r5, r5
   bb654:	eb46 0606 	adc.w	r6, r6, r6
   bb658:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   bb65c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   bb660:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   bb664:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   bb668:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   bb66c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bb670:	bf88      	it	hi
   bb672:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bb676:	d81e      	bhi.n	bb6b6 <__aeabi_dmul+0xde>
   bb678:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   bb67c:	bf08      	it	eq
   bb67e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   bb682:	f150 0000 	adcs.w	r0, r0, #0
   bb686:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bb68a:	bd70      	pop	{r4, r5, r6, pc}
   bb68c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   bb690:	ea46 0101 	orr.w	r1, r6, r1
   bb694:	ea40 0002 	orr.w	r0, r0, r2
   bb698:	ea81 0103 	eor.w	r1, r1, r3
   bb69c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   bb6a0:	bfc2      	ittt	gt
   bb6a2:	ebd4 050c 	rsbsgt	r5, r4, ip
   bb6a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bb6aa:	bd70      	popgt	{r4, r5, r6, pc}
   bb6ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb6b0:	f04f 0e00 	mov.w	lr, #0
   bb6b4:	3c01      	subs	r4, #1
   bb6b6:	f300 80ab 	bgt.w	bb810 <__aeabi_dmul+0x238>
   bb6ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
   bb6be:	bfde      	ittt	le
   bb6c0:	2000      	movle	r0, #0
   bb6c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   bb6c6:	bd70      	pople	{r4, r5, r6, pc}
   bb6c8:	f1c4 0400 	rsb	r4, r4, #0
   bb6cc:	3c20      	subs	r4, #32
   bb6ce:	da35      	bge.n	bb73c <__aeabi_dmul+0x164>
   bb6d0:	340c      	adds	r4, #12
   bb6d2:	dc1b      	bgt.n	bb70c <__aeabi_dmul+0x134>
   bb6d4:	f104 0414 	add.w	r4, r4, #20
   bb6d8:	f1c4 0520 	rsb	r5, r4, #32
   bb6dc:	fa00 f305 	lsl.w	r3, r0, r5
   bb6e0:	fa20 f004 	lsr.w	r0, r0, r4
   bb6e4:	fa01 f205 	lsl.w	r2, r1, r5
   bb6e8:	ea40 0002 	orr.w	r0, r0, r2
   bb6ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   bb6f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   bb6f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bb6f8:	fa21 f604 	lsr.w	r6, r1, r4
   bb6fc:	eb42 0106 	adc.w	r1, r2, r6
   bb700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bb704:	bf08      	it	eq
   bb706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bb70a:	bd70      	pop	{r4, r5, r6, pc}
   bb70c:	f1c4 040c 	rsb	r4, r4, #12
   bb710:	f1c4 0520 	rsb	r5, r4, #32
   bb714:	fa00 f304 	lsl.w	r3, r0, r4
   bb718:	fa20 f005 	lsr.w	r0, r0, r5
   bb71c:	fa01 f204 	lsl.w	r2, r1, r4
   bb720:	ea40 0002 	orr.w	r0, r0, r2
   bb724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb728:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   bb72c:	f141 0100 	adc.w	r1, r1, #0
   bb730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bb734:	bf08      	it	eq
   bb736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bb73a:	bd70      	pop	{r4, r5, r6, pc}
   bb73c:	f1c4 0520 	rsb	r5, r4, #32
   bb740:	fa00 f205 	lsl.w	r2, r0, r5
   bb744:	ea4e 0e02 	orr.w	lr, lr, r2
   bb748:	fa20 f304 	lsr.w	r3, r0, r4
   bb74c:	fa01 f205 	lsl.w	r2, r1, r5
   bb750:	ea43 0302 	orr.w	r3, r3, r2
   bb754:	fa21 f004 	lsr.w	r0, r1, r4
   bb758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb75c:	fa21 f204 	lsr.w	r2, r1, r4
   bb760:	ea20 0002 	bic.w	r0, r0, r2
   bb764:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   bb768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   bb76c:	bf08      	it	eq
   bb76e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   bb772:	bd70      	pop	{r4, r5, r6, pc}
   bb774:	f094 0f00 	teq	r4, #0
   bb778:	d10f      	bne.n	bb79a <__aeabi_dmul+0x1c2>
   bb77a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   bb77e:	0040      	lsls	r0, r0, #1
   bb780:	eb41 0101 	adc.w	r1, r1, r1
   bb784:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bb788:	bf08      	it	eq
   bb78a:	3c01      	subeq	r4, #1
   bb78c:	d0f7      	beq.n	bb77e <__aeabi_dmul+0x1a6>
   bb78e:	ea41 0106 	orr.w	r1, r1, r6
   bb792:	f095 0f00 	teq	r5, #0
   bb796:	bf18      	it	ne
   bb798:	4770      	bxne	lr
   bb79a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   bb79e:	0052      	lsls	r2, r2, #1
   bb7a0:	eb43 0303 	adc.w	r3, r3, r3
   bb7a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   bb7a8:	bf08      	it	eq
   bb7aa:	3d01      	subeq	r5, #1
   bb7ac:	d0f7      	beq.n	bb79e <__aeabi_dmul+0x1c6>
   bb7ae:	ea43 0306 	orr.w	r3, r3, r6
   bb7b2:	4770      	bx	lr
   bb7b4:	ea94 0f0c 	teq	r4, ip
   bb7b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bb7bc:	bf18      	it	ne
   bb7be:	ea95 0f0c 	teqne	r5, ip
   bb7c2:	d00c      	beq.n	bb7de <__aeabi_dmul+0x206>
   bb7c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bb7c8:	bf18      	it	ne
   bb7ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bb7ce:	d1d1      	bne.n	bb774 <__aeabi_dmul+0x19c>
   bb7d0:	ea81 0103 	eor.w	r1, r1, r3
   bb7d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb7d8:	f04f 0000 	mov.w	r0, #0
   bb7dc:	bd70      	pop	{r4, r5, r6, pc}
   bb7de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bb7e2:	bf06      	itte	eq
   bb7e4:	4610      	moveq	r0, r2
   bb7e6:	4619      	moveq	r1, r3
   bb7e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bb7ec:	d019      	beq.n	bb822 <__aeabi_dmul+0x24a>
   bb7ee:	ea94 0f0c 	teq	r4, ip
   bb7f2:	d102      	bne.n	bb7fa <__aeabi_dmul+0x222>
   bb7f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   bb7f8:	d113      	bne.n	bb822 <__aeabi_dmul+0x24a>
   bb7fa:	ea95 0f0c 	teq	r5, ip
   bb7fe:	d105      	bne.n	bb80c <__aeabi_dmul+0x234>
   bb800:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   bb804:	bf1c      	itt	ne
   bb806:	4610      	movne	r0, r2
   bb808:	4619      	movne	r1, r3
   bb80a:	d10a      	bne.n	bb822 <__aeabi_dmul+0x24a>
   bb80c:	ea81 0103 	eor.w	r1, r1, r3
   bb810:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   bb814:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bb818:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   bb81c:	f04f 0000 	mov.w	r0, #0
   bb820:	bd70      	pop	{r4, r5, r6, pc}
   bb822:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   bb826:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   bb82a:	bd70      	pop	{r4, r5, r6, pc}

000bb82c <__aeabi_ddiv>:
   bb82c:	b570      	push	{r4, r5, r6, lr}
   bb82e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   bb832:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   bb836:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   bb83a:	bf1d      	ittte	ne
   bb83c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   bb840:	ea94 0f0c 	teqne	r4, ip
   bb844:	ea95 0f0c 	teqne	r5, ip
   bb848:	f000 f8a7 	bleq	bb99a <__aeabi_ddiv+0x16e>
   bb84c:	eba4 0405 	sub.w	r4, r4, r5
   bb850:	ea81 0e03 	eor.w	lr, r1, r3
   bb854:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bb858:	ea4f 3101 	mov.w	r1, r1, lsl #12
   bb85c:	f000 8088 	beq.w	bb970 <__aeabi_ddiv+0x144>
   bb860:	ea4f 3303 	mov.w	r3, r3, lsl #12
   bb864:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   bb868:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   bb86c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   bb870:	ea4f 2202 	mov.w	r2, r2, lsl #8
   bb874:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   bb878:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   bb87c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   bb880:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   bb884:	429d      	cmp	r5, r3
   bb886:	bf08      	it	eq
   bb888:	4296      	cmpeq	r6, r2
   bb88a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   bb88e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   bb892:	d202      	bcs.n	bb89a <__aeabi_ddiv+0x6e>
   bb894:	085b      	lsrs	r3, r3, #1
   bb896:	ea4f 0232 	mov.w	r2, r2, rrx
   bb89a:	1ab6      	subs	r6, r6, r2
   bb89c:	eb65 0503 	sbc.w	r5, r5, r3
   bb8a0:	085b      	lsrs	r3, r3, #1
   bb8a2:	ea4f 0232 	mov.w	r2, r2, rrx
   bb8a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   bb8aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   bb8ae:	ebb6 0e02 	subs.w	lr, r6, r2
   bb8b2:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb8b6:	bf22      	ittt	cs
   bb8b8:	1ab6      	subcs	r6, r6, r2
   bb8ba:	4675      	movcs	r5, lr
   bb8bc:	ea40 000c 	orrcs.w	r0, r0, ip
   bb8c0:	085b      	lsrs	r3, r3, #1
   bb8c2:	ea4f 0232 	mov.w	r2, r2, rrx
   bb8c6:	ebb6 0e02 	subs.w	lr, r6, r2
   bb8ca:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb8ce:	bf22      	ittt	cs
   bb8d0:	1ab6      	subcs	r6, r6, r2
   bb8d2:	4675      	movcs	r5, lr
   bb8d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   bb8d8:	085b      	lsrs	r3, r3, #1
   bb8da:	ea4f 0232 	mov.w	r2, r2, rrx
   bb8de:	ebb6 0e02 	subs.w	lr, r6, r2
   bb8e2:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb8e6:	bf22      	ittt	cs
   bb8e8:	1ab6      	subcs	r6, r6, r2
   bb8ea:	4675      	movcs	r5, lr
   bb8ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   bb8f0:	085b      	lsrs	r3, r3, #1
   bb8f2:	ea4f 0232 	mov.w	r2, r2, rrx
   bb8f6:	ebb6 0e02 	subs.w	lr, r6, r2
   bb8fa:	eb75 0e03 	sbcs.w	lr, r5, r3
   bb8fe:	bf22      	ittt	cs
   bb900:	1ab6      	subcs	r6, r6, r2
   bb902:	4675      	movcs	r5, lr
   bb904:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   bb908:	ea55 0e06 	orrs.w	lr, r5, r6
   bb90c:	d018      	beq.n	bb940 <__aeabi_ddiv+0x114>
   bb90e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   bb912:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   bb916:	ea4f 1606 	mov.w	r6, r6, lsl #4
   bb91a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   bb91e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   bb922:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   bb926:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   bb92a:	d1c0      	bne.n	bb8ae <__aeabi_ddiv+0x82>
   bb92c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bb930:	d10b      	bne.n	bb94a <__aeabi_ddiv+0x11e>
   bb932:	ea41 0100 	orr.w	r1, r1, r0
   bb936:	f04f 0000 	mov.w	r0, #0
   bb93a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   bb93e:	e7b6      	b.n	bb8ae <__aeabi_ddiv+0x82>
   bb940:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   bb944:	bf04      	itt	eq
   bb946:	4301      	orreq	r1, r0
   bb948:	2000      	moveq	r0, #0
   bb94a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   bb94e:	bf88      	it	hi
   bb950:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   bb954:	f63f aeaf 	bhi.w	bb6b6 <__aeabi_dmul+0xde>
   bb958:	ebb5 0c03 	subs.w	ip, r5, r3
   bb95c:	bf04      	itt	eq
   bb95e:	ebb6 0c02 	subseq.w	ip, r6, r2
   bb962:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   bb966:	f150 0000 	adcs.w	r0, r0, #0
   bb96a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   bb96e:	bd70      	pop	{r4, r5, r6, pc}
   bb970:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   bb974:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   bb978:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   bb97c:	bfc2      	ittt	gt
   bb97e:	ebd4 050c 	rsbsgt	r5, r4, ip
   bb982:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   bb986:	bd70      	popgt	{r4, r5, r6, pc}
   bb988:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bb98c:	f04f 0e00 	mov.w	lr, #0
   bb990:	3c01      	subs	r4, #1
   bb992:	e690      	b.n	bb6b6 <__aeabi_dmul+0xde>
   bb994:	ea45 0e06 	orr.w	lr, r5, r6
   bb998:	e68d      	b.n	bb6b6 <__aeabi_dmul+0xde>
   bb99a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   bb99e:	ea94 0f0c 	teq	r4, ip
   bb9a2:	bf08      	it	eq
   bb9a4:	ea95 0f0c 	teqeq	r5, ip
   bb9a8:	f43f af3b 	beq.w	bb822 <__aeabi_dmul+0x24a>
   bb9ac:	ea94 0f0c 	teq	r4, ip
   bb9b0:	d10a      	bne.n	bb9c8 <__aeabi_ddiv+0x19c>
   bb9b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   bb9b6:	f47f af34 	bne.w	bb822 <__aeabi_dmul+0x24a>
   bb9ba:	ea95 0f0c 	teq	r5, ip
   bb9be:	f47f af25 	bne.w	bb80c <__aeabi_dmul+0x234>
   bb9c2:	4610      	mov	r0, r2
   bb9c4:	4619      	mov	r1, r3
   bb9c6:	e72c      	b.n	bb822 <__aeabi_dmul+0x24a>
   bb9c8:	ea95 0f0c 	teq	r5, ip
   bb9cc:	d106      	bne.n	bb9dc <__aeabi_ddiv+0x1b0>
   bb9ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   bb9d2:	f43f aefd 	beq.w	bb7d0 <__aeabi_dmul+0x1f8>
   bb9d6:	4610      	mov	r0, r2
   bb9d8:	4619      	mov	r1, r3
   bb9da:	e722      	b.n	bb822 <__aeabi_dmul+0x24a>
   bb9dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   bb9e0:	bf18      	it	ne
   bb9e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   bb9e6:	f47f aec5 	bne.w	bb774 <__aeabi_dmul+0x19c>
   bb9ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   bb9ee:	f47f af0d 	bne.w	bb80c <__aeabi_dmul+0x234>
   bb9f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   bb9f6:	f47f aeeb 	bne.w	bb7d0 <__aeabi_dmul+0x1f8>
   bb9fa:	e712      	b.n	bb822 <__aeabi_dmul+0x24a>

000bb9fc <__gedf2>:
   bb9fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bba00:	e006      	b.n	bba10 <__cmpdf2+0x4>
   bba02:	bf00      	nop

000bba04 <__ledf2>:
   bba04:	f04f 0c01 	mov.w	ip, #1
   bba08:	e002      	b.n	bba10 <__cmpdf2+0x4>
   bba0a:	bf00      	nop

000bba0c <__cmpdf2>:
   bba0c:	f04f 0c01 	mov.w	ip, #1
   bba10:	f84d cd04 	str.w	ip, [sp, #-4]!
   bba14:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bba18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bba1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bba20:	bf18      	it	ne
   bba22:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   bba26:	d01b      	beq.n	bba60 <__cmpdf2+0x54>
   bba28:	b001      	add	sp, #4
   bba2a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   bba2e:	bf0c      	ite	eq
   bba30:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   bba34:	ea91 0f03 	teqne	r1, r3
   bba38:	bf02      	ittt	eq
   bba3a:	ea90 0f02 	teqeq	r0, r2
   bba3e:	2000      	moveq	r0, #0
   bba40:	4770      	bxeq	lr
   bba42:	f110 0f00 	cmn.w	r0, #0
   bba46:	ea91 0f03 	teq	r1, r3
   bba4a:	bf58      	it	pl
   bba4c:	4299      	cmppl	r1, r3
   bba4e:	bf08      	it	eq
   bba50:	4290      	cmpeq	r0, r2
   bba52:	bf2c      	ite	cs
   bba54:	17d8      	asrcs	r0, r3, #31
   bba56:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   bba5a:	f040 0001 	orr.w	r0, r0, #1
   bba5e:	4770      	bx	lr
   bba60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   bba64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bba68:	d102      	bne.n	bba70 <__cmpdf2+0x64>
   bba6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   bba6e:	d107      	bne.n	bba80 <__cmpdf2+0x74>
   bba70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   bba74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   bba78:	d1d6      	bne.n	bba28 <__cmpdf2+0x1c>
   bba7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   bba7e:	d0d3      	beq.n	bba28 <__cmpdf2+0x1c>
   bba80:	f85d 0b04 	ldr.w	r0, [sp], #4
   bba84:	4770      	bx	lr
   bba86:	bf00      	nop

000bba88 <__aeabi_cdrcmple>:
   bba88:	4684      	mov	ip, r0
   bba8a:	4610      	mov	r0, r2
   bba8c:	4662      	mov	r2, ip
   bba8e:	468c      	mov	ip, r1
   bba90:	4619      	mov	r1, r3
   bba92:	4663      	mov	r3, ip
   bba94:	e000      	b.n	bba98 <__aeabi_cdcmpeq>
   bba96:	bf00      	nop

000bba98 <__aeabi_cdcmpeq>:
   bba98:	b501      	push	{r0, lr}
   bba9a:	f7ff ffb7 	bl	bba0c <__cmpdf2>
   bba9e:	2800      	cmp	r0, #0
   bbaa0:	bf48      	it	mi
   bbaa2:	f110 0f00 	cmnmi.w	r0, #0
   bbaa6:	bd01      	pop	{r0, pc}

000bbaa8 <__aeabi_dcmpeq>:
   bbaa8:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbaac:	f7ff fff4 	bl	bba98 <__aeabi_cdcmpeq>
   bbab0:	bf0c      	ite	eq
   bbab2:	2001      	moveq	r0, #1
   bbab4:	2000      	movne	r0, #0
   bbab6:	f85d fb08 	ldr.w	pc, [sp], #8
   bbaba:	bf00      	nop

000bbabc <__aeabi_dcmplt>:
   bbabc:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbac0:	f7ff ffea 	bl	bba98 <__aeabi_cdcmpeq>
   bbac4:	bf34      	ite	cc
   bbac6:	2001      	movcc	r0, #1
   bbac8:	2000      	movcs	r0, #0
   bbaca:	f85d fb08 	ldr.w	pc, [sp], #8
   bbace:	bf00      	nop

000bbad0 <__aeabi_dcmple>:
   bbad0:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbad4:	f7ff ffe0 	bl	bba98 <__aeabi_cdcmpeq>
   bbad8:	bf94      	ite	ls
   bbada:	2001      	movls	r0, #1
   bbadc:	2000      	movhi	r0, #0
   bbade:	f85d fb08 	ldr.w	pc, [sp], #8
   bbae2:	bf00      	nop

000bbae4 <__aeabi_dcmpge>:
   bbae4:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbae8:	f7ff ffce 	bl	bba88 <__aeabi_cdrcmple>
   bbaec:	bf94      	ite	ls
   bbaee:	2001      	movls	r0, #1
   bbaf0:	2000      	movhi	r0, #0
   bbaf2:	f85d fb08 	ldr.w	pc, [sp], #8
   bbaf6:	bf00      	nop

000bbaf8 <__aeabi_dcmpgt>:
   bbaf8:	f84d ed08 	str.w	lr, [sp, #-8]!
   bbafc:	f7ff ffc4 	bl	bba88 <__aeabi_cdrcmple>
   bbb00:	bf34      	ite	cc
   bbb02:	2001      	movcc	r0, #1
   bbb04:	2000      	movcs	r0, #0
   bbb06:	f85d fb08 	ldr.w	pc, [sp], #8
   bbb0a:	bf00      	nop

000bbb0c <__aeabi_d2uiz>:
   bbb0c:	004a      	lsls	r2, r1, #1
   bbb0e:	d211      	bcs.n	bbb34 <__aeabi_d2uiz+0x28>
   bbb10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   bbb14:	d211      	bcs.n	bbb3a <__aeabi_d2uiz+0x2e>
   bbb16:	d50d      	bpl.n	bbb34 <__aeabi_d2uiz+0x28>
   bbb18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   bbb1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   bbb20:	d40e      	bmi.n	bbb40 <__aeabi_d2uiz+0x34>
   bbb22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bbb26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   bbb2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   bbb2e:	fa23 f002 	lsr.w	r0, r3, r2
   bbb32:	4770      	bx	lr
   bbb34:	f04f 0000 	mov.w	r0, #0
   bbb38:	4770      	bx	lr
   bbb3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   bbb3e:	d102      	bne.n	bbb46 <__aeabi_d2uiz+0x3a>
   bbb40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bbb44:	4770      	bx	lr
   bbb46:	f04f 0000 	mov.w	r0, #0
   bbb4a:	4770      	bx	lr

000bbb4c <__aeabi_d2f>:
   bbb4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   bbb50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   bbb54:	bf24      	itt	cs
   bbb56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   bbb5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   bbb5e:	d90d      	bls.n	bbb7c <__aeabi_d2f+0x30>
   bbb60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   bbb64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   bbb68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   bbb6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   bbb70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   bbb74:	bf08      	it	eq
   bbb76:	f020 0001 	biceq.w	r0, r0, #1
   bbb7a:	4770      	bx	lr
   bbb7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   bbb80:	d121      	bne.n	bbbc6 <__aeabi_d2f+0x7a>
   bbb82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   bbb86:	bfbc      	itt	lt
   bbb88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   bbb8c:	4770      	bxlt	lr
   bbb8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   bbb92:	ea4f 5252 	mov.w	r2, r2, lsr #21
   bbb96:	f1c2 0218 	rsb	r2, r2, #24
   bbb9a:	f1c2 0c20 	rsb	ip, r2, #32
   bbb9e:	fa10 f30c 	lsls.w	r3, r0, ip
   bbba2:	fa20 f002 	lsr.w	r0, r0, r2
   bbba6:	bf18      	it	ne
   bbba8:	f040 0001 	orrne.w	r0, r0, #1
   bbbac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   bbbb0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   bbbb4:	fa03 fc0c 	lsl.w	ip, r3, ip
   bbbb8:	ea40 000c 	orr.w	r0, r0, ip
   bbbbc:	fa23 f302 	lsr.w	r3, r3, r2
   bbbc0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   bbbc4:	e7cc      	b.n	bbb60 <__aeabi_d2f+0x14>
   bbbc6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   bbbca:	d107      	bne.n	bbbdc <__aeabi_d2f+0x90>
   bbbcc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   bbbd0:	bf1e      	ittt	ne
   bbbd2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   bbbd6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   bbbda:	4770      	bxne	lr
   bbbdc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   bbbe0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   bbbe4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   bbbe8:	4770      	bx	lr
   bbbea:	bf00      	nop

000bbbec <__aeabi_d2ulz>:
   bbbec:	b5d0      	push	{r4, r6, r7, lr}
   bbbee:	4b0c      	ldr	r3, [pc, #48]	; (bbc20 <__aeabi_d2ulz+0x34>)
   bbbf0:	2200      	movs	r2, #0
   bbbf2:	4606      	mov	r6, r0
   bbbf4:	460f      	mov	r7, r1
   bbbf6:	f7ff fcef 	bl	bb5d8 <__aeabi_dmul>
   bbbfa:	f7ff ff87 	bl	bbb0c <__aeabi_d2uiz>
   bbbfe:	4604      	mov	r4, r0
   bbc00:	f7ff fc70 	bl	bb4e4 <__aeabi_ui2d>
   bbc04:	4b07      	ldr	r3, [pc, #28]	; (bbc24 <__aeabi_d2ulz+0x38>)
   bbc06:	2200      	movs	r2, #0
   bbc08:	f7ff fce6 	bl	bb5d8 <__aeabi_dmul>
   bbc0c:	4602      	mov	r2, r0
   bbc0e:	460b      	mov	r3, r1
   bbc10:	4630      	mov	r0, r6
   bbc12:	4639      	mov	r1, r7
   bbc14:	f7ff fb28 	bl	bb268 <__aeabi_dsub>
   bbc18:	f7ff ff78 	bl	bbb0c <__aeabi_d2uiz>
   bbc1c:	4621      	mov	r1, r4
   bbc1e:	bdd0      	pop	{r4, r6, r7, pc}
   bbc20:	3df00000 	.word	0x3df00000
   bbc24:	41f00000 	.word	0x41f00000

000bbc28 <atexit>:
   bbc28:	2300      	movs	r3, #0
   bbc2a:	4601      	mov	r1, r0
   bbc2c:	461a      	mov	r2, r3
   bbc2e:	4618      	mov	r0, r3
   bbc30:	f000 bfac 	b.w	bcb8c <__register_exitproc>

000bbc34 <atof>:
   bbc34:	2100      	movs	r1, #0
   bbc36:	f000 bf11 	b.w	bca5c <strtod>

000bbc3a <atoi>:
   bbc3a:	220a      	movs	r2, #10
   bbc3c:	2100      	movs	r1, #0
   bbc3e:	f000 bf9b 	b.w	bcb78 <strtol>

000bbc42 <memcmp>:
   bbc42:	b510      	push	{r4, lr}
   bbc44:	3901      	subs	r1, #1
   bbc46:	4402      	add	r2, r0
   bbc48:	4290      	cmp	r0, r2
   bbc4a:	d101      	bne.n	bbc50 <memcmp+0xe>
   bbc4c:	2000      	movs	r0, #0
   bbc4e:	e005      	b.n	bbc5c <memcmp+0x1a>
   bbc50:	7803      	ldrb	r3, [r0, #0]
   bbc52:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bbc56:	42a3      	cmp	r3, r4
   bbc58:	d001      	beq.n	bbc5e <memcmp+0x1c>
   bbc5a:	1b18      	subs	r0, r3, r4
   bbc5c:	bd10      	pop	{r4, pc}
   bbc5e:	3001      	adds	r0, #1
   bbc60:	e7f2      	b.n	bbc48 <memcmp+0x6>

000bbc62 <memcpy>:
   bbc62:	440a      	add	r2, r1
   bbc64:	4291      	cmp	r1, r2
   bbc66:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   bbc6a:	d100      	bne.n	bbc6e <memcpy+0xc>
   bbc6c:	4770      	bx	lr
   bbc6e:	b510      	push	{r4, lr}
   bbc70:	f811 4b01 	ldrb.w	r4, [r1], #1
   bbc74:	f803 4f01 	strb.w	r4, [r3, #1]!
   bbc78:	4291      	cmp	r1, r2
   bbc7a:	d1f9      	bne.n	bbc70 <memcpy+0xe>
   bbc7c:	bd10      	pop	{r4, pc}

000bbc7e <memmove>:
   bbc7e:	4288      	cmp	r0, r1
   bbc80:	b510      	push	{r4, lr}
   bbc82:	eb01 0402 	add.w	r4, r1, r2
   bbc86:	d902      	bls.n	bbc8e <memmove+0x10>
   bbc88:	4284      	cmp	r4, r0
   bbc8a:	4623      	mov	r3, r4
   bbc8c:	d807      	bhi.n	bbc9e <memmove+0x20>
   bbc8e:	1e43      	subs	r3, r0, #1
   bbc90:	42a1      	cmp	r1, r4
   bbc92:	d008      	beq.n	bbca6 <memmove+0x28>
   bbc94:	f811 2b01 	ldrb.w	r2, [r1], #1
   bbc98:	f803 2f01 	strb.w	r2, [r3, #1]!
   bbc9c:	e7f8      	b.n	bbc90 <memmove+0x12>
   bbc9e:	4402      	add	r2, r0
   bbca0:	4601      	mov	r1, r0
   bbca2:	428a      	cmp	r2, r1
   bbca4:	d100      	bne.n	bbca8 <memmove+0x2a>
   bbca6:	bd10      	pop	{r4, pc}
   bbca8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   bbcac:	f802 4d01 	strb.w	r4, [r2, #-1]!
   bbcb0:	e7f7      	b.n	bbca2 <memmove+0x24>

000bbcb2 <memset>:
   bbcb2:	4402      	add	r2, r0
   bbcb4:	4603      	mov	r3, r0
   bbcb6:	4293      	cmp	r3, r2
   bbcb8:	d100      	bne.n	bbcbc <memset+0xa>
   bbcba:	4770      	bx	lr
   bbcbc:	f803 1b01 	strb.w	r1, [r3], #1
   bbcc0:	e7f9      	b.n	bbcb6 <memset+0x4>
	...

000bbcc4 <srand>:
   bbcc4:	b538      	push	{r3, r4, r5, lr}
   bbcc6:	4b10      	ldr	r3, [pc, #64]	; (bbd08 <srand+0x44>)
   bbcc8:	681d      	ldr	r5, [r3, #0]
   bbcca:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bbccc:	4604      	mov	r4, r0
   bbcce:	b9b3      	cbnz	r3, bbcfe <srand+0x3a>
   bbcd0:	2018      	movs	r0, #24
   bbcd2:	f7fb fb9f 	bl	b7414 <malloc>
   bbcd6:	4602      	mov	r2, r0
   bbcd8:	63a8      	str	r0, [r5, #56]	; 0x38
   bbcda:	b920      	cbnz	r0, bbce6 <srand+0x22>
   bbcdc:	4b0b      	ldr	r3, [pc, #44]	; (bbd0c <srand+0x48>)
   bbcde:	480c      	ldr	r0, [pc, #48]	; (bbd10 <srand+0x4c>)
   bbce0:	2142      	movs	r1, #66	; 0x42
   bbce2:	f7fb fbe7 	bl	b74b4 <__assert_func>
   bbce6:	490b      	ldr	r1, [pc, #44]	; (bbd14 <srand+0x50>)
   bbce8:	4b0b      	ldr	r3, [pc, #44]	; (bbd18 <srand+0x54>)
   bbcea:	e9c0 1300 	strd	r1, r3, [r0]
   bbcee:	4b0b      	ldr	r3, [pc, #44]	; (bbd1c <srand+0x58>)
   bbcf0:	6083      	str	r3, [r0, #8]
   bbcf2:	230b      	movs	r3, #11
   bbcf4:	8183      	strh	r3, [r0, #12]
   bbcf6:	2100      	movs	r1, #0
   bbcf8:	2001      	movs	r0, #1
   bbcfa:	e9c2 0104 	strd	r0, r1, [r2, #16]
   bbcfe:	6bab      	ldr	r3, [r5, #56]	; 0x38
   bbd00:	2200      	movs	r2, #0
   bbd02:	611c      	str	r4, [r3, #16]
   bbd04:	615a      	str	r2, [r3, #20]
   bbd06:	bd38      	pop	{r3, r4, r5, pc}
   bbd08:	2003db1c 	.word	0x2003db1c
   bbd0c:	000be891 	.word	0x000be891
   bbd10:	000be8a8 	.word	0x000be8a8
   bbd14:	abcd330e 	.word	0xabcd330e
   bbd18:	e66d1234 	.word	0xe66d1234
   bbd1c:	0005deec 	.word	0x0005deec

000bbd20 <strcat>:
   bbd20:	b510      	push	{r4, lr}
   bbd22:	4602      	mov	r2, r0
   bbd24:	7814      	ldrb	r4, [r2, #0]
   bbd26:	4613      	mov	r3, r2
   bbd28:	3201      	adds	r2, #1
   bbd2a:	2c00      	cmp	r4, #0
   bbd2c:	d1fa      	bne.n	bbd24 <strcat+0x4>
   bbd2e:	3b01      	subs	r3, #1
   bbd30:	f811 2b01 	ldrb.w	r2, [r1], #1
   bbd34:	f803 2f01 	strb.w	r2, [r3, #1]!
   bbd38:	2a00      	cmp	r2, #0
   bbd3a:	d1f9      	bne.n	bbd30 <strcat+0x10>
   bbd3c:	bd10      	pop	{r4, pc}

000bbd3e <strcmp>:
   bbd3e:	f810 2b01 	ldrb.w	r2, [r0], #1
   bbd42:	f811 3b01 	ldrb.w	r3, [r1], #1
   bbd46:	2a01      	cmp	r2, #1
   bbd48:	bf28      	it	cs
   bbd4a:	429a      	cmpcs	r2, r3
   bbd4c:	d0f7      	beq.n	bbd3e <strcmp>
   bbd4e:	1ad0      	subs	r0, r2, r3
   bbd50:	4770      	bx	lr

000bbd52 <strcpy>:
   bbd52:	4603      	mov	r3, r0
   bbd54:	f811 2b01 	ldrb.w	r2, [r1], #1
   bbd58:	f803 2b01 	strb.w	r2, [r3], #1
   bbd5c:	2a00      	cmp	r2, #0
   bbd5e:	d1f9      	bne.n	bbd54 <strcpy+0x2>
   bbd60:	4770      	bx	lr
	...

000bbd64 <strdup>:
   bbd64:	4b02      	ldr	r3, [pc, #8]	; (bbd70 <strdup+0xc>)
   bbd66:	4601      	mov	r1, r0
   bbd68:	6818      	ldr	r0, [r3, #0]
   bbd6a:	f000 b803 	b.w	bbd74 <_strdup_r>
   bbd6e:	bf00      	nop
   bbd70:	2003db1c 	.word	0x2003db1c

000bbd74 <_strdup_r>:
   bbd74:	b537      	push	{r0, r1, r2, r4, r5, lr}
   bbd76:	4604      	mov	r4, r0
   bbd78:	4608      	mov	r0, r1
   bbd7a:	460d      	mov	r5, r1
   bbd7c:	f000 f80f 	bl	bbd9e <strlen>
   bbd80:	1c42      	adds	r2, r0, #1
   bbd82:	4611      	mov	r1, r2
   bbd84:	4620      	mov	r0, r4
   bbd86:	9201      	str	r2, [sp, #4]
   bbd88:	f7fb fb84 	bl	b7494 <_malloc_r>
   bbd8c:	4604      	mov	r4, r0
   bbd8e:	b118      	cbz	r0, bbd98 <_strdup_r+0x24>
   bbd90:	9a01      	ldr	r2, [sp, #4]
   bbd92:	4629      	mov	r1, r5
   bbd94:	f7ff ff65 	bl	bbc62 <memcpy>
   bbd98:	4620      	mov	r0, r4
   bbd9a:	b003      	add	sp, #12
   bbd9c:	bd30      	pop	{r4, r5, pc}

000bbd9e <strlen>:
   bbd9e:	4603      	mov	r3, r0
   bbda0:	f813 2b01 	ldrb.w	r2, [r3], #1
   bbda4:	2a00      	cmp	r2, #0
   bbda6:	d1fb      	bne.n	bbda0 <strlen+0x2>
   bbda8:	1a18      	subs	r0, r3, r0
   bbdaa:	3801      	subs	r0, #1
   bbdac:	4770      	bx	lr

000bbdae <strncmp>:
   bbdae:	b510      	push	{r4, lr}
   bbdb0:	b17a      	cbz	r2, bbdd2 <strncmp+0x24>
   bbdb2:	4603      	mov	r3, r0
   bbdb4:	3901      	subs	r1, #1
   bbdb6:	1884      	adds	r4, r0, r2
   bbdb8:	f813 0b01 	ldrb.w	r0, [r3], #1
   bbdbc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   bbdc0:	4290      	cmp	r0, r2
   bbdc2:	d101      	bne.n	bbdc8 <strncmp+0x1a>
   bbdc4:	42a3      	cmp	r3, r4
   bbdc6:	d101      	bne.n	bbdcc <strncmp+0x1e>
   bbdc8:	1a80      	subs	r0, r0, r2
   bbdca:	bd10      	pop	{r4, pc}
   bbdcc:	2800      	cmp	r0, #0
   bbdce:	d1f3      	bne.n	bbdb8 <strncmp+0xa>
   bbdd0:	e7fa      	b.n	bbdc8 <strncmp+0x1a>
   bbdd2:	4610      	mov	r0, r2
   bbdd4:	e7f9      	b.n	bbdca <strncmp+0x1c>

000bbdd6 <strncpy>:
   bbdd6:	b510      	push	{r4, lr}
   bbdd8:	3901      	subs	r1, #1
   bbdda:	4603      	mov	r3, r0
   bbddc:	b132      	cbz	r2, bbdec <strncpy+0x16>
   bbdde:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   bbde2:	f803 4b01 	strb.w	r4, [r3], #1
   bbde6:	3a01      	subs	r2, #1
   bbde8:	2c00      	cmp	r4, #0
   bbdea:	d1f7      	bne.n	bbddc <strncpy+0x6>
   bbdec:	441a      	add	r2, r3
   bbdee:	2100      	movs	r1, #0
   bbdf0:	4293      	cmp	r3, r2
   bbdf2:	d100      	bne.n	bbdf6 <strncpy+0x20>
   bbdf4:	bd10      	pop	{r4, pc}
   bbdf6:	f803 1b01 	strb.w	r1, [r3], #1
   bbdfa:	e7f9      	b.n	bbdf0 <strncpy+0x1a>

000bbdfc <strnlen>:
   bbdfc:	b510      	push	{r4, lr}
   bbdfe:	4602      	mov	r2, r0
   bbe00:	4401      	add	r1, r0
   bbe02:	428a      	cmp	r2, r1
   bbe04:	4613      	mov	r3, r2
   bbe06:	d003      	beq.n	bbe10 <strnlen+0x14>
   bbe08:	781c      	ldrb	r4, [r3, #0]
   bbe0a:	3201      	adds	r2, #1
   bbe0c:	2c00      	cmp	r4, #0
   bbe0e:	d1f8      	bne.n	bbe02 <strnlen+0x6>
   bbe10:	1a18      	subs	r0, r3, r0
   bbe12:	bd10      	pop	{r4, pc}

000bbe14 <sulp>:
   bbe14:	b570      	push	{r4, r5, r6, lr}
   bbe16:	4604      	mov	r4, r0
   bbe18:	460d      	mov	r5, r1
   bbe1a:	ec45 4b10 	vmov	d0, r4, r5
   bbe1e:	4616      	mov	r6, r2
   bbe20:	f001 fe0e 	bl	bda40 <__ulp>
   bbe24:	ec51 0b10 	vmov	r0, r1, d0
   bbe28:	b17e      	cbz	r6, bbe4a <sulp+0x36>
   bbe2a:	f3c5 530a 	ubfx	r3, r5, #20, #11
   bbe2e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bbe32:	2b00      	cmp	r3, #0
   bbe34:	dd09      	ble.n	bbe4a <sulp+0x36>
   bbe36:	051b      	lsls	r3, r3, #20
   bbe38:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   bbe3c:	2400      	movs	r4, #0
   bbe3e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   bbe42:	4622      	mov	r2, r4
   bbe44:	462b      	mov	r3, r5
   bbe46:	f7ff fbc7 	bl	bb5d8 <__aeabi_dmul>
   bbe4a:	bd70      	pop	{r4, r5, r6, pc}
   bbe4c:	0000      	movs	r0, r0
	...

000bbe50 <_strtod_l>:
   bbe50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bbe54:	ed2d 8b02 	vpush	{d8}
   bbe58:	b09d      	sub	sp, #116	; 0x74
   bbe5a:	461f      	mov	r7, r3
   bbe5c:	2300      	movs	r3, #0
   bbe5e:	9318      	str	r3, [sp, #96]	; 0x60
   bbe60:	4ba2      	ldr	r3, [pc, #648]	; (bc0ec <_strtod_l+0x29c>)
   bbe62:	9213      	str	r2, [sp, #76]	; 0x4c
   bbe64:	681b      	ldr	r3, [r3, #0]
   bbe66:	9305      	str	r3, [sp, #20]
   bbe68:	4604      	mov	r4, r0
   bbe6a:	4618      	mov	r0, r3
   bbe6c:	4688      	mov	r8, r1
   bbe6e:	f7ff ff96 	bl	bbd9e <strlen>
   bbe72:	f04f 0a00 	mov.w	sl, #0
   bbe76:	4605      	mov	r5, r0
   bbe78:	f04f 0b00 	mov.w	fp, #0
   bbe7c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bbe80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bbe82:	781a      	ldrb	r2, [r3, #0]
   bbe84:	2a2b      	cmp	r2, #43	; 0x2b
   bbe86:	d04e      	beq.n	bbf26 <_strtod_l+0xd6>
   bbe88:	d83b      	bhi.n	bbf02 <_strtod_l+0xb2>
   bbe8a:	2a0d      	cmp	r2, #13
   bbe8c:	d834      	bhi.n	bbef8 <_strtod_l+0xa8>
   bbe8e:	2a08      	cmp	r2, #8
   bbe90:	d834      	bhi.n	bbefc <_strtod_l+0xac>
   bbe92:	2a00      	cmp	r2, #0
   bbe94:	d03e      	beq.n	bbf14 <_strtod_l+0xc4>
   bbe96:	2300      	movs	r3, #0
   bbe98:	930a      	str	r3, [sp, #40]	; 0x28
   bbe9a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   bbe9c:	7833      	ldrb	r3, [r6, #0]
   bbe9e:	2b30      	cmp	r3, #48	; 0x30
   bbea0:	f040 80b0 	bne.w	bc004 <_strtod_l+0x1b4>
   bbea4:	7873      	ldrb	r3, [r6, #1]
   bbea6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bbeaa:	2b58      	cmp	r3, #88	; 0x58
   bbeac:	d168      	bne.n	bbf80 <_strtod_l+0x130>
   bbeae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bbeb0:	9301      	str	r3, [sp, #4]
   bbeb2:	ab18      	add	r3, sp, #96	; 0x60
   bbeb4:	9702      	str	r7, [sp, #8]
   bbeb6:	9300      	str	r3, [sp, #0]
   bbeb8:	4a8d      	ldr	r2, [pc, #564]	; (bc0f0 <_strtod_l+0x2a0>)
   bbeba:	ab19      	add	r3, sp, #100	; 0x64
   bbebc:	a917      	add	r1, sp, #92	; 0x5c
   bbebe:	4620      	mov	r0, r4
   bbec0:	f000 ff2e 	bl	bcd20 <__gethex>
   bbec4:	f010 0707 	ands.w	r7, r0, #7
   bbec8:	4605      	mov	r5, r0
   bbeca:	d005      	beq.n	bbed8 <_strtod_l+0x88>
   bbecc:	2f06      	cmp	r7, #6
   bbece:	d12c      	bne.n	bbf2a <_strtod_l+0xda>
   bbed0:	3601      	adds	r6, #1
   bbed2:	2300      	movs	r3, #0
   bbed4:	9617      	str	r6, [sp, #92]	; 0x5c
   bbed6:	930a      	str	r3, [sp, #40]	; 0x28
   bbed8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bbeda:	2b00      	cmp	r3, #0
   bbedc:	f040 8590 	bne.w	bca00 <_strtod_l+0xbb0>
   bbee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   bbee2:	b1eb      	cbz	r3, bbf20 <_strtod_l+0xd0>
   bbee4:	4652      	mov	r2, sl
   bbee6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   bbeea:	ec43 2b10 	vmov	d0, r2, r3
   bbeee:	b01d      	add	sp, #116	; 0x74
   bbef0:	ecbd 8b02 	vpop	{d8}
   bbef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bbef8:	2a20      	cmp	r2, #32
   bbefa:	d1cc      	bne.n	bbe96 <_strtod_l+0x46>
   bbefc:	3301      	adds	r3, #1
   bbefe:	9317      	str	r3, [sp, #92]	; 0x5c
   bbf00:	e7be      	b.n	bbe80 <_strtod_l+0x30>
   bbf02:	2a2d      	cmp	r2, #45	; 0x2d
   bbf04:	d1c7      	bne.n	bbe96 <_strtod_l+0x46>
   bbf06:	2201      	movs	r2, #1
   bbf08:	920a      	str	r2, [sp, #40]	; 0x28
   bbf0a:	1c5a      	adds	r2, r3, #1
   bbf0c:	9217      	str	r2, [sp, #92]	; 0x5c
   bbf0e:	785b      	ldrb	r3, [r3, #1]
   bbf10:	2b00      	cmp	r3, #0
   bbf12:	d1c2      	bne.n	bbe9a <_strtod_l+0x4a>
   bbf14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   bbf16:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bbf1a:	2b00      	cmp	r3, #0
   bbf1c:	f040 856e 	bne.w	bc9fc <_strtod_l+0xbac>
   bbf20:	4652      	mov	r2, sl
   bbf22:	465b      	mov	r3, fp
   bbf24:	e7e1      	b.n	bbeea <_strtod_l+0x9a>
   bbf26:	2200      	movs	r2, #0
   bbf28:	e7ee      	b.n	bbf08 <_strtod_l+0xb8>
   bbf2a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bbf2c:	b13a      	cbz	r2, bbf3e <_strtod_l+0xee>
   bbf2e:	2135      	movs	r1, #53	; 0x35
   bbf30:	a81a      	add	r0, sp, #104	; 0x68
   bbf32:	f001 fe90 	bl	bdc56 <__copybits>
   bbf36:	9918      	ldr	r1, [sp, #96]	; 0x60
   bbf38:	4620      	mov	r0, r4
   bbf3a:	f001 fa4f 	bl	bd3dc <_Bfree>
   bbf3e:	3f01      	subs	r7, #1
   bbf40:	2f04      	cmp	r7, #4
   bbf42:	d806      	bhi.n	bbf52 <_strtod_l+0x102>
   bbf44:	e8df f007 	tbb	[pc, r7]
   bbf48:	1714030a 	.word	0x1714030a
   bbf4c:	0a          	.byte	0x0a
   bbf4d:	00          	.byte	0x00
   bbf4e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
   bbf52:	0728      	lsls	r0, r5, #28
   bbf54:	d5c0      	bpl.n	bbed8 <_strtod_l+0x88>
   bbf56:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   bbf5a:	e7bd      	b.n	bbed8 <_strtod_l+0x88>
   bbf5c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
   bbf60:	9a19      	ldr	r2, [sp, #100]	; 0x64
   bbf62:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   bbf66:	f202 4233 	addw	r2, r2, #1075	; 0x433
   bbf6a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   bbf6e:	e7f0      	b.n	bbf52 <_strtod_l+0x102>
   bbf70:	f8df b180 	ldr.w	fp, [pc, #384]	; bc0f4 <_strtod_l+0x2a4>
   bbf74:	e7ed      	b.n	bbf52 <_strtod_l+0x102>
   bbf76:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   bbf7a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bbf7e:	e7e8      	b.n	bbf52 <_strtod_l+0x102>
   bbf80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bbf82:	1c5a      	adds	r2, r3, #1
   bbf84:	9217      	str	r2, [sp, #92]	; 0x5c
   bbf86:	785b      	ldrb	r3, [r3, #1]
   bbf88:	2b30      	cmp	r3, #48	; 0x30
   bbf8a:	d0f9      	beq.n	bbf80 <_strtod_l+0x130>
   bbf8c:	2b00      	cmp	r3, #0
   bbf8e:	d0a3      	beq.n	bbed8 <_strtod_l+0x88>
   bbf90:	2301      	movs	r3, #1
   bbf92:	f04f 0900 	mov.w	r9, #0
   bbf96:	9304      	str	r3, [sp, #16]
   bbf98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bbf9a:	9308      	str	r3, [sp, #32]
   bbf9c:	f8cd 901c 	str.w	r9, [sp, #28]
   bbfa0:	464f      	mov	r7, r9
   bbfa2:	220a      	movs	r2, #10
   bbfa4:	9817      	ldr	r0, [sp, #92]	; 0x5c
   bbfa6:	7806      	ldrb	r6, [r0, #0]
   bbfa8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   bbfac:	b2d9      	uxtb	r1, r3
   bbfae:	2909      	cmp	r1, #9
   bbfb0:	d92a      	bls.n	bc008 <_strtod_l+0x1b8>
   bbfb2:	9905      	ldr	r1, [sp, #20]
   bbfb4:	462a      	mov	r2, r5
   bbfb6:	f7ff fefa 	bl	bbdae <strncmp>
   bbfba:	b398      	cbz	r0, bc024 <_strtod_l+0x1d4>
   bbfbc:	2000      	movs	r0, #0
   bbfbe:	4632      	mov	r2, r6
   bbfc0:	463d      	mov	r5, r7
   bbfc2:	9005      	str	r0, [sp, #20]
   bbfc4:	4603      	mov	r3, r0
   bbfc6:	2a65      	cmp	r2, #101	; 0x65
   bbfc8:	d001      	beq.n	bbfce <_strtod_l+0x17e>
   bbfca:	2a45      	cmp	r2, #69	; 0x45
   bbfcc:	d118      	bne.n	bc000 <_strtod_l+0x1b0>
   bbfce:	b91d      	cbnz	r5, bbfd8 <_strtod_l+0x188>
   bbfd0:	9a04      	ldr	r2, [sp, #16]
   bbfd2:	4302      	orrs	r2, r0
   bbfd4:	d09e      	beq.n	bbf14 <_strtod_l+0xc4>
   bbfd6:	2500      	movs	r5, #0
   bbfd8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
   bbfdc:	f108 0201 	add.w	r2, r8, #1
   bbfe0:	9217      	str	r2, [sp, #92]	; 0x5c
   bbfe2:	f898 2001 	ldrb.w	r2, [r8, #1]
   bbfe6:	2a2b      	cmp	r2, #43	; 0x2b
   bbfe8:	d075      	beq.n	bc0d6 <_strtod_l+0x286>
   bbfea:	2a2d      	cmp	r2, #45	; 0x2d
   bbfec:	d07b      	beq.n	bc0e6 <_strtod_l+0x296>
   bbfee:	f04f 0c00 	mov.w	ip, #0
   bbff2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   bbff6:	2909      	cmp	r1, #9
   bbff8:	f240 8082 	bls.w	bc100 <_strtod_l+0x2b0>
   bbffc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
   bc000:	2600      	movs	r6, #0
   bc002:	e09d      	b.n	bc140 <_strtod_l+0x2f0>
   bc004:	2300      	movs	r3, #0
   bc006:	e7c4      	b.n	bbf92 <_strtod_l+0x142>
   bc008:	2f08      	cmp	r7, #8
   bc00a:	bfd8      	it	le
   bc00c:	9907      	ldrle	r1, [sp, #28]
   bc00e:	f100 0001 	add.w	r0, r0, #1
   bc012:	bfda      	itte	le
   bc014:	fb02 3301 	mlale	r3, r2, r1, r3
   bc018:	9307      	strle	r3, [sp, #28]
   bc01a:	fb02 3909 	mlagt	r9, r2, r9, r3
   bc01e:	3701      	adds	r7, #1
   bc020:	9017      	str	r0, [sp, #92]	; 0x5c
   bc022:	e7bf      	b.n	bbfa4 <_strtod_l+0x154>
   bc024:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc026:	195a      	adds	r2, r3, r5
   bc028:	9217      	str	r2, [sp, #92]	; 0x5c
   bc02a:	5d5a      	ldrb	r2, [r3, r5]
   bc02c:	2f00      	cmp	r7, #0
   bc02e:	d037      	beq.n	bc0a0 <_strtod_l+0x250>
   bc030:	9005      	str	r0, [sp, #20]
   bc032:	463d      	mov	r5, r7
   bc034:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   bc038:	2b09      	cmp	r3, #9
   bc03a:	d912      	bls.n	bc062 <_strtod_l+0x212>
   bc03c:	2301      	movs	r3, #1
   bc03e:	e7c2      	b.n	bbfc6 <_strtod_l+0x176>
   bc040:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc042:	1c5a      	adds	r2, r3, #1
   bc044:	9217      	str	r2, [sp, #92]	; 0x5c
   bc046:	785a      	ldrb	r2, [r3, #1]
   bc048:	3001      	adds	r0, #1
   bc04a:	2a30      	cmp	r2, #48	; 0x30
   bc04c:	d0f8      	beq.n	bc040 <_strtod_l+0x1f0>
   bc04e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
   bc052:	2b08      	cmp	r3, #8
   bc054:	f200 84d9 	bhi.w	bca0a <_strtod_l+0xbba>
   bc058:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc05a:	9005      	str	r0, [sp, #20]
   bc05c:	2000      	movs	r0, #0
   bc05e:	9308      	str	r3, [sp, #32]
   bc060:	4605      	mov	r5, r0
   bc062:	3a30      	subs	r2, #48	; 0x30
   bc064:	f100 0301 	add.w	r3, r0, #1
   bc068:	d014      	beq.n	bc094 <_strtod_l+0x244>
   bc06a:	9905      	ldr	r1, [sp, #20]
   bc06c:	4419      	add	r1, r3
   bc06e:	9105      	str	r1, [sp, #20]
   bc070:	462b      	mov	r3, r5
   bc072:	eb00 0e05 	add.w	lr, r0, r5
   bc076:	210a      	movs	r1, #10
   bc078:	4573      	cmp	r3, lr
   bc07a:	d113      	bne.n	bc0a4 <_strtod_l+0x254>
   bc07c:	182b      	adds	r3, r5, r0
   bc07e:	2b08      	cmp	r3, #8
   bc080:	f105 0501 	add.w	r5, r5, #1
   bc084:	4405      	add	r5, r0
   bc086:	dc1c      	bgt.n	bc0c2 <_strtod_l+0x272>
   bc088:	9907      	ldr	r1, [sp, #28]
   bc08a:	230a      	movs	r3, #10
   bc08c:	fb03 2301 	mla	r3, r3, r1, r2
   bc090:	9307      	str	r3, [sp, #28]
   bc092:	2300      	movs	r3, #0
   bc094:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bc096:	1c51      	adds	r1, r2, #1
   bc098:	9117      	str	r1, [sp, #92]	; 0x5c
   bc09a:	7852      	ldrb	r2, [r2, #1]
   bc09c:	4618      	mov	r0, r3
   bc09e:	e7c9      	b.n	bc034 <_strtod_l+0x1e4>
   bc0a0:	4638      	mov	r0, r7
   bc0a2:	e7d2      	b.n	bc04a <_strtod_l+0x1fa>
   bc0a4:	2b08      	cmp	r3, #8
   bc0a6:	dc04      	bgt.n	bc0b2 <_strtod_l+0x262>
   bc0a8:	9e07      	ldr	r6, [sp, #28]
   bc0aa:	434e      	muls	r6, r1
   bc0ac:	9607      	str	r6, [sp, #28]
   bc0ae:	3301      	adds	r3, #1
   bc0b0:	e7e2      	b.n	bc078 <_strtod_l+0x228>
   bc0b2:	f103 0c01 	add.w	ip, r3, #1
   bc0b6:	f1bc 0f10 	cmp.w	ip, #16
   bc0ba:	bfd8      	it	le
   bc0bc:	fb01 f909 	mulle.w	r9, r1, r9
   bc0c0:	e7f5      	b.n	bc0ae <_strtod_l+0x25e>
   bc0c2:	2d10      	cmp	r5, #16
   bc0c4:	bfdc      	itt	le
   bc0c6:	230a      	movle	r3, #10
   bc0c8:	fb03 2909 	mlale	r9, r3, r9, r2
   bc0cc:	e7e1      	b.n	bc092 <_strtod_l+0x242>
   bc0ce:	2300      	movs	r3, #0
   bc0d0:	9305      	str	r3, [sp, #20]
   bc0d2:	2301      	movs	r3, #1
   bc0d4:	e77c      	b.n	bbfd0 <_strtod_l+0x180>
   bc0d6:	f04f 0c00 	mov.w	ip, #0
   bc0da:	f108 0202 	add.w	r2, r8, #2
   bc0de:	9217      	str	r2, [sp, #92]	; 0x5c
   bc0e0:	f898 2002 	ldrb.w	r2, [r8, #2]
   bc0e4:	e785      	b.n	bbff2 <_strtod_l+0x1a2>
   bc0e6:	f04f 0c01 	mov.w	ip, #1
   bc0ea:	e7f6      	b.n	bc0da <_strtod_l+0x28a>
   bc0ec:	000bead4 	.word	0x000bead4
   bc0f0:	000be910 	.word	0x000be910
   bc0f4:	7ff00000 	.word	0x7ff00000
   bc0f8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bc0fa:	1c51      	adds	r1, r2, #1
   bc0fc:	9117      	str	r1, [sp, #92]	; 0x5c
   bc0fe:	7852      	ldrb	r2, [r2, #1]
   bc100:	2a30      	cmp	r2, #48	; 0x30
   bc102:	d0f9      	beq.n	bc0f8 <_strtod_l+0x2a8>
   bc104:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
   bc108:	2908      	cmp	r1, #8
   bc10a:	f63f af79 	bhi.w	bc000 <_strtod_l+0x1b0>
   bc10e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
   bc112:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bc114:	9206      	str	r2, [sp, #24]
   bc116:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   bc118:	1c51      	adds	r1, r2, #1
   bc11a:	9117      	str	r1, [sp, #92]	; 0x5c
   bc11c:	7852      	ldrb	r2, [r2, #1]
   bc11e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
   bc122:	2e09      	cmp	r6, #9
   bc124:	d937      	bls.n	bc196 <_strtod_l+0x346>
   bc126:	9e06      	ldr	r6, [sp, #24]
   bc128:	1b89      	subs	r1, r1, r6
   bc12a:	2908      	cmp	r1, #8
   bc12c:	f644 661f 	movw	r6, #19999	; 0x4e1f
   bc130:	dc02      	bgt.n	bc138 <_strtod_l+0x2e8>
   bc132:	4576      	cmp	r6, lr
   bc134:	bfa8      	it	ge
   bc136:	4676      	movge	r6, lr
   bc138:	f1bc 0f00 	cmp.w	ip, #0
   bc13c:	d000      	beq.n	bc140 <_strtod_l+0x2f0>
   bc13e:	4276      	negs	r6, r6
   bc140:	2d00      	cmp	r5, #0
   bc142:	d14d      	bne.n	bc1e0 <_strtod_l+0x390>
   bc144:	9904      	ldr	r1, [sp, #16]
   bc146:	4301      	orrs	r1, r0
   bc148:	f47f aec6 	bne.w	bbed8 <_strtod_l+0x88>
   bc14c:	2b00      	cmp	r3, #0
   bc14e:	f47f aee1 	bne.w	bbf14 <_strtod_l+0xc4>
   bc152:	2a69      	cmp	r2, #105	; 0x69
   bc154:	d027      	beq.n	bc1a6 <_strtod_l+0x356>
   bc156:	dc24      	bgt.n	bc1a2 <_strtod_l+0x352>
   bc158:	2a49      	cmp	r2, #73	; 0x49
   bc15a:	d024      	beq.n	bc1a6 <_strtod_l+0x356>
   bc15c:	2a4e      	cmp	r2, #78	; 0x4e
   bc15e:	f47f aed9 	bne.w	bbf14 <_strtod_l+0xc4>
   bc162:	499f      	ldr	r1, [pc, #636]	; (bc3e0 <_strtod_l+0x590>)
   bc164:	a817      	add	r0, sp, #92	; 0x5c
   bc166:	f001 f833 	bl	bd1d0 <__match>
   bc16a:	2800      	cmp	r0, #0
   bc16c:	f43f aed2 	beq.w	bbf14 <_strtod_l+0xc4>
   bc170:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc172:	781b      	ldrb	r3, [r3, #0]
   bc174:	2b28      	cmp	r3, #40	; 0x28
   bc176:	d12d      	bne.n	bc1d4 <_strtod_l+0x384>
   bc178:	499a      	ldr	r1, [pc, #616]	; (bc3e4 <_strtod_l+0x594>)
   bc17a:	aa1a      	add	r2, sp, #104	; 0x68
   bc17c:	a817      	add	r0, sp, #92	; 0x5c
   bc17e:	f001 f83b 	bl	bd1f8 <__hexnan>
   bc182:	2805      	cmp	r0, #5
   bc184:	d126      	bne.n	bc1d4 <_strtod_l+0x384>
   bc186:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   bc188:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   bc18c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   bc190:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   bc194:	e6a0      	b.n	bbed8 <_strtod_l+0x88>
   bc196:	210a      	movs	r1, #10
   bc198:	fb01 2e0e 	mla	lr, r1, lr, r2
   bc19c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   bc1a0:	e7b9      	b.n	bc116 <_strtod_l+0x2c6>
   bc1a2:	2a6e      	cmp	r2, #110	; 0x6e
   bc1a4:	e7db      	b.n	bc15e <_strtod_l+0x30e>
   bc1a6:	4990      	ldr	r1, [pc, #576]	; (bc3e8 <_strtod_l+0x598>)
   bc1a8:	a817      	add	r0, sp, #92	; 0x5c
   bc1aa:	f001 f811 	bl	bd1d0 <__match>
   bc1ae:	2800      	cmp	r0, #0
   bc1b0:	f43f aeb0 	beq.w	bbf14 <_strtod_l+0xc4>
   bc1b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc1b6:	498d      	ldr	r1, [pc, #564]	; (bc3ec <_strtod_l+0x59c>)
   bc1b8:	3b01      	subs	r3, #1
   bc1ba:	a817      	add	r0, sp, #92	; 0x5c
   bc1bc:	9317      	str	r3, [sp, #92]	; 0x5c
   bc1be:	f001 f807 	bl	bd1d0 <__match>
   bc1c2:	b910      	cbnz	r0, bc1ca <_strtod_l+0x37a>
   bc1c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bc1c6:	3301      	adds	r3, #1
   bc1c8:	9317      	str	r3, [sp, #92]	; 0x5c
   bc1ca:	f8df b230 	ldr.w	fp, [pc, #560]	; bc3fc <_strtod_l+0x5ac>
   bc1ce:	f04f 0a00 	mov.w	sl, #0
   bc1d2:	e681      	b.n	bbed8 <_strtod_l+0x88>
   bc1d4:	4886      	ldr	r0, [pc, #536]	; (bc3f0 <_strtod_l+0x5a0>)
   bc1d6:	f001 fd93 	bl	bdd00 <nan>
   bc1da:	ec5b ab10 	vmov	sl, fp, d0
   bc1de:	e67b      	b.n	bbed8 <_strtod_l+0x88>
   bc1e0:	9b05      	ldr	r3, [sp, #20]
   bc1e2:	9807      	ldr	r0, [sp, #28]
   bc1e4:	1af3      	subs	r3, r6, r3
   bc1e6:	2f00      	cmp	r7, #0
   bc1e8:	bf08      	it	eq
   bc1ea:	462f      	moveq	r7, r5
   bc1ec:	2d10      	cmp	r5, #16
   bc1ee:	9306      	str	r3, [sp, #24]
   bc1f0:	46a8      	mov	r8, r5
   bc1f2:	bfa8      	it	ge
   bc1f4:	f04f 0810 	movge.w	r8, #16
   bc1f8:	f7ff f974 	bl	bb4e4 <__aeabi_ui2d>
   bc1fc:	2d09      	cmp	r5, #9
   bc1fe:	4682      	mov	sl, r0
   bc200:	468b      	mov	fp, r1
   bc202:	dd13      	ble.n	bc22c <_strtod_l+0x3dc>
   bc204:	4b7b      	ldr	r3, [pc, #492]	; (bc3f4 <_strtod_l+0x5a4>)
   bc206:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   bc20a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   bc20e:	f7ff f9e3 	bl	bb5d8 <__aeabi_dmul>
   bc212:	4682      	mov	sl, r0
   bc214:	4648      	mov	r0, r9
   bc216:	468b      	mov	fp, r1
   bc218:	f7ff f964 	bl	bb4e4 <__aeabi_ui2d>
   bc21c:	4602      	mov	r2, r0
   bc21e:	460b      	mov	r3, r1
   bc220:	4650      	mov	r0, sl
   bc222:	4659      	mov	r1, fp
   bc224:	f7ff f822 	bl	bb26c <__adddf3>
   bc228:	4682      	mov	sl, r0
   bc22a:	468b      	mov	fp, r1
   bc22c:	2d0f      	cmp	r5, #15
   bc22e:	dc38      	bgt.n	bc2a2 <_strtod_l+0x452>
   bc230:	9b06      	ldr	r3, [sp, #24]
   bc232:	2b00      	cmp	r3, #0
   bc234:	f43f ae50 	beq.w	bbed8 <_strtod_l+0x88>
   bc238:	dd24      	ble.n	bc284 <_strtod_l+0x434>
   bc23a:	2b16      	cmp	r3, #22
   bc23c:	dc0b      	bgt.n	bc256 <_strtod_l+0x406>
   bc23e:	496d      	ldr	r1, [pc, #436]	; (bc3f4 <_strtod_l+0x5a4>)
   bc240:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bc244:	e9d1 0100 	ldrd	r0, r1, [r1]
   bc248:	4652      	mov	r2, sl
   bc24a:	465b      	mov	r3, fp
   bc24c:	f7ff f9c4 	bl	bb5d8 <__aeabi_dmul>
   bc250:	4682      	mov	sl, r0
   bc252:	468b      	mov	fp, r1
   bc254:	e640      	b.n	bbed8 <_strtod_l+0x88>
   bc256:	9a06      	ldr	r2, [sp, #24]
   bc258:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   bc25c:	4293      	cmp	r3, r2
   bc25e:	db20      	blt.n	bc2a2 <_strtod_l+0x452>
   bc260:	4c64      	ldr	r4, [pc, #400]	; (bc3f4 <_strtod_l+0x5a4>)
   bc262:	f1c5 050f 	rsb	r5, r5, #15
   bc266:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   bc26a:	4652      	mov	r2, sl
   bc26c:	465b      	mov	r3, fp
   bc26e:	e9d1 0100 	ldrd	r0, r1, [r1]
   bc272:	f7ff f9b1 	bl	bb5d8 <__aeabi_dmul>
   bc276:	9b06      	ldr	r3, [sp, #24]
   bc278:	1b5d      	subs	r5, r3, r5
   bc27a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   bc27e:	e9d4 2300 	ldrd	r2, r3, [r4]
   bc282:	e7e3      	b.n	bc24c <_strtod_l+0x3fc>
   bc284:	9b06      	ldr	r3, [sp, #24]
   bc286:	3316      	adds	r3, #22
   bc288:	db0b      	blt.n	bc2a2 <_strtod_l+0x452>
   bc28a:	9b05      	ldr	r3, [sp, #20]
   bc28c:	1b9e      	subs	r6, r3, r6
   bc28e:	4b59      	ldr	r3, [pc, #356]	; (bc3f4 <_strtod_l+0x5a4>)
   bc290:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
   bc294:	e9d6 2300 	ldrd	r2, r3, [r6]
   bc298:	4650      	mov	r0, sl
   bc29a:	4659      	mov	r1, fp
   bc29c:	f7ff fac6 	bl	bb82c <__aeabi_ddiv>
   bc2a0:	e7d6      	b.n	bc250 <_strtod_l+0x400>
   bc2a2:	9b06      	ldr	r3, [sp, #24]
   bc2a4:	eba5 0808 	sub.w	r8, r5, r8
   bc2a8:	4498      	add	r8, r3
   bc2aa:	f1b8 0f00 	cmp.w	r8, #0
   bc2ae:	dd74      	ble.n	bc39a <_strtod_l+0x54a>
   bc2b0:	f018 030f 	ands.w	r3, r8, #15
   bc2b4:	d00a      	beq.n	bc2cc <_strtod_l+0x47c>
   bc2b6:	494f      	ldr	r1, [pc, #316]	; (bc3f4 <_strtod_l+0x5a4>)
   bc2b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   bc2bc:	4652      	mov	r2, sl
   bc2be:	465b      	mov	r3, fp
   bc2c0:	e9d1 0100 	ldrd	r0, r1, [r1]
   bc2c4:	f7ff f988 	bl	bb5d8 <__aeabi_dmul>
   bc2c8:	4682      	mov	sl, r0
   bc2ca:	468b      	mov	fp, r1
   bc2cc:	f038 080f 	bics.w	r8, r8, #15
   bc2d0:	d04f      	beq.n	bc372 <_strtod_l+0x522>
   bc2d2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   bc2d6:	dd22      	ble.n	bc31e <_strtod_l+0x4ce>
   bc2d8:	2500      	movs	r5, #0
   bc2da:	462e      	mov	r6, r5
   bc2dc:	9507      	str	r5, [sp, #28]
   bc2de:	9505      	str	r5, [sp, #20]
   bc2e0:	2322      	movs	r3, #34	; 0x22
   bc2e2:	f8df b118 	ldr.w	fp, [pc, #280]	; bc3fc <_strtod_l+0x5ac>
   bc2e6:	6023      	str	r3, [r4, #0]
   bc2e8:	f04f 0a00 	mov.w	sl, #0
   bc2ec:	9b07      	ldr	r3, [sp, #28]
   bc2ee:	2b00      	cmp	r3, #0
   bc2f0:	f43f adf2 	beq.w	bbed8 <_strtod_l+0x88>
   bc2f4:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc2f6:	4620      	mov	r0, r4
   bc2f8:	f001 f870 	bl	bd3dc <_Bfree>
   bc2fc:	9905      	ldr	r1, [sp, #20]
   bc2fe:	4620      	mov	r0, r4
   bc300:	f001 f86c 	bl	bd3dc <_Bfree>
   bc304:	4631      	mov	r1, r6
   bc306:	4620      	mov	r0, r4
   bc308:	f001 f868 	bl	bd3dc <_Bfree>
   bc30c:	9907      	ldr	r1, [sp, #28]
   bc30e:	4620      	mov	r0, r4
   bc310:	f001 f864 	bl	bd3dc <_Bfree>
   bc314:	4629      	mov	r1, r5
   bc316:	4620      	mov	r0, r4
   bc318:	f001 f860 	bl	bd3dc <_Bfree>
   bc31c:	e5dc      	b.n	bbed8 <_strtod_l+0x88>
   bc31e:	4b36      	ldr	r3, [pc, #216]	; (bc3f8 <_strtod_l+0x5a8>)
   bc320:	9304      	str	r3, [sp, #16]
   bc322:	2300      	movs	r3, #0
   bc324:	ea4f 1828 	mov.w	r8, r8, asr #4
   bc328:	4650      	mov	r0, sl
   bc32a:	4659      	mov	r1, fp
   bc32c:	4699      	mov	r9, r3
   bc32e:	f1b8 0f01 	cmp.w	r8, #1
   bc332:	dc21      	bgt.n	bc378 <_strtod_l+0x528>
   bc334:	b10b      	cbz	r3, bc33a <_strtod_l+0x4ea>
   bc336:	4682      	mov	sl, r0
   bc338:	468b      	mov	fp, r1
   bc33a:	4b2f      	ldr	r3, [pc, #188]	; (bc3f8 <_strtod_l+0x5a8>)
   bc33c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   bc340:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   bc344:	4652      	mov	r2, sl
   bc346:	465b      	mov	r3, fp
   bc348:	e9d9 0100 	ldrd	r0, r1, [r9]
   bc34c:	f7ff f944 	bl	bb5d8 <__aeabi_dmul>
   bc350:	4b2a      	ldr	r3, [pc, #168]	; (bc3fc <_strtod_l+0x5ac>)
   bc352:	460a      	mov	r2, r1
   bc354:	400b      	ands	r3, r1
   bc356:	492a      	ldr	r1, [pc, #168]	; (bc400 <_strtod_l+0x5b0>)
   bc358:	428b      	cmp	r3, r1
   bc35a:	4682      	mov	sl, r0
   bc35c:	d8bc      	bhi.n	bc2d8 <_strtod_l+0x488>
   bc35e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   bc362:	428b      	cmp	r3, r1
   bc364:	bf86      	itte	hi
   bc366:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; bc404 <_strtod_l+0x5b4>
   bc36a:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   bc36e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   bc372:	2300      	movs	r3, #0
   bc374:	9304      	str	r3, [sp, #16]
   bc376:	e084      	b.n	bc482 <_strtod_l+0x632>
   bc378:	f018 0f01 	tst.w	r8, #1
   bc37c:	d005      	beq.n	bc38a <_strtod_l+0x53a>
   bc37e:	9b04      	ldr	r3, [sp, #16]
   bc380:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc384:	f7ff f928 	bl	bb5d8 <__aeabi_dmul>
   bc388:	2301      	movs	r3, #1
   bc38a:	9a04      	ldr	r2, [sp, #16]
   bc38c:	3208      	adds	r2, #8
   bc38e:	f109 0901 	add.w	r9, r9, #1
   bc392:	ea4f 0868 	mov.w	r8, r8, asr #1
   bc396:	9204      	str	r2, [sp, #16]
   bc398:	e7c9      	b.n	bc32e <_strtod_l+0x4de>
   bc39a:	d0ea      	beq.n	bc372 <_strtod_l+0x522>
   bc39c:	f1c8 0800 	rsb	r8, r8, #0
   bc3a0:	f018 020f 	ands.w	r2, r8, #15
   bc3a4:	d00a      	beq.n	bc3bc <_strtod_l+0x56c>
   bc3a6:	4b13      	ldr	r3, [pc, #76]	; (bc3f4 <_strtod_l+0x5a4>)
   bc3a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   bc3ac:	4650      	mov	r0, sl
   bc3ae:	4659      	mov	r1, fp
   bc3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc3b4:	f7ff fa3a 	bl	bb82c <__aeabi_ddiv>
   bc3b8:	4682      	mov	sl, r0
   bc3ba:	468b      	mov	fp, r1
   bc3bc:	ea5f 1828 	movs.w	r8, r8, asr #4
   bc3c0:	d0d7      	beq.n	bc372 <_strtod_l+0x522>
   bc3c2:	f1b8 0f1f 	cmp.w	r8, #31
   bc3c6:	dd1f      	ble.n	bc408 <_strtod_l+0x5b8>
   bc3c8:	2500      	movs	r5, #0
   bc3ca:	462e      	mov	r6, r5
   bc3cc:	9507      	str	r5, [sp, #28]
   bc3ce:	9505      	str	r5, [sp, #20]
   bc3d0:	2322      	movs	r3, #34	; 0x22
   bc3d2:	f04f 0a00 	mov.w	sl, #0
   bc3d6:	f04f 0b00 	mov.w	fp, #0
   bc3da:	6023      	str	r3, [r4, #0]
   bc3dc:	e786      	b.n	bc2ec <_strtod_l+0x49c>
   bc3de:	bf00      	nop
   bc3e0:	000be90a 	.word	0x000be90a
   bc3e4:	000be924 	.word	0x000be924
   bc3e8:	000be901 	.word	0x000be901
   bc3ec:	000be904 	.word	0x000be904
   bc3f0:	000be1c9 	.word	0x000be1c9
   bc3f4:	000beb70 	.word	0x000beb70
   bc3f8:	000beb48 	.word	0x000beb48
   bc3fc:	7ff00000 	.word	0x7ff00000
   bc400:	7ca00000 	.word	0x7ca00000
   bc404:	7fefffff 	.word	0x7fefffff
   bc408:	f018 0310 	ands.w	r3, r8, #16
   bc40c:	bf18      	it	ne
   bc40e:	236a      	movne	r3, #106	; 0x6a
   bc410:	f8df 93ac 	ldr.w	r9, [pc, #940]	; bc7c0 <_strtod_l+0x970>
   bc414:	9304      	str	r3, [sp, #16]
   bc416:	4650      	mov	r0, sl
   bc418:	4659      	mov	r1, fp
   bc41a:	2300      	movs	r3, #0
   bc41c:	f018 0f01 	tst.w	r8, #1
   bc420:	d004      	beq.n	bc42c <_strtod_l+0x5dc>
   bc422:	e9d9 2300 	ldrd	r2, r3, [r9]
   bc426:	f7ff f8d7 	bl	bb5d8 <__aeabi_dmul>
   bc42a:	2301      	movs	r3, #1
   bc42c:	ea5f 0868 	movs.w	r8, r8, asr #1
   bc430:	f109 0908 	add.w	r9, r9, #8
   bc434:	d1f2      	bne.n	bc41c <_strtod_l+0x5cc>
   bc436:	b10b      	cbz	r3, bc43c <_strtod_l+0x5ec>
   bc438:	4682      	mov	sl, r0
   bc43a:	468b      	mov	fp, r1
   bc43c:	9b04      	ldr	r3, [sp, #16]
   bc43e:	b1c3      	cbz	r3, bc472 <_strtod_l+0x622>
   bc440:	f3cb 520a 	ubfx	r2, fp, #20, #11
   bc444:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   bc448:	2b00      	cmp	r3, #0
   bc44a:	4659      	mov	r1, fp
   bc44c:	dd11      	ble.n	bc472 <_strtod_l+0x622>
   bc44e:	2b1f      	cmp	r3, #31
   bc450:	f340 8124 	ble.w	bc69c <_strtod_l+0x84c>
   bc454:	2b34      	cmp	r3, #52	; 0x34
   bc456:	bfde      	ittt	le
   bc458:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
   bc45c:	f04f 33ff 	movle.w	r3, #4294967295	; 0xffffffff
   bc460:	fa03 f202 	lslle.w	r2, r3, r2
   bc464:	f04f 0a00 	mov.w	sl, #0
   bc468:	bfcc      	ite	gt
   bc46a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   bc46e:	ea02 0b01 	andle.w	fp, r2, r1
   bc472:	2200      	movs	r2, #0
   bc474:	2300      	movs	r3, #0
   bc476:	4650      	mov	r0, sl
   bc478:	4659      	mov	r1, fp
   bc47a:	f7ff fb15 	bl	bbaa8 <__aeabi_dcmpeq>
   bc47e:	2800      	cmp	r0, #0
   bc480:	d1a2      	bne.n	bc3c8 <_strtod_l+0x578>
   bc482:	9b07      	ldr	r3, [sp, #28]
   bc484:	9300      	str	r3, [sp, #0]
   bc486:	9908      	ldr	r1, [sp, #32]
   bc488:	462b      	mov	r3, r5
   bc48a:	463a      	mov	r2, r7
   bc48c:	4620      	mov	r0, r4
   bc48e:	f001 f80d 	bl	bd4ac <__s2b>
   bc492:	9007      	str	r0, [sp, #28]
   bc494:	2800      	cmp	r0, #0
   bc496:	f43f af1f 	beq.w	bc2d8 <_strtod_l+0x488>
   bc49a:	9b05      	ldr	r3, [sp, #20]
   bc49c:	1b9e      	subs	r6, r3, r6
   bc49e:	9b06      	ldr	r3, [sp, #24]
   bc4a0:	2b00      	cmp	r3, #0
   bc4a2:	bfb4      	ite	lt
   bc4a4:	4633      	movlt	r3, r6
   bc4a6:	2300      	movge	r3, #0
   bc4a8:	930c      	str	r3, [sp, #48]	; 0x30
   bc4aa:	9b06      	ldr	r3, [sp, #24]
   bc4ac:	2500      	movs	r5, #0
   bc4ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   bc4b2:	9312      	str	r3, [sp, #72]	; 0x48
   bc4b4:	462e      	mov	r6, r5
   bc4b6:	9b07      	ldr	r3, [sp, #28]
   bc4b8:	4620      	mov	r0, r4
   bc4ba:	6859      	ldr	r1, [r3, #4]
   bc4bc:	f000 ff4e 	bl	bd35c <_Balloc>
   bc4c0:	9005      	str	r0, [sp, #20]
   bc4c2:	2800      	cmp	r0, #0
   bc4c4:	f43f af0c 	beq.w	bc2e0 <_strtod_l+0x490>
   bc4c8:	9b07      	ldr	r3, [sp, #28]
   bc4ca:	691a      	ldr	r2, [r3, #16]
   bc4cc:	3202      	adds	r2, #2
   bc4ce:	f103 010c 	add.w	r1, r3, #12
   bc4d2:	0092      	lsls	r2, r2, #2
   bc4d4:	300c      	adds	r0, #12
   bc4d6:	f7ff fbc4 	bl	bbc62 <memcpy>
   bc4da:	ec4b ab10 	vmov	d0, sl, fp
   bc4de:	aa1a      	add	r2, sp, #104	; 0x68
   bc4e0:	a919      	add	r1, sp, #100	; 0x64
   bc4e2:	4620      	mov	r0, r4
   bc4e4:	f001 fb28 	bl	bdb38 <__d2b>
   bc4e8:	ec4b ab18 	vmov	d8, sl, fp
   bc4ec:	9018      	str	r0, [sp, #96]	; 0x60
   bc4ee:	2800      	cmp	r0, #0
   bc4f0:	f43f aef6 	beq.w	bc2e0 <_strtod_l+0x490>
   bc4f4:	2101      	movs	r1, #1
   bc4f6:	4620      	mov	r0, r4
   bc4f8:	f001 f872 	bl	bd5e0 <__i2b>
   bc4fc:	4606      	mov	r6, r0
   bc4fe:	2800      	cmp	r0, #0
   bc500:	f43f aeee 	beq.w	bc2e0 <_strtod_l+0x490>
   bc504:	9b19      	ldr	r3, [sp, #100]	; 0x64
   bc506:	9904      	ldr	r1, [sp, #16]
   bc508:	2b00      	cmp	r3, #0
   bc50a:	bfab      	itete	ge
   bc50c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
   bc50e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   bc510:	9f12      	ldrge	r7, [sp, #72]	; 0x48
   bc512:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
   bc516:	bfac      	ite	ge
   bc518:	eb03 0902 	addge.w	r9, r3, r2
   bc51c:	1ad7      	sublt	r7, r2, r3
   bc51e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   bc520:	eba3 0801 	sub.w	r8, r3, r1
   bc524:	4490      	add	r8, r2
   bc526:	4ba1      	ldr	r3, [pc, #644]	; (bc7ac <_strtod_l+0x95c>)
   bc528:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bc52c:	4598      	cmp	r8, r3
   bc52e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   bc532:	f280 80c7 	bge.w	bc6c4 <_strtod_l+0x874>
   bc536:	eba3 0308 	sub.w	r3, r3, r8
   bc53a:	2b1f      	cmp	r3, #31
   bc53c:	eba2 0203 	sub.w	r2, r2, r3
   bc540:	f04f 0101 	mov.w	r1, #1
   bc544:	f300 80b1 	bgt.w	bc6aa <_strtod_l+0x85a>
   bc548:	fa01 f303 	lsl.w	r3, r1, r3
   bc54c:	930d      	str	r3, [sp, #52]	; 0x34
   bc54e:	2300      	movs	r3, #0
   bc550:	9308      	str	r3, [sp, #32]
   bc552:	eb09 0802 	add.w	r8, r9, r2
   bc556:	9b04      	ldr	r3, [sp, #16]
   bc558:	45c1      	cmp	r9, r8
   bc55a:	4417      	add	r7, r2
   bc55c:	441f      	add	r7, r3
   bc55e:	464b      	mov	r3, r9
   bc560:	bfa8      	it	ge
   bc562:	4643      	movge	r3, r8
   bc564:	42bb      	cmp	r3, r7
   bc566:	bfa8      	it	ge
   bc568:	463b      	movge	r3, r7
   bc56a:	2b00      	cmp	r3, #0
   bc56c:	bfc2      	ittt	gt
   bc56e:	eba8 0803 	subgt.w	r8, r8, r3
   bc572:	1aff      	subgt	r7, r7, r3
   bc574:	eba9 0903 	subgt.w	r9, r9, r3
   bc578:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   bc57a:	2b00      	cmp	r3, #0
   bc57c:	dd17      	ble.n	bc5ae <_strtod_l+0x75e>
   bc57e:	4631      	mov	r1, r6
   bc580:	461a      	mov	r2, r3
   bc582:	4620      	mov	r0, r4
   bc584:	f001 f8ec 	bl	bd760 <__pow5mult>
   bc588:	4606      	mov	r6, r0
   bc58a:	2800      	cmp	r0, #0
   bc58c:	f43f aea8 	beq.w	bc2e0 <_strtod_l+0x490>
   bc590:	4601      	mov	r1, r0
   bc592:	9a18      	ldr	r2, [sp, #96]	; 0x60
   bc594:	4620      	mov	r0, r4
   bc596:	f001 f839 	bl	bd60c <__multiply>
   bc59a:	900b      	str	r0, [sp, #44]	; 0x2c
   bc59c:	2800      	cmp	r0, #0
   bc59e:	f43f ae9f 	beq.w	bc2e0 <_strtod_l+0x490>
   bc5a2:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc5a4:	4620      	mov	r0, r4
   bc5a6:	f000 ff19 	bl	bd3dc <_Bfree>
   bc5aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc5ac:	9318      	str	r3, [sp, #96]	; 0x60
   bc5ae:	f1b8 0f00 	cmp.w	r8, #0
   bc5b2:	f300 808c 	bgt.w	bc6ce <_strtod_l+0x87e>
   bc5b6:	9b06      	ldr	r3, [sp, #24]
   bc5b8:	2b00      	cmp	r3, #0
   bc5ba:	dd08      	ble.n	bc5ce <_strtod_l+0x77e>
   bc5bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
   bc5be:	9905      	ldr	r1, [sp, #20]
   bc5c0:	4620      	mov	r0, r4
   bc5c2:	f001 f8cd 	bl	bd760 <__pow5mult>
   bc5c6:	9005      	str	r0, [sp, #20]
   bc5c8:	2800      	cmp	r0, #0
   bc5ca:	f43f ae89 	beq.w	bc2e0 <_strtod_l+0x490>
   bc5ce:	2f00      	cmp	r7, #0
   bc5d0:	dd08      	ble.n	bc5e4 <_strtod_l+0x794>
   bc5d2:	9905      	ldr	r1, [sp, #20]
   bc5d4:	463a      	mov	r2, r7
   bc5d6:	4620      	mov	r0, r4
   bc5d8:	f001 f91c 	bl	bd814 <__lshift>
   bc5dc:	9005      	str	r0, [sp, #20]
   bc5de:	2800      	cmp	r0, #0
   bc5e0:	f43f ae7e 	beq.w	bc2e0 <_strtod_l+0x490>
   bc5e4:	f1b9 0f00 	cmp.w	r9, #0
   bc5e8:	dd08      	ble.n	bc5fc <_strtod_l+0x7ac>
   bc5ea:	4631      	mov	r1, r6
   bc5ec:	464a      	mov	r2, r9
   bc5ee:	4620      	mov	r0, r4
   bc5f0:	f001 f910 	bl	bd814 <__lshift>
   bc5f4:	4606      	mov	r6, r0
   bc5f6:	2800      	cmp	r0, #0
   bc5f8:	f43f ae72 	beq.w	bc2e0 <_strtod_l+0x490>
   bc5fc:	9a05      	ldr	r2, [sp, #20]
   bc5fe:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc600:	4620      	mov	r0, r4
   bc602:	f001 f993 	bl	bd92c <__mdiff>
   bc606:	4605      	mov	r5, r0
   bc608:	2800      	cmp	r0, #0
   bc60a:	f43f ae69 	beq.w	bc2e0 <_strtod_l+0x490>
   bc60e:	68c3      	ldr	r3, [r0, #12]
   bc610:	930b      	str	r3, [sp, #44]	; 0x2c
   bc612:	2300      	movs	r3, #0
   bc614:	60c3      	str	r3, [r0, #12]
   bc616:	4631      	mov	r1, r6
   bc618:	f001 f96c 	bl	bd8f4 <__mcmp>
   bc61c:	2800      	cmp	r0, #0
   bc61e:	da60      	bge.n	bc6e2 <_strtod_l+0x892>
   bc620:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc622:	ea53 030a 	orrs.w	r3, r3, sl
   bc626:	f040 8082 	bne.w	bc72e <_strtod_l+0x8de>
   bc62a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bc62e:	2b00      	cmp	r3, #0
   bc630:	d17d      	bne.n	bc72e <_strtod_l+0x8de>
   bc632:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bc636:	0d1b      	lsrs	r3, r3, #20
   bc638:	051b      	lsls	r3, r3, #20
   bc63a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   bc63e:	d976      	bls.n	bc72e <_strtod_l+0x8de>
   bc640:	696b      	ldr	r3, [r5, #20]
   bc642:	b913      	cbnz	r3, bc64a <_strtod_l+0x7fa>
   bc644:	692b      	ldr	r3, [r5, #16]
   bc646:	2b01      	cmp	r3, #1
   bc648:	dd71      	ble.n	bc72e <_strtod_l+0x8de>
   bc64a:	4629      	mov	r1, r5
   bc64c:	2201      	movs	r2, #1
   bc64e:	4620      	mov	r0, r4
   bc650:	f001 f8e0 	bl	bd814 <__lshift>
   bc654:	4631      	mov	r1, r6
   bc656:	4605      	mov	r5, r0
   bc658:	f001 f94c 	bl	bd8f4 <__mcmp>
   bc65c:	2800      	cmp	r0, #0
   bc65e:	dd66      	ble.n	bc72e <_strtod_l+0x8de>
   bc660:	9904      	ldr	r1, [sp, #16]
   bc662:	4a53      	ldr	r2, [pc, #332]	; (bc7b0 <_strtod_l+0x960>)
   bc664:	465b      	mov	r3, fp
   bc666:	2900      	cmp	r1, #0
   bc668:	f000 8081 	beq.w	bc76e <_strtod_l+0x91e>
   bc66c:	ea02 010b 	and.w	r1, r2, fp
   bc670:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   bc674:	dc7b      	bgt.n	bc76e <_strtod_l+0x91e>
   bc676:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   bc67a:	f77f aea9 	ble.w	bc3d0 <_strtod_l+0x580>
   bc67e:	4b4d      	ldr	r3, [pc, #308]	; (bc7b4 <_strtod_l+0x964>)
   bc680:	4650      	mov	r0, sl
   bc682:	4659      	mov	r1, fp
   bc684:	2200      	movs	r2, #0
   bc686:	f7fe ffa7 	bl	bb5d8 <__aeabi_dmul>
   bc68a:	460b      	mov	r3, r1
   bc68c:	4303      	orrs	r3, r0
   bc68e:	bf08      	it	eq
   bc690:	2322      	moveq	r3, #34	; 0x22
   bc692:	4682      	mov	sl, r0
   bc694:	468b      	mov	fp, r1
   bc696:	bf08      	it	eq
   bc698:	6023      	streq	r3, [r4, #0]
   bc69a:	e62b      	b.n	bc2f4 <_strtod_l+0x4a4>
   bc69c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bc6a0:	fa02 f303 	lsl.w	r3, r2, r3
   bc6a4:	ea03 0a0a 	and.w	sl, r3, sl
   bc6a8:	e6e3      	b.n	bc472 <_strtod_l+0x622>
   bc6aa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   bc6ae:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   bc6b2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   bc6b6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   bc6ba:	fa01 f308 	lsl.w	r3, r1, r8
   bc6be:	9308      	str	r3, [sp, #32]
   bc6c0:	910d      	str	r1, [sp, #52]	; 0x34
   bc6c2:	e746      	b.n	bc552 <_strtod_l+0x702>
   bc6c4:	2300      	movs	r3, #0
   bc6c6:	9308      	str	r3, [sp, #32]
   bc6c8:	2301      	movs	r3, #1
   bc6ca:	930d      	str	r3, [sp, #52]	; 0x34
   bc6cc:	e741      	b.n	bc552 <_strtod_l+0x702>
   bc6ce:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc6d0:	4642      	mov	r2, r8
   bc6d2:	4620      	mov	r0, r4
   bc6d4:	f001 f89e 	bl	bd814 <__lshift>
   bc6d8:	9018      	str	r0, [sp, #96]	; 0x60
   bc6da:	2800      	cmp	r0, #0
   bc6dc:	f47f af6b 	bne.w	bc5b6 <_strtod_l+0x766>
   bc6e0:	e5fe      	b.n	bc2e0 <_strtod_l+0x490>
   bc6e2:	465f      	mov	r7, fp
   bc6e4:	d16e      	bne.n	bc7c4 <_strtod_l+0x974>
   bc6e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bc6e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bc6ec:	b342      	cbz	r2, bc740 <_strtod_l+0x8f0>
   bc6ee:	4a32      	ldr	r2, [pc, #200]	; (bc7b8 <_strtod_l+0x968>)
   bc6f0:	4293      	cmp	r3, r2
   bc6f2:	d128      	bne.n	bc746 <_strtod_l+0x8f6>
   bc6f4:	9b04      	ldr	r3, [sp, #16]
   bc6f6:	4651      	mov	r1, sl
   bc6f8:	b1eb      	cbz	r3, bc736 <_strtod_l+0x8e6>
   bc6fa:	4b2d      	ldr	r3, [pc, #180]	; (bc7b0 <_strtod_l+0x960>)
   bc6fc:	403b      	ands	r3, r7
   bc6fe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bc702:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bc706:	d819      	bhi.n	bc73c <_strtod_l+0x8ec>
   bc708:	0d1b      	lsrs	r3, r3, #20
   bc70a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   bc70e:	fa02 f303 	lsl.w	r3, r2, r3
   bc712:	4299      	cmp	r1, r3
   bc714:	d117      	bne.n	bc746 <_strtod_l+0x8f6>
   bc716:	4b29      	ldr	r3, [pc, #164]	; (bc7bc <_strtod_l+0x96c>)
   bc718:	429f      	cmp	r7, r3
   bc71a:	d102      	bne.n	bc722 <_strtod_l+0x8d2>
   bc71c:	3101      	adds	r1, #1
   bc71e:	f43f addf 	beq.w	bc2e0 <_strtod_l+0x490>
   bc722:	4b23      	ldr	r3, [pc, #140]	; (bc7b0 <_strtod_l+0x960>)
   bc724:	403b      	ands	r3, r7
   bc726:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   bc72a:	f04f 0a00 	mov.w	sl, #0
   bc72e:	9b04      	ldr	r3, [sp, #16]
   bc730:	2b00      	cmp	r3, #0
   bc732:	d1a4      	bne.n	bc67e <_strtod_l+0x82e>
   bc734:	e5de      	b.n	bc2f4 <_strtod_l+0x4a4>
   bc736:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   bc73a:	e7ea      	b.n	bc712 <_strtod_l+0x8c2>
   bc73c:	4613      	mov	r3, r2
   bc73e:	e7e8      	b.n	bc712 <_strtod_l+0x8c2>
   bc740:	ea53 030a 	orrs.w	r3, r3, sl
   bc744:	d08c      	beq.n	bc660 <_strtod_l+0x810>
   bc746:	9b08      	ldr	r3, [sp, #32]
   bc748:	b1db      	cbz	r3, bc782 <_strtod_l+0x932>
   bc74a:	423b      	tst	r3, r7
   bc74c:	d0ef      	beq.n	bc72e <_strtod_l+0x8de>
   bc74e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc750:	9a04      	ldr	r2, [sp, #16]
   bc752:	4650      	mov	r0, sl
   bc754:	4659      	mov	r1, fp
   bc756:	b1c3      	cbz	r3, bc78a <_strtod_l+0x93a>
   bc758:	f7ff fb5c 	bl	bbe14 <sulp>
   bc75c:	4602      	mov	r2, r0
   bc75e:	460b      	mov	r3, r1
   bc760:	ec51 0b18 	vmov	r0, r1, d8
   bc764:	f7fe fd82 	bl	bb26c <__adddf3>
   bc768:	4682      	mov	sl, r0
   bc76a:	468b      	mov	fp, r1
   bc76c:	e7df      	b.n	bc72e <_strtod_l+0x8de>
   bc76e:	4013      	ands	r3, r2
   bc770:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   bc774:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   bc778:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   bc77c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bc780:	e7d5      	b.n	bc72e <_strtod_l+0x8de>
   bc782:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bc784:	ea13 0f0a 	tst.w	r3, sl
   bc788:	e7e0      	b.n	bc74c <_strtod_l+0x8fc>
   bc78a:	f7ff fb43 	bl	bbe14 <sulp>
   bc78e:	4602      	mov	r2, r0
   bc790:	460b      	mov	r3, r1
   bc792:	ec51 0b18 	vmov	r0, r1, d8
   bc796:	f7fe fd67 	bl	bb268 <__aeabi_dsub>
   bc79a:	2200      	movs	r2, #0
   bc79c:	2300      	movs	r3, #0
   bc79e:	4682      	mov	sl, r0
   bc7a0:	468b      	mov	fp, r1
   bc7a2:	f7ff f981 	bl	bbaa8 <__aeabi_dcmpeq>
   bc7a6:	2800      	cmp	r0, #0
   bc7a8:	d0c1      	beq.n	bc72e <_strtod_l+0x8de>
   bc7aa:	e611      	b.n	bc3d0 <_strtod_l+0x580>
   bc7ac:	fffffc02 	.word	0xfffffc02
   bc7b0:	7ff00000 	.word	0x7ff00000
   bc7b4:	39500000 	.word	0x39500000
   bc7b8:	000fffff 	.word	0x000fffff
   bc7bc:	7fefffff 	.word	0x7fefffff
   bc7c0:	000be938 	.word	0x000be938
   bc7c4:	4631      	mov	r1, r6
   bc7c6:	4628      	mov	r0, r5
   bc7c8:	f001 fa12 	bl	bdbf0 <__ratio>
   bc7cc:	ec59 8b10 	vmov	r8, r9, d0
   bc7d0:	ee10 0a10 	vmov	r0, s0
   bc7d4:	2200      	movs	r2, #0
   bc7d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   bc7da:	4649      	mov	r1, r9
   bc7dc:	f7ff f978 	bl	bbad0 <__aeabi_dcmple>
   bc7e0:	2800      	cmp	r0, #0
   bc7e2:	d07a      	beq.n	bc8da <_strtod_l+0xa8a>
   bc7e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc7e6:	2b00      	cmp	r3, #0
   bc7e8:	d04a      	beq.n	bc880 <_strtod_l+0xa30>
   bc7ea:	4b95      	ldr	r3, [pc, #596]	; (bca40 <_strtod_l+0xbf0>)
   bc7ec:	2200      	movs	r2, #0
   bc7ee:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bc7f2:	f8df 924c 	ldr.w	r9, [pc, #588]	; bca40 <_strtod_l+0xbf0>
   bc7f6:	f04f 0800 	mov.w	r8, #0
   bc7fa:	4b92      	ldr	r3, [pc, #584]	; (bca44 <_strtod_l+0xbf4>)
   bc7fc:	403b      	ands	r3, r7
   bc7fe:	930d      	str	r3, [sp, #52]	; 0x34
   bc800:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bc802:	4b91      	ldr	r3, [pc, #580]	; (bca48 <_strtod_l+0xbf8>)
   bc804:	429a      	cmp	r2, r3
   bc806:	f040 80b0 	bne.w	bc96a <_strtod_l+0xb1a>
   bc80a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bc80e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   bc812:	ec4b ab10 	vmov	d0, sl, fp
   bc816:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bc81a:	f001 f911 	bl	bda40 <__ulp>
   bc81e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bc822:	ec53 2b10 	vmov	r2, r3, d0
   bc826:	f7fe fed7 	bl	bb5d8 <__aeabi_dmul>
   bc82a:	4652      	mov	r2, sl
   bc82c:	465b      	mov	r3, fp
   bc82e:	f7fe fd1d 	bl	bb26c <__adddf3>
   bc832:	460b      	mov	r3, r1
   bc834:	4983      	ldr	r1, [pc, #524]	; (bca44 <_strtod_l+0xbf4>)
   bc836:	4a85      	ldr	r2, [pc, #532]	; (bca4c <_strtod_l+0xbfc>)
   bc838:	4019      	ands	r1, r3
   bc83a:	4291      	cmp	r1, r2
   bc83c:	4682      	mov	sl, r0
   bc83e:	d960      	bls.n	bc902 <_strtod_l+0xab2>
   bc840:	ee18 3a90 	vmov	r3, s17
   bc844:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   bc848:	4293      	cmp	r3, r2
   bc84a:	d104      	bne.n	bc856 <_strtod_l+0xa06>
   bc84c:	ee18 3a10 	vmov	r3, s16
   bc850:	3301      	adds	r3, #1
   bc852:	f43f ad45 	beq.w	bc2e0 <_strtod_l+0x490>
   bc856:	f8df b200 	ldr.w	fp, [pc, #512]	; bca58 <_strtod_l+0xc08>
   bc85a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   bc85e:	9918      	ldr	r1, [sp, #96]	; 0x60
   bc860:	4620      	mov	r0, r4
   bc862:	f000 fdbb 	bl	bd3dc <_Bfree>
   bc866:	9905      	ldr	r1, [sp, #20]
   bc868:	4620      	mov	r0, r4
   bc86a:	f000 fdb7 	bl	bd3dc <_Bfree>
   bc86e:	4631      	mov	r1, r6
   bc870:	4620      	mov	r0, r4
   bc872:	f000 fdb3 	bl	bd3dc <_Bfree>
   bc876:	4629      	mov	r1, r5
   bc878:	4620      	mov	r0, r4
   bc87a:	f000 fdaf 	bl	bd3dc <_Bfree>
   bc87e:	e61a      	b.n	bc4b6 <_strtod_l+0x666>
   bc880:	f1ba 0f00 	cmp.w	sl, #0
   bc884:	d11b      	bne.n	bc8be <_strtod_l+0xa6e>
   bc886:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bc88a:	b9f3      	cbnz	r3, bc8ca <_strtod_l+0xa7a>
   bc88c:	4b6c      	ldr	r3, [pc, #432]	; (bca40 <_strtod_l+0xbf0>)
   bc88e:	2200      	movs	r2, #0
   bc890:	4640      	mov	r0, r8
   bc892:	4649      	mov	r1, r9
   bc894:	f7ff f912 	bl	bbabc <__aeabi_dcmplt>
   bc898:	b9d0      	cbnz	r0, bc8d0 <_strtod_l+0xa80>
   bc89a:	4640      	mov	r0, r8
   bc89c:	4649      	mov	r1, r9
   bc89e:	4b6c      	ldr	r3, [pc, #432]	; (bca50 <_strtod_l+0xc00>)
   bc8a0:	2200      	movs	r2, #0
   bc8a2:	f7fe fe99 	bl	bb5d8 <__aeabi_dmul>
   bc8a6:	4680      	mov	r8, r0
   bc8a8:	4689      	mov	r9, r1
   bc8aa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   bc8ae:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   bc8b2:	9315      	str	r3, [sp, #84]	; 0x54
   bc8b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   bc8b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bc8bc:	e79d      	b.n	bc7fa <_strtod_l+0x9aa>
   bc8be:	f1ba 0f01 	cmp.w	sl, #1
   bc8c2:	d102      	bne.n	bc8ca <_strtod_l+0xa7a>
   bc8c4:	2f00      	cmp	r7, #0
   bc8c6:	f43f ad83 	beq.w	bc3d0 <_strtod_l+0x580>
   bc8ca:	4b62      	ldr	r3, [pc, #392]	; (bca54 <_strtod_l+0xc04>)
   bc8cc:	2200      	movs	r2, #0
   bc8ce:	e78e      	b.n	bc7ee <_strtod_l+0x99e>
   bc8d0:	f8df 917c 	ldr.w	r9, [pc, #380]	; bca50 <_strtod_l+0xc00>
   bc8d4:	f04f 0800 	mov.w	r8, #0
   bc8d8:	e7e7      	b.n	bc8aa <_strtod_l+0xa5a>
   bc8da:	4b5d      	ldr	r3, [pc, #372]	; (bca50 <_strtod_l+0xc00>)
   bc8dc:	4640      	mov	r0, r8
   bc8de:	4649      	mov	r1, r9
   bc8e0:	2200      	movs	r2, #0
   bc8e2:	f7fe fe79 	bl	bb5d8 <__aeabi_dmul>
   bc8e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc8e8:	4680      	mov	r8, r0
   bc8ea:	4689      	mov	r9, r1
   bc8ec:	b933      	cbnz	r3, bc8fc <_strtod_l+0xaac>
   bc8ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bc8f2:	900e      	str	r0, [sp, #56]	; 0x38
   bc8f4:	930f      	str	r3, [sp, #60]	; 0x3c
   bc8f6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
   bc8fa:	e7dd      	b.n	bc8b8 <_strtod_l+0xa68>
   bc8fc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
   bc900:	e7f9      	b.n	bc8f6 <_strtod_l+0xaa6>
   bc902:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   bc906:	9b04      	ldr	r3, [sp, #16]
   bc908:	2b00      	cmp	r3, #0
   bc90a:	d1a8      	bne.n	bc85e <_strtod_l+0xa0e>
   bc90c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   bc910:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bc912:	0d1b      	lsrs	r3, r3, #20
   bc914:	051b      	lsls	r3, r3, #20
   bc916:	429a      	cmp	r2, r3
   bc918:	d1a1      	bne.n	bc85e <_strtod_l+0xa0e>
   bc91a:	4640      	mov	r0, r8
   bc91c:	4649      	mov	r1, r9
   bc91e:	f001 fa05 	bl	bdd2c <__aeabi_d2lz>
   bc922:	f7fe fe2b 	bl	bb57c <__aeabi_l2d>
   bc926:	4602      	mov	r2, r0
   bc928:	460b      	mov	r3, r1
   bc92a:	4640      	mov	r0, r8
   bc92c:	4649      	mov	r1, r9
   bc92e:	f7fe fc9b 	bl	bb268 <__aeabi_dsub>
   bc932:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   bc934:	f3cb 0313 	ubfx	r3, fp, #0, #20
   bc938:	ea43 030a 	orr.w	r3, r3, sl
   bc93c:	4313      	orrs	r3, r2
   bc93e:	4680      	mov	r8, r0
   bc940:	4689      	mov	r9, r1
   bc942:	d055      	beq.n	bc9f0 <_strtod_l+0xba0>
   bc944:	a336      	add	r3, pc, #216	; (adr r3, bca20 <_strtod_l+0xbd0>)
   bc946:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc94a:	f7ff f8b7 	bl	bbabc <__aeabi_dcmplt>
   bc94e:	2800      	cmp	r0, #0
   bc950:	f47f acd0 	bne.w	bc2f4 <_strtod_l+0x4a4>
   bc954:	a334      	add	r3, pc, #208	; (adr r3, bca28 <_strtod_l+0xbd8>)
   bc956:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc95a:	4640      	mov	r0, r8
   bc95c:	4649      	mov	r1, r9
   bc95e:	f7ff f8cb 	bl	bbaf8 <__aeabi_dcmpgt>
   bc962:	2800      	cmp	r0, #0
   bc964:	f43f af7b 	beq.w	bc85e <_strtod_l+0xa0e>
   bc968:	e4c4      	b.n	bc2f4 <_strtod_l+0x4a4>
   bc96a:	9b04      	ldr	r3, [sp, #16]
   bc96c:	b333      	cbz	r3, bc9bc <_strtod_l+0xb6c>
   bc96e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   bc970:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   bc974:	d822      	bhi.n	bc9bc <_strtod_l+0xb6c>
   bc976:	a32e      	add	r3, pc, #184	; (adr r3, bca30 <_strtod_l+0xbe0>)
   bc978:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc97c:	4640      	mov	r0, r8
   bc97e:	4649      	mov	r1, r9
   bc980:	f7ff f8a6 	bl	bbad0 <__aeabi_dcmple>
   bc984:	b1a0      	cbz	r0, bc9b0 <_strtod_l+0xb60>
   bc986:	4649      	mov	r1, r9
   bc988:	4640      	mov	r0, r8
   bc98a:	f7ff f8bf 	bl	bbb0c <__aeabi_d2uiz>
   bc98e:	2801      	cmp	r0, #1
   bc990:	bf38      	it	cc
   bc992:	2001      	movcc	r0, #1
   bc994:	f7fe fda6 	bl	bb4e4 <__aeabi_ui2d>
   bc998:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   bc99a:	4680      	mov	r8, r0
   bc99c:	4689      	mov	r9, r1
   bc99e:	bb23      	cbnz	r3, bc9ea <_strtod_l+0xb9a>
   bc9a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   bc9a4:	9010      	str	r0, [sp, #64]	; 0x40
   bc9a6:	9311      	str	r3, [sp, #68]	; 0x44
   bc9a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   bc9ac:	e9cd 2308 	strd	r2, r3, [sp, #32]
   bc9b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   bc9b2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   bc9b4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   bc9b8:	1a9b      	subs	r3, r3, r2
   bc9ba:	9309      	str	r3, [sp, #36]	; 0x24
   bc9bc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bc9c0:	eeb0 0a48 	vmov.f32	s0, s16
   bc9c4:	eef0 0a68 	vmov.f32	s1, s17
   bc9c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
   bc9cc:	f001 f838 	bl	bda40 <__ulp>
   bc9d0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   bc9d4:	ec53 2b10 	vmov	r2, r3, d0
   bc9d8:	f7fe fdfe 	bl	bb5d8 <__aeabi_dmul>
   bc9dc:	ec53 2b18 	vmov	r2, r3, d8
   bc9e0:	f7fe fc44 	bl	bb26c <__adddf3>
   bc9e4:	4682      	mov	sl, r0
   bc9e6:	468b      	mov	fp, r1
   bc9e8:	e78d      	b.n	bc906 <_strtod_l+0xab6>
   bc9ea:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
   bc9ee:	e7db      	b.n	bc9a8 <_strtod_l+0xb58>
   bc9f0:	a311      	add	r3, pc, #68	; (adr r3, bca38 <_strtod_l+0xbe8>)
   bc9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   bc9f6:	f7ff f861 	bl	bbabc <__aeabi_dcmplt>
   bc9fa:	e7b2      	b.n	bc962 <_strtod_l+0xb12>
   bc9fc:	2300      	movs	r3, #0
   bc9fe:	930a      	str	r3, [sp, #40]	; 0x28
   bca00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   bca02:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   bca04:	6013      	str	r3, [r2, #0]
   bca06:	f7ff ba6b 	b.w	bbee0 <_strtod_l+0x90>
   bca0a:	2a65      	cmp	r2, #101	; 0x65
   bca0c:	f43f ab5f 	beq.w	bc0ce <_strtod_l+0x27e>
   bca10:	2a45      	cmp	r2, #69	; 0x45
   bca12:	f43f ab5c 	beq.w	bc0ce <_strtod_l+0x27e>
   bca16:	2301      	movs	r3, #1
   bca18:	f7ff bb94 	b.w	bc144 <_strtod_l+0x2f4>
   bca1c:	f3af 8000 	nop.w
   bca20:	94a03595 	.word	0x94a03595
   bca24:	3fdfffff 	.word	0x3fdfffff
   bca28:	35afe535 	.word	0x35afe535
   bca2c:	3fe00000 	.word	0x3fe00000
   bca30:	ffc00000 	.word	0xffc00000
   bca34:	41dfffff 	.word	0x41dfffff
   bca38:	94a03595 	.word	0x94a03595
   bca3c:	3fcfffff 	.word	0x3fcfffff
   bca40:	3ff00000 	.word	0x3ff00000
   bca44:	7ff00000 	.word	0x7ff00000
   bca48:	7fe00000 	.word	0x7fe00000
   bca4c:	7c9fffff 	.word	0x7c9fffff
   bca50:	3fe00000 	.word	0x3fe00000
   bca54:	bff00000 	.word	0xbff00000
   bca58:	7fefffff 	.word	0x7fefffff

000bca5c <strtod>:
   bca5c:	460a      	mov	r2, r1
   bca5e:	4601      	mov	r1, r0
   bca60:	4802      	ldr	r0, [pc, #8]	; (bca6c <strtod+0x10>)
   bca62:	4b03      	ldr	r3, [pc, #12]	; (bca70 <strtod+0x14>)
   bca64:	6800      	ldr	r0, [r0, #0]
   bca66:	f7ff b9f3 	b.w	bbe50 <_strtod_l>
   bca6a:	bf00      	nop
   bca6c:	2003db1c 	.word	0x2003db1c
   bca70:	2003db88 	.word	0x2003db88

000bca74 <_strtol_l.constprop.0>:
   bca74:	2b01      	cmp	r3, #1
   bca76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bca7a:	d001      	beq.n	bca80 <_strtol_l.constprop.0+0xc>
   bca7c:	2b24      	cmp	r3, #36	; 0x24
   bca7e:	d906      	bls.n	bca8e <_strtol_l.constprop.0+0x1a>
   bca80:	f7fa fd10 	bl	b74a4 <__errno>
   bca84:	2316      	movs	r3, #22
   bca86:	6003      	str	r3, [r0, #0]
   bca88:	2000      	movs	r0, #0
   bca8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bca8e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; bcb74 <_strtol_l.constprop.0+0x100>
   bca92:	460d      	mov	r5, r1
   bca94:	462e      	mov	r6, r5
   bca96:	f815 4b01 	ldrb.w	r4, [r5], #1
   bca9a:	f814 700c 	ldrb.w	r7, [r4, ip]
   bca9e:	f017 0708 	ands.w	r7, r7, #8
   bcaa2:	d1f7      	bne.n	bca94 <_strtol_l.constprop.0+0x20>
   bcaa4:	2c2d      	cmp	r4, #45	; 0x2d
   bcaa6:	d132      	bne.n	bcb0e <_strtol_l.constprop.0+0x9a>
   bcaa8:	782c      	ldrb	r4, [r5, #0]
   bcaaa:	2701      	movs	r7, #1
   bcaac:	1cb5      	adds	r5, r6, #2
   bcaae:	2b00      	cmp	r3, #0
   bcab0:	d05b      	beq.n	bcb6a <_strtol_l.constprop.0+0xf6>
   bcab2:	2b10      	cmp	r3, #16
   bcab4:	d109      	bne.n	bcaca <_strtol_l.constprop.0+0x56>
   bcab6:	2c30      	cmp	r4, #48	; 0x30
   bcab8:	d107      	bne.n	bcaca <_strtol_l.constprop.0+0x56>
   bcaba:	782c      	ldrb	r4, [r5, #0]
   bcabc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
   bcac0:	2c58      	cmp	r4, #88	; 0x58
   bcac2:	d14d      	bne.n	bcb60 <_strtol_l.constprop.0+0xec>
   bcac4:	786c      	ldrb	r4, [r5, #1]
   bcac6:	2310      	movs	r3, #16
   bcac8:	3502      	adds	r5, #2
   bcaca:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
   bcace:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   bcad2:	f04f 0c00 	mov.w	ip, #0
   bcad6:	fbb8 f9f3 	udiv	r9, r8, r3
   bcada:	4666      	mov	r6, ip
   bcadc:	fb03 8a19 	mls	sl, r3, r9, r8
   bcae0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
   bcae4:	f1be 0f09 	cmp.w	lr, #9
   bcae8:	d816      	bhi.n	bcb18 <_strtol_l.constprop.0+0xa4>
   bcaea:	4674      	mov	r4, lr
   bcaec:	42a3      	cmp	r3, r4
   bcaee:	dd24      	ble.n	bcb3a <_strtol_l.constprop.0+0xc6>
   bcaf0:	f1bc 0f00 	cmp.w	ip, #0
   bcaf4:	db1e      	blt.n	bcb34 <_strtol_l.constprop.0+0xc0>
   bcaf6:	45b1      	cmp	r9, r6
   bcaf8:	d31c      	bcc.n	bcb34 <_strtol_l.constprop.0+0xc0>
   bcafa:	d101      	bne.n	bcb00 <_strtol_l.constprop.0+0x8c>
   bcafc:	45a2      	cmp	sl, r4
   bcafe:	db19      	blt.n	bcb34 <_strtol_l.constprop.0+0xc0>
   bcb00:	fb06 4603 	mla	r6, r6, r3, r4
   bcb04:	f04f 0c01 	mov.w	ip, #1
   bcb08:	f815 4b01 	ldrb.w	r4, [r5], #1
   bcb0c:	e7e8      	b.n	bcae0 <_strtol_l.constprop.0+0x6c>
   bcb0e:	2c2b      	cmp	r4, #43	; 0x2b
   bcb10:	bf04      	itt	eq
   bcb12:	782c      	ldrbeq	r4, [r5, #0]
   bcb14:	1cb5      	addeq	r5, r6, #2
   bcb16:	e7ca      	b.n	bcaae <_strtol_l.constprop.0+0x3a>
   bcb18:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
   bcb1c:	f1be 0f19 	cmp.w	lr, #25
   bcb20:	d801      	bhi.n	bcb26 <_strtol_l.constprop.0+0xb2>
   bcb22:	3c37      	subs	r4, #55	; 0x37
   bcb24:	e7e2      	b.n	bcaec <_strtol_l.constprop.0+0x78>
   bcb26:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
   bcb2a:	f1be 0f19 	cmp.w	lr, #25
   bcb2e:	d804      	bhi.n	bcb3a <_strtol_l.constprop.0+0xc6>
   bcb30:	3c57      	subs	r4, #87	; 0x57
   bcb32:	e7db      	b.n	bcaec <_strtol_l.constprop.0+0x78>
   bcb34:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   bcb38:	e7e6      	b.n	bcb08 <_strtol_l.constprop.0+0x94>
   bcb3a:	f1bc 0f00 	cmp.w	ip, #0
   bcb3e:	da05      	bge.n	bcb4c <_strtol_l.constprop.0+0xd8>
   bcb40:	2322      	movs	r3, #34	; 0x22
   bcb42:	6003      	str	r3, [r0, #0]
   bcb44:	4646      	mov	r6, r8
   bcb46:	b942      	cbnz	r2, bcb5a <_strtol_l.constprop.0+0xe6>
   bcb48:	4630      	mov	r0, r6
   bcb4a:	e79e      	b.n	bca8a <_strtol_l.constprop.0+0x16>
   bcb4c:	b107      	cbz	r7, bcb50 <_strtol_l.constprop.0+0xdc>
   bcb4e:	4276      	negs	r6, r6
   bcb50:	2a00      	cmp	r2, #0
   bcb52:	d0f9      	beq.n	bcb48 <_strtol_l.constprop.0+0xd4>
   bcb54:	f1bc 0f00 	cmp.w	ip, #0
   bcb58:	d000      	beq.n	bcb5c <_strtol_l.constprop.0+0xe8>
   bcb5a:	1e69      	subs	r1, r5, #1
   bcb5c:	6011      	str	r1, [r2, #0]
   bcb5e:	e7f3      	b.n	bcb48 <_strtol_l.constprop.0+0xd4>
   bcb60:	2430      	movs	r4, #48	; 0x30
   bcb62:	2b00      	cmp	r3, #0
   bcb64:	d1b1      	bne.n	bcaca <_strtol_l.constprop.0+0x56>
   bcb66:	2308      	movs	r3, #8
   bcb68:	e7af      	b.n	bcaca <_strtol_l.constprop.0+0x56>
   bcb6a:	2c30      	cmp	r4, #48	; 0x30
   bcb6c:	d0a5      	beq.n	bcaba <_strtol_l.constprop.0+0x46>
   bcb6e:	230a      	movs	r3, #10
   bcb70:	e7ab      	b.n	bcaca <_strtol_l.constprop.0+0x56>
   bcb72:	bf00      	nop
   bcb74:	000be961 	.word	0x000be961

000bcb78 <strtol>:
   bcb78:	4613      	mov	r3, r2
   bcb7a:	460a      	mov	r2, r1
   bcb7c:	4601      	mov	r1, r0
   bcb7e:	4802      	ldr	r0, [pc, #8]	; (bcb88 <strtol+0x10>)
   bcb80:	6800      	ldr	r0, [r0, #0]
   bcb82:	f7ff bf77 	b.w	bca74 <_strtol_l.constprop.0>
   bcb86:	bf00      	nop
   bcb88:	2003db1c 	.word	0x2003db1c

000bcb8c <__register_exitproc>:
   bcb8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bcb90:	f8df 80b8 	ldr.w	r8, [pc, #184]	; bcc4c <__register_exitproc+0xc0>
   bcb94:	4606      	mov	r6, r0
   bcb96:	f8d8 0000 	ldr.w	r0, [r8]
   bcb9a:	461f      	mov	r7, r3
   bcb9c:	460d      	mov	r5, r1
   bcb9e:	4691      	mov	r9, r2
   bcba0:	f000 fbc6 	bl	bd330 <__retarget_lock_acquire_recursive>
   bcba4:	4b25      	ldr	r3, [pc, #148]	; (bcc3c <__register_exitproc+0xb0>)
   bcba6:	681c      	ldr	r4, [r3, #0]
   bcba8:	b934      	cbnz	r4, bcbb8 <__register_exitproc+0x2c>
   bcbaa:	4c25      	ldr	r4, [pc, #148]	; (bcc40 <__register_exitproc+0xb4>)
   bcbac:	601c      	str	r4, [r3, #0]
   bcbae:	4b25      	ldr	r3, [pc, #148]	; (bcc44 <__register_exitproc+0xb8>)
   bcbb0:	b113      	cbz	r3, bcbb8 <__register_exitproc+0x2c>
   bcbb2:	681b      	ldr	r3, [r3, #0]
   bcbb4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   bcbb8:	6863      	ldr	r3, [r4, #4]
   bcbba:	2b1f      	cmp	r3, #31
   bcbbc:	dd07      	ble.n	bcbce <__register_exitproc+0x42>
   bcbbe:	f8d8 0000 	ldr.w	r0, [r8]
   bcbc2:	f000 fbb7 	bl	bd334 <__retarget_lock_release_recursive>
   bcbc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   bcbca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bcbce:	b34e      	cbz	r6, bcc24 <__register_exitproc+0x98>
   bcbd0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   bcbd4:	b988      	cbnz	r0, bcbfa <__register_exitproc+0x6e>
   bcbd6:	4b1c      	ldr	r3, [pc, #112]	; (bcc48 <__register_exitproc+0xbc>)
   bcbd8:	b923      	cbnz	r3, bcbe4 <__register_exitproc+0x58>
   bcbda:	f8d8 0000 	ldr.w	r0, [r8]
   bcbde:	f000 fba8 	bl	bd332 <__retarget_lock_release>
   bcbe2:	e7f0      	b.n	bcbc6 <__register_exitproc+0x3a>
   bcbe4:	f44f 7084 	mov.w	r0, #264	; 0x108
   bcbe8:	f7fa fc14 	bl	b7414 <malloc>
   bcbec:	2800      	cmp	r0, #0
   bcbee:	d0f4      	beq.n	bcbda <__register_exitproc+0x4e>
   bcbf0:	2300      	movs	r3, #0
   bcbf2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   bcbf6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   bcbfa:	6863      	ldr	r3, [r4, #4]
   bcbfc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   bcc00:	2201      	movs	r2, #1
   bcc02:	409a      	lsls	r2, r3
   bcc04:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   bcc08:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   bcc0c:	4313      	orrs	r3, r2
   bcc0e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   bcc12:	2e02      	cmp	r6, #2
   bcc14:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   bcc18:	bf02      	ittt	eq
   bcc1a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   bcc1e:	4313      	orreq	r3, r2
   bcc20:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   bcc24:	6863      	ldr	r3, [r4, #4]
   bcc26:	f8d8 0000 	ldr.w	r0, [r8]
   bcc2a:	1c5a      	adds	r2, r3, #1
   bcc2c:	3302      	adds	r3, #2
   bcc2e:	6062      	str	r2, [r4, #4]
   bcc30:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   bcc34:	f000 fb7e 	bl	bd334 <__retarget_lock_release_recursive>
   bcc38:	2000      	movs	r0, #0
   bcc3a:	e7c6      	b.n	bcbca <__register_exitproc+0x3e>
   bcc3c:	2003e7ec 	.word	0x2003e7ec
   bcc40:	2003e760 	.word	0x2003e760
   bcc44:	00000000 	.word	0x00000000
   bcc48:	000b7415 	.word	0x000b7415
   bcc4c:	2003db80 	.word	0x2003db80

000bcc50 <rshift>:
   bcc50:	6903      	ldr	r3, [r0, #16]
   bcc52:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   bcc56:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   bcc5a:	ea4f 1261 	mov.w	r2, r1, asr #5
   bcc5e:	f100 0414 	add.w	r4, r0, #20
   bcc62:	dd45      	ble.n	bccf0 <rshift+0xa0>
   bcc64:	f011 011f 	ands.w	r1, r1, #31
   bcc68:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   bcc6c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   bcc70:	d10c      	bne.n	bcc8c <rshift+0x3c>
   bcc72:	f100 0710 	add.w	r7, r0, #16
   bcc76:	4629      	mov	r1, r5
   bcc78:	42b1      	cmp	r1, r6
   bcc7a:	d334      	bcc.n	bcce6 <rshift+0x96>
   bcc7c:	1a9b      	subs	r3, r3, r2
   bcc7e:	009b      	lsls	r3, r3, #2
   bcc80:	1eea      	subs	r2, r5, #3
   bcc82:	4296      	cmp	r6, r2
   bcc84:	bf38      	it	cc
   bcc86:	2300      	movcc	r3, #0
   bcc88:	4423      	add	r3, r4
   bcc8a:	e015      	b.n	bccb8 <rshift+0x68>
   bcc8c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   bcc90:	f1c1 0820 	rsb	r8, r1, #32
   bcc94:	40cf      	lsrs	r7, r1
   bcc96:	f105 0e04 	add.w	lr, r5, #4
   bcc9a:	46a1      	mov	r9, r4
   bcc9c:	4576      	cmp	r6, lr
   bcc9e:	46f4      	mov	ip, lr
   bcca0:	d815      	bhi.n	bccce <rshift+0x7e>
   bcca2:	1a9a      	subs	r2, r3, r2
   bcca4:	0092      	lsls	r2, r2, #2
   bcca6:	3a04      	subs	r2, #4
   bcca8:	3501      	adds	r5, #1
   bccaa:	42ae      	cmp	r6, r5
   bccac:	bf38      	it	cc
   bccae:	2200      	movcc	r2, #0
   bccb0:	18a3      	adds	r3, r4, r2
   bccb2:	50a7      	str	r7, [r4, r2]
   bccb4:	b107      	cbz	r7, bccb8 <rshift+0x68>
   bccb6:	3304      	adds	r3, #4
   bccb8:	1b1a      	subs	r2, r3, r4
   bccba:	42a3      	cmp	r3, r4
   bccbc:	ea4f 02a2 	mov.w	r2, r2, asr #2
   bccc0:	bf08      	it	eq
   bccc2:	2300      	moveq	r3, #0
   bccc4:	6102      	str	r2, [r0, #16]
   bccc6:	bf08      	it	eq
   bccc8:	6143      	streq	r3, [r0, #20]
   bccca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bccce:	f8dc c000 	ldr.w	ip, [ip]
   bccd2:	fa0c fc08 	lsl.w	ip, ip, r8
   bccd6:	ea4c 0707 	orr.w	r7, ip, r7
   bccda:	f849 7b04 	str.w	r7, [r9], #4
   bccde:	f85e 7b04 	ldr.w	r7, [lr], #4
   bcce2:	40cf      	lsrs	r7, r1
   bcce4:	e7da      	b.n	bcc9c <rshift+0x4c>
   bcce6:	f851 cb04 	ldr.w	ip, [r1], #4
   bccea:	f847 cf04 	str.w	ip, [r7, #4]!
   bccee:	e7c3      	b.n	bcc78 <rshift+0x28>
   bccf0:	4623      	mov	r3, r4
   bccf2:	e7e1      	b.n	bccb8 <rshift+0x68>

000bccf4 <__hexdig_fun>:
   bccf4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   bccf8:	2b09      	cmp	r3, #9
   bccfa:	d802      	bhi.n	bcd02 <__hexdig_fun+0xe>
   bccfc:	3820      	subs	r0, #32
   bccfe:	b2c0      	uxtb	r0, r0
   bcd00:	4770      	bx	lr
   bcd02:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   bcd06:	2b05      	cmp	r3, #5
   bcd08:	d801      	bhi.n	bcd0e <__hexdig_fun+0x1a>
   bcd0a:	3847      	subs	r0, #71	; 0x47
   bcd0c:	e7f7      	b.n	bccfe <__hexdig_fun+0xa>
   bcd0e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   bcd12:	2b05      	cmp	r3, #5
   bcd14:	d801      	bhi.n	bcd1a <__hexdig_fun+0x26>
   bcd16:	3827      	subs	r0, #39	; 0x27
   bcd18:	e7f1      	b.n	bccfe <__hexdig_fun+0xa>
   bcd1a:	2000      	movs	r0, #0
   bcd1c:	4770      	bx	lr
	...

000bcd20 <__gethex>:
   bcd20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bcd24:	ed2d 8b02 	vpush	{d8}
   bcd28:	b089      	sub	sp, #36	; 0x24
   bcd2a:	ee08 0a10 	vmov	s16, r0
   bcd2e:	9304      	str	r3, [sp, #16]
   bcd30:	4bb4      	ldr	r3, [pc, #720]	; (bd004 <__gethex+0x2e4>)
   bcd32:	681b      	ldr	r3, [r3, #0]
   bcd34:	9301      	str	r3, [sp, #4]
   bcd36:	4618      	mov	r0, r3
   bcd38:	468b      	mov	fp, r1
   bcd3a:	4690      	mov	r8, r2
   bcd3c:	f7ff f82f 	bl	bbd9e <strlen>
   bcd40:	9b01      	ldr	r3, [sp, #4]
   bcd42:	f8db 2000 	ldr.w	r2, [fp]
   bcd46:	4403      	add	r3, r0
   bcd48:	4682      	mov	sl, r0
   bcd4a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   bcd4e:	9305      	str	r3, [sp, #20]
   bcd50:	1c93      	adds	r3, r2, #2
   bcd52:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   bcd56:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   bcd5a:	32fe      	adds	r2, #254	; 0xfe
   bcd5c:	18d1      	adds	r1, r2, r3
   bcd5e:	461f      	mov	r7, r3
   bcd60:	f813 0b01 	ldrb.w	r0, [r3], #1
   bcd64:	9100      	str	r1, [sp, #0]
   bcd66:	2830      	cmp	r0, #48	; 0x30
   bcd68:	d0f8      	beq.n	bcd5c <__gethex+0x3c>
   bcd6a:	f7ff ffc3 	bl	bccf4 <__hexdig_fun>
   bcd6e:	4604      	mov	r4, r0
   bcd70:	2800      	cmp	r0, #0
   bcd72:	d13a      	bne.n	bcdea <__gethex+0xca>
   bcd74:	9901      	ldr	r1, [sp, #4]
   bcd76:	4652      	mov	r2, sl
   bcd78:	4638      	mov	r0, r7
   bcd7a:	f7ff f818 	bl	bbdae <strncmp>
   bcd7e:	4605      	mov	r5, r0
   bcd80:	2800      	cmp	r0, #0
   bcd82:	d168      	bne.n	bce56 <__gethex+0x136>
   bcd84:	f817 000a 	ldrb.w	r0, [r7, sl]
   bcd88:	eb07 060a 	add.w	r6, r7, sl
   bcd8c:	f7ff ffb2 	bl	bccf4 <__hexdig_fun>
   bcd90:	2800      	cmp	r0, #0
   bcd92:	d062      	beq.n	bce5a <__gethex+0x13a>
   bcd94:	4633      	mov	r3, r6
   bcd96:	7818      	ldrb	r0, [r3, #0]
   bcd98:	2830      	cmp	r0, #48	; 0x30
   bcd9a:	461f      	mov	r7, r3
   bcd9c:	f103 0301 	add.w	r3, r3, #1
   bcda0:	d0f9      	beq.n	bcd96 <__gethex+0x76>
   bcda2:	f7ff ffa7 	bl	bccf4 <__hexdig_fun>
   bcda6:	2301      	movs	r3, #1
   bcda8:	fab0 f480 	clz	r4, r0
   bcdac:	0964      	lsrs	r4, r4, #5
   bcdae:	4635      	mov	r5, r6
   bcdb0:	9300      	str	r3, [sp, #0]
   bcdb2:	463a      	mov	r2, r7
   bcdb4:	4616      	mov	r6, r2
   bcdb6:	3201      	adds	r2, #1
   bcdb8:	7830      	ldrb	r0, [r6, #0]
   bcdba:	f7ff ff9b 	bl	bccf4 <__hexdig_fun>
   bcdbe:	2800      	cmp	r0, #0
   bcdc0:	d1f8      	bne.n	bcdb4 <__gethex+0x94>
   bcdc2:	9901      	ldr	r1, [sp, #4]
   bcdc4:	4652      	mov	r2, sl
   bcdc6:	4630      	mov	r0, r6
   bcdc8:	f7fe fff1 	bl	bbdae <strncmp>
   bcdcc:	b980      	cbnz	r0, bcdf0 <__gethex+0xd0>
   bcdce:	b94d      	cbnz	r5, bcde4 <__gethex+0xc4>
   bcdd0:	eb06 050a 	add.w	r5, r6, sl
   bcdd4:	462a      	mov	r2, r5
   bcdd6:	4616      	mov	r6, r2
   bcdd8:	3201      	adds	r2, #1
   bcdda:	7830      	ldrb	r0, [r6, #0]
   bcddc:	f7ff ff8a 	bl	bccf4 <__hexdig_fun>
   bcde0:	2800      	cmp	r0, #0
   bcde2:	d1f8      	bne.n	bcdd6 <__gethex+0xb6>
   bcde4:	1bad      	subs	r5, r5, r6
   bcde6:	00ad      	lsls	r5, r5, #2
   bcde8:	e004      	b.n	bcdf4 <__gethex+0xd4>
   bcdea:	2400      	movs	r4, #0
   bcdec:	4625      	mov	r5, r4
   bcdee:	e7e0      	b.n	bcdb2 <__gethex+0x92>
   bcdf0:	2d00      	cmp	r5, #0
   bcdf2:	d1f7      	bne.n	bcde4 <__gethex+0xc4>
   bcdf4:	7833      	ldrb	r3, [r6, #0]
   bcdf6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   bcdfa:	2b50      	cmp	r3, #80	; 0x50
   bcdfc:	d13b      	bne.n	bce76 <__gethex+0x156>
   bcdfe:	7873      	ldrb	r3, [r6, #1]
   bce00:	2b2b      	cmp	r3, #43	; 0x2b
   bce02:	d02c      	beq.n	bce5e <__gethex+0x13e>
   bce04:	2b2d      	cmp	r3, #45	; 0x2d
   bce06:	d02e      	beq.n	bce66 <__gethex+0x146>
   bce08:	1c71      	adds	r1, r6, #1
   bce0a:	f04f 0900 	mov.w	r9, #0
   bce0e:	7808      	ldrb	r0, [r1, #0]
   bce10:	f7ff ff70 	bl	bccf4 <__hexdig_fun>
   bce14:	1e43      	subs	r3, r0, #1
   bce16:	b2db      	uxtb	r3, r3
   bce18:	2b18      	cmp	r3, #24
   bce1a:	d82c      	bhi.n	bce76 <__gethex+0x156>
   bce1c:	f1a0 0210 	sub.w	r2, r0, #16
   bce20:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   bce24:	f7ff ff66 	bl	bccf4 <__hexdig_fun>
   bce28:	1e43      	subs	r3, r0, #1
   bce2a:	b2db      	uxtb	r3, r3
   bce2c:	2b18      	cmp	r3, #24
   bce2e:	d91d      	bls.n	bce6c <__gethex+0x14c>
   bce30:	f1b9 0f00 	cmp.w	r9, #0
   bce34:	d000      	beq.n	bce38 <__gethex+0x118>
   bce36:	4252      	negs	r2, r2
   bce38:	4415      	add	r5, r2
   bce3a:	f8cb 1000 	str.w	r1, [fp]
   bce3e:	b1e4      	cbz	r4, bce7a <__gethex+0x15a>
   bce40:	9b00      	ldr	r3, [sp, #0]
   bce42:	2b00      	cmp	r3, #0
   bce44:	bf14      	ite	ne
   bce46:	2700      	movne	r7, #0
   bce48:	2706      	moveq	r7, #6
   bce4a:	4638      	mov	r0, r7
   bce4c:	b009      	add	sp, #36	; 0x24
   bce4e:	ecbd 8b02 	vpop	{d8}
   bce52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bce56:	463e      	mov	r6, r7
   bce58:	4625      	mov	r5, r4
   bce5a:	2401      	movs	r4, #1
   bce5c:	e7ca      	b.n	bcdf4 <__gethex+0xd4>
   bce5e:	f04f 0900 	mov.w	r9, #0
   bce62:	1cb1      	adds	r1, r6, #2
   bce64:	e7d3      	b.n	bce0e <__gethex+0xee>
   bce66:	f04f 0901 	mov.w	r9, #1
   bce6a:	e7fa      	b.n	bce62 <__gethex+0x142>
   bce6c:	230a      	movs	r3, #10
   bce6e:	fb03 0202 	mla	r2, r3, r2, r0
   bce72:	3a10      	subs	r2, #16
   bce74:	e7d4      	b.n	bce20 <__gethex+0x100>
   bce76:	4631      	mov	r1, r6
   bce78:	e7df      	b.n	bce3a <__gethex+0x11a>
   bce7a:	1bf3      	subs	r3, r6, r7
   bce7c:	3b01      	subs	r3, #1
   bce7e:	4621      	mov	r1, r4
   bce80:	2b07      	cmp	r3, #7
   bce82:	dc0b      	bgt.n	bce9c <__gethex+0x17c>
   bce84:	ee18 0a10 	vmov	r0, s16
   bce88:	f000 fa68 	bl	bd35c <_Balloc>
   bce8c:	4604      	mov	r4, r0
   bce8e:	b940      	cbnz	r0, bcea2 <__gethex+0x182>
   bce90:	4b5d      	ldr	r3, [pc, #372]	; (bd008 <__gethex+0x2e8>)
   bce92:	4602      	mov	r2, r0
   bce94:	21de      	movs	r1, #222	; 0xde
   bce96:	485d      	ldr	r0, [pc, #372]	; (bd00c <__gethex+0x2ec>)
   bce98:	f7fa fb0c 	bl	b74b4 <__assert_func>
   bce9c:	3101      	adds	r1, #1
   bce9e:	105b      	asrs	r3, r3, #1
   bcea0:	e7ee      	b.n	bce80 <__gethex+0x160>
   bcea2:	f100 0914 	add.w	r9, r0, #20
   bcea6:	f04f 0b00 	mov.w	fp, #0
   bceaa:	f1ca 0301 	rsb	r3, sl, #1
   bceae:	f8cd 9008 	str.w	r9, [sp, #8]
   bceb2:	f8cd b000 	str.w	fp, [sp]
   bceb6:	9306      	str	r3, [sp, #24]
   bceb8:	42b7      	cmp	r7, r6
   bceba:	d340      	bcc.n	bcf3e <__gethex+0x21e>
   bcebc:	9802      	ldr	r0, [sp, #8]
   bcebe:	9b00      	ldr	r3, [sp, #0]
   bcec0:	f840 3b04 	str.w	r3, [r0], #4
   bcec4:	eba0 0009 	sub.w	r0, r0, r9
   bcec8:	1080      	asrs	r0, r0, #2
   bceca:	0146      	lsls	r6, r0, #5
   bcecc:	6120      	str	r0, [r4, #16]
   bcece:	4618      	mov	r0, r3
   bced0:	f000 fb36 	bl	bd540 <__hi0bits>
   bced4:	1a30      	subs	r0, r6, r0
   bced6:	f8d8 6000 	ldr.w	r6, [r8]
   bceda:	42b0      	cmp	r0, r6
   bcedc:	dd63      	ble.n	bcfa6 <__gethex+0x286>
   bcede:	1b87      	subs	r7, r0, r6
   bcee0:	4639      	mov	r1, r7
   bcee2:	4620      	mov	r0, r4
   bcee4:	f000 feda 	bl	bdc9c <__any_on>
   bcee8:	4682      	mov	sl, r0
   bceea:	b1a8      	cbz	r0, bcf18 <__gethex+0x1f8>
   bceec:	1e7b      	subs	r3, r7, #1
   bceee:	1159      	asrs	r1, r3, #5
   bcef0:	f003 021f 	and.w	r2, r3, #31
   bcef4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   bcef8:	f04f 0a01 	mov.w	sl, #1
   bcefc:	fa0a f202 	lsl.w	r2, sl, r2
   bcf00:	420a      	tst	r2, r1
   bcf02:	d009      	beq.n	bcf18 <__gethex+0x1f8>
   bcf04:	4553      	cmp	r3, sl
   bcf06:	dd05      	ble.n	bcf14 <__gethex+0x1f4>
   bcf08:	1eb9      	subs	r1, r7, #2
   bcf0a:	4620      	mov	r0, r4
   bcf0c:	f000 fec6 	bl	bdc9c <__any_on>
   bcf10:	2800      	cmp	r0, #0
   bcf12:	d145      	bne.n	bcfa0 <__gethex+0x280>
   bcf14:	f04f 0a02 	mov.w	sl, #2
   bcf18:	4639      	mov	r1, r7
   bcf1a:	4620      	mov	r0, r4
   bcf1c:	f7ff fe98 	bl	bcc50 <rshift>
   bcf20:	443d      	add	r5, r7
   bcf22:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bcf26:	42ab      	cmp	r3, r5
   bcf28:	da4c      	bge.n	bcfc4 <__gethex+0x2a4>
   bcf2a:	ee18 0a10 	vmov	r0, s16
   bcf2e:	4621      	mov	r1, r4
   bcf30:	f000 fa54 	bl	bd3dc <_Bfree>
   bcf34:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bcf36:	2300      	movs	r3, #0
   bcf38:	6013      	str	r3, [r2, #0]
   bcf3a:	27a3      	movs	r7, #163	; 0xa3
   bcf3c:	e785      	b.n	bce4a <__gethex+0x12a>
   bcf3e:	1e73      	subs	r3, r6, #1
   bcf40:	9a05      	ldr	r2, [sp, #20]
   bcf42:	9303      	str	r3, [sp, #12]
   bcf44:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   bcf48:	4293      	cmp	r3, r2
   bcf4a:	d019      	beq.n	bcf80 <__gethex+0x260>
   bcf4c:	f1bb 0f20 	cmp.w	fp, #32
   bcf50:	d107      	bne.n	bcf62 <__gethex+0x242>
   bcf52:	9b02      	ldr	r3, [sp, #8]
   bcf54:	9a00      	ldr	r2, [sp, #0]
   bcf56:	f843 2b04 	str.w	r2, [r3], #4
   bcf5a:	9302      	str	r3, [sp, #8]
   bcf5c:	2300      	movs	r3, #0
   bcf5e:	9300      	str	r3, [sp, #0]
   bcf60:	469b      	mov	fp, r3
   bcf62:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   bcf66:	f7ff fec5 	bl	bccf4 <__hexdig_fun>
   bcf6a:	9b00      	ldr	r3, [sp, #0]
   bcf6c:	f000 000f 	and.w	r0, r0, #15
   bcf70:	fa00 f00b 	lsl.w	r0, r0, fp
   bcf74:	4303      	orrs	r3, r0
   bcf76:	9300      	str	r3, [sp, #0]
   bcf78:	f10b 0b04 	add.w	fp, fp, #4
   bcf7c:	9b03      	ldr	r3, [sp, #12]
   bcf7e:	e00d      	b.n	bcf9c <__gethex+0x27c>
   bcf80:	9b03      	ldr	r3, [sp, #12]
   bcf82:	9a06      	ldr	r2, [sp, #24]
   bcf84:	4413      	add	r3, r2
   bcf86:	42bb      	cmp	r3, r7
   bcf88:	d3e0      	bcc.n	bcf4c <__gethex+0x22c>
   bcf8a:	4618      	mov	r0, r3
   bcf8c:	9901      	ldr	r1, [sp, #4]
   bcf8e:	9307      	str	r3, [sp, #28]
   bcf90:	4652      	mov	r2, sl
   bcf92:	f7fe ff0c 	bl	bbdae <strncmp>
   bcf96:	9b07      	ldr	r3, [sp, #28]
   bcf98:	2800      	cmp	r0, #0
   bcf9a:	d1d7      	bne.n	bcf4c <__gethex+0x22c>
   bcf9c:	461e      	mov	r6, r3
   bcf9e:	e78b      	b.n	bceb8 <__gethex+0x198>
   bcfa0:	f04f 0a03 	mov.w	sl, #3
   bcfa4:	e7b8      	b.n	bcf18 <__gethex+0x1f8>
   bcfa6:	da0a      	bge.n	bcfbe <__gethex+0x29e>
   bcfa8:	1a37      	subs	r7, r6, r0
   bcfaa:	4621      	mov	r1, r4
   bcfac:	ee18 0a10 	vmov	r0, s16
   bcfb0:	463a      	mov	r2, r7
   bcfb2:	f000 fc2f 	bl	bd814 <__lshift>
   bcfb6:	1bed      	subs	r5, r5, r7
   bcfb8:	4604      	mov	r4, r0
   bcfba:	f100 0914 	add.w	r9, r0, #20
   bcfbe:	f04f 0a00 	mov.w	sl, #0
   bcfc2:	e7ae      	b.n	bcf22 <__gethex+0x202>
   bcfc4:	f8d8 0004 	ldr.w	r0, [r8, #4]
   bcfc8:	42a8      	cmp	r0, r5
   bcfca:	dd72      	ble.n	bd0b2 <__gethex+0x392>
   bcfcc:	1b45      	subs	r5, r0, r5
   bcfce:	42ae      	cmp	r6, r5
   bcfd0:	dc36      	bgt.n	bd040 <__gethex+0x320>
   bcfd2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bcfd6:	2b02      	cmp	r3, #2
   bcfd8:	d02a      	beq.n	bd030 <__gethex+0x310>
   bcfda:	2b03      	cmp	r3, #3
   bcfdc:	d02c      	beq.n	bd038 <__gethex+0x318>
   bcfde:	2b01      	cmp	r3, #1
   bcfe0:	d11c      	bne.n	bd01c <__gethex+0x2fc>
   bcfe2:	42ae      	cmp	r6, r5
   bcfe4:	d11a      	bne.n	bd01c <__gethex+0x2fc>
   bcfe6:	2e01      	cmp	r6, #1
   bcfe8:	d112      	bne.n	bd010 <__gethex+0x2f0>
   bcfea:	9a04      	ldr	r2, [sp, #16]
   bcfec:	f8d8 3004 	ldr.w	r3, [r8, #4]
   bcff0:	6013      	str	r3, [r2, #0]
   bcff2:	2301      	movs	r3, #1
   bcff4:	6123      	str	r3, [r4, #16]
   bcff6:	f8c9 3000 	str.w	r3, [r9]
   bcffa:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bcffc:	2762      	movs	r7, #98	; 0x62
   bcffe:	601c      	str	r4, [r3, #0]
   bd000:	e723      	b.n	bce4a <__gethex+0x12a>
   bd002:	bf00      	nop
   bd004:	000bead4 	.word	0x000bead4
   bd008:	000bea61 	.word	0x000bea61
   bd00c:	000bea72 	.word	0x000bea72
   bd010:	1e71      	subs	r1, r6, #1
   bd012:	4620      	mov	r0, r4
   bd014:	f000 fe42 	bl	bdc9c <__any_on>
   bd018:	2800      	cmp	r0, #0
   bd01a:	d1e6      	bne.n	bcfea <__gethex+0x2ca>
   bd01c:	ee18 0a10 	vmov	r0, s16
   bd020:	4621      	mov	r1, r4
   bd022:	f000 f9db 	bl	bd3dc <_Bfree>
   bd026:	9a14      	ldr	r2, [sp, #80]	; 0x50
   bd028:	2300      	movs	r3, #0
   bd02a:	6013      	str	r3, [r2, #0]
   bd02c:	2750      	movs	r7, #80	; 0x50
   bd02e:	e70c      	b.n	bce4a <__gethex+0x12a>
   bd030:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bd032:	2b00      	cmp	r3, #0
   bd034:	d1f2      	bne.n	bd01c <__gethex+0x2fc>
   bd036:	e7d8      	b.n	bcfea <__gethex+0x2ca>
   bd038:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bd03a:	2b00      	cmp	r3, #0
   bd03c:	d1d5      	bne.n	bcfea <__gethex+0x2ca>
   bd03e:	e7ed      	b.n	bd01c <__gethex+0x2fc>
   bd040:	1e6f      	subs	r7, r5, #1
   bd042:	f1ba 0f00 	cmp.w	sl, #0
   bd046:	d131      	bne.n	bd0ac <__gethex+0x38c>
   bd048:	b127      	cbz	r7, bd054 <__gethex+0x334>
   bd04a:	4639      	mov	r1, r7
   bd04c:	4620      	mov	r0, r4
   bd04e:	f000 fe25 	bl	bdc9c <__any_on>
   bd052:	4682      	mov	sl, r0
   bd054:	117b      	asrs	r3, r7, #5
   bd056:	2101      	movs	r1, #1
   bd058:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   bd05c:	f007 071f 	and.w	r7, r7, #31
   bd060:	fa01 f707 	lsl.w	r7, r1, r7
   bd064:	421f      	tst	r7, r3
   bd066:	4629      	mov	r1, r5
   bd068:	4620      	mov	r0, r4
   bd06a:	bf18      	it	ne
   bd06c:	f04a 0a02 	orrne.w	sl, sl, #2
   bd070:	1b76      	subs	r6, r6, r5
   bd072:	f7ff fded 	bl	bcc50 <rshift>
   bd076:	f8d8 5004 	ldr.w	r5, [r8, #4]
   bd07a:	2702      	movs	r7, #2
   bd07c:	f1ba 0f00 	cmp.w	sl, #0
   bd080:	d048      	beq.n	bd114 <__gethex+0x3f4>
   bd082:	f8d8 300c 	ldr.w	r3, [r8, #12]
   bd086:	2b02      	cmp	r3, #2
   bd088:	d015      	beq.n	bd0b6 <__gethex+0x396>
   bd08a:	2b03      	cmp	r3, #3
   bd08c:	d017      	beq.n	bd0be <__gethex+0x39e>
   bd08e:	2b01      	cmp	r3, #1
   bd090:	d109      	bne.n	bd0a6 <__gethex+0x386>
   bd092:	f01a 0f02 	tst.w	sl, #2
   bd096:	d006      	beq.n	bd0a6 <__gethex+0x386>
   bd098:	f8d9 0000 	ldr.w	r0, [r9]
   bd09c:	ea4a 0a00 	orr.w	sl, sl, r0
   bd0a0:	f01a 0f01 	tst.w	sl, #1
   bd0a4:	d10e      	bne.n	bd0c4 <__gethex+0x3a4>
   bd0a6:	f047 0710 	orr.w	r7, r7, #16
   bd0aa:	e033      	b.n	bd114 <__gethex+0x3f4>
   bd0ac:	f04f 0a01 	mov.w	sl, #1
   bd0b0:	e7d0      	b.n	bd054 <__gethex+0x334>
   bd0b2:	2701      	movs	r7, #1
   bd0b4:	e7e2      	b.n	bd07c <__gethex+0x35c>
   bd0b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bd0b8:	f1c3 0301 	rsb	r3, r3, #1
   bd0bc:	9315      	str	r3, [sp, #84]	; 0x54
   bd0be:	9b15      	ldr	r3, [sp, #84]	; 0x54
   bd0c0:	2b00      	cmp	r3, #0
   bd0c2:	d0f0      	beq.n	bd0a6 <__gethex+0x386>
   bd0c4:	f8d4 b010 	ldr.w	fp, [r4, #16]
   bd0c8:	f104 0314 	add.w	r3, r4, #20
   bd0cc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
   bd0d0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
   bd0d4:	f04f 0c00 	mov.w	ip, #0
   bd0d8:	4618      	mov	r0, r3
   bd0da:	f853 2b04 	ldr.w	r2, [r3], #4
   bd0de:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   bd0e2:	d01c      	beq.n	bd11e <__gethex+0x3fe>
   bd0e4:	3201      	adds	r2, #1
   bd0e6:	6002      	str	r2, [r0, #0]
   bd0e8:	2f02      	cmp	r7, #2
   bd0ea:	f104 0314 	add.w	r3, r4, #20
   bd0ee:	d13f      	bne.n	bd170 <__gethex+0x450>
   bd0f0:	f8d8 2000 	ldr.w	r2, [r8]
   bd0f4:	3a01      	subs	r2, #1
   bd0f6:	42b2      	cmp	r2, r6
   bd0f8:	d10a      	bne.n	bd110 <__gethex+0x3f0>
   bd0fa:	1171      	asrs	r1, r6, #5
   bd0fc:	2201      	movs	r2, #1
   bd0fe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   bd102:	f006 061f 	and.w	r6, r6, #31
   bd106:	fa02 f606 	lsl.w	r6, r2, r6
   bd10a:	421e      	tst	r6, r3
   bd10c:	bf18      	it	ne
   bd10e:	4617      	movne	r7, r2
   bd110:	f047 0720 	orr.w	r7, r7, #32
   bd114:	9b14      	ldr	r3, [sp, #80]	; 0x50
   bd116:	601c      	str	r4, [r3, #0]
   bd118:	9b04      	ldr	r3, [sp, #16]
   bd11a:	601d      	str	r5, [r3, #0]
   bd11c:	e695      	b.n	bce4a <__gethex+0x12a>
   bd11e:	4299      	cmp	r1, r3
   bd120:	f843 cc04 	str.w	ip, [r3, #-4]
   bd124:	d8d8      	bhi.n	bd0d8 <__gethex+0x3b8>
   bd126:	68a3      	ldr	r3, [r4, #8]
   bd128:	459b      	cmp	fp, r3
   bd12a:	db19      	blt.n	bd160 <__gethex+0x440>
   bd12c:	6861      	ldr	r1, [r4, #4]
   bd12e:	ee18 0a10 	vmov	r0, s16
   bd132:	3101      	adds	r1, #1
   bd134:	f000 f912 	bl	bd35c <_Balloc>
   bd138:	4681      	mov	r9, r0
   bd13a:	b918      	cbnz	r0, bd144 <__gethex+0x424>
   bd13c:	4b1a      	ldr	r3, [pc, #104]	; (bd1a8 <__gethex+0x488>)
   bd13e:	4602      	mov	r2, r0
   bd140:	2184      	movs	r1, #132	; 0x84
   bd142:	e6a8      	b.n	bce96 <__gethex+0x176>
   bd144:	6922      	ldr	r2, [r4, #16]
   bd146:	3202      	adds	r2, #2
   bd148:	f104 010c 	add.w	r1, r4, #12
   bd14c:	0092      	lsls	r2, r2, #2
   bd14e:	300c      	adds	r0, #12
   bd150:	f7fe fd87 	bl	bbc62 <memcpy>
   bd154:	4621      	mov	r1, r4
   bd156:	ee18 0a10 	vmov	r0, s16
   bd15a:	f000 f93f 	bl	bd3dc <_Bfree>
   bd15e:	464c      	mov	r4, r9
   bd160:	6923      	ldr	r3, [r4, #16]
   bd162:	1c5a      	adds	r2, r3, #1
   bd164:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   bd168:	6122      	str	r2, [r4, #16]
   bd16a:	2201      	movs	r2, #1
   bd16c:	615a      	str	r2, [r3, #20]
   bd16e:	e7bb      	b.n	bd0e8 <__gethex+0x3c8>
   bd170:	6922      	ldr	r2, [r4, #16]
   bd172:	455a      	cmp	r2, fp
   bd174:	dd0b      	ble.n	bd18e <__gethex+0x46e>
   bd176:	2101      	movs	r1, #1
   bd178:	4620      	mov	r0, r4
   bd17a:	f7ff fd69 	bl	bcc50 <rshift>
   bd17e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   bd182:	3501      	adds	r5, #1
   bd184:	42ab      	cmp	r3, r5
   bd186:	f6ff aed0 	blt.w	bcf2a <__gethex+0x20a>
   bd18a:	2701      	movs	r7, #1
   bd18c:	e7c0      	b.n	bd110 <__gethex+0x3f0>
   bd18e:	f016 061f 	ands.w	r6, r6, #31
   bd192:	d0fa      	beq.n	bd18a <__gethex+0x46a>
   bd194:	4453      	add	r3, sl
   bd196:	f1c6 0620 	rsb	r6, r6, #32
   bd19a:	f853 0c04 	ldr.w	r0, [r3, #-4]
   bd19e:	f000 f9cf 	bl	bd540 <__hi0bits>
   bd1a2:	42b0      	cmp	r0, r6
   bd1a4:	dbe7      	blt.n	bd176 <__gethex+0x456>
   bd1a6:	e7f0      	b.n	bd18a <__gethex+0x46a>
   bd1a8:	000bea61 	.word	0x000bea61

000bd1ac <L_shift>:
   bd1ac:	f1c2 0208 	rsb	r2, r2, #8
   bd1b0:	0092      	lsls	r2, r2, #2
   bd1b2:	b570      	push	{r4, r5, r6, lr}
   bd1b4:	f1c2 0620 	rsb	r6, r2, #32
   bd1b8:	6843      	ldr	r3, [r0, #4]
   bd1ba:	6804      	ldr	r4, [r0, #0]
   bd1bc:	fa03 f506 	lsl.w	r5, r3, r6
   bd1c0:	432c      	orrs	r4, r5
   bd1c2:	40d3      	lsrs	r3, r2
   bd1c4:	6004      	str	r4, [r0, #0]
   bd1c6:	f840 3f04 	str.w	r3, [r0, #4]!
   bd1ca:	4288      	cmp	r0, r1
   bd1cc:	d3f4      	bcc.n	bd1b8 <L_shift+0xc>
   bd1ce:	bd70      	pop	{r4, r5, r6, pc}

000bd1d0 <__match>:
   bd1d0:	b530      	push	{r4, r5, lr}
   bd1d2:	6803      	ldr	r3, [r0, #0]
   bd1d4:	3301      	adds	r3, #1
   bd1d6:	f811 4b01 	ldrb.w	r4, [r1], #1
   bd1da:	b914      	cbnz	r4, bd1e2 <__match+0x12>
   bd1dc:	6003      	str	r3, [r0, #0]
   bd1de:	2001      	movs	r0, #1
   bd1e0:	bd30      	pop	{r4, r5, pc}
   bd1e2:	f813 2b01 	ldrb.w	r2, [r3], #1
   bd1e6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   bd1ea:	2d19      	cmp	r5, #25
   bd1ec:	bf98      	it	ls
   bd1ee:	3220      	addls	r2, #32
   bd1f0:	42a2      	cmp	r2, r4
   bd1f2:	d0f0      	beq.n	bd1d6 <__match+0x6>
   bd1f4:	2000      	movs	r0, #0
   bd1f6:	e7f3      	b.n	bd1e0 <__match+0x10>

000bd1f8 <__hexnan>:
   bd1f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd1fc:	680b      	ldr	r3, [r1, #0]
   bd1fe:	115e      	asrs	r6, r3, #5
   bd200:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   bd204:	f013 031f 	ands.w	r3, r3, #31
   bd208:	b087      	sub	sp, #28
   bd20a:	bf18      	it	ne
   bd20c:	3604      	addne	r6, #4
   bd20e:	2500      	movs	r5, #0
   bd210:	1f37      	subs	r7, r6, #4
   bd212:	4690      	mov	r8, r2
   bd214:	6802      	ldr	r2, [r0, #0]
   bd216:	9301      	str	r3, [sp, #4]
   bd218:	4682      	mov	sl, r0
   bd21a:	f846 5c04 	str.w	r5, [r6, #-4]
   bd21e:	46b9      	mov	r9, r7
   bd220:	463c      	mov	r4, r7
   bd222:	9502      	str	r5, [sp, #8]
   bd224:	46ab      	mov	fp, r5
   bd226:	7851      	ldrb	r1, [r2, #1]
   bd228:	1c53      	adds	r3, r2, #1
   bd22a:	9303      	str	r3, [sp, #12]
   bd22c:	b341      	cbz	r1, bd280 <__hexnan+0x88>
   bd22e:	4608      	mov	r0, r1
   bd230:	9205      	str	r2, [sp, #20]
   bd232:	9104      	str	r1, [sp, #16]
   bd234:	f7ff fd5e 	bl	bccf4 <__hexdig_fun>
   bd238:	2800      	cmp	r0, #0
   bd23a:	d14f      	bne.n	bd2dc <__hexnan+0xe4>
   bd23c:	9904      	ldr	r1, [sp, #16]
   bd23e:	9a05      	ldr	r2, [sp, #20]
   bd240:	2920      	cmp	r1, #32
   bd242:	d818      	bhi.n	bd276 <__hexnan+0x7e>
   bd244:	9b02      	ldr	r3, [sp, #8]
   bd246:	459b      	cmp	fp, r3
   bd248:	dd13      	ble.n	bd272 <__hexnan+0x7a>
   bd24a:	454c      	cmp	r4, r9
   bd24c:	d206      	bcs.n	bd25c <__hexnan+0x64>
   bd24e:	2d07      	cmp	r5, #7
   bd250:	dc04      	bgt.n	bd25c <__hexnan+0x64>
   bd252:	462a      	mov	r2, r5
   bd254:	4649      	mov	r1, r9
   bd256:	4620      	mov	r0, r4
   bd258:	f7ff ffa8 	bl	bd1ac <L_shift>
   bd25c:	4544      	cmp	r4, r8
   bd25e:	d950      	bls.n	bd302 <__hexnan+0x10a>
   bd260:	2300      	movs	r3, #0
   bd262:	f1a4 0904 	sub.w	r9, r4, #4
   bd266:	f844 3c04 	str.w	r3, [r4, #-4]
   bd26a:	f8cd b008 	str.w	fp, [sp, #8]
   bd26e:	464c      	mov	r4, r9
   bd270:	461d      	mov	r5, r3
   bd272:	9a03      	ldr	r2, [sp, #12]
   bd274:	e7d7      	b.n	bd226 <__hexnan+0x2e>
   bd276:	2929      	cmp	r1, #41	; 0x29
   bd278:	d156      	bne.n	bd328 <__hexnan+0x130>
   bd27a:	3202      	adds	r2, #2
   bd27c:	f8ca 2000 	str.w	r2, [sl]
   bd280:	f1bb 0f00 	cmp.w	fp, #0
   bd284:	d050      	beq.n	bd328 <__hexnan+0x130>
   bd286:	454c      	cmp	r4, r9
   bd288:	d206      	bcs.n	bd298 <__hexnan+0xa0>
   bd28a:	2d07      	cmp	r5, #7
   bd28c:	dc04      	bgt.n	bd298 <__hexnan+0xa0>
   bd28e:	462a      	mov	r2, r5
   bd290:	4649      	mov	r1, r9
   bd292:	4620      	mov	r0, r4
   bd294:	f7ff ff8a 	bl	bd1ac <L_shift>
   bd298:	4544      	cmp	r4, r8
   bd29a:	d934      	bls.n	bd306 <__hexnan+0x10e>
   bd29c:	f1a8 0204 	sub.w	r2, r8, #4
   bd2a0:	4623      	mov	r3, r4
   bd2a2:	f853 1b04 	ldr.w	r1, [r3], #4
   bd2a6:	f842 1f04 	str.w	r1, [r2, #4]!
   bd2aa:	429f      	cmp	r7, r3
   bd2ac:	d2f9      	bcs.n	bd2a2 <__hexnan+0xaa>
   bd2ae:	1b3b      	subs	r3, r7, r4
   bd2b0:	f023 0303 	bic.w	r3, r3, #3
   bd2b4:	3304      	adds	r3, #4
   bd2b6:	3401      	adds	r4, #1
   bd2b8:	3e03      	subs	r6, #3
   bd2ba:	42b4      	cmp	r4, r6
   bd2bc:	bf88      	it	hi
   bd2be:	2304      	movhi	r3, #4
   bd2c0:	4443      	add	r3, r8
   bd2c2:	2200      	movs	r2, #0
   bd2c4:	f843 2b04 	str.w	r2, [r3], #4
   bd2c8:	429f      	cmp	r7, r3
   bd2ca:	d2fb      	bcs.n	bd2c4 <__hexnan+0xcc>
   bd2cc:	683b      	ldr	r3, [r7, #0]
   bd2ce:	b91b      	cbnz	r3, bd2d8 <__hexnan+0xe0>
   bd2d0:	4547      	cmp	r7, r8
   bd2d2:	d127      	bne.n	bd324 <__hexnan+0x12c>
   bd2d4:	2301      	movs	r3, #1
   bd2d6:	603b      	str	r3, [r7, #0]
   bd2d8:	2005      	movs	r0, #5
   bd2da:	e026      	b.n	bd32a <__hexnan+0x132>
   bd2dc:	3501      	adds	r5, #1
   bd2de:	2d08      	cmp	r5, #8
   bd2e0:	f10b 0b01 	add.w	fp, fp, #1
   bd2e4:	dd06      	ble.n	bd2f4 <__hexnan+0xfc>
   bd2e6:	4544      	cmp	r4, r8
   bd2e8:	d9c3      	bls.n	bd272 <__hexnan+0x7a>
   bd2ea:	2300      	movs	r3, #0
   bd2ec:	f844 3c04 	str.w	r3, [r4, #-4]
   bd2f0:	2501      	movs	r5, #1
   bd2f2:	3c04      	subs	r4, #4
   bd2f4:	6822      	ldr	r2, [r4, #0]
   bd2f6:	f000 000f 	and.w	r0, r0, #15
   bd2fa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   bd2fe:	6022      	str	r2, [r4, #0]
   bd300:	e7b7      	b.n	bd272 <__hexnan+0x7a>
   bd302:	2508      	movs	r5, #8
   bd304:	e7b5      	b.n	bd272 <__hexnan+0x7a>
   bd306:	9b01      	ldr	r3, [sp, #4]
   bd308:	2b00      	cmp	r3, #0
   bd30a:	d0df      	beq.n	bd2cc <__hexnan+0xd4>
   bd30c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bd310:	f1c3 0320 	rsb	r3, r3, #32
   bd314:	fa22 f303 	lsr.w	r3, r2, r3
   bd318:	f856 2c04 	ldr.w	r2, [r6, #-4]
   bd31c:	401a      	ands	r2, r3
   bd31e:	f846 2c04 	str.w	r2, [r6, #-4]
   bd322:	e7d3      	b.n	bd2cc <__hexnan+0xd4>
   bd324:	3f04      	subs	r7, #4
   bd326:	e7d1      	b.n	bd2cc <__hexnan+0xd4>
   bd328:	2004      	movs	r0, #4
   bd32a:	b007      	add	sp, #28
   bd32c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bd330 <__retarget_lock_acquire_recursive>:
   bd330:	4770      	bx	lr

000bd332 <__retarget_lock_release>:
   bd332:	4770      	bx	lr

000bd334 <__retarget_lock_release_recursive>:
   bd334:	4770      	bx	lr

000bd336 <__ascii_mbtowc>:
   bd336:	b082      	sub	sp, #8
   bd338:	b901      	cbnz	r1, bd33c <__ascii_mbtowc+0x6>
   bd33a:	a901      	add	r1, sp, #4
   bd33c:	b142      	cbz	r2, bd350 <__ascii_mbtowc+0x1a>
   bd33e:	b14b      	cbz	r3, bd354 <__ascii_mbtowc+0x1e>
   bd340:	7813      	ldrb	r3, [r2, #0]
   bd342:	600b      	str	r3, [r1, #0]
   bd344:	7812      	ldrb	r2, [r2, #0]
   bd346:	1e10      	subs	r0, r2, #0
   bd348:	bf18      	it	ne
   bd34a:	2001      	movne	r0, #1
   bd34c:	b002      	add	sp, #8
   bd34e:	4770      	bx	lr
   bd350:	4610      	mov	r0, r2
   bd352:	e7fb      	b.n	bd34c <__ascii_mbtowc+0x16>
   bd354:	f06f 0001 	mvn.w	r0, #1
   bd358:	e7f8      	b.n	bd34c <__ascii_mbtowc+0x16>
	...

000bd35c <_Balloc>:
   bd35c:	b570      	push	{r4, r5, r6, lr}
   bd35e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bd360:	4604      	mov	r4, r0
   bd362:	460d      	mov	r5, r1
   bd364:	b976      	cbnz	r6, bd384 <_Balloc+0x28>
   bd366:	2010      	movs	r0, #16
   bd368:	f7fa f854 	bl	b7414 <malloc>
   bd36c:	4602      	mov	r2, r0
   bd36e:	6260      	str	r0, [r4, #36]	; 0x24
   bd370:	b920      	cbnz	r0, bd37c <_Balloc+0x20>
   bd372:	4b18      	ldr	r3, [pc, #96]	; (bd3d4 <_Balloc+0x78>)
   bd374:	4818      	ldr	r0, [pc, #96]	; (bd3d8 <_Balloc+0x7c>)
   bd376:	2166      	movs	r1, #102	; 0x66
   bd378:	f7fa f89c 	bl	b74b4 <__assert_func>
   bd37c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bd380:	6006      	str	r6, [r0, #0]
   bd382:	60c6      	str	r6, [r0, #12]
   bd384:	6a66      	ldr	r6, [r4, #36]	; 0x24
   bd386:	68f3      	ldr	r3, [r6, #12]
   bd388:	b183      	cbz	r3, bd3ac <_Balloc+0x50>
   bd38a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bd38c:	68db      	ldr	r3, [r3, #12]
   bd38e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   bd392:	b9b8      	cbnz	r0, bd3c4 <_Balloc+0x68>
   bd394:	2101      	movs	r1, #1
   bd396:	fa01 f605 	lsl.w	r6, r1, r5
   bd39a:	1d72      	adds	r2, r6, #5
   bd39c:	0092      	lsls	r2, r2, #2
   bd39e:	4620      	mov	r0, r4
   bd3a0:	f000 fc9d 	bl	bdcde <_calloc_r>
   bd3a4:	b160      	cbz	r0, bd3c0 <_Balloc+0x64>
   bd3a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
   bd3aa:	e00e      	b.n	bd3ca <_Balloc+0x6e>
   bd3ac:	2221      	movs	r2, #33	; 0x21
   bd3ae:	2104      	movs	r1, #4
   bd3b0:	4620      	mov	r0, r4
   bd3b2:	f000 fc94 	bl	bdcde <_calloc_r>
   bd3b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   bd3b8:	60f0      	str	r0, [r6, #12]
   bd3ba:	68db      	ldr	r3, [r3, #12]
   bd3bc:	2b00      	cmp	r3, #0
   bd3be:	d1e4      	bne.n	bd38a <_Balloc+0x2e>
   bd3c0:	2000      	movs	r0, #0
   bd3c2:	bd70      	pop	{r4, r5, r6, pc}
   bd3c4:	6802      	ldr	r2, [r0, #0]
   bd3c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   bd3ca:	2300      	movs	r3, #0
   bd3cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
   bd3d0:	e7f7      	b.n	bd3c2 <_Balloc+0x66>
   bd3d2:	bf00      	nop
   bd3d4:	000be891 	.word	0x000be891
   bd3d8:	000beae8 	.word	0x000beae8

000bd3dc <_Bfree>:
   bd3dc:	b570      	push	{r4, r5, r6, lr}
   bd3de:	6a46      	ldr	r6, [r0, #36]	; 0x24
   bd3e0:	4605      	mov	r5, r0
   bd3e2:	460c      	mov	r4, r1
   bd3e4:	b976      	cbnz	r6, bd404 <_Bfree+0x28>
   bd3e6:	2010      	movs	r0, #16
   bd3e8:	f7fa f814 	bl	b7414 <malloc>
   bd3ec:	4602      	mov	r2, r0
   bd3ee:	6268      	str	r0, [r5, #36]	; 0x24
   bd3f0:	b920      	cbnz	r0, bd3fc <_Bfree+0x20>
   bd3f2:	4b09      	ldr	r3, [pc, #36]	; (bd418 <_Bfree+0x3c>)
   bd3f4:	4809      	ldr	r0, [pc, #36]	; (bd41c <_Bfree+0x40>)
   bd3f6:	218a      	movs	r1, #138	; 0x8a
   bd3f8:	f7fa f85c 	bl	b74b4 <__assert_func>
   bd3fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   bd400:	6006      	str	r6, [r0, #0]
   bd402:	60c6      	str	r6, [r0, #12]
   bd404:	b13c      	cbz	r4, bd416 <_Bfree+0x3a>
   bd406:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   bd408:	6862      	ldr	r2, [r4, #4]
   bd40a:	68db      	ldr	r3, [r3, #12]
   bd40c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   bd410:	6021      	str	r1, [r4, #0]
   bd412:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   bd416:	bd70      	pop	{r4, r5, r6, pc}
   bd418:	000be891 	.word	0x000be891
   bd41c:	000beae8 	.word	0x000beae8

000bd420 <__multadd>:
   bd420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   bd424:	690d      	ldr	r5, [r1, #16]
   bd426:	4607      	mov	r7, r0
   bd428:	460c      	mov	r4, r1
   bd42a:	461e      	mov	r6, r3
   bd42c:	f101 0c14 	add.w	ip, r1, #20
   bd430:	2000      	movs	r0, #0
   bd432:	f8dc 3000 	ldr.w	r3, [ip]
   bd436:	b299      	uxth	r1, r3
   bd438:	fb02 6101 	mla	r1, r2, r1, r6
   bd43c:	0c1e      	lsrs	r6, r3, #16
   bd43e:	0c0b      	lsrs	r3, r1, #16
   bd440:	fb02 3306 	mla	r3, r2, r6, r3
   bd444:	b289      	uxth	r1, r1
   bd446:	3001      	adds	r0, #1
   bd448:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   bd44c:	4285      	cmp	r5, r0
   bd44e:	f84c 1b04 	str.w	r1, [ip], #4
   bd452:	ea4f 4613 	mov.w	r6, r3, lsr #16
   bd456:	dcec      	bgt.n	bd432 <__multadd+0x12>
   bd458:	b30e      	cbz	r6, bd49e <__multadd+0x7e>
   bd45a:	68a3      	ldr	r3, [r4, #8]
   bd45c:	42ab      	cmp	r3, r5
   bd45e:	dc19      	bgt.n	bd494 <__multadd+0x74>
   bd460:	6861      	ldr	r1, [r4, #4]
   bd462:	4638      	mov	r0, r7
   bd464:	3101      	adds	r1, #1
   bd466:	f7ff ff79 	bl	bd35c <_Balloc>
   bd46a:	4680      	mov	r8, r0
   bd46c:	b928      	cbnz	r0, bd47a <__multadd+0x5a>
   bd46e:	4602      	mov	r2, r0
   bd470:	4b0c      	ldr	r3, [pc, #48]	; (bd4a4 <__multadd+0x84>)
   bd472:	480d      	ldr	r0, [pc, #52]	; (bd4a8 <__multadd+0x88>)
   bd474:	21b5      	movs	r1, #181	; 0xb5
   bd476:	f7fa f81d 	bl	b74b4 <__assert_func>
   bd47a:	6922      	ldr	r2, [r4, #16]
   bd47c:	3202      	adds	r2, #2
   bd47e:	f104 010c 	add.w	r1, r4, #12
   bd482:	0092      	lsls	r2, r2, #2
   bd484:	300c      	adds	r0, #12
   bd486:	f7fe fbec 	bl	bbc62 <memcpy>
   bd48a:	4621      	mov	r1, r4
   bd48c:	4638      	mov	r0, r7
   bd48e:	f7ff ffa5 	bl	bd3dc <_Bfree>
   bd492:	4644      	mov	r4, r8
   bd494:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   bd498:	3501      	adds	r5, #1
   bd49a:	615e      	str	r6, [r3, #20]
   bd49c:	6125      	str	r5, [r4, #16]
   bd49e:	4620      	mov	r0, r4
   bd4a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   bd4a4:	000bea61 	.word	0x000bea61
   bd4a8:	000beae8 	.word	0x000beae8

000bd4ac <__s2b>:
   bd4ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bd4b0:	460c      	mov	r4, r1
   bd4b2:	4615      	mov	r5, r2
   bd4b4:	461f      	mov	r7, r3
   bd4b6:	2209      	movs	r2, #9
   bd4b8:	3308      	adds	r3, #8
   bd4ba:	4606      	mov	r6, r0
   bd4bc:	fb93 f3f2 	sdiv	r3, r3, r2
   bd4c0:	2100      	movs	r1, #0
   bd4c2:	2201      	movs	r2, #1
   bd4c4:	429a      	cmp	r2, r3
   bd4c6:	db09      	blt.n	bd4dc <__s2b+0x30>
   bd4c8:	4630      	mov	r0, r6
   bd4ca:	f7ff ff47 	bl	bd35c <_Balloc>
   bd4ce:	b940      	cbnz	r0, bd4e2 <__s2b+0x36>
   bd4d0:	4602      	mov	r2, r0
   bd4d2:	4b19      	ldr	r3, [pc, #100]	; (bd538 <__s2b+0x8c>)
   bd4d4:	4819      	ldr	r0, [pc, #100]	; (bd53c <__s2b+0x90>)
   bd4d6:	21ce      	movs	r1, #206	; 0xce
   bd4d8:	f7f9 ffec 	bl	b74b4 <__assert_func>
   bd4dc:	0052      	lsls	r2, r2, #1
   bd4de:	3101      	adds	r1, #1
   bd4e0:	e7f0      	b.n	bd4c4 <__s2b+0x18>
   bd4e2:	9b08      	ldr	r3, [sp, #32]
   bd4e4:	6143      	str	r3, [r0, #20]
   bd4e6:	2d09      	cmp	r5, #9
   bd4e8:	f04f 0301 	mov.w	r3, #1
   bd4ec:	6103      	str	r3, [r0, #16]
   bd4ee:	dd16      	ble.n	bd51e <__s2b+0x72>
   bd4f0:	f104 0909 	add.w	r9, r4, #9
   bd4f4:	46c8      	mov	r8, r9
   bd4f6:	442c      	add	r4, r5
   bd4f8:	f818 3b01 	ldrb.w	r3, [r8], #1
   bd4fc:	4601      	mov	r1, r0
   bd4fe:	3b30      	subs	r3, #48	; 0x30
   bd500:	220a      	movs	r2, #10
   bd502:	4630      	mov	r0, r6
   bd504:	f7ff ff8c 	bl	bd420 <__multadd>
   bd508:	45a0      	cmp	r8, r4
   bd50a:	d1f5      	bne.n	bd4f8 <__s2b+0x4c>
   bd50c:	f1a5 0408 	sub.w	r4, r5, #8
   bd510:	444c      	add	r4, r9
   bd512:	1b2d      	subs	r5, r5, r4
   bd514:	1963      	adds	r3, r4, r5
   bd516:	42bb      	cmp	r3, r7
   bd518:	db04      	blt.n	bd524 <__s2b+0x78>
   bd51a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bd51e:	340a      	adds	r4, #10
   bd520:	2509      	movs	r5, #9
   bd522:	e7f6      	b.n	bd512 <__s2b+0x66>
   bd524:	f814 3b01 	ldrb.w	r3, [r4], #1
   bd528:	4601      	mov	r1, r0
   bd52a:	3b30      	subs	r3, #48	; 0x30
   bd52c:	220a      	movs	r2, #10
   bd52e:	4630      	mov	r0, r6
   bd530:	f7ff ff76 	bl	bd420 <__multadd>
   bd534:	e7ee      	b.n	bd514 <__s2b+0x68>
   bd536:	bf00      	nop
   bd538:	000bea61 	.word	0x000bea61
   bd53c:	000beae8 	.word	0x000beae8

000bd540 <__hi0bits>:
   bd540:	0c03      	lsrs	r3, r0, #16
   bd542:	041b      	lsls	r3, r3, #16
   bd544:	b9d3      	cbnz	r3, bd57c <__hi0bits+0x3c>
   bd546:	0400      	lsls	r0, r0, #16
   bd548:	2310      	movs	r3, #16
   bd54a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   bd54e:	bf04      	itt	eq
   bd550:	0200      	lsleq	r0, r0, #8
   bd552:	3308      	addeq	r3, #8
   bd554:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   bd558:	bf04      	itt	eq
   bd55a:	0100      	lsleq	r0, r0, #4
   bd55c:	3304      	addeq	r3, #4
   bd55e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   bd562:	bf04      	itt	eq
   bd564:	0080      	lsleq	r0, r0, #2
   bd566:	3302      	addeq	r3, #2
   bd568:	2800      	cmp	r0, #0
   bd56a:	db05      	blt.n	bd578 <__hi0bits+0x38>
   bd56c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   bd570:	f103 0301 	add.w	r3, r3, #1
   bd574:	bf08      	it	eq
   bd576:	2320      	moveq	r3, #32
   bd578:	4618      	mov	r0, r3
   bd57a:	4770      	bx	lr
   bd57c:	2300      	movs	r3, #0
   bd57e:	e7e4      	b.n	bd54a <__hi0bits+0xa>

000bd580 <__lo0bits>:
   bd580:	6803      	ldr	r3, [r0, #0]
   bd582:	f013 0207 	ands.w	r2, r3, #7
   bd586:	4601      	mov	r1, r0
   bd588:	d00b      	beq.n	bd5a2 <__lo0bits+0x22>
   bd58a:	07da      	lsls	r2, r3, #31
   bd58c:	d423      	bmi.n	bd5d6 <__lo0bits+0x56>
   bd58e:	0798      	lsls	r0, r3, #30
   bd590:	bf49      	itett	mi
   bd592:	085b      	lsrmi	r3, r3, #1
   bd594:	089b      	lsrpl	r3, r3, #2
   bd596:	2001      	movmi	r0, #1
   bd598:	600b      	strmi	r3, [r1, #0]
   bd59a:	bf5c      	itt	pl
   bd59c:	600b      	strpl	r3, [r1, #0]
   bd59e:	2002      	movpl	r0, #2
   bd5a0:	4770      	bx	lr
   bd5a2:	b298      	uxth	r0, r3
   bd5a4:	b9a8      	cbnz	r0, bd5d2 <__lo0bits+0x52>
   bd5a6:	0c1b      	lsrs	r3, r3, #16
   bd5a8:	2010      	movs	r0, #16
   bd5aa:	b2da      	uxtb	r2, r3
   bd5ac:	b90a      	cbnz	r2, bd5b2 <__lo0bits+0x32>
   bd5ae:	3008      	adds	r0, #8
   bd5b0:	0a1b      	lsrs	r3, r3, #8
   bd5b2:	071a      	lsls	r2, r3, #28
   bd5b4:	bf04      	itt	eq
   bd5b6:	091b      	lsreq	r3, r3, #4
   bd5b8:	3004      	addeq	r0, #4
   bd5ba:	079a      	lsls	r2, r3, #30
   bd5bc:	bf04      	itt	eq
   bd5be:	089b      	lsreq	r3, r3, #2
   bd5c0:	3002      	addeq	r0, #2
   bd5c2:	07da      	lsls	r2, r3, #31
   bd5c4:	d403      	bmi.n	bd5ce <__lo0bits+0x4e>
   bd5c6:	085b      	lsrs	r3, r3, #1
   bd5c8:	f100 0001 	add.w	r0, r0, #1
   bd5cc:	d005      	beq.n	bd5da <__lo0bits+0x5a>
   bd5ce:	600b      	str	r3, [r1, #0]
   bd5d0:	4770      	bx	lr
   bd5d2:	4610      	mov	r0, r2
   bd5d4:	e7e9      	b.n	bd5aa <__lo0bits+0x2a>
   bd5d6:	2000      	movs	r0, #0
   bd5d8:	4770      	bx	lr
   bd5da:	2020      	movs	r0, #32
   bd5dc:	4770      	bx	lr
	...

000bd5e0 <__i2b>:
   bd5e0:	b510      	push	{r4, lr}
   bd5e2:	460c      	mov	r4, r1
   bd5e4:	2101      	movs	r1, #1
   bd5e6:	f7ff feb9 	bl	bd35c <_Balloc>
   bd5ea:	4602      	mov	r2, r0
   bd5ec:	b928      	cbnz	r0, bd5fa <__i2b+0x1a>
   bd5ee:	4b05      	ldr	r3, [pc, #20]	; (bd604 <__i2b+0x24>)
   bd5f0:	4805      	ldr	r0, [pc, #20]	; (bd608 <__i2b+0x28>)
   bd5f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
   bd5f6:	f7f9 ff5d 	bl	b74b4 <__assert_func>
   bd5fa:	2301      	movs	r3, #1
   bd5fc:	6144      	str	r4, [r0, #20]
   bd5fe:	6103      	str	r3, [r0, #16]
   bd600:	bd10      	pop	{r4, pc}
   bd602:	bf00      	nop
   bd604:	000bea61 	.word	0x000bea61
   bd608:	000beae8 	.word	0x000beae8

000bd60c <__multiply>:
   bd60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd610:	4691      	mov	r9, r2
   bd612:	690a      	ldr	r2, [r1, #16]
   bd614:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bd618:	429a      	cmp	r2, r3
   bd61a:	bfb8      	it	lt
   bd61c:	460b      	movlt	r3, r1
   bd61e:	460c      	mov	r4, r1
   bd620:	bfbc      	itt	lt
   bd622:	464c      	movlt	r4, r9
   bd624:	4699      	movlt	r9, r3
   bd626:	6927      	ldr	r7, [r4, #16]
   bd628:	f8d9 a010 	ldr.w	sl, [r9, #16]
   bd62c:	68a3      	ldr	r3, [r4, #8]
   bd62e:	6861      	ldr	r1, [r4, #4]
   bd630:	eb07 060a 	add.w	r6, r7, sl
   bd634:	42b3      	cmp	r3, r6
   bd636:	b085      	sub	sp, #20
   bd638:	bfb8      	it	lt
   bd63a:	3101      	addlt	r1, #1
   bd63c:	f7ff fe8e 	bl	bd35c <_Balloc>
   bd640:	b930      	cbnz	r0, bd650 <__multiply+0x44>
   bd642:	4602      	mov	r2, r0
   bd644:	4b44      	ldr	r3, [pc, #272]	; (bd758 <__multiply+0x14c>)
   bd646:	4845      	ldr	r0, [pc, #276]	; (bd75c <__multiply+0x150>)
   bd648:	f240 115d 	movw	r1, #349	; 0x15d
   bd64c:	f7f9 ff32 	bl	b74b4 <__assert_func>
   bd650:	f100 0514 	add.w	r5, r0, #20
   bd654:	eb05 0886 	add.w	r8, r5, r6, lsl #2
   bd658:	462b      	mov	r3, r5
   bd65a:	2200      	movs	r2, #0
   bd65c:	4543      	cmp	r3, r8
   bd65e:	d321      	bcc.n	bd6a4 <__multiply+0x98>
   bd660:	f104 0314 	add.w	r3, r4, #20
   bd664:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   bd668:	f109 0314 	add.w	r3, r9, #20
   bd66c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
   bd670:	9202      	str	r2, [sp, #8]
   bd672:	1b3a      	subs	r2, r7, r4
   bd674:	3a15      	subs	r2, #21
   bd676:	f022 0203 	bic.w	r2, r2, #3
   bd67a:	3204      	adds	r2, #4
   bd67c:	f104 0115 	add.w	r1, r4, #21
   bd680:	428f      	cmp	r7, r1
   bd682:	bf38      	it	cc
   bd684:	2204      	movcc	r2, #4
   bd686:	9201      	str	r2, [sp, #4]
   bd688:	9a02      	ldr	r2, [sp, #8]
   bd68a:	9303      	str	r3, [sp, #12]
   bd68c:	429a      	cmp	r2, r3
   bd68e:	d80c      	bhi.n	bd6aa <__multiply+0x9e>
   bd690:	2e00      	cmp	r6, #0
   bd692:	dd03      	ble.n	bd69c <__multiply+0x90>
   bd694:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   bd698:	2b00      	cmp	r3, #0
   bd69a:	d05a      	beq.n	bd752 <__multiply+0x146>
   bd69c:	6106      	str	r6, [r0, #16]
   bd69e:	b005      	add	sp, #20
   bd6a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bd6a4:	f843 2b04 	str.w	r2, [r3], #4
   bd6a8:	e7d8      	b.n	bd65c <__multiply+0x50>
   bd6aa:	f8b3 a000 	ldrh.w	sl, [r3]
   bd6ae:	f1ba 0f00 	cmp.w	sl, #0
   bd6b2:	d024      	beq.n	bd6fe <__multiply+0xf2>
   bd6b4:	f104 0e14 	add.w	lr, r4, #20
   bd6b8:	46a9      	mov	r9, r5
   bd6ba:	f04f 0c00 	mov.w	ip, #0
   bd6be:	f85e 2b04 	ldr.w	r2, [lr], #4
   bd6c2:	f8d9 1000 	ldr.w	r1, [r9]
   bd6c6:	fa1f fb82 	uxth.w	fp, r2
   bd6ca:	b289      	uxth	r1, r1
   bd6cc:	fb0a 110b 	mla	r1, sl, fp, r1
   bd6d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
   bd6d4:	f8d9 2000 	ldr.w	r2, [r9]
   bd6d8:	4461      	add	r1, ip
   bd6da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bd6de:	fb0a c20b 	mla	r2, sl, fp, ip
   bd6e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
   bd6e6:	b289      	uxth	r1, r1
   bd6e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   bd6ec:	4577      	cmp	r7, lr
   bd6ee:	f849 1b04 	str.w	r1, [r9], #4
   bd6f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
   bd6f6:	d8e2      	bhi.n	bd6be <__multiply+0xb2>
   bd6f8:	9a01      	ldr	r2, [sp, #4]
   bd6fa:	f845 c002 	str.w	ip, [r5, r2]
   bd6fe:	9a03      	ldr	r2, [sp, #12]
   bd700:	f8b2 9002 	ldrh.w	r9, [r2, #2]
   bd704:	3304      	adds	r3, #4
   bd706:	f1b9 0f00 	cmp.w	r9, #0
   bd70a:	d020      	beq.n	bd74e <__multiply+0x142>
   bd70c:	6829      	ldr	r1, [r5, #0]
   bd70e:	f104 0c14 	add.w	ip, r4, #20
   bd712:	46ae      	mov	lr, r5
   bd714:	f04f 0a00 	mov.w	sl, #0
   bd718:	f8bc b000 	ldrh.w	fp, [ip]
   bd71c:	f8be 2002 	ldrh.w	r2, [lr, #2]
   bd720:	fb09 220b 	mla	r2, r9, fp, r2
   bd724:	4492      	add	sl, r2
   bd726:	b289      	uxth	r1, r1
   bd728:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   bd72c:	f84e 1b04 	str.w	r1, [lr], #4
   bd730:	f85c 2b04 	ldr.w	r2, [ip], #4
   bd734:	f8be 1000 	ldrh.w	r1, [lr]
   bd738:	0c12      	lsrs	r2, r2, #16
   bd73a:	fb09 1102 	mla	r1, r9, r2, r1
   bd73e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
   bd742:	4567      	cmp	r7, ip
   bd744:	ea4f 4a11 	mov.w	sl, r1, lsr #16
   bd748:	d8e6      	bhi.n	bd718 <__multiply+0x10c>
   bd74a:	9a01      	ldr	r2, [sp, #4]
   bd74c:	50a9      	str	r1, [r5, r2]
   bd74e:	3504      	adds	r5, #4
   bd750:	e79a      	b.n	bd688 <__multiply+0x7c>
   bd752:	3e01      	subs	r6, #1
   bd754:	e79c      	b.n	bd690 <__multiply+0x84>
   bd756:	bf00      	nop
   bd758:	000bea61 	.word	0x000bea61
   bd75c:	000beae8 	.word	0x000beae8

000bd760 <__pow5mult>:
   bd760:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   bd764:	4615      	mov	r5, r2
   bd766:	f012 0203 	ands.w	r2, r2, #3
   bd76a:	4606      	mov	r6, r0
   bd76c:	460f      	mov	r7, r1
   bd76e:	d007      	beq.n	bd780 <__pow5mult+0x20>
   bd770:	4c25      	ldr	r4, [pc, #148]	; (bd808 <__pow5mult+0xa8>)
   bd772:	3a01      	subs	r2, #1
   bd774:	2300      	movs	r3, #0
   bd776:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   bd77a:	f7ff fe51 	bl	bd420 <__multadd>
   bd77e:	4607      	mov	r7, r0
   bd780:	10ad      	asrs	r5, r5, #2
   bd782:	d03d      	beq.n	bd800 <__pow5mult+0xa0>
   bd784:	6a74      	ldr	r4, [r6, #36]	; 0x24
   bd786:	b97c      	cbnz	r4, bd7a8 <__pow5mult+0x48>
   bd788:	2010      	movs	r0, #16
   bd78a:	f7f9 fe43 	bl	b7414 <malloc>
   bd78e:	4602      	mov	r2, r0
   bd790:	6270      	str	r0, [r6, #36]	; 0x24
   bd792:	b928      	cbnz	r0, bd7a0 <__pow5mult+0x40>
   bd794:	4b1d      	ldr	r3, [pc, #116]	; (bd80c <__pow5mult+0xac>)
   bd796:	481e      	ldr	r0, [pc, #120]	; (bd810 <__pow5mult+0xb0>)
   bd798:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
   bd79c:	f7f9 fe8a 	bl	b74b4 <__assert_func>
   bd7a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
   bd7a4:	6004      	str	r4, [r0, #0]
   bd7a6:	60c4      	str	r4, [r0, #12]
   bd7a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   bd7ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
   bd7b0:	b94c      	cbnz	r4, bd7c6 <__pow5mult+0x66>
   bd7b2:	f240 2171 	movw	r1, #625	; 0x271
   bd7b6:	4630      	mov	r0, r6
   bd7b8:	f7ff ff12 	bl	bd5e0 <__i2b>
   bd7bc:	2300      	movs	r3, #0
   bd7be:	f8c8 0008 	str.w	r0, [r8, #8]
   bd7c2:	4604      	mov	r4, r0
   bd7c4:	6003      	str	r3, [r0, #0]
   bd7c6:	f04f 0900 	mov.w	r9, #0
   bd7ca:	07eb      	lsls	r3, r5, #31
   bd7cc:	d50a      	bpl.n	bd7e4 <__pow5mult+0x84>
   bd7ce:	4639      	mov	r1, r7
   bd7d0:	4622      	mov	r2, r4
   bd7d2:	4630      	mov	r0, r6
   bd7d4:	f7ff ff1a 	bl	bd60c <__multiply>
   bd7d8:	4639      	mov	r1, r7
   bd7da:	4680      	mov	r8, r0
   bd7dc:	4630      	mov	r0, r6
   bd7de:	f7ff fdfd 	bl	bd3dc <_Bfree>
   bd7e2:	4647      	mov	r7, r8
   bd7e4:	106d      	asrs	r5, r5, #1
   bd7e6:	d00b      	beq.n	bd800 <__pow5mult+0xa0>
   bd7e8:	6820      	ldr	r0, [r4, #0]
   bd7ea:	b938      	cbnz	r0, bd7fc <__pow5mult+0x9c>
   bd7ec:	4622      	mov	r2, r4
   bd7ee:	4621      	mov	r1, r4
   bd7f0:	4630      	mov	r0, r6
   bd7f2:	f7ff ff0b 	bl	bd60c <__multiply>
   bd7f6:	6020      	str	r0, [r4, #0]
   bd7f8:	f8c0 9000 	str.w	r9, [r0]
   bd7fc:	4604      	mov	r4, r0
   bd7fe:	e7e4      	b.n	bd7ca <__pow5mult+0x6a>
   bd800:	4638      	mov	r0, r7
   bd802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   bd806:	bf00      	nop
   bd808:	000bec38 	.word	0x000bec38
   bd80c:	000be891 	.word	0x000be891
   bd810:	000beae8 	.word	0x000beae8

000bd814 <__lshift>:
   bd814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   bd818:	460c      	mov	r4, r1
   bd81a:	6849      	ldr	r1, [r1, #4]
   bd81c:	6923      	ldr	r3, [r4, #16]
   bd81e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   bd822:	68a3      	ldr	r3, [r4, #8]
   bd824:	4607      	mov	r7, r0
   bd826:	4691      	mov	r9, r2
   bd828:	ea4f 1a62 	mov.w	sl, r2, asr #5
   bd82c:	f108 0601 	add.w	r6, r8, #1
   bd830:	42b3      	cmp	r3, r6
   bd832:	db0b      	blt.n	bd84c <__lshift+0x38>
   bd834:	4638      	mov	r0, r7
   bd836:	f7ff fd91 	bl	bd35c <_Balloc>
   bd83a:	4605      	mov	r5, r0
   bd83c:	b948      	cbnz	r0, bd852 <__lshift+0x3e>
   bd83e:	4602      	mov	r2, r0
   bd840:	4b2a      	ldr	r3, [pc, #168]	; (bd8ec <__lshift+0xd8>)
   bd842:	482b      	ldr	r0, [pc, #172]	; (bd8f0 <__lshift+0xdc>)
   bd844:	f240 11d9 	movw	r1, #473	; 0x1d9
   bd848:	f7f9 fe34 	bl	b74b4 <__assert_func>
   bd84c:	3101      	adds	r1, #1
   bd84e:	005b      	lsls	r3, r3, #1
   bd850:	e7ee      	b.n	bd830 <__lshift+0x1c>
   bd852:	2300      	movs	r3, #0
   bd854:	f100 0114 	add.w	r1, r0, #20
   bd858:	f100 0210 	add.w	r2, r0, #16
   bd85c:	4618      	mov	r0, r3
   bd85e:	4553      	cmp	r3, sl
   bd860:	db37      	blt.n	bd8d2 <__lshift+0xbe>
   bd862:	6920      	ldr	r0, [r4, #16]
   bd864:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   bd868:	f104 0314 	add.w	r3, r4, #20
   bd86c:	f019 091f 	ands.w	r9, r9, #31
   bd870:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   bd874:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   bd878:	d02f      	beq.n	bd8da <__lshift+0xc6>
   bd87a:	f1c9 0e20 	rsb	lr, r9, #32
   bd87e:	468a      	mov	sl, r1
   bd880:	f04f 0c00 	mov.w	ip, #0
   bd884:	681a      	ldr	r2, [r3, #0]
   bd886:	fa02 f209 	lsl.w	r2, r2, r9
   bd88a:	ea42 020c 	orr.w	r2, r2, ip
   bd88e:	f84a 2b04 	str.w	r2, [sl], #4
   bd892:	f853 2b04 	ldr.w	r2, [r3], #4
   bd896:	4298      	cmp	r0, r3
   bd898:	fa22 fc0e 	lsr.w	ip, r2, lr
   bd89c:	d8f2      	bhi.n	bd884 <__lshift+0x70>
   bd89e:	1b03      	subs	r3, r0, r4
   bd8a0:	3b15      	subs	r3, #21
   bd8a2:	f023 0303 	bic.w	r3, r3, #3
   bd8a6:	3304      	adds	r3, #4
   bd8a8:	f104 0215 	add.w	r2, r4, #21
   bd8ac:	4290      	cmp	r0, r2
   bd8ae:	bf38      	it	cc
   bd8b0:	2304      	movcc	r3, #4
   bd8b2:	f841 c003 	str.w	ip, [r1, r3]
   bd8b6:	f1bc 0f00 	cmp.w	ip, #0
   bd8ba:	d001      	beq.n	bd8c0 <__lshift+0xac>
   bd8bc:	f108 0602 	add.w	r6, r8, #2
   bd8c0:	3e01      	subs	r6, #1
   bd8c2:	4638      	mov	r0, r7
   bd8c4:	612e      	str	r6, [r5, #16]
   bd8c6:	4621      	mov	r1, r4
   bd8c8:	f7ff fd88 	bl	bd3dc <_Bfree>
   bd8cc:	4628      	mov	r0, r5
   bd8ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   bd8d2:	f842 0f04 	str.w	r0, [r2, #4]!
   bd8d6:	3301      	adds	r3, #1
   bd8d8:	e7c1      	b.n	bd85e <__lshift+0x4a>
   bd8da:	3904      	subs	r1, #4
   bd8dc:	f853 2b04 	ldr.w	r2, [r3], #4
   bd8e0:	f841 2f04 	str.w	r2, [r1, #4]!
   bd8e4:	4298      	cmp	r0, r3
   bd8e6:	d8f9      	bhi.n	bd8dc <__lshift+0xc8>
   bd8e8:	e7ea      	b.n	bd8c0 <__lshift+0xac>
   bd8ea:	bf00      	nop
   bd8ec:	000bea61 	.word	0x000bea61
   bd8f0:	000beae8 	.word	0x000beae8

000bd8f4 <__mcmp>:
   bd8f4:	b530      	push	{r4, r5, lr}
   bd8f6:	6902      	ldr	r2, [r0, #16]
   bd8f8:	690c      	ldr	r4, [r1, #16]
   bd8fa:	1b12      	subs	r2, r2, r4
   bd8fc:	d10e      	bne.n	bd91c <__mcmp+0x28>
   bd8fe:	f100 0314 	add.w	r3, r0, #20
   bd902:	3114      	adds	r1, #20
   bd904:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   bd908:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   bd90c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   bd910:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   bd914:	42a5      	cmp	r5, r4
   bd916:	d003      	beq.n	bd920 <__mcmp+0x2c>
   bd918:	d305      	bcc.n	bd926 <__mcmp+0x32>
   bd91a:	2201      	movs	r2, #1
   bd91c:	4610      	mov	r0, r2
   bd91e:	bd30      	pop	{r4, r5, pc}
   bd920:	4283      	cmp	r3, r0
   bd922:	d3f3      	bcc.n	bd90c <__mcmp+0x18>
   bd924:	e7fa      	b.n	bd91c <__mcmp+0x28>
   bd926:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   bd92a:	e7f7      	b.n	bd91c <__mcmp+0x28>

000bd92c <__mdiff>:
   bd92c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bd930:	460c      	mov	r4, r1
   bd932:	4606      	mov	r6, r0
   bd934:	4611      	mov	r1, r2
   bd936:	4620      	mov	r0, r4
   bd938:	4690      	mov	r8, r2
   bd93a:	f7ff ffdb 	bl	bd8f4 <__mcmp>
   bd93e:	1e05      	subs	r5, r0, #0
   bd940:	d110      	bne.n	bd964 <__mdiff+0x38>
   bd942:	4629      	mov	r1, r5
   bd944:	4630      	mov	r0, r6
   bd946:	f7ff fd09 	bl	bd35c <_Balloc>
   bd94a:	b930      	cbnz	r0, bd95a <__mdiff+0x2e>
   bd94c:	4b3a      	ldr	r3, [pc, #232]	; (bda38 <__mdiff+0x10c>)
   bd94e:	4602      	mov	r2, r0
   bd950:	f240 2132 	movw	r1, #562	; 0x232
   bd954:	4839      	ldr	r0, [pc, #228]	; (bda3c <__mdiff+0x110>)
   bd956:	f7f9 fdad 	bl	b74b4 <__assert_func>
   bd95a:	2301      	movs	r3, #1
   bd95c:	e9c0 3504 	strd	r3, r5, [r0, #16]
   bd960:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   bd964:	bfa4      	itt	ge
   bd966:	4643      	movge	r3, r8
   bd968:	46a0      	movge	r8, r4
   bd96a:	4630      	mov	r0, r6
   bd96c:	f8d8 1004 	ldr.w	r1, [r8, #4]
   bd970:	bfa6      	itte	ge
   bd972:	461c      	movge	r4, r3
   bd974:	2500      	movge	r5, #0
   bd976:	2501      	movlt	r5, #1
   bd978:	f7ff fcf0 	bl	bd35c <_Balloc>
   bd97c:	b920      	cbnz	r0, bd988 <__mdiff+0x5c>
   bd97e:	4b2e      	ldr	r3, [pc, #184]	; (bda38 <__mdiff+0x10c>)
   bd980:	4602      	mov	r2, r0
   bd982:	f44f 7110 	mov.w	r1, #576	; 0x240
   bd986:	e7e5      	b.n	bd954 <__mdiff+0x28>
   bd988:	f8d8 7010 	ldr.w	r7, [r8, #16]
   bd98c:	6926      	ldr	r6, [r4, #16]
   bd98e:	60c5      	str	r5, [r0, #12]
   bd990:	f104 0914 	add.w	r9, r4, #20
   bd994:	f108 0514 	add.w	r5, r8, #20
   bd998:	f100 0e14 	add.w	lr, r0, #20
   bd99c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   bd9a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
   bd9a4:	f108 0210 	add.w	r2, r8, #16
   bd9a8:	46f2      	mov	sl, lr
   bd9aa:	2100      	movs	r1, #0
   bd9ac:	f859 3b04 	ldr.w	r3, [r9], #4
   bd9b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
   bd9b4:	fa1f f883 	uxth.w	r8, r3
   bd9b8:	fa11 f18b 	uxtah	r1, r1, fp
   bd9bc:	0c1b      	lsrs	r3, r3, #16
   bd9be:	eba1 0808 	sub.w	r8, r1, r8
   bd9c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   bd9c6:	eb03 4328 	add.w	r3, r3, r8, asr #16
   bd9ca:	fa1f f888 	uxth.w	r8, r8
   bd9ce:	1419      	asrs	r1, r3, #16
   bd9d0:	454e      	cmp	r6, r9
   bd9d2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   bd9d6:	f84a 3b04 	str.w	r3, [sl], #4
   bd9da:	d8e7      	bhi.n	bd9ac <__mdiff+0x80>
   bd9dc:	1b33      	subs	r3, r6, r4
   bd9de:	3b15      	subs	r3, #21
   bd9e0:	f023 0303 	bic.w	r3, r3, #3
   bd9e4:	3304      	adds	r3, #4
   bd9e6:	3415      	adds	r4, #21
   bd9e8:	42a6      	cmp	r6, r4
   bd9ea:	bf38      	it	cc
   bd9ec:	2304      	movcc	r3, #4
   bd9ee:	441d      	add	r5, r3
   bd9f0:	4473      	add	r3, lr
   bd9f2:	469e      	mov	lr, r3
   bd9f4:	462e      	mov	r6, r5
   bd9f6:	4566      	cmp	r6, ip
   bd9f8:	d30e      	bcc.n	bda18 <__mdiff+0xec>
   bd9fa:	f10c 0203 	add.w	r2, ip, #3
   bd9fe:	1b52      	subs	r2, r2, r5
   bda00:	f022 0203 	bic.w	r2, r2, #3
   bda04:	3d03      	subs	r5, #3
   bda06:	45ac      	cmp	ip, r5
   bda08:	bf38      	it	cc
   bda0a:	2200      	movcc	r2, #0
   bda0c:	441a      	add	r2, r3
   bda0e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   bda12:	b17b      	cbz	r3, bda34 <__mdiff+0x108>
   bda14:	6107      	str	r7, [r0, #16]
   bda16:	e7a3      	b.n	bd960 <__mdiff+0x34>
   bda18:	f856 8b04 	ldr.w	r8, [r6], #4
   bda1c:	fa11 f288 	uxtah	r2, r1, r8
   bda20:	1414      	asrs	r4, r2, #16
   bda22:	eb04 4418 	add.w	r4, r4, r8, lsr #16
   bda26:	b292      	uxth	r2, r2
   bda28:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
   bda2c:	f84e 2b04 	str.w	r2, [lr], #4
   bda30:	1421      	asrs	r1, r4, #16
   bda32:	e7e0      	b.n	bd9f6 <__mdiff+0xca>
   bda34:	3f01      	subs	r7, #1
   bda36:	e7ea      	b.n	bda0e <__mdiff+0xe2>
   bda38:	000bea61 	.word	0x000bea61
   bda3c:	000beae8 	.word	0x000beae8

000bda40 <__ulp>:
   bda40:	b082      	sub	sp, #8
   bda42:	ed8d 0b00 	vstr	d0, [sp]
   bda46:	9b01      	ldr	r3, [sp, #4]
   bda48:	4912      	ldr	r1, [pc, #72]	; (bda94 <__ulp+0x54>)
   bda4a:	4019      	ands	r1, r3
   bda4c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   bda50:	2900      	cmp	r1, #0
   bda52:	dd05      	ble.n	bda60 <__ulp+0x20>
   bda54:	2200      	movs	r2, #0
   bda56:	460b      	mov	r3, r1
   bda58:	ec43 2b10 	vmov	d0, r2, r3
   bda5c:	b002      	add	sp, #8
   bda5e:	4770      	bx	lr
   bda60:	4249      	negs	r1, r1
   bda62:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   bda66:	ea4f 5021 	mov.w	r0, r1, asr #20
   bda6a:	f04f 0200 	mov.w	r2, #0
   bda6e:	f04f 0300 	mov.w	r3, #0
   bda72:	da04      	bge.n	bda7e <__ulp+0x3e>
   bda74:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   bda78:	fa41 f300 	asr.w	r3, r1, r0
   bda7c:	e7ec      	b.n	bda58 <__ulp+0x18>
   bda7e:	f1a0 0114 	sub.w	r1, r0, #20
   bda82:	291e      	cmp	r1, #30
   bda84:	bfda      	itte	le
   bda86:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   bda8a:	fa20 f101 	lsrle.w	r1, r0, r1
   bda8e:	2101      	movgt	r1, #1
   bda90:	460a      	mov	r2, r1
   bda92:	e7e1      	b.n	bda58 <__ulp+0x18>
   bda94:	7ff00000 	.word	0x7ff00000

000bda98 <__b2d>:
   bda98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   bda9a:	6905      	ldr	r5, [r0, #16]
   bda9c:	f100 0714 	add.w	r7, r0, #20
   bdaa0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   bdaa4:	1f2e      	subs	r6, r5, #4
   bdaa6:	f855 4c04 	ldr.w	r4, [r5, #-4]
   bdaaa:	4620      	mov	r0, r4
   bdaac:	f7ff fd48 	bl	bd540 <__hi0bits>
   bdab0:	f1c0 0320 	rsb	r3, r0, #32
   bdab4:	280a      	cmp	r0, #10
   bdab6:	f8df c07c 	ldr.w	ip, [pc, #124]	; bdb34 <__b2d+0x9c>
   bdaba:	600b      	str	r3, [r1, #0]
   bdabc:	dc14      	bgt.n	bdae8 <__b2d+0x50>
   bdabe:	f1c0 0e0b 	rsb	lr, r0, #11
   bdac2:	fa24 f10e 	lsr.w	r1, r4, lr
   bdac6:	42b7      	cmp	r7, r6
   bdac8:	ea41 030c 	orr.w	r3, r1, ip
   bdacc:	bf34      	ite	cc
   bdace:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bdad2:	2100      	movcs	r1, #0
   bdad4:	3015      	adds	r0, #21
   bdad6:	fa04 f000 	lsl.w	r0, r4, r0
   bdada:	fa21 f10e 	lsr.w	r1, r1, lr
   bdade:	ea40 0201 	orr.w	r2, r0, r1
   bdae2:	ec43 2b10 	vmov	d0, r2, r3
   bdae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   bdae8:	42b7      	cmp	r7, r6
   bdaea:	bf3a      	itte	cc
   bdaec:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   bdaf0:	f1a5 0608 	subcc.w	r6, r5, #8
   bdaf4:	2100      	movcs	r1, #0
   bdaf6:	380b      	subs	r0, #11
   bdaf8:	d017      	beq.n	bdb2a <__b2d+0x92>
   bdafa:	f1c0 0c20 	rsb	ip, r0, #32
   bdafe:	fa04 f500 	lsl.w	r5, r4, r0
   bdb02:	42be      	cmp	r6, r7
   bdb04:	fa21 f40c 	lsr.w	r4, r1, ip
   bdb08:	ea45 0504 	orr.w	r5, r5, r4
   bdb0c:	bf8c      	ite	hi
   bdb0e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   bdb12:	2400      	movls	r4, #0
   bdb14:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   bdb18:	fa01 f000 	lsl.w	r0, r1, r0
   bdb1c:	fa24 f40c 	lsr.w	r4, r4, ip
   bdb20:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   bdb24:	ea40 0204 	orr.w	r2, r0, r4
   bdb28:	e7db      	b.n	bdae2 <__b2d+0x4a>
   bdb2a:	ea44 030c 	orr.w	r3, r4, ip
   bdb2e:	460a      	mov	r2, r1
   bdb30:	e7d7      	b.n	bdae2 <__b2d+0x4a>
   bdb32:	bf00      	nop
   bdb34:	3ff00000 	.word	0x3ff00000

000bdb38 <__d2b>:
   bdb38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   bdb3c:	4689      	mov	r9, r1
   bdb3e:	2101      	movs	r1, #1
   bdb40:	ec57 6b10 	vmov	r6, r7, d0
   bdb44:	4690      	mov	r8, r2
   bdb46:	f7ff fc09 	bl	bd35c <_Balloc>
   bdb4a:	4604      	mov	r4, r0
   bdb4c:	b930      	cbnz	r0, bdb5c <__d2b+0x24>
   bdb4e:	4602      	mov	r2, r0
   bdb50:	4b25      	ldr	r3, [pc, #148]	; (bdbe8 <__d2b+0xb0>)
   bdb52:	4826      	ldr	r0, [pc, #152]	; (bdbec <__d2b+0xb4>)
   bdb54:	f240 310a 	movw	r1, #778	; 0x30a
   bdb58:	f7f9 fcac 	bl	b74b4 <__assert_func>
   bdb5c:	f3c7 550a 	ubfx	r5, r7, #20, #11
   bdb60:	f3c7 0313 	ubfx	r3, r7, #0, #20
   bdb64:	bb35      	cbnz	r5, bdbb4 <__d2b+0x7c>
   bdb66:	2e00      	cmp	r6, #0
   bdb68:	9301      	str	r3, [sp, #4]
   bdb6a:	d028      	beq.n	bdbbe <__d2b+0x86>
   bdb6c:	4668      	mov	r0, sp
   bdb6e:	9600      	str	r6, [sp, #0]
   bdb70:	f7ff fd06 	bl	bd580 <__lo0bits>
   bdb74:	9900      	ldr	r1, [sp, #0]
   bdb76:	b300      	cbz	r0, bdbba <__d2b+0x82>
   bdb78:	9a01      	ldr	r2, [sp, #4]
   bdb7a:	f1c0 0320 	rsb	r3, r0, #32
   bdb7e:	fa02 f303 	lsl.w	r3, r2, r3
   bdb82:	430b      	orrs	r3, r1
   bdb84:	40c2      	lsrs	r2, r0
   bdb86:	6163      	str	r3, [r4, #20]
   bdb88:	9201      	str	r2, [sp, #4]
   bdb8a:	9b01      	ldr	r3, [sp, #4]
   bdb8c:	61a3      	str	r3, [r4, #24]
   bdb8e:	2b00      	cmp	r3, #0
   bdb90:	bf14      	ite	ne
   bdb92:	2202      	movne	r2, #2
   bdb94:	2201      	moveq	r2, #1
   bdb96:	6122      	str	r2, [r4, #16]
   bdb98:	b1d5      	cbz	r5, bdbd0 <__d2b+0x98>
   bdb9a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   bdb9e:	4405      	add	r5, r0
   bdba0:	f8c9 5000 	str.w	r5, [r9]
   bdba4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   bdba8:	f8c8 0000 	str.w	r0, [r8]
   bdbac:	4620      	mov	r0, r4
   bdbae:	b003      	add	sp, #12
   bdbb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   bdbb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   bdbb8:	e7d5      	b.n	bdb66 <__d2b+0x2e>
   bdbba:	6161      	str	r1, [r4, #20]
   bdbbc:	e7e5      	b.n	bdb8a <__d2b+0x52>
   bdbbe:	a801      	add	r0, sp, #4
   bdbc0:	f7ff fcde 	bl	bd580 <__lo0bits>
   bdbc4:	9b01      	ldr	r3, [sp, #4]
   bdbc6:	6163      	str	r3, [r4, #20]
   bdbc8:	2201      	movs	r2, #1
   bdbca:	6122      	str	r2, [r4, #16]
   bdbcc:	3020      	adds	r0, #32
   bdbce:	e7e3      	b.n	bdb98 <__d2b+0x60>
   bdbd0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   bdbd4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   bdbd8:	f8c9 0000 	str.w	r0, [r9]
   bdbdc:	6918      	ldr	r0, [r3, #16]
   bdbde:	f7ff fcaf 	bl	bd540 <__hi0bits>
   bdbe2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   bdbe6:	e7df      	b.n	bdba8 <__d2b+0x70>
   bdbe8:	000bea61 	.word	0x000bea61
   bdbec:	000beae8 	.word	0x000beae8

000bdbf0 <__ratio>:
   bdbf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   bdbf4:	4688      	mov	r8, r1
   bdbf6:	4669      	mov	r1, sp
   bdbf8:	4681      	mov	r9, r0
   bdbfa:	f7ff ff4d 	bl	bda98 <__b2d>
   bdbfe:	a901      	add	r1, sp, #4
   bdc00:	4640      	mov	r0, r8
   bdc02:	ec55 4b10 	vmov	r4, r5, d0
   bdc06:	f7ff ff47 	bl	bda98 <__b2d>
   bdc0a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   bdc0e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   bdc12:	eba3 0c02 	sub.w	ip, r3, r2
   bdc16:	e9dd 3200 	ldrd	r3, r2, [sp]
   bdc1a:	1a9b      	subs	r3, r3, r2
   bdc1c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   bdc20:	ec51 0b10 	vmov	r0, r1, d0
   bdc24:	2b00      	cmp	r3, #0
   bdc26:	bfd6      	itet	le
   bdc28:	460a      	movle	r2, r1
   bdc2a:	462a      	movgt	r2, r5
   bdc2c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   bdc30:	468b      	mov	fp, r1
   bdc32:	462f      	mov	r7, r5
   bdc34:	bfd4      	ite	le
   bdc36:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   bdc3a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   bdc3e:	4620      	mov	r0, r4
   bdc40:	ee10 2a10 	vmov	r2, s0
   bdc44:	465b      	mov	r3, fp
   bdc46:	4639      	mov	r1, r7
   bdc48:	f7fd fdf0 	bl	bb82c <__aeabi_ddiv>
   bdc4c:	ec41 0b10 	vmov	d0, r0, r1
   bdc50:	b003      	add	sp, #12
   bdc52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000bdc56 <__copybits>:
   bdc56:	3901      	subs	r1, #1
   bdc58:	b570      	push	{r4, r5, r6, lr}
   bdc5a:	1149      	asrs	r1, r1, #5
   bdc5c:	6914      	ldr	r4, [r2, #16]
   bdc5e:	3101      	adds	r1, #1
   bdc60:	f102 0314 	add.w	r3, r2, #20
   bdc64:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   bdc68:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   bdc6c:	1f05      	subs	r5, r0, #4
   bdc6e:	42a3      	cmp	r3, r4
   bdc70:	d30c      	bcc.n	bdc8c <__copybits+0x36>
   bdc72:	1aa3      	subs	r3, r4, r2
   bdc74:	3b11      	subs	r3, #17
   bdc76:	f023 0303 	bic.w	r3, r3, #3
   bdc7a:	3211      	adds	r2, #17
   bdc7c:	42a2      	cmp	r2, r4
   bdc7e:	bf88      	it	hi
   bdc80:	2300      	movhi	r3, #0
   bdc82:	4418      	add	r0, r3
   bdc84:	2300      	movs	r3, #0
   bdc86:	4288      	cmp	r0, r1
   bdc88:	d305      	bcc.n	bdc96 <__copybits+0x40>
   bdc8a:	bd70      	pop	{r4, r5, r6, pc}
   bdc8c:	f853 6b04 	ldr.w	r6, [r3], #4
   bdc90:	f845 6f04 	str.w	r6, [r5, #4]!
   bdc94:	e7eb      	b.n	bdc6e <__copybits+0x18>
   bdc96:	f840 3b04 	str.w	r3, [r0], #4
   bdc9a:	e7f4      	b.n	bdc86 <__copybits+0x30>

000bdc9c <__any_on>:
   bdc9c:	f100 0214 	add.w	r2, r0, #20
   bdca0:	6900      	ldr	r0, [r0, #16]
   bdca2:	114b      	asrs	r3, r1, #5
   bdca4:	4298      	cmp	r0, r3
   bdca6:	b510      	push	{r4, lr}
   bdca8:	db11      	blt.n	bdcce <__any_on+0x32>
   bdcaa:	dd0a      	ble.n	bdcc2 <__any_on+0x26>
   bdcac:	f011 011f 	ands.w	r1, r1, #31
   bdcb0:	d007      	beq.n	bdcc2 <__any_on+0x26>
   bdcb2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   bdcb6:	fa24 f001 	lsr.w	r0, r4, r1
   bdcba:	fa00 f101 	lsl.w	r1, r0, r1
   bdcbe:	428c      	cmp	r4, r1
   bdcc0:	d10b      	bne.n	bdcda <__any_on+0x3e>
   bdcc2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   bdcc6:	4293      	cmp	r3, r2
   bdcc8:	d803      	bhi.n	bdcd2 <__any_on+0x36>
   bdcca:	2000      	movs	r0, #0
   bdccc:	bd10      	pop	{r4, pc}
   bdcce:	4603      	mov	r3, r0
   bdcd0:	e7f7      	b.n	bdcc2 <__any_on+0x26>
   bdcd2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   bdcd6:	2900      	cmp	r1, #0
   bdcd8:	d0f5      	beq.n	bdcc6 <__any_on+0x2a>
   bdcda:	2001      	movs	r0, #1
   bdcdc:	e7f6      	b.n	bdccc <__any_on+0x30>

000bdcde <_calloc_r>:
   bdcde:	b513      	push	{r0, r1, r4, lr}
   bdce0:	434a      	muls	r2, r1
   bdce2:	4611      	mov	r1, r2
   bdce4:	9201      	str	r2, [sp, #4]
   bdce6:	f7f9 fbd5 	bl	b7494 <_malloc_r>
   bdcea:	4604      	mov	r4, r0
   bdcec:	b118      	cbz	r0, bdcf6 <_calloc_r+0x18>
   bdcee:	9a01      	ldr	r2, [sp, #4]
   bdcf0:	2100      	movs	r1, #0
   bdcf2:	f7fd ffde 	bl	bbcb2 <memset>
   bdcf6:	4620      	mov	r0, r4
   bdcf8:	b002      	add	sp, #8
   bdcfa:	bd10      	pop	{r4, pc}
   bdcfc:	0000      	movs	r0, r0
	...

000bdd00 <nan>:
   bdd00:	ed9f 0b01 	vldr	d0, [pc, #4]	; bdd08 <nan+0x8>
   bdd04:	4770      	bx	lr
   bdd06:	bf00      	nop
   bdd08:	00000000 	.word	0x00000000
   bdd0c:	7ff80000 	.word	0x7ff80000

000bdd10 <__ascii_wctomb>:
   bdd10:	b149      	cbz	r1, bdd26 <__ascii_wctomb+0x16>
   bdd12:	2aff      	cmp	r2, #255	; 0xff
   bdd14:	bf85      	ittet	hi
   bdd16:	238a      	movhi	r3, #138	; 0x8a
   bdd18:	6003      	strhi	r3, [r0, #0]
   bdd1a:	700a      	strbls	r2, [r1, #0]
   bdd1c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   bdd20:	bf98      	it	ls
   bdd22:	2001      	movls	r0, #1
   bdd24:	4770      	bx	lr
   bdd26:	4608      	mov	r0, r1
   bdd28:	4770      	bx	lr
	...

000bdd2c <__aeabi_d2lz>:
   bdd2c:	b538      	push	{r3, r4, r5, lr}
   bdd2e:	2200      	movs	r2, #0
   bdd30:	2300      	movs	r3, #0
   bdd32:	4604      	mov	r4, r0
   bdd34:	460d      	mov	r5, r1
   bdd36:	f7fd fec1 	bl	bbabc <__aeabi_dcmplt>
   bdd3a:	b928      	cbnz	r0, bdd48 <__aeabi_d2lz+0x1c>
   bdd3c:	4620      	mov	r0, r4
   bdd3e:	4629      	mov	r1, r5
   bdd40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   bdd44:	f7fd bf52 	b.w	bbbec <__aeabi_d2ulz>
   bdd48:	4620      	mov	r0, r4
   bdd4a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   bdd4e:	f7fd ff4d 	bl	bbbec <__aeabi_d2ulz>
   bdd52:	4240      	negs	r0, r0
   bdd54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   bdd58:	bd38      	pop	{r3, r4, r5, pc}
   bdd5a:	bf00      	nop

000bdd5c <dynalib_user>:
   bdd5c:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   bdd6c:	0000 0000 6564 6166 6c75 2074 4d00 4253     ....default .MSB
   bdd7c:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   bdd8c:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   bdd9c:	7465 6974 676e 2073 7325 7525 2520 2073     ettings %s%u %s 
   bddac:	4f4d 4544 7525 003e 6966 656c 616e 656d     MODE%u>.filename
   bddbc:	4600 6c69 2065 2527 2773 6120 726c 6165     .File '%s' alrea
   bddcc:	7964 6520 6978 7473 2c73 6420 6c65 7465     dy exists, delet
   bdddc:	6e69 2067 6e61 2064 766f 7265 7277 7469     ing and overwrit
   bddec:	6e69 0067 7453 7261 6974 676e 6f20 6666     ing.Starting off
   bddfc:	6f6c 6461 6f20 2066 6966 656c 203a 7325     load of file: %s
   bde0c:	6600 6c69 6365 6d6f 0070 6552 6361 6568     .filecomp.Reache
   bde1c:	2064 6e65 2064 666f 6620 6c69 3a65 2520     d end of file: %
   bde2c:	0073 6966 656c 6f64 656e 5200 6365 6965     s.filedone.Recei
   bde3c:	6576 2064 6f64 656e 6320 6d6f 616d 646e     ved done command
   bde4c:	2500 2573 3230 0078 6f42 3174 6164 0074     .%s%02x.Bot1dat.
   bde5c:	4343 2542 6864 6177 7600 6365 6f74 3a72     CCB%dhwa.vector:
   bde6c:	5f3a 5f4d 6572 6c61 6f6c 5f63 6e69 6573     :_M_realloc_inse
   bde7c:	7472 4300 6568 6b63 7573 3a6d 2520 3230     rt.Checksum: %02
   bde8c:	2c78 2520 3330 0064 7453 6972 676e 4c20     x, %03d.String L
   bde9c:	6e65 203a 6425 202c 6843 6365 736b 6d75     en: %d, Checksum
   bdeac:	203a 6425 5b00 4157 4e52 205d 654d 7373     : %d.[WARN] Mess
   bdebc:	6761 2065 6843 6365 736b 6d75 4420 656f     age Checksum Doe
   bdecc:	2073 6f4e 2074 614d 6374 2168 203a 7325     s Not Match!: %s
   bdedc:	5700 7261 696e 676e 202c 6863 6365 736b     .Warning, checks
   bdeec:	6d75 6420 656f 2073 6f6e 2074 616d 6374     um does not matc
   bdefc:	0068 4343 3225 6e73 6b61 3325 0073 6361     h.CC%2snak%3s.ac
   bdf0c:	006b 7573 0070 7525 2520 2075 7325 2520     k.sup.%u %u %s %
   bdf1c:	0073 7453 7461 7375 5520 6470 7461 2165     s.Status Update!
   bdf2c:	2300 2323 2323 2323 2323 2323 2323 2323     .###############
   bdf3c:	2323 2323 2323 2323 2323 0023 2323 2020     ###########.##  
   bdf4c:	2020 5320 4154 5554 2053 5055 4144 4554        STATUS UPDATE
   bdf5c:	2020 2020 2323 2300 2023 2020 2020 2020         ##.##       
   bdf6c:	6f42 2074 3a23 2520 6431 2020 2020 2020     Bot #: %1d      
   bdf7c:	2323 2300 2023 2020 2020 4220 7461 2074     ##.##      Batt 
   bdf8c:	3a25 2520 3330 2064 2020 2020 2323 2300     %: %03d     ##.#
   bdf9c:	2023 2020 4c20 4554 2020 4c42 2045 5820     #    LTE  BLE  X
   bdfac:	6542 2065 2020 2320 0023 2323 2020 2020     Bee    ##.##    
   bdfbc:	2520 2064 2020 2520 2064 2020 2020 6425      %d    %d     %d
   bdfcc:	2020 2020 2320 0023 2323 2020 614c 6974          ##.##  Lati
   bdfdc:	7574 6564 4c20 6e6f 6967 7574 6564 2020     tude Longitude  
   bdfec:	2323 2300 2023 2e25 6636 2520 362e 2066     ##.## %.6f %.6f 
   bdffc:	2323 4600 756f 646e 6120 6e20 7765 7720     ##.Found a new w
   be00c:	7461 7265 6220 746f 4920 0044 7525 2520     ater bot ID.%u %
   be01c:	2075 6625 2520 0066 616e 006b 7470 0073     u %f %f.nak.pts.
   be02c:	6152 5777 6972 6574 742e 7478 4c00 4554     RawWrite.txt.LTE
   be03c:	5800 6542 0065 6c42 6575 6f74 746f 0068     .XBee.Bluetooth.
   be04c:	654e 2077 7473 6972 676e 6620 6f72 206d     New string from 
   be05c:	7325 203a 5b00 4e49 4f46 205d 6552 6563     %s: .[INFO] Rece
   be06c:	7669 6465 4c20 4554 4d20 7365 6173 6567     ived LTE Message
   be07c:	203a 7325 4e00 7765 4220 2054 6f43 6d6d     : %s.New BT Comm
   be08c:	6e61 3a64 0020 495b 464e 5d4f 5220 6365     and: .[INFO] Rec
   be09c:	6965 6576 2064 4c42 2045 654d 7373 6761     eived BLE Messag
   be0ac:	3a65 2520 0073 654e 2077 4258 6565 4320     e: %s.New XBee C
   be0bc:	6d6f 616d 646e 003a 495b 464e 5d4f 5220     ommand:.[INFO] R
   be0cc:	6365 6965 6576 2064 4258 6565 4d20 7365     eceived XBee Mes
   be0dc:	6173 6567 203a 7325 4300 6e6f 656e 7463     sage: %s.Connect
   be0ec:	6465 7420 206f 6f42 2074 6425 4300 4143     ed to Bot %d.CCA
   be0fc:	6842 6477 2500 3230 2564 3230 2564 3430     Bhwd.%02d%02d%04
   be10c:	2564 3230 2564 3230 2564 3230 0064 6157     d%02d%02d%02d.Wa
   be11c:	6574 4272 746f 5f00 4f4c 2e47 7874 0074     terBot._LOG.txt.
   be12c:	7245 6f72 3a72 6320 756f 646c 6e20 746f     Error: could not
   be13c:	6320 6e6f 656e 7463 7420 206f 4453 6320      connect to SD c
   be14c:	7261 2164 2f00 4500 7272 726f 202c 6f63     ard!./.Error, co
   be15c:	6c75 2064 6f6e 2074 706f 6e65 7220 6f6f     uld not open roo
   be16c:	2074 6964 6572 7463 726f 2079 6e6f 5320     t directory on S
   be17c:	2044 6143 6472 202e 7349 6920 2074 6e69     D Card. Is it in
   be18c:	6573 7472 6465 003f 4343 2542 6464 706d     serted?.CCB%ddmp
   be19c:	5200 7165 6575 7473 6465 5320 2044 6143     .Requested SD Ca
   be1ac:	6472 4420 7461 2061 7266 6d6f 4220 746f     rd Data from Bot
   be1bc:	2520 2064 764f 7265 4220 454c 000a 7543      %d Over BLE..Cu
   be1cc:	7272 6e65 6c74 2079 6f63 6e6e 6365 6574     rrently connecte
   be1dc:	2064 6f74 4220 746f 2520 2c66 6e20 6565     d to Bot %f, nee
   be1ec:	2064 6f74 6320 6e6f 656e 7463 7420 206f     d to connect to 
   be1fc:	6f42 2074 6425 5300 6375 6563 7373 7566     Bot %d.Successfu
   be20c:	6c6c 2079 6f63 6e6e 6365 6574 2064 6f74     lly connected to
   be21c:	4220 746f 2520 0064 7453 7261 6974 676e      Bot %d.Starting
   be22c:	6620 6c69 2065 7274 6e61 6673 7265 6620      file transfer f
   be23c:	6f72 206d 6f42 2074 6425 4600 6e69 7369     rom Bot %d.Finis
   be24c:	6568 2064 7274 6e61 6673 7265 6972 676e     hed transferring
   be25c:	6620 6c69 2065 7266 6d6f 4220 746f 2520      file from Bot %
   be26c:	0064 4343 4241 7073 4263 6425 4300 4143     d.CCABspcB%d.CCA
   be27c:	7342 6370 424e 4300 4243 6d31 7274 3025     BspcNB.CCB1mtr%0
   be28c:	6433 3025 6433 6200 3234 3630 3139 2d30     3d%03d.b4206910-
   be29c:	6364 6234 352d 3437 2d33 3863 3162 392d     dc4b-5743-c8b1-9
   be2ac:	6432 6530 3537 3831 6232 0030 3462 3032     2d0e75182b0.b420
   be2bc:	3936 3231 642d 3463 2d62 3735 3334 632d     6912-dc4b-5743-c
   be2cc:	6238 2d31 3239 3064 3765 3135 3238 3062     8b1-92d0e75182b0
   be2dc:	6200 3234 3630 3139 2d33 6364 6234 352d     .b4206913-dc4b-5
   be2ec:	3437 2d33 3863 3162 392d 6432 6530 3537     743-c8b1-92d0e75
   be2fc:	3831 6232 0030 3462 3032 3936 3431 642d     182b0.b4206914-d
   be30c:	3463 2d62 3735 3334 632d 6238 2d31 3239     c4b-5743-c8b1-92
   be31c:	3064 3765 3135 3238 3062 0000               d0e75182b0..

000be328 <_ZTVN8particle11SPISettingsE>:
	...
   be330:	4219 000b 40b3 000b 40df 000b               .B...@...@..

000be33c <_ZTV5Timer>:
	...
   be344:	429d 000b 42e1 000b 4145 000b               .B...B..EA..

000be350 <_ZTV4File>:
	...
   be358:	40dd 000b 40ed 000b 412d 000b 4127 000b     .@...@..-A..'A..
   be368:	40b5 000b 4107 000b 4101 000b 40fb 000b     .@...A...A...@..
   be378:	7341 6573 7472 6f69 466e 6961 756c 6572     AssertionFailure
   be388:	6620 6c61 6573 7700 7269 6e69 2e67 6c62      false.wiring.bl
   be398:	0065 7453 7261 2074 6964 6373 766f 7265     e.Start discover
   be3a8:	6e69 2067 6573 7672 6369 7365 002e 7341     ing services..As
   be3b8:	6573 7472 6f69 466e 6961 756c 6572 6820     sertionFailure h
   be3c8:	6c61 625f 656c 735f 6174 6b63 695f 696e     al_ble_stack_ini
   be3d8:	2874 756e 6c6c 7470 2972 3d20 203d 5953     t(nullptr) == SY
   be3e8:	5453 4d45 455f 5252 524f 4e5f 4e4f 0045     STEM_ERROR_NONE.
   be3f8:	6550 7265 6420 7665 6369 2065 7369 6d20     Peer device is m
   be408:	7369 6973 676e 0021 6146 6c69 6465 7420     issing!.Failed t
   be418:	206f 6c61 6f6c 6163 6574 6d20 6d65 726f     o allocate memor
   be428:	2179 4600 6961 656c 2064 6f74 6120 7070     y!.Failed to app
   be438:	6e65 2064 6570 7265 4320 6e65 7274 6c61     end peer Central
   be448:	6420 7665 6369 2e65 4300 6e6f 656e 7463      device..Connect
   be458:	6465 6220 2079 6543 746e 6172 206c 6564     ed by Central de
   be468:	6976 6563 002e 6944 6373 6e6f 656e 7463     vice..Disconnect
   be478:	6465 6220 2079 6572 6f6d 6574 6420 7665     ed by remote dev
   be488:	6369 2e65 4600 6961 656c 2064 6f74 6120     ice..Failed to a
   be498:	7070 6e65 2064 6964 6373 766f 7265 6465     ppend discovered
   be4a8:	7320 7265 6976 6563 002e 7453 7261 2074      service..Start 
   be4b8:	6964 6373 766f 7265 6e69 2067 6863 7261     discovering char
   be4c8:	6361 6574 6972 7473 6369 2073 666f 7320     acteristics of s
   be4d8:	7265 6976 6563 203a 7325 002e 6143 6e6e     ervice: %s..Cann
   be4e8:	746f 6120 6464 6e20 7765 7020 6565 2072     ot add new peer 
   be4f8:	6564 6976 6563 002e 654e 2077 6570 6972     device..New peri
   be508:	6870 7265 6c61 6920 2073 6f63 6e6e 6365     pheral is connec
   be518:	6574 2e64 4300 6168 6172 7463 7265 7369     ted..Characteris
   be528:	6974 2063 6964 6373 766f 7265 6465 002e     tic discovered..
   be538:	6944 6373 766f 7265 6465 6320 6168 6172     Discovered chara
   be548:	7463 7265 7369 6974 2763 2073 6168 646e     cteristic's hand
   be558:	656c 6920 2073 6e69 6176 696c 2e64 4600     le is invalid..F
   be568:	6961 656c 2064 6f74 6120 7070 6e65 2064     ailed to append 
   be578:	6964 6373 766f 7265 6465 6320 6168 6172     discovered chara
   be588:	7463 7265 7369 6974 2e63 0000               cteristic...

000be594 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   be59c:	7519 000b 757d 000b 76f3 000b 75a7 000b     .u..}u...v...u..
   be5ac:	751d 000b                                   .u..

000be5b0 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   be5b8:	7515 000b 758b 000b 7517 000b 75ad 000b     .u...u...u...u..
   be5c8:	753d 000b                                   =u..

000be5cc <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   be5d4:	7513 000b 7599 000b 8211 000b 75b3 000b     .u...u.......u..
   be5e4:	755d 000b                                   ]u..

000be5e8 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   be5f4:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
   be604:	0000 0000                                   ....

000be608 <_ZTVN5spark13CellularClassE>:
	...
   be610:	9bb3 000b 9ba9 000b 9b9f 000b 9b55 000b     ............U...
   be620:	9b93 000b 9b87 000b a355 000b a35d 000b     ........U...]...
   be630:	9b7b 000b 9b73 000b 9b69 000b 9b5f 000b     {...s...i..._...
   be640:	a38d 000b                                   ....

000be644 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   be64c:	9bed 000b 9bf3 000b 9c31 000b 9c01 000b     ........1.......
   be65c:	9bef 000b                                   ....

000be660 <_ZTVN5spark13EthernetClassE>:
	...
   be668:	a17b 000b a171 000b a167 000b a15d 000b     {...q...g...]...
   be678:	a151 000b a145 000b a355 000b a35d 000b     Q...E...U...]...
   be688:	a139 000b a131 000b a127 000b a11d 000b     9...1...'.......
   be698:	a38d 000b                                   ....

000be69c <_ZTV7TwoWire>:
	...
   be6a4:	a199 000b a1e3 000b a1bb 000b a19b 000b     ................
   be6b4:	a1c3 000b a1cb 000b a1d3 000b a1db 000b     ................

000be6c4 <_ZTV9IPAddress>:
	...
   be6cc:	a225 000b a215 000b a217 000b 7061 0070     %...........app.

000be6dc <_ZTVN5spark12NetworkClassE>:
	...
   be6e4:	a315 000b a31f 000b a329 000b a333 000b     ........)...3...
   be6f4:	a33d 000b a349 000b a355 000b a35d 000b     =...I...U...]...
   be704:	a365 000b a371 000b a379 000b a383 000b     e...q...y.......
   be714:	a38d 000b                                   ....

000be718 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   be718:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   be728:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   be738:	6d69 0065                                   ime.

000be73c <_ZTV11USARTSerial>:
	...
   be744:	ab2d 000b ab99 000b ab71 000b a479 000b     -.......q...y...
   be754:	ab41 000b ab5d 000b ab4f 000b ab6b 000b     A...]...O...k...
   be764:	ab2f 000b ab33 000b                         /...3...

000be76c <_ZTV9USBSerial>:
	...
   be774:	abd7 000b ac3f 000b ac15 000b a479 000b     ....?.......y...
   be784:	ac07 000b abd9 000b abe9 000b ac39 000b     ............9...
   be794:	abf9 000b abd1 000b                         ........

000be79c <_ZSt7nothrow>:
	...

000be79d <_ZTSSt19_Sp_make_shared_tag>:
   be79d:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   be7ad:	6572 5f64 6174 0067 0000                     red_tag....

000be7b8 <_ZTISt19_Sp_make_shared_tag>:
   be7b8:	e7f8 000b e79d 000b                         ........

000be7c0 <_ZTIN10__cxxabiv117__class_type_infoE>:
   be7c0:	e858 000b e7cc 000b e87c 000b               X.......|...

000be7cc <_ZTSN10__cxxabiv117__class_type_infoE>:
   be7cc:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   be7dc:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   be7ec:	0045 0000                                   E...

000be7f0 <_ZTVN10__cxxabiv117__class_type_infoE>:
   be7f0:	0000 0000 e7c0 000b b089 000b b09d 000b     ................
   be800:	b231 000b b231 000b b107 000b b049 000b     1...1.......I...
   be810:	b0ef 000b b0b1 000b b07b 000b               ........{...

000be81c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   be81c:	e858 000b e828 000b e7c0 000b               X...(.......

000be828 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   be828:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   be838:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   be848:	666e 456f 0000 0000                         nfoE....

000be850 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   be850:	0000 0000 e81c 000b b131 000b b145 000b     ........1...E...
   be860:	b231 000b b231 000b b107 000b b049 000b     1...1.......I...
   be870:	b205 000b b191 000b b159 000b               ........Y...

000be87c <_ZTISt9type_info>:
   be87c:	e7f8 000b e884 000b                         ........

000be884 <_ZTSSt9type_info>:
   be884:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   be894:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   be8a4:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   be8b4:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   be8c4:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   be8d4:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   be8e4:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   be8f4:	6474 696c 2f62 6172 646e 632e 6e00 0066     tdlib/rand.c.nf.
   be904:	6e69 7469 0079 6e61 0000 0000               inity.an....

000be910 <fpi.1>:
   be910:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   be920:	0000 0000                                   ....

000be924 <fpinan.0>:
   be924:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   be934:	0000 0000                                   ....

000be938 <tinytens>:
   be938:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   be948:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   be958:	6f43 64ac 0628 1168                         Co.d(.h.

000be960 <_ctype_>:
   be960:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   be970:	2020 2020 2020 2020 2020 2020 2020 2020                     
   be980:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   be990:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   be9a0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   be9b0:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   be9c0:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   be9d0:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   be9e0:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   bea60:	4200 6c61 6f6c 2063 7573 6363 6565 6564     .Balloc succeede
   bea70:	0064 742f 706d 6a2f 6e65 696b 736e 472d     d./tmp/jenkins-G
   bea80:	4343 312d 2d30 6970 6570 696c 656e 342d     CC-10-pipeline-4
   bea90:	5f38 3032 3032 3131 3432 315f 3036 3136     8_20201124_16061
   beaa0:	3038 3336 2f39 7273 2f63 656e 6c77 6269     80639/src/newlib
   beab0:	6e2f 7765 696c 2f62 696c 6362 732f 6474     /newlib/libc/std
   beac0:	696c 2f62 6467 6f74 2d61 6567 6874 7865     lib/gdtoa-gethex
   bead0:	632e 0000                                   .c..

000bead4 <_C_numeric_locale>:
   bead4:	e591 000b e1c9 000b db84 2003 0043 4f50     ........... C.PO
   beae4:	4953 0058 742f 706d 6a2f 6e65 696b 736e     SIX./tmp/jenkins
   beaf4:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   beb04:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   beb14:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   beb24:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   beb34:	6474 696c 2f62 706d 6572 2e63 0063 0000     tdlib/mprec.c...
   beb44:	0000 0000                                   ....

000beb48 <__mprec_bigtens>:
   beb48:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   beb58:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   beb68:	bf3c 7f73 4fdd 7515                         <.s..O.u

000beb70 <__mprec_tens>:
   beb70:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   beb80:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   beb90:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   beba0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   bebb0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   bebc0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   bebd0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   bebe0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   bebf0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   bec00:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   bec10:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   bec20:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   bec30:	9db4 79d9 7843 44ea                         ...yCx.D

000bec38 <p05.0>:
   bec38:	0005 0000 0019 0000 007d 0000               ........}...

000bec44 <link_const_variable_data_end>:
   bec44:	000b54c5 	.word	0x000b54c5
   bec48:	000b9b45 	.word	0x000b9b45
   bec4c:	000b9bbd 	.word	0x000b9bbd
   bec50:	000ba185 	.word	0x000ba185
   bec54:	000ba305 	.word	0x000ba305
   bec58:	000ba465 	.word	0x000ba465
   bec5c:	000ba57d 	.word	0x000ba57d
   bec60:	000ba975 	.word	0x000ba975
   bec64:	000bab19 	.word	0x000bab19

000bec68 <link_constructors_end>:
	...
